{
  "hash": "7ed9d6ee8f73b5f6bee0d9ae4ade15c0",
  "result": {
    "markdown": "---\ntitle: \"Connecting reactivity between modules\"\nsubtitle: \"Using `gargoyle` to manage reactivity\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-06-18\"\ncategories: [shiny, testing]\n# image: \"image.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n\ndraft: true\n\ncode-fold: show\ncode-summary: view code\n\nfig-align: center\n\nfontsize: '10.5'\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n\n:::: {.callout-important collapse='false'}\n\n## ALERT!\n\n::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\n\nThis post is currently under development. Thank you for your patience.\n\n::: \n\n::::\n\n\n# `gargoyle`\n\nI have a couple options here; I could rebuild/combine `mod_cols` and `mod_plot` and hope this resolves the error, or I could use the [`gargoyle` package](https://github.com/ColinFay/gargoyle) by the geniuses over at [`ThinkR`](https://rtask.thinkr.fr/shiny-applications-design-and-deployment/):\n\n> *{`shiny`}’s default reactive behavior is very helpful when it comes to building small applications. Because, you know, the good thing about reactivity is that when something moves somewhere, it’s updated everywhere. But the bad thing about reactivity is that when something moves somewhere, it’s updated everywhere.*\n\n`gargoyle` comes from the same authors of [`golem`](https://thinkr-open.github.io/golem/), and it supports \"*Event-Based Structures for 'Shiny'*\". It's elegant and simple (remember these three functions): `init()`, `trigger()`, and `watch()`.\n\nThe [example in the documentation](https://github.com/ColinFay/gargoyle) gives an overview of how `gargoyle` works, but it's not in a package (and doesn't use modules). You can see a deployed version of `gargoyle` built as a package using modules [here.](https://mjfrigaard.shinyapps.io/gargap-demo/). \n\nI'll cover how `gargoyle` works using the demos in the `inst/dev` folder: \n\n## `init()`\n\nThis [function](https://github.com/ColinFay/gargoyle/blob/83234de417b9b0b39be9b8f1556e5df1968624b2/R/funs.R#L66)\n\n## `on()`\n\nThis [function](https://github.com/ColinFay/gargoyle/blob/83234de417b9b0b39be9b8f1556e5df1968624b2/R/funs.R#L124)\n\n## `trigger()`\n\nThis [function](https://github.com/ColinFay/gargoyle/blob/83234de417b9b0b39be9b8f1556e5df1968624b2/R/funs.R#L78)\n\n## `watch()`\n\nThis [function](https://github.com/ColinFay/gargoyle/blob/83234de417b9b0b39be9b8f1556e5df1968624b2/R/funs.R#L106)\n\n\n\n\n\n\n\n\n\n\n\n\n## testServer() + browser()\n\n::: {style='font-size: 1.10em; font-weight: bold;'}\n\n> *\"You can abuse `testServer()` to get in an interactive environment that does support reactivity: `testServer(myApp(), browser())`\"*\n\n:::\n\nThe quote above comes from the ['Testing' chapter of Mastering Shiny](https://mastering-shiny.org/scaling-testing.html). \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}