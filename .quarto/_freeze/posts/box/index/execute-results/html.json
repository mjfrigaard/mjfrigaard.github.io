{
  "hash": "f82f413e149ce4d22bcee7f0df934710",
  "result": {
    "markdown": "---\ntitle: \"Writing modular code with `box`\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-04-21\"\nimage: \"image.png\"\ncategories: [packages, code]\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n---\n\n\n\n\n<!--\nhttps://mjfrigaard.github.io/posts/vanilla-shiny/\n\nhttps://mjfrigaard.github.io/posts/my-pkg-app/\n\nhttps://mjfrigaard.github.io/posts/my-golem-app/\n\nhttps://mjfrigaard.github.io/posts/my-leprechaun-app/\n\nhttps://mjfrigaard.github.io/posts/my-rhino-app/\n-->\n\n\n\n\n\n## What is `box`?\n\n[`box`](https://klmr.me/box/index.html) provides a precise and concise method for using add-on packages and functions. `box` also doesn't require bundling your code into R packages to make it reusable. This post covers tackling some common workflow steps to demonstrate how `box` modules work.\n\n## Packages, functions, and namespaces\n\nTo understand the problem `box` solves, we'll review the typical process for using add-on package functions in a standard R sesson and when developing R packages:\n\n### R sessions\n\n1. Assume I want to use the `glue()` function from the `glue` package. The first step is to install it with `install.packages(\"glue\")`\n\n    -   I'll use the example from the [`glue` package website](https://glue.tidyverse.org/): \n  \n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        install.packages(\"glue\")\n        ## \n        ## The downloaded binary packages are in\n        ## \t/var/folders/0x/x5wkbhmx0k74tncn9swz7xpr0000gn/T//RtmpFOcxyI/downloaded_packages\n        ```\n        :::\n\n        :::\n  \n\n2. To use the functions from `glue`, I'll need to run `library(glue)` in the same R session.\n        \n    -   If I try to use a function from a package but it hasn't been attached with `library` or `require`, I see the following:\n        \n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        name <- \"Fred\"\n        glue('My name is {name}.')\n        ## Error in glue(\"My name is {name}.\"): could not find function \"glue\"\n        ```\n        :::\n\n        :::\n    \n    -   The error above can be confusing, because it doesn't tell us if the package hasn't been *installed*, or if the package hasn't been *attached*.\n        \n    -   However, after installing `glue`, I can get around using `library` by explicitly calling the function from the package namespace (i.e., `pkg::foo()`):\n    \n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        name <- \"Fred\"\n        glue::glue('My name is {name}.')\n        ## My name is Fred.\n        ```\n        :::\n\n        :::\n    \n    -   While this method works, it doesn't attach the package to the search list (which I check with `search()`)\n    \n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        base::search()\n        ## [1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n        ## [4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n        ## [7] \"package:methods\"   \"Autoloads\"         \"package:base\"\n        ```\n        :::\n\n        :::\n    \n    -   `library()` attaches the `glue` package in the search list and makes the glue() function available to use (without the `package::` prefix)\n    \n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        library(glue)\n        base::search()\n        ##  [1] \".GlobalEnv\"        \"package:glue\"      \"package:stats\"    \n        ##  [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n        ##  [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n        ## [10] \"package:base\"\n        ```\n        :::\n\n        :::\n        \n    -   Unfortunately, `library()` also attaches **all** the objects from the `glue` package to the `search()` list, even though I'm only using a single function. \n    \nRead more about namespaces in [Advanced R](https://adv-r.hadley.nz/environments.html#namespaces) and [R packages](https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace-motivation).\n        \n### R packages \n\nIf I want to make the code I write using `glue` reusable, I can bundle it into an R package. Including `glue` as an add-on package (i.e., packages not loaded automatically with R) is done with the `NAMESPACE` file (created and edited via `roxygen2` tags), and by listing these packages under `Imports` in the `DESCRIPTION` file. \n\n#### In `R/` files: \n\nAll `.R` files in R packages are placed in the `R/` folder. If these files use add-on packages (i.e., `library()` or `package::fun()`), I include the `@import` or `@importFrom` tag. If I'd like to include and make `my_name()` available to users, I use the `@export` tag:  \n\n-   I've converted the use of `glue()` into a small function below:\n\n    -   `my_name()` is saved as `R/my_name.R`:\n\n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        my_name <- function(x) {\n          name <- x\n          glue::glue('My name is {name}.')\n        }\n        my_name(\"Fred\")\n        ## My name is Fred.\n        ```\n        :::\n\n        :::\n        \n    -   Below is a default `roxygen2` skeleton: \n    \n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        #' Introduce yourself \n        #'\n        #' @param x a name \n        #'\n        #' @return An glued introduction to R\n        #' @export my_name\n        #'\n        #' @examples\n        #' my_name(\"Fred\")\n        my_name <- function(x) {\n          name <- x\n          glue::glue('My name is {name}.')\n        }\n        ```\n        :::\n\n        :::\n\n\nAs we can see, the default `roxygen2` skeleton doesn't include `@import` or `@importFrom`. The general advice is to prefer `@importFrom` over `@import`, because **`@import` imports the entire package namespace** (only use this in '*very special situations*' such as '*heavy use*' of a package functions). \n\n-   Below is an example of using `@importFrom`: \n    \n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #' Introduce yourself \n    #'\n    #' @param x a name \n    #'\n    #' @return An glued introduction to R\n    #' @export my_name\n    #'\n    #' @examples\n    #' my_name(\"Fred\")\n    #'\n    #' @importFrom glue glue\n    my_name <- function(x) {\n      name <- x\n      glue::glue('My name is {name}.')\n    }\n    ```\n    :::\n\n    :::\n\n#### NAMESPACE \n\nWhile developing my R package, I'll run `devtools::load_all()` and `devtools::document()` frequently, and each time the imported functions are available in the current session and the tags are converted into [**directives**](https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-NAMESPACE-file) in the `NAMESPACE` file\n\n```txt\nimport(package)\nimportFrom(package,function) \n```\n\n#### DESCRIPTION\n\nA package `DESCRIPTION` file is managed completely independent of it's  `NAMESPACE` file. This can be confusing during package development, because it's easy to assume some kind of connection between the `roxygen2` tags, the `NAMESPACE` file, and the `DESCRIPTION` file: \n\n-   However, this is not the case:\n\n    -   To include `glue` in the `DESCRIPTION` under `Imports`, I also need to use `usethis::use_package(\"glue\")`\n    \n    -   As noted in [R packages](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports), \"*The `Imports` field* [in the `DESCRIPTION` file] *makes sure that the packages listed there are installed when your package is installed.*\" The `DESCRIPTION` file does not make functions available to the package developer (or the user). \n    \nThe recommended practices for add-on packages are 1) use the namespace-qualified calls in the `R/` scripts (i.e., `package::function()` with an accompanying `@importFrom package function` tag), and 2) list these packages in the `DESCRIPTION` file under `Imports` or `Suggests` to make sure a package is installed whenever your package is installed (i.e., with `usethis::use_package(\"package\")`)\n\nThe table below shows the connection between `roxygen2` tags, the resulting `NAMESPACE` entry, and what should be listed in the `DESCRIPTION` (this is also covered in [R packages](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports-r-code))\n\n\n<br>\n\n::: {style=\"font-size: 0.70em;\"}\n\n\n\n:::: {.callout-note collapse='false'}\n\n## Refresher on `roxygen2`, `NAMESPACE` & `DESCRPTION`\n\n::: {style='font-size: 0.90em; color: #696969;'}\n\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> roxygen2 tag </th>\n   <th style=\"text-align:left;\"> NAMESPACE directive </th>\n   <th style=\"text-align:right;\"> DESCRIPTION </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> @importFrom </td>\n   <td style=\"text-align:left;\"> importFrom() : import selected object from another namespace </td>\n   <td style=\"text-align:right;\"> Consider listing under 'Suggests' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> @import </td>\n   <td style=\"text-align:left;\"> import(): import all objects from another packageâ€™s namespace </td>\n   <td style=\"text-align:right;\"> List under 'Imports' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> @export </td>\n   <td style=\"text-align:left;\"> export() : export the function, method, generic, or class so itâ€™s available outside of the package (in the namespace) </td>\n   <td style=\"text-align:right;\"> Nothing to list </td>\n  </tr>\n</tbody>\n</table>\n\n::: \n\n::::\n\n\n:::\n\n<br>\n\n## How `box` is different \n\n`box` doesn't require installing or attaching add-on packages. Instead, it uses modules to make package functions available. I'll demonstrate with a simplified example using the [`glue()` package](https://glue.tidyverse.org/). Assume I have a project folder `pkg/`, \n\n::: {style=\"font-size: 0.90em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\npkg/\n  â””â”€â”€ pkg.Rproj\n\n1 directory, 1 file\n```\n:::\n\n:::\n\n-   Projects in RStudio have a hidden folder, `.Rproj.user/`:\n\n    -   The the following contents are automatically created with a new `.Rproj` file:\n        \n        ::: {style=\"font-size: 1.0em;\"}\n\n        ::: {.cell}\n        \n        ```{.bash .cell-code  code-fold=\"true\" code-summary=\"contents of .Rproj\"}\n        pkg/\n          â”œâ”€â”€ .Rproj.user\n          â”‚      â”œâ”€â”€ 8CC5F70E\n          â”‚      â”‚      â”œâ”€â”€ bibliography-index\n          â”‚      â”‚      â”œâ”€â”€ ctx\n          â”‚      â”‚      â”œâ”€â”€ explorer-cache\n          â”‚      â”‚      â”œâ”€â”€ presentation\n          â”‚      â”‚      â”œâ”€â”€ profiles-cache\n          â”‚      â”‚      â”œâ”€â”€ sources\n          â”‚      â”‚      â”‚      â””â”€â”€ session-16ca0811\n          â”‚      â”‚      â”‚          â””â”€â”€ lock_file\n          â”‚      â”‚      â”œâ”€â”€ tutorial\n          â”‚      â”‚      â””â”€â”€ viewer-cache\n          â”‚      â””â”€â”€ shared\n          â”‚          â””â”€â”€ notebooks\n          â”‚              â””â”€â”€ patch-chunk-names\n          â””â”€â”€ pkg.Rproj\n        \n        14 directories, 3 files\n        ```\n        :::\n\n        :::\n        \n    -   None of these contents deal with installing or loading packages, but I've included it here for full transparency\n    \n\n### Create a box module \n\nI'll put the modules in a `box/fun.R` file, which I'll create from the command-line: \n\n::: {style=\"font-size: 0.90em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir box \ntouch box/fun.R\n```\n:::\n\n:::\n\nNow my `pkg` folder looks like this: \n\n::: {style=\"font-size: 0.90em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\npkg/\n  â”œâ”€â”€ box\n  â”‚    â””â”€â”€ fun.R\n  â”œâ”€â”€ pkg.Rproj\n  â””â”€â”€ use.R\n\n2 directories, 3 files\n```\n:::\n\n:::\n\nIn `pkg/box/fun.R` I'll add the following: \n\n  1) a brief comment with the path to the module \n\n  2) the `@export` tag from `roxygen2`\n\n  3) a call to `box::use(glue[glue])`\n\n::: {style=\"font-size: 0.90em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# box/fun.R\n#' @export\nbox::use(\n  glue[glue]\n  )\n```\n:::\n\n:::\n\nIn the parent folder, create another file named `use.R`. \n\nIn `use.R`, use the `fun` module by calling `box::use(box/fun)`\n\n::: {style=\"font-size: 0.90em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nbox::use(box/fun)\n```\n:::\n\n:::\n\nView `fun` by printing it to the console:\n\n::: {style=\"font-size: 0.90em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# print\nfun\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n<module: box/fun>\n```\n:::\n\n:::\n\nThis confirms the module has been created. \n\n### Using modules \n\nThe `glue` function is available from `fun` using the `$` (like a column in a `data.frame` or `tibble`)\n\n::: {style=\"font-size: 0.90em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# use \nx <- \"module\"\nfun$glue('This is a box {x}.')\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nThis is a box module.\n```\n:::\n\n:::\n\n\n`box` modules are combinations of named folders and files, but unlike R packages, these folders and files can be *nested*. The `folder/file` structure is used for separating modules, the same way we might separate files in a project (i.e., `project/data/file.csv` and `project/code/analysis.R`)\n\n-   `box` makes the function and package namespacing **explicit** by using `box::use(package[fun])`\n\n-   `box` also simplifies using module by calling the same function when building/using modules `box::use(folder/file)`: \n\n::: {style=\"font-size: 1.0em;\"}\n```r\n# CREATE MODULE\n# box/fun.R\n#' @export\nbox::use(\n  glue[glue]\n  )\n```\n:::\n        \n::: {style=\"font-size: 1.0em;\"}\n```r\n# USE MODULE\nbox::use(box/fun)\n```\n:::\n\nBelow is a slightly more involved example:\n\n## Module workflow\n\nBelow I'm going to create a module that imports, wrangles, and visualizes data from the [palmerpenguins package.](https://allisonhorst.github.io/palmerpenguins/) (**which is installed, but not loaded**).\n\n### `box/import`\n\nThis workflow starts with an `import` module in a `pengbox` project. The code below is stored in `pengbox/box/import.R`:\n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"import module\"}\n# box/import.R\nbox::use(\n  readr[read_csv],\n)\n#' @export\nget_raw_csv <- function() {\n  raw_csv_url <- \"https://bit.ly/3SQJ6E3\"\n  read_csv(raw_csv_url)\n}\n```\n:::\n\n:::\n\nIn a the master `pengbox/run.R` file, I'll use `import` like so:\n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# import\nbox::use(box/import)\nstr(import$get_raw_csv(), give.attr = FALSE)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\nspc_tbl_ [344 Ã— 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ studyName          : chr [1:344] \"PAL0708\" \"PAL0708\" \"PAL0708\" \"PAL0708\" ...\n $ Sample Number      : num [1:344] 1 2 3 4 5 6 7 8 9 10 ...\n $ Species            : chr [1:344] \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie\" ...\n $ Region             : chr [1:344] \"Anvers\" \"Anvers\" \"Anvers\" \"Anvers\" ...\n $ Island             : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \n $ Stage              : chr [1:344] \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \n $ Individual ID      : chr [1:344] \"N1A1\" \"N1A2\" \"N2A1\" \"N2A2\" ...\n $ Clutch Completion  : chr [1:344] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ Date Egg           : Date[1:344], format: \"2007-11-11\" \"2007-11-11\" ...\n $ Culmen Length (mm) : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...\n $ Culmen Depth (mm)  : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...\n $ Flipper Length (mm): num [1:344] 181 186 195 NA 193 190 181 195 193 ...\n $ Body Mass (g)      : num [1:344] 3750 3800 3250 NA 3450 ...\n $ Sex                : chr [1:344] \"MALE\" \"FEMALE\" \"FEMALE\" NA ...\n $ Delta 15 N (o/oo)  : num [1:344] NA 8.95 8.37 NA 8.77 ...\n $ Delta 13 C (o/oo)  : num [1:344] NA -24.7 -25.3 NA -25.3 ...\n $ Comments           : chr [1:344] \"Not enough blood for isotopes.\" NA NA ...\n```\n:::\n\n:::\n\nI'll re-write this module in `box/import.R` using an alias for `readr`s `read_csv()` function (`rcsv`) and include the `readr::cols()` function to remove the lengthy message.\n\nThis code is stored in the `box/import.R` file:\n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"import module with alias\"}\n# box/import.R\nbox::use(\n  readr[rcsv = read_csv, cols]\n)\n#' @export\nraw <- function() {\n  raw_csv_url <- \"https://bit.ly/3SQJ6E3\"\n  # use alias for read_csv()\n  rcsv(raw_csv_url, col_types = cols())\n}\n```\n:::\n\n:::\n\nUsing import with the new module is more concise:\n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# import\nbox::use(box/import)\nstr(import$raw(), give.attr = FALSE)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\"}\nspc_tbl_ [344 Ã— 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ studyName          : chr [1:344] \"PAL0708\" \"PAL0708\" \"PAL0708\" \"PAL0708\" ...\n $ Sample Number      : num [1:344] 1 2 3 4 5 6 7 8 9 10 ...\n $ Species            : chr [1:344] \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie\" ...\n $ Region             : chr [1:344] \"Anvers\" \"Anvers\" \"Anvers\" \"Anvers\" ...\n $ Island             : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \n $ Stage              : chr [1:344] \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \n $ Individual ID      : chr [1:344] \"N1A1\" \"N1A2\" \"N2A1\" \"N2A2\" ...\n $ Clutch Completion  : chr [1:344] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n $ Date Egg           : Date[1:344], format: \"2007-11-11\" \"2007-11-11\" ...\n $ Culmen Length (mm) : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...\n $ Culmen Depth (mm)  : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...\n $ Flipper Length (mm): num [1:344] 181 186 195 NA 193 190 181 195 193 ...\n $ Body Mass (g)      : num [1:344] 3750 3800 3250 NA 3450 ...\n $ Sex                : chr [1:344] \"MALE\" \"FEMALE\" \"FEMALE\" NA ...\n $ Delta 15 N (o/oo)  : num [1:344] NA 8.95 8.37 NA 8.77 ...\n $ Delta 13 C (o/oo)  : num [1:344] NA -24.7 -25.3 NA -25.3 ...\n $ Comments           : chr [1:344] \"Not enough blood for isotopes.\" NA NA ...\n```\n:::\n\n:::\n\n### `box/prep`\n\nAfter importing the raw penguins data, I'll write a module for wrangling the data (that also imports the `import` module). \n\nThis module takes the following steps:\n\n-   Reset the `box.path`   \n-   Import the `box/import` module   \n-   Load all the functions from `dplyr` using `[...]`   \n-   Load aliases for `stringr::str_extract()` and `janitor::clean_names()`   \n-   Compose `prep()` with the wrangling steps   \n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"prep module with import\"}\n# box/prep.R\n\n# reset the path\noptions(box.path = getwd())\n\n# import alias import module\nbox::use(box/import)\n\n# wrangle packages, functions, and aliases\nbox::use(\n  dplyr[...],\n  stringr[str_ext = str_extract],\n  janitor[fix_cols = clean_names]\n)\n\n#' @export\nprep = function() {\n  raw <- import$raw()\n  clean_cols <- fix_cols(raw)\n  vars <- select(clean_cols, \n    species, \n    island, \n    bill_length_mm = culmen_length_mm,\n    bill_depth_mm = culmen_depth_mm,\n    flipper_length_mm,\n    body_mass_g,\n    sex)\n  mutate(vars, \n    species = str_ext(species, \"([[:alpha:]]+)\"),\n    sex = factor(sex))\n}\n```\n:::\n\n:::\n\nWe can now the `prep` module to access the import module for the wrangled dataset. \n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# prepare\nbox::use(box/prep)\npeng_clean <- prep$prep()\nstr(peng_clean, give.attr = FALSE)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\ntibble [344 Ã— 7] (S3: tbl_df/tbl/data.frame)\n $ species          : chr [1:344] \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\n $ island           : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: num [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : num [1:344] 3750 3800 3250 NA 3450 ...\n $ sex              : Factor w/ 2 levels \"FEMALE\",\"MALE\": 2 1 1 NA 1 2 1 2 NA NA ...\n```\n:::\n\n:::\n\nThese data look like they're ready for graphing! Time to write another module...\n\n### `box/plot`\n\nI will build my visualization with `ggplot2` (in the `box/plot.R` module) and `dplyr::filter()`:\n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"plot module with prep\"}\n# pengbox/plot.R\n\n# reset the path\noptions(box.path = getwd())\n\n# import prep module\nbox::use(box/prep)\n\n# import ggplot2\nbox::use(\n  dplyr[filter],\n  ggplot2 = ggplot2[ggplot, aes, geom_point, \n                    facet_wrap, labs, theme_minimal])\n\n#' @export\nscatter <- function() {\n  prepped <- prep$prep()\n  # remove missing sex\n  filtered <- filter(prepped, !is.na(sex)) \n    # plot filtered data\n  plotted <- ggplot2$ggplot(data = filtered, \n    ggplot2$aes(\n      x = flipper_length_mm,\n      y = body_mass_g,\n      group = sex\n    )\n  ) +\n    ggplot2$geom_point(\n      ggplot2$aes(color = island)\n    ) +\n    ggplot2$facet_wrap(. ~ sex) +\n    ggplot2$labs(x = \"Flipper Length (mm)\", y = \"Body Mass (g)\", \n      color = \"Island\", title = \"Flipper vs. Body Mass\", \n      subtitle = \"Palmer Penguins\") +\n    ggplot2$theme_minimal()\n  plotted\n}\n```\n:::\n\n:::\n\nCheck our scatter plot with `plot$scatter()`\n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot\nbox::use(box/plot)\nplot$scatter()\n```\n:::\n\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](scatter.png){width=100%}\n:::\n:::\n\n\nAnd there you have it! A complete pipeline using `box` modules! And the total project size (files and folders) is much smaller than building an R package:\n\n::: {style=\"font-size: 1.10em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\npengbox/\n    â”œâ”€â”€ box\n    â”‚   â”œâ”€â”€ import.R\n    â”‚   â”œâ”€â”€ plot.R\n    â”‚   â””â”€â”€ prep.R\n    â”œâ”€â”€ penguins.Rproj\n    â””â”€â”€ run.R\n\n2 directories, 5 files\n```\n:::\n\n:::\n\nBelow are the various ways to include packages and functions in `box` modules: \n\n::: {style=\"font-size: 0.70em;\"}\n\n\n:::: {.callout-note collapse='false'}\n\n## Options for creating `box` modules:\n\n::: {style='font-size: 0.90em; color: #696969;'}\n\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Inside box::use() </th>\n   <th style=\"text-align:left;\"> Action </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      pkg\n    ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg', does not attach any function names </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      p = pkg\n      ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg' with alias ('p'), does not attach any function names </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      pkg = pkg[foo, bar]\n      ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg' and attaches the function names 'pkg::foo()' and 'pkg::bar()' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> box::use(\n      pkg[my_foo = foo, ...]\n      ) </td>\n   <td style=\"text-align:left;\"> imports 'pkg' with alias for 'foo' ('my_foo') and attaches all exported function names </td>\n  </tr>\n</tbody>\n</table>\n\n::: \n\n::::\n\n\n:::\n\n## Nesting modules \n\nThe same workflow could be re-written as nested modules, with folders separating logical steps in an analysis workflow (or application). Consider the folder structure below: \n\n::: {style=\"font-size: 1.10em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\npengbox/\n    â”œâ”€â”€ box\n    â”‚   â””â”€â”€ graph\n    â”‚       â”œâ”€â”€ wrangle\n    â”‚       â”‚   â”œâ”€â”€ clean\n    â”‚       â”‚   â”‚   â”œâ”€â”€ import\n    â”‚       â”‚   â”‚   â”‚   â””â”€â”€ raw.R\n    â”‚       â”‚   â”‚   â””â”€â”€ cols.R\n    â”‚       â”‚   â””â”€â”€ vars.R\n    â”‚       â””â”€â”€ scatter.R\n    â”œâ”€â”€ penguins.Rproj\n    â””â”€â”€ run.R\n\n6 directories, 6 files\n```\n:::\n\n:::\n\n### `import`\n\nWith this structure, the `raw` module is in the `import` folder: \n\n::: {style=\"font-size: 1.0em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\npengbox/box/graph/wrangle/clean/import\n                                    â””â”€â”€ raw.R\n\n1 directory, 1 file\n```\n:::\n\n:::\n\n-   The `raw` module--the first step--is nested in the `box/graph/wrangle/clean/import/raw.R` file\n    \n    - The `raw` module imports the raw `.csv` data with an aliass for `readr`'s `read_csv()`\n\n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"raw module\"}\n    # box/graph/wrangle/clean/import/raw.R\n    box::use(\n      readr[rcsv = read_csv, cols]\n    )\n    #' @export\n    csv <- function() {\n      raw_csv_url <- \"https://bit.ly/3SQJ6E3\"\n      # use alias for read_csv()\n      rcsv(raw_csv_url, col_types = cols())\n    }\n    ```\n    :::\n\n    :::\n    \n\n#### `raw`\n\n-   In `run.R`, I run `box/graph/wrangle/clean/import/raw` to import the `raw` module \n\n    -   The `csv()` function imports the raw data\n\n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # in use.R\n    box::use(box/graph/wrangle/clean/import/raw)\n    str(raw$csv(), give.attr = FALSE)\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"true\" code-summary=\"raw module output\"}\n    spc_tbl_ [344 Ã— 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n     $ studyName          : chr [1:344] \"PAL0708\" \"PAL0708\" \"PAL0708\" \"PAL0708\" ...\n     $ Sample Number      : num [1:344] 1 2 3 4 5 6 7 8 9 10 ...\n     $ Species            : chr [1:344] \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie\" ...\n     $ Region             : chr [1:344] \"Anvers\" \"Anvers\" \"Anvers\" \"Anvers\" ...\n     $ Island             : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \n     $ Stage              : chr [1:344] \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \n     $ Individual ID      : chr [1:344] \"N1A1\" \"N1A2\" \"N2A1\" \"N2A2\" ...\n     $ Clutch Completion  : chr [1:344] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n     $ Date Egg           : Date[1:344], format: \"2007-11-11\" \"2007-11-11\" ...\n     $ Culmen Length (mm) : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...\n     $ Culmen Depth (mm)  : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...\n     $ Flipper Length (mm): num [1:344] 181 186 195 NA 193 190 181 195 193 ...\n     $ Body Mass (g)      : num [1:344] 3750 3800 3250 NA 3450 ...\n     $ Sex                : chr [1:344] \"MALE\" \"FEMALE\" \"FEMALE\" NA ...\n     $ Delta 15 N (o/oo)  : num [1:344] NA 8.95 8.37 NA 8.77 ...\n     $ Delta 13 C (o/oo)  : num [1:344] NA -24.7 -25.3 NA -25.3 ...\n     $ Comments           : chr [1:344] \"Not enough blood for isotopes.\" NA NA ...\n    ```\n    :::\n\n    :::\n\n### `clean`\n\nThe `clean` folder contains the `cols` module and the `snakes()` function\n\n::: {style=\"font-size: 1.10em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\nbox/graph/wrangle/\n              â”œâ”€â”€ clean\n              â”‚   â”œâ”€â”€ #import\n              â”‚   â”‚   #â””â”€â”€ raw.R\n              â”‚   â””â”€â”€ cols.R\n              â””â”€â”€ vars.R\n\n3 directories, 3 files\n```\n:::\n\n:::\n\n#### `snakes`\n\n-   The `box/graph/wrangle/clean/cols` module standardizes the column names\n\n    -   `cols` calls the `snakes()` function, which converts all the column names to `lower_snake_case` with an alias for `janitor::clean_names()`, then it imports `select` from `dplyr` to subset the columns\n\n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"cols module\"}\n    # box/graph/wrangle/clean/cols.R\n    \n    # reset the path\n    options(box.path = getwd())\n    \n    # use import raw module\n    box::use(box/graph/wrangle/clean/import/raw)\n    \n    # columns\n    box::use(\n      dplyr[select],\n      janitor[fix_cols = clean_names]\n    )\n    \n    #' @export\n    snakes = function() {\n      raw <- raw$csv()\n      clean_cols <- fix_cols(raw)\n      vars <- select(clean_cols, \n        species, \n        island, \n        bill_length_mm = culmen_length_mm,\n        bill_depth_mm = culmen_depth_mm,\n        flipper_length_mm,\n        body_mass_g,\n        sex)\n      return(vars)\n    }\n    ```\n    :::\n\n    :::\n    \n    -   Back in `run.R`, we call the `cols` module to convert the columns names with `snakes()`:\n\n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # clean columns\n    box::use(box/graph/wrangle/clean/cols)\n    names(cols$snakes())\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"show\" code-summary=\"cols module output\"}\n    [1] \"species\"           \"island\"            \"bill_length_mm\"    \"bill_depth_mm\"                  \n    [5] \"flipper_length_mm\" \"body_mass_g\"       \"sex\" \n    ```\n    :::\n\n    :::\n\n### `wrangle` \n\n-   Now that I have standardized columns and the subset of the variables to plot, I can call the `vars` module to wrangle the plot variables \n\n::: {style=\"font-size: 1.10em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code}\nbox/graph/wrangle/\n            â”œâ”€â”€ #clean\n            â”‚   #â”œâ”€â”€ #import\n            â”‚   #â”‚   #â””â”€â”€ raw.R\n            â”‚   #â””â”€â”€ cols.R\n            â””â”€â”€ vars.R\n\n3 directories, 3 files\n```\n:::\n\n:::\n\n#### `vars`\n\n-   `vars` is nested in the `wrangle` folder, and imports the `raw` and `cols` modules\n\n    -   The `vars` module imports `mutate` and `filter` from `dplyr` and an alias for `stringr::str_extract()`\n\n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"vars module\"}\n    # box/graph/wrangle/vars.R\n    \n    # reset the path\n    options(box.path = getwd())\n    \n    # use clean names module\n    box::use(box/graph/wrangle/clean/cols)\n    \n    # wrangle packages/functions\n    box::use(dplyr[mutate, filter],\n      stringr[str_ext = str_extract])\n    \n    #' @export\n    scatter = function() {\n      clean_cols <- cols$snakes()\n      plot_vars <- clean_cols |>\n        mutate(\n          species = str_ext(species, \"([[:alpha:]]+)\"),\n          species = factor(species),\n          island = factor(island),\n          sex = factor(sex)\n        ) |>\n        # remove missing sex\n        filter(!is.na(sex))\n      return(plot_vars)\n    }\n    ```\n    :::\n\n    :::\n    \n    In `run.R`, we check the structure of the output from `vars$scatter()`\n\n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # in run.R\n    # wrangle variables \n    box::use(box/graph/wrangle/vars)\n    str(vars$scatter())\n    ```\n    :::\n\n    :::\n\n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"show\" code-summary=\"vars module output\"}\n    tibble [333 Ã— 7] (S3: tbl_df/tbl/data.frame)                                                     \n     $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n     $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n     $ bill_length_mm   : num [1:333] 39.1 39.5 40.3 36.7 39.3 38.9 39.2 41.1 38.6 34.6 ...\n     $ bill_depth_mm    : num [1:333] 18.7 17.4 18 19.3 20.6 17.8 19.6 17.6 21.2 21.1 ...\n     $ flipper_length_mm: num [1:333] 181 186 195 193 190 181 195 182 191 198 ...\n     $ body_mass_g      : num [1:333] 3750 3800 3250 3450 3650 ...\n     $ sex              : Factor w/ 2 levels \"FEMALE\",\"MALE\": 2 1 1 1 2 1 2 1 2 2 ...\n    ```\n    :::\n\n    :::\n\n### `graph`\n\nFinally, we get to the `graph` module. This module import all preceding modules.\n\n::: {style=\"font-size: 1.10em;\"}\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nbox/\nâ””â”€â”€ graph\n    â”œâ”€â”€ #wrangle\n    â”‚   #â”œâ”€â”€ #clean\n    â”‚   #â”‚   #â”œâ”€â”€ #import\n    â”‚   #â”‚   #â”‚   #â””â”€â”€ raw.R\n    â”‚   #â”‚   #â””â”€â”€ cols.R\n    â”‚   #â””â”€â”€ vars.R\n    â””â”€â”€ scatter.R\n\n5 directories, 4 files\n```\n:::\n\n:::\n\n#### `scatter`\n\n-   The `scatter` module imports the `vars` module with the data that's been imported, cleaned, and wrangled.\n\n    -   The `ggp2()` function includes the `ggplot2` functions to build a scatter plot. \n    \n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"scatter module\"}\n    # box/graph/scatter.R\n    \n    # reset the path\n    options(box.path = getwd())\n    \n    # import plot vars module\n    box::use(box/graph/wrangle/vars)\n    \n    # import ggplot2\n    box::use(\n      ggplot2 = ggplot2[ggplot, aes, geom_point, \n                        facet_wrap, labs, theme_minimal]\n    )\n    \n    #' @export\n    ggp2 <- function() {\n      scatter_vars <- vars$scatter()\n      # plot prepped data\n      ggp2_plot <- ggplot2$ggplot(data = scatter_vars, \n        ggplot2$aes(\n          x = flipper_length_mm,\n          y = bill_length_mm,\n          group = island\n        )\n      ) +\n        ggplot2$geom_point(\n          ggplot2$aes(color = species)\n        ) +\n        ggplot2$facet_wrap(. ~ island) +\n        ggplot2$labs(\n          x = \"Flipper Length (mm)\", \n          y = \"Bill length (mm)\", \n          color = \"Species\",\n          group = \"Island\",\n          title = \"Flipper vs. Bill Length\", \n          subtitle = \"Palmer Penguins\"\n        ) +\n        ggplot2$theme_minimal()\n      ggp2_plot\n    }\n    ```\n    :::\n\n    :::\n    \n    In `run.R`, the final module call produces the plot.\n    \n    ::: {style=\"font-size: 1.0em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # graph\n    box::use(box/graph/scatter)\n    scatter$ggp2()\n    ```\n    :::\n\n    :::\n    \n    \n\n::: {.cell}\n::: {.cell-output-display}\n![](nested-scatter.png){width=100%}\n:::\n:::\n\n\n## Recap \n\nIn this post I've covered how the `box` package uses modules to separate your analysis and workflow into small, *modular* scripts. Nesting modules also adds a flexibility R packages do not have (because everything has to be contained in the `R/` folder). \n\nBoth versions of the projects created in this example ended up with very few lines of code, and didn't require a creating a `NAMESPACE` or `DESCRIPTION` file. \n\nView the final [project here.](https://github.com/mjfrigaard/penguins) \n\n<!--\n\n-->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}