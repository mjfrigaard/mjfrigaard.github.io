{
  "hash": "8e60aafe7394b89ef95fc6566e14975d",
  "result": {
    "markdown": "---\ntitle: \"Creating shiny app-packages (`golem`)\"\nsubtitle: \"Building a `golem` app-package: whole-game\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-05-01\"\ncategories: [shiny, golem, packages]\nimage: \"image.png\"\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n  collapse: true\n---\n\n\n\n\n\nThis post walks through building a shiny application using the  [`golem` framework](https://thinkr-open.github.io/golem/). `golem` is a '*an opinionated framework for building production-grade shiny applications'*--we'll explore some of the opinions in-depth (and offer my opinion on adopting these opinions).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"mjfrigaard/gap\")\n```\n:::\n\n\nFor consistency, I'll be using the application from the RStudio's [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/) course. These materials are a great resource if you're new to shiny--even if you're aren't, it's still worth checking out--plus it's free!\n\nThe [golem text](https://engineering-shiny.org/) is also a fantastic resource, but I found myself using the [`golem` website](https://thinkr-open.github.io/golem/) as a great 'quick reference.' If you're unfamiliar with R package development, I recommend bookmarking [R packages](https://r-pkgs.org/)--this is a great resource you'll return to often. \n\n \n\n## Outline\n\nI've organized the app-package development process into three areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the required steps launch your `golem` project in the console and IDE, some standard R package files, and any additional setup considerations.\n\n  -   **Build** covers the app-package development process, which includes writing and storing code, data, external resources (like CSS or JavaScript), testing, etc. \n\n  -   **Use** shows how to launch a `golem` application locally (i.e., within the RStudio (Posit) IDE), common workflow tips, and anything I found confusing while building the application.\n\n## Start\n\n<!-- ## [`gap`]{style=\"font-size: 1.55em\"} -->\n\nTo create a new `golem` app from the console, enter the following:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ninstall.packages(\"golem\")\nlibrary(golem)\ngolem::create_golem(path = \"gap\")\n```\n:::\n\n\nIf you're creating a `golem` app using the **New Project Wizard**, the following defaults are available:\n\n::: {#fig-golem-setup .column}\n![IDE wizard `golem` setup](golem-setup.png){width=\"80%\" fig-align=\"center\"}\n\nCreating a new `golem` shiny app\n:::\n\nI recommend using `golem` comments (they're helpful and don't change how the application code runs). When the new project opens, the initial folder structure for your new `golem` application is below:\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"show/hide golem folder structure\"}\napp-name/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R\n  │   ├── app_config.R\n  │   ├── app_server.R\n  │   ├── app_ui.R\n  │   └── run_app.R\n  ├── dev\n  │   ├── 01_start.R\n  │   ├── 02_dev.R\n  │   ├── 03_deploy.R\n  │   └── run_dev.R\n  ├── [app-name].Rproj\n  ├── inst\n  │   ├── app\n  │   │   └── www\n  │   │       └── favicon.ico\n  │   └── golem-config.yml\n  └── man\n      └── run_app.Rd\n  \n  7 directories, 14 files\n```\n:::\n\n\n### [`dev/`]{style=\"font-size: 1.20em\"} scripts\n\nNew `golem` apps automatically open the `01_start.R` script. This is the first of three developments scripts in the `dev/` folder: \n\n![golem `dev/` scripts](gap_dev_scripts.png){fig-align=\"center\" width=\"55%\"}\n\n\nThe `dev/` folder initially contains three .R scripts which serve as a 'guided tour' of `golem` framework (`01_start.R`, `02_dev.R`, and `03_deploy.R`). The `run_dev.R` is for running a development version of your app (more on this later).\n\n\n\n:::: {.callout-tip collapse='true'}\n\n## `golem` development scripts\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nIf you're familiar with R application development, you should recognize most of the items in the `dev/` scripts. I recommend going through these scripts even if you're an experienced R package developer--you can think of these as a 'shiny app-package development checklist.'\n  \n\n::: \n\n::::\n\n\n### [`Fill the DESCRIPTION`]{style=\"font-size: 1.20em\"}\n\nThere are three files in a new golem app-package--`NAMESPACE`, `DESCRIPTION`, and `[app name].Rproj`. `dev/01_start.R` starts by building the  `DESCRIPTION` file with [`golem::fill_desc()`](https://thinkr-open.github.io/golem/reference/fill_desc.html)\n\n::: {.column-margin}\n![golem `DESCRIPTION`](gap_desc.png){width=\"70%\"}\n\n\n:::\n\n`fill_desc()` is from the [`desc` package](https://r-lib.github.io/desc/), and the sections are entered in a `key = \"value\"` format\n\n-   Example `DESCRIPTION` file contents:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    golem::fill_desc(\n      pkg_name = \"gap\",\n      pkg_title = \"An example goelm app\",\n      pkg_description = \"A working example of the golem package.\",\n      author_first_name = \"Martin\",\n      author_last_name = \"Frigaard\",\n      author_email = \"mjfrigaard@pm.me\",\n      repo_url = NULL # The URL of the GitHub Repo (optional)\n    )\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"true\" code-summary=\"show/hide output from golem::fill_desc()\"}\n    ✔ Setting `golem_version` to 0.0.0.9000\n    ✔ Setting `golem_name` to gap\n    ✔ DESCRIPTION file modified\n    ```\n    :::\n\n\n:::: {.callout-tip collapse='true'}\n\n## *Amending the `DESCRIPTION`\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nIn `dev/02_dev.R`, the `attachment::att_amend_desc()` will '*Amend `DESCRIPTION` with dependencies read from package code parsing*'. If `attachment` is not installed, use  `install.package('attachment')`\n  \n\n::: \n\n::::\n\n\n### [`Set {golem} options`]{style=\"font-size: 1.20em\"}\n\n::: {.column-margin}\n![golem config file](golem_config_yml.png){width=\"100%\"}\n\n:::\n\nThe `golem::set_golem_options()` wraps a collection of `golem`'s 'opinionated' application development and configuration options. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::set_golem_options()\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\" code-summary=\"show/hide output from golem::set_golem_optionss()\"}\n── Setting {golem} options in `golem-config.yml` ────────────────────────────────────────────────────────────────────\n✔ Setting `golem_name` to gap\n✔ Setting `golem_wd` to golem::pkg_path()\nYou can change golem working directory with set_golem_wd('path/to/wd')\n✔ Setting `golem_version` to 0.0.0.9000\n✔ Setting `app_prod` to FALSE\n── Setting {usethis} project as `golem_wd` ──────────────────────────────────────────────────────────────────────────\n✔ Setting active project to '/projects/dev/gap'\n```\n:::\n\n\n`set_golem_options()` is a wrapper for a collection of `golem` option functions (I've included each function and a brief description of their behavior below):\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide golem options\"}\ngolem::set_golem_options(\n  golem_name = golem::pkg_name(), # name of the app-package in DESCRIPTION\n  golem_version = golem::pkg_version(), # version in DESCRIPTION\n  golem_wd = golem::pkg_path(), # package root when starting a golem\n  app_prod = FALSE, # production mode?\n  talkative = TRUE, # Should the messages be printed to the console?\n  config_file = golem::get_current_config(golem_wd) # golem-config.yml location\n)\n```\n:::\n\n\nThe new config file is located in the `inst/` folder.\n\n<!--\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    inst\n    ├── app\n    │   └── www\n    │       └── favicon.ico\n    └── golem-config.yml\n    \n    3 directories, 2 files\n    ```\n    :::\n\n    \n-->\n\n\n\n:::: {.callout-tip collapse='true'}\n\n## `golem` options\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nTo fully understand the `golem` framework, I recommended running this function. The great thing about `golem`'s options is you don't have to adopt all of them to have a production-quality app!\n  \n\n::: \n\n::::\n\n\n### [`Install` `required` `dev` `dependencies`]{style=\"font-size: 1.20em\"}\n\nThe `golem::install_dev_deps()` function makes sure the following packages are installed (I've grouped them into categories): \n\n\n::: {layout-ncol=2}\n##### Development \n\n-   [`devtools`](https://devtools.r-lib.org/) (loading, documenting, installing package)   \n    -   [`pkgload`](https://pkgload.r-lib.org/) (i.e., `devtools::load_all()`)\n\n-   [`usethis`](https://usethis.r-lib.org/) (create package files)\n\n-   [`roxygen2`](https://roxygen2.r-lib.org/) (document package functions and objects)\n\n-   [`pkgbuild`](https://pkgbuild.r-lib.org/) (create a `.tar.gz` file)\n\n##### Documentation & testing\n\n-   [`attachment`](https://thinkr-open.github.io/attachment/) (deal with package dependencies)\n\n-   [`desc`](https://desc.r-lib.org/) (Parse `DESCRIPTION` files)\n\n-   [`testthat`](https://testthat.r-lib.org/) (unit testing your code)\n\n:::\n\n::: {layout-ncol=3}\n##### Internals\n\n-   [`rstudioapi`](https://rstudio.github.io/rstudioapi/)  (interacting with RStudio IDE)\n\n-   [`processx`](https://processx.r-lib.org/) (execute and control subprocesses from R)\n\n##### Files & paths  \n\n-   [`here`](https://here.r-lib.org/)  (file/folder path management)\n\n-   [`fs`](https://fs.r-lib.org/)  (file/folder path management)\n\n##### Deploy\n\n-   [`dockerfiler`](https://github.com/ThinkR-open/dockerfiler) (deploying apps with docker) \n\n-   [`rsconnect`](https://rstudio.github.io/rsconnect/) (deploy shiny apps with RSConnect) \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::install_dev_deps()\n```\n:::\n\n\nBelow is an example with `dockerfiler`:\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\" code-summary=\"show/hide output from golem::install_dev_deps()\"}\nℹ The package \"dockerfiler\" is required.\n✖ Would you like to install it?\n\n1: Yes\n2: No\n\nSelection: 1\n✔ Updated metadata database: 5.32 MB in 12 files.                         \n✔ Updating metadata database ... done                                     \n                                                                            \n→ Will install 1 package.\n→ Will download 1 CRAN package (104.29 kB).\n+ dockerfiler   0.2.1  ⬇ (104.29 kB)\nℹ Getting 1 pkg (104.29 kB)\n✔ Got dockerfiler 0.2.1 (x86_64-apple-darwin17.0) (104.29 kB)             \n✔ Downloaded 1 package (104.29 kB)in 1.1s                                 \n✔ Installed dockerfiler 0.2.1  (54ms)                                    \n✔ 1 pkg + 40 deps: kept 40, added 1, dld 1 (104.29 kB) [20.2s]  \n```\n:::\n\n\n:::: {.callout-tip collapse='true'}\n\n## Using `golem` devops\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nI recommend using `golem`'s options here--it's efficient and let's you know if a particular package isn't installed: \n  \n\n::: \n\n::::\n\n\n### [`Create Common Files`]{style=\"font-size: 1.20em\"}\n\nThe 'Create Common Files' section of `dev/01_start.R` contains many of the functions and files covered in the ['Whole Game' section of R packages](https://r-pkgs.org/whole-game.html):\n\n-   **LICENSE**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_mit_license(\"Golem User\")\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Adding 'MIT + file LICENSE' to License\n    ✔ Writing 'LICENSE'\n    ✔ Writing 'LICENSE.md'\n    ✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\n    ```\n    :::\n\n  \n::: {.column-margin}\n![golem `LICENSE` file](gap_license.png){width=\"100%\" fig-align=\"left\"}\n\n:::\n\n<!--  -->\n\n-   **README.Rmd**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_readme_rmd()\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Writing 'README.Rmd'\n    ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n    • Update 'README.Rmd' to include installation instructions.\n    ```\n    :::\n\n    \n    - The **README.md** is built with `devtools::build_readme()`\n    \n        ```r\n        devtools::build_readme()\n        ```\n        \n        ```bash\n        ℹ Installing gap in temporary library\n        ℹ Building /projects/dev/gap/README.Rmd\n        ```\n    \n::: {.column-margin}\n\n![golem README.Rmd file](gap_readme.png){width=\"100%\" fig-align=\"left\"}\n\n:::\n  \n-   **CODE_OF_CONDUCT.md**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_code_of_conduct()\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Writing 'CODE_OF_CONDUCT.md'\n    ✔ Adding '^CODE_OF_CONDUCT\\\\.md$' to '.Rbuildignore'\n    • You may also want to describe the code of conduct in your README:\n      ## Code of Conduct\n      \n    Please note that the gap project is released with a [Contributor Code of\n        Conduct](https://contributor-covenant.org/version/2/1/CODE_OF_CONDUCT.html).\n    By contributing to this project, you agree to abide by its terms.\n      [Copied to clipboard]\n    ```\n    :::\n\n    \n    - Paste of the code of conduct in the **README.md** is rebuild with `devtools::build_readme()`\n    \n        ```r\n        devtools::build_readme()\n        ```\n        \n        ```bash\n        ℹ Installing gap in temporary library\n        ℹ Building /projects/dev/gap/README.Rmd\n        ```\n        \n::: {.column-margin}\n![golem code of conduct file](gap_code_of_conduct.png){width=\"100%\" fig-align=\"left\"}\n\n:::\n  \n-   **Lifecycle badge**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_lifecycle_badge(\"Experimental\")\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Adding Lifecycle: experimental badge to 'README.Rmd'\n    • Re-knit 'README.Rmd' with `devtools::build_readme()`\n    ```\n    :::\n\n    \n    - Rebuild the **README.md** with `devtools::build_readme()`\n    \n        ``` r\n        usethis::use_lifecycle_badge(\"Experimental\")\n        ```\n    \n        ```bash\n        ℹ Installing gap in temporary library\n        ℹ Building /projects/dev/gap/README.Rmd\n        ```\n        \n\n::: {.column-margin}\n![`golem` lifecycle badge](lifecycle_exp.png){width=\"100%\"  fig-align=\"left\"}\n\n:::\n  \n-   **NEWS.md**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_news_md(open = FALSE)\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Writing 'NEWS.md'\n    ```\n    :::\n\n    \n::: {.column-margin}\n![golem `NEWS.md` file](gap_news.png){width=\"70%\"  fig-align=\"left\"}\n\n:::\n  \n-   **Git**: `usethis::use_git()` will ask if you'd like to commit the files in your golem app to a repo of the same name:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_git()\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    ✔ Setting active project to '/projects/dev/gap'\n    ✔ Initialising Git repo\n    ✔ Adding '.Rproj.user', '.Rhistory', '.Rdata', '.httr-oauth',\n      '.DS_Store', '.quarto' to '.gitignore'\n    There are 16 uncommitted files:\n    * '.gitignore'\n    * '.here'\n    * '.Rbuildignore'\n    * 'CODE_OF_CONDUCT.md'\n    * 'DESCRIPTION'\n    * 'dev/'\n    * 'gap.Rproj'\n    * 'inst/'\n    * 'LICENSE'\n    * 'LICENSE.md'\n    * ...\n    Is it ok to commit them?\n    \n    1: Definitely\n    2: Negative\n    3: Not now\n    \n    Selection: 1\n    ```\n    :::\n\n    \n    -   To initialize the Git pane, you'll need to restart RStudio (in the next dialogue)\n    \n        ```bash\n        ✔ Adding files\n        ✔ Making a commit with message 'Initial commit'\n        • A restart of RStudio is required to activate the Git pane\n        Restart now?\n        \n        1: Absolutely\n        2: Negative\n        3: No\n        Selection: 1\n        ```\n\n\n\n:::: {.callout-tip collapse='true'}\n\n## `golem`s common files\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nEach of these files are important for an R package, so having them consolidated in `01_start.R` makes it easier to get up and running quickly. However, if you'd like to edit their contents before moving onto the next step (or you'd like information on a particular function/file), I recommend consulting [R packages](https://r-pkgs.org/whole-game.html) for this section\n  \n\n::: \n\n::::\n\n\n### [`Init` `Testing` `Infrastructure`]{style=\"font-size: 1.20em\"}\n\n`golem::use_recommended_tests()` with set up the `testthat` architecture for unit tests. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::use_recommended_tests()\n```\n:::\n\n\n::: {.column-margin}\n![golem test files](gap_tests.png){width=\"100%\"}\n\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\n✔ Setting active project to '/projects/dev/gap'\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Adding '3' to Config/testthat/edition\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing\n```\n:::\n\n\nIt also adds a few words to the `WORDLIST` file in the `inst` folder:\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\n✔ Adding 'spelling' to Suggests field in DESCRIPTION\n✔ Adding 'en-US' to Language\nThe following words will be added to the wordlist:\n - Lifecycle\n - goelm\n - golem\nAre you sure you want to update the wordlist?\n1: Yes\n2: No\n\nSelection: 1\nAdded 3 and removed 0 words in /projects/dev/gap/inst/WORDLIST\nUpdated /projects/dev/gap/tests/spelling.R\n• Run `devtools::check()` to trigger spell check\n✔ Tests added\n```\n:::\n\n\n\n`golem::use_recommended_tests()` also provides some examples for testing the UI, server, and other `golem` functions:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show/hide unit tests in test-golem-recommended.R\"}\ntest_that(\"app ui\", {\n  ui <- app_ui()\n  golem::expect_shinytaglist(ui)\n  # Check that formals have not been removed\n  fmls <- formals(app_ui)\n  for (i in c(\"request\")) {\n    expect_true(i %in% names(fmls))\n  }\n})\n\ntest_that(\"app server\", {\n  server <- app_server\n  expect_type(server, \"closure\")\n  # Check that formals have not been removed\n  fmls <- formals(app_server)\n  for (i in c(\"input\", \"output\", \"session\")) {\n    expect_true(i %in% names(fmls))\n  }\n})\n\ntest_that(\n  \"app_sys works\",\n  {\n    expect_true(\n      app_sys(\"golem-config.yml\") != \"\"\n    )\n  }\n)\n\ntest_that(\n  \"golem-config works\",\n  {\n    config_file <- app_sys(\"golem-config.yml\")\n    skip_if(config_file == \"\")\n\n    expect_true(\n      get_golem_config(\n        \"app_prod\",\n        config = \"production\",\n        file = config_file\n      )\n    )\n    expect_false(\n      get_golem_config(\n        \"app_prod\",\n        config = \"dev\",\n        file = config_file\n      )\n    )\n  }\n)\n\n# Configure this test to fit your need.\n# testServer() function makes it possible to test code in server functions and modules, without needing to run the full Shiny application\ntestServer(app_server, {\n\n  # Set and test an input\n  session$setInputs(x = 2)\n  expect_equal(input$x, 2)\n\n  # Example of tests you can do on the server:\n  # - Checking reactiveValues\n  # expect_equal(r$lg, 'EN')\n  # - Checking output\n  # expect_equal(output$txt, \"Text\")\n})\n\n# Configure this test to fit your need\ntest_that(\n  \"app launches\",\n  {\n    golem::expect_running(sleep = 5)\n  }\n)\n```\n:::\n\n\nThese tests pass right out of the box, and they give a little 'sneak preview' of  how the `golem` framework works. \n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"show/hide results from unit tests in test-golem-recommended.R\"}\n==> Testing R file using 'testthat'\n\nℹ Loading gap\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 9 ]\nLoading required package: shiny\n[ FAIL 0 | WARN 0 | SKIP 1 | PASS 10 ]\n\n── Skipped tests (1) ─────────\n• interactive() is not TRUE\n  (1):\n  test-golem-recommended.R:72:5\n\n\nTest complete\n```\n:::\n\n\n:::: {.callout-tip collapse='true'}\n\n## `golem` recommended tests\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nI love this feature of golem apps! in a single function I have the folders required for unit testing, words added to the WORDLIST (which I almost never remember to do), and an example test with shiny's [`testServer()`](https://shiny.posit.co/r/reference/shiny/1.7.0/testserver) function. \n  \n\n::: \n\n::::\n\n\n\n\n\n### [`Favicon`]{style=\"font-size: 1.20em\"}\n\nA [favicon](https://en.wikipedia.org/wiki/Favicon) is a the little image that shows up on your browser tab or address bar. `golem` has a default favicon in the `inst/app/` folder: \n\n::: {.column-margin}\n\n![golem favicon file](favicon.ico){width=\"10%\"}\n\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\ninst/\n  └── app\n       └── www\n            └── favicon.ico\n\n\n3 directories, 1 file\n```\n:::\n\n\nThe `inst/` folder serves a specific purpose in golem apps (and R packages), which I'll cover more below. For our purpose, the  `golem::use_favicon()` function can use the existing image:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::use_favicon(path = \"inst/app/www/favicon.ico\")\n```\n:::\n\n\nThe output introduces another common `golem` function: `golem_add_external_resources()`\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\n✔ favicon.ico created at \n/projects/gap/inst/app/www/favicon.ico\nFavicon is automatically linked in app_ui via `golem_add_external_resources()`\n```\n:::\n\n\nThis function is used to add external resources to your application (and will come up often during development). \n\n\n### [`Add helper functions`]{style=\"font-size: 1.20em\"}\n\nMost applications will have two types of code--`shiny` functions for running your application (app functions), and functions that do everything else (or utility functions). The `golem` further distinguished utility functions into two types: *\"small functions that are reused throughout the app\"* (with a `utils_` prefix), and *\"larger functions, which are more central to the application\"* (with a `fct_` prefix). \n\nThese descriptions [from the text](https://engineering-shiny.org/build-app-golem.html?functions#submodules-and-utility-functions) are helpful for distinguishing between the two:\n\n> **`utils_` functions:** \"*...the `hexmake` app has two of these files, `R/utils_ui.R` and `R/utils_server.R`, in which you will find small functions that are reused throughout the app.*\"\n\n> **`fct_` functions:**  \"*...in `hexmake`, you will find `R/fct_mongo.R`, which is used to handle all the things related to connecting and interacting with the Mongodb database.*\"\n\n#### [`use_utils_ui()`]{style=\"font-size: 1.15em\"}\n\nThe `golem::use_utils_ui()` function will add a collection of utility functions for the UI. Including `with_test = TRUE` will add a test for these functions.  \n\n::: {.column-margin}\n![golem UI utility functions & tests](use_utils_ui.png){width=\"90%\"}\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::use_utils_ui(with_test = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\n✔ File created at /projects/gap/R/golem_utils_ui.R\n✔ Utils UI added\n✔ File created at /projects/gap/tests/testthat/test-golem_utils_ui.R\n✔ Tests on utils_server added\n```\n:::\n\n\n\n#### [`use_utils_server()`]{style=\"font-size: 1.15em\"}\n\n`golem` also includes a set of functions for the application server (or server modules), `golem::use_utils_server()`. The `with_test = TRUE` will also add a test to the `tests/testthat/` folder:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::use_utils_server(with_test = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\n✔ File created at /projects/gap/R/golem_utils_server.R\n✔ Utils server added\n✔ File created at /projects/gap/tests/testthat/test-golem_utils_server.R\n✔ Tests on utils_server added\n```\n:::\n\n\n::: {.column-margin}\n![golem server utility functions & tests](use_utils_server.png){width=\"90%\"}\n\n:::\n\n\n\n:::: {.callout-tip collapse='true'}\n\n## `golem` utility functions\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nI consider these functions optional, but the examples in each file have a broad enough application that you'll probably discover something helpful for your `golem` application. The `with_test` argument also provides more examples of unit tests for your application functions, so you're likely to find something useful! \n  \n\n::: \n\n::::\n\n\nThis is the final function in the `dev/01_start.R` file. In the next `golem` dev script (`dev/02_dev.R`), I'll cover development of your `golem` application. \n\n## Build\n\n\nThe `dev/02_dev.R` file is appropriately titled, '`Engineering`', and unlike the functions in the first script, these functions will be used repeatedly for creating files in the `R/` and `inst/` folders.\n\n### App files\n\nLet's start by examining the [contents of the `R/` folder](https://engineering-shiny.org/golem.html#r) in our new `golem` application:\n\n::: {.column-margin}\n![golem application files](app_files.png){width=\"90%\"}\n\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nR/\n├── app_config.R\n├── app_server.R\n├── app_ui.R\n└── run_app.R\n\n1 directory, 4 files\n```\n:::\n\n    \n`golem` applications structure shiny apps into three files: `R/app_ui.R`, `R/app_server.R`, and `R/run_app.R`.\n\n-   The `R/app_ui.R` and `R/app_server.R` scripts are `golem`'s version of `ui.R` and `server.R`\n\n-   `R/run_app.R` is a standalone app function, and \n\n-   `R/app_config.R` is used to set/get `golem` configuration settings (which we will cover more below).  \n\n#### [`app_ui.R`]{style=\"font-size: 1.30em\"}\n\n`app_ui.R` wraps the UI functions in `shiny::tagList()` (you'll see this function in shiny UI module functions, too).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide app_ui()\"}\napp_ui <- function(request) {\n  tagList(\n    # Leave this function for adding external resources\n    golem_add_external_resources(),\n    # Your application UI logic\n    fluidPage(\n      h1(\"gap\")\n    )\n  )\n}\n```\n:::\n\n\n`app_ui()` also contains a call to `golem_add_external_resources()`, which we used above to add the favicon image.  \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide golem_add_external_resources()\"}\ngolem_add_external_resources <- function() {\n  add_resource_path(\n    \"www\",\n    app_sys(\"app/www\")\n  )\n\n  tags$head(\n    favicon(),\n    bundle_resources(\n      path = app_sys(\"app/www\"),\n      app_title = \"gap\"\n    )\n    # Add here other external resources\n    # for example, you can add shinyalert::useShinyalert()\n  )\n}\n```\n:::\n\n\n#### [`app_server.R`]{style=\"font-size: 1.30em\"}\n\nThe contents of `app_server.R` file looks similar to a standard shiny server function: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide app_server()\"}\napp_server <- function(input, output, session) {\n  # Your application server logic\n}\n```\n:::\n\n\n#### [`app_config.R`]{style=\"font-size: 1.30em\"}\n\nThe `app_config.R` file contains the \"*internal mechanics for `golem`, notably for referring to values in the `inst/` folder, and to get values from the `config` file in the `inst/` folder*\". Two functions drive the internal mechanics of your `golem` app: `app_sys()` and  `get_golem_config()`\n\n-   `app_sys()` is a wrapper around the `system.file()` function, and it's used to *\"quickly refer to the files inside the `inst/` folder\"*\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide app_sys()\"}\napp_sys <- function(...) {\n  system.file(..., package = \"gap\")\n}\n```\n:::\n\n\n-   `get_golem_config()` is where you'll set `golem` configuration options (covered [here in the text](https://engineering-shiny.org/golem.html#manipulating-golem-config.yml)).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide get_golem_config()\"}\nget_golem_config <- function(\n  value,\n  config = Sys.getenv(\n    \"GOLEM_CONFIG_ACTIVE\",\n    Sys.getenv(\n      \"R_CONFIG_ACTIVE\",\n      \"default\"\n    )\n  ),\n  use_parent = TRUE,\n  # Modify this if your config file is somewhere else\n  file = app_sys(\"golem-config.yml\")\n) {\n  config::get(\n    value = value,\n    config = config,\n    file = file,\n    use_parent = use_parent\n  )\n}\n```\n:::\n\n\n`get_golem_config()` reads the `inst/golem-config.yml` configuration file:\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\ndefault:\n  golem_name: gap\n  golem_version: 0.0.0.9000\n  app_prod: no\nproduction:\n  app_prod: yes\ndev:\n  golem_wd: !expr here::here()\n```\n:::\n\n    \n[`golem-config.yml`](https://engineering-shiny.org/golem.html#manipulating-golem-config.yml) gives me access to the app version, name, and (development) working directory. This file is designed to add \"*production-only elements*\" and be \"*shareable across `golem` projects*\"\n\n#### [`run_app.R`]{style=\"font-size: 1.30em\"}\n    \n`run_app.R` is the exported function I'll use to run my `golem` app after loading/documenting/installing the package: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::load_all(\".\")\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nℹ Loading gap\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::document()\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nℹ Updating gap documentation\nℹ Loading gap\n\nRestarting R session...\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(gap)\ngap::run_app()\n```\n:::\n\n\n:::: {.callout-tip collapse='true'}\n\n## `golem` app functions\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nThe great thing about `golem` applications is that despite having a somewhat overwhelming amount of code and options, most of these can be ignored until you need to use them. `R/app_config.R` is a great example of this. The `get_golem_config()` function is a powerful tool for deploying apps in production, but you can get started developing your application without diving into the details. \n  \n\n::: \n\n::::\n\n\n\n\n<!--\n \n\n### [`golem`]{style=\"font-size: 1.30em\"} helper functions\n\n### [`golem`]{style=\"font-size: 1.30em\"} external resources\n\n### [`golem`]{style=\"font-size: 1.30em\"} internal datasets\n\n### [`golem`]{style=\"font-size: 1.30em\"} tests \n\n### [`golem`]{style=\"font-size: 1.30em\"} documentation \n\n### [`golem`]{style=\"font-size: 1.30em\"} code coverage\n\n-->\n    \n### [`Dependencies`]{style=\"font-size: 1.20em\"}\n\nDependency management is a necessary evil of package development. `shiny` has a large ecosystem of user-written add-on packages. To use the code from add-on packages in our application, we need a way to keep track of which function belongs to which package. \n\n::: {.column-margin}\n![golem app dependencies](dependencies.png){width=\"100%\"}\n\n:::\n\n\n**The `DESCRIPTION` file manages package-level dependencies.** The `Imports` field in the `DESCRIPTION` file specifies packages that my package uses, so the functions from these packages will be available for my package, but not for users (unless they use the `::` operator or load the package themselves).\n\n**The `NAMESPACE` file manages function-level access.** The `NAMESPACE` file manages the functions that are *exported* from my package (i.e., functions available to users who install my package), and the functions my package *imports* from other packages.\n\nThe `golem` text describes the difference between these files in the following way, \n\n> \"*The `DESCRIPTION` file dictates which packages have to be installed **when your application is installed***\"\n> \n> \"*The `NAMESPACE` file describes how your app interacts with the R session at run time, i.e. **when your application is launched***\"\n\n\nThe [`attachment` package](https://thinkr-open.github.io/attachment/) makes it easier to manage the dependencies in your `golem` application. It does this by looking through the files in your package to make sure everything is properly documented in the `NAMESPACE` and `DESCRIPTION` file (note that [these two files are not equivalent or connected](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports)).\n\nThe `att_amend_desc()` function removes a lot of the tedium involved in dependency management:  \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nattachment::att_amend_desc()\n```\n:::\n\n\nThis function adds the appropriate parameters to `golem-config.yml` and sets up function documentation in the `DESCRIPTION` file\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nSaving attachment parameters to yaml config file\nUpdating [app-name] documentation\nSetting `RoxygenNote` to \"7.2.3\"\n```\n:::\n\n\nIt loads the contents of our package (i.e. `devtools::load_all()`) and writes the `NAMESPACE` file\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nℹ Loading [app-name]\nWriting NAMESPACE\n```\n:::\n\n\nIt also writes the help files in the `man/` folder.\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nWriting run_app.Rd\n```\n:::\n\n\n:::: {.callout-tip collapse='true'}\n\n## `golem` app dependencies\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n\nManaging the dependencies in your app is an essential part of getting your application to deploy in a production environment, and this is a very helpful addition to your package development workflow (whether you're building an app package or standard R package).  \n  \n\n::: \n\n::::\n\n\n### [`Add modules`]{style=\"font-size: 1.20em\"} \n\n`golem` has functions for quickly creating modules and utility/helper functions in the `R/` folder. \n\n#### [`add_module()`]{style=\"font-size: 1.15em\"} \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::add_module(name = \"name_of_module1\", with_test = TRUE) \ngolem::add_module(name = \"name_of_module2\", with_test = TRUE) \n```\n:::\n\n\n### [`Add helper functions`]{style=\"font-size: 1.20em\"} \n\ngolem apps differentiates two types of helper functions: `uils_` and `fct_`. \n\n#### [`add_utils()`]{style=\"font-size: 1.10em\"} \n\n> **`uils_` functions:** \"*small functions that might be used several times in the application*\" ... \"*more 'topic centered', in the sense that they gather functions that relate to a specific feature of the application(+*\"\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::add_utils(\"helpers\", with_test = TRUE)\n```\n:::\n\n\n#### [`add_fct()`]{style=\"font-size: 1.10em\"} \n\n> **`fct_` functions:** \"*larger functions that are more central to the application*\" ... \"*more used as a place to put miscellaneous functions*\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ngolem::add_fct(\"helpers\", with_test = TRUE)\n```\n:::\n\n    \n`with_test = TRUE` ensures these functions will also create test files in `tests/`\n    \n### [`External resources`]{style=\"font-size: 1.20em\"}\n\n`dev/02_dev.R` includes `golem` wrappers for including CSS, JavaScript, and SASS files to the `inst/app/www/` folder:\n\n#### JavaScript files \n\nYou can add JavaScript to your application using the [`golem::add_js_file(\"script\")`](https://thinkr-open.github.io/golem/reference/add_files.html) and [`golem::add_js_handler(\"handlers\")`](https://thinkr-open.github.io/golem/reference/add_files.html) functions. \n\nThe golem text has an entire chapter dedicated to JavaScript which is worth reading (and I'll demonstrate an example with these functions below).\n\n#### App styling \n\nYou can add CSS or SASS styling to your application using the [`golem::add_css_file(\"custom\")`](https://thinkr-open.github.io/golem/reference/add_files.html) and  [`golem::add_sass_file(\"custom\")`](https://thinkr-open.github.io/golem/reference/add_files.html) functions, too.\n\n### [`Add internal datasets`]{style=\"font-size: 1.10em\"}\n\nIf you application uses data, you can add it to your application with the `usethis` functions (`use_data_raw()` or `use_data()`). I recommend reading the [data section](https://r-pkgs.org/data.html) of R packages (and [this section](https://r-pkgs.org/misc.html#sec-misc-inst) on adding data to `inst/extdata`).\n\n#### [`use_data_raw()`]{style=\"font-size: 1.10em\"}\n\nThe `data-raw/` folder is for *'data-creating script'* that was used to create the version of the data in your app-package. Newly created `.R` scripts in `use_data_raw()` will have a call to `use_data()`.\n\n#### [`use_data()`]{style=\"font-size: 1.10em\"}\n\nThe `data/` folder stores the data files created from the scripts in `data-raw/` (and any other data you need in your app-package). \n\n> \"*store R objects and make them available to the user...in `data/`*\"\n\n#### [`inst/extdata`]{style=\"font-size: 1.10em\"}\n\nAny other data you'd like to make available to users of your package should be stored in `inst/extdata/`\n\n> \"*store data in some raw, non-R-specific form and make it available to the user...in `inst/extdata/`*\"\n\n### [`Tests`]{style=\"font-size: 1.20em\"}\n\nThe `tests/` folder was created in `dev/01_start.R` with [`golem::use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html), which is a wrapper around `usethis::use_testthat()`\n\nIn `dev/02_dev.R`, the  [`golem::add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) and [`golem::add_utils()`/`golem::add_fct()`](https://thinkr-open.github.io/golem/reference/utils_files.html) functions also include a `with_test = TRUE` argument, which creates a test file in the `tests/` folder.\n\n### [`Documentation`]{style=\"font-size: 1.20em\"}\n\nR package vignettes contain high-level, user-friendly explanations of the package, which includes a narrative that describes the functions, data, and behavior of the package. For `shiny` app-packages, the following types of documentation might be included in the vignettes:\n\n::: {layout-ncol=2}\n\n### \n\n1. Introduction to the package   \n\n2. Installation guide\n\n3. Usage examples\n\n4. Description of the application and modules\n\n### \n\n5. Application workflow\n\n6. Data preparation\n\n7. Troubleshooting\n\n8. FAQs\n\n9. Advanced usage\n\n10. Details on functions and datasets\n\n11. References and Contact information\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_vignette(\"gap\")\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\n✔ Setting active project to '/Users/mjfrigaard/projects/dev/gap'\n✔ Adding 'knitr' to Suggests field in DESCRIPTION\n✔ Adding 'rmarkdown' to Suggests field in DESCRIPTION\n✔ Adding 'knitr' to VignetteBuilder\n✔ Adding 'inst/doc' to '.gitignore'\n✔ Creating 'vignettes/'\n✔ Adding '*.html', '*.R' to 'vignettes/.gitignore'\n✔ Writing 'vignettes/gap.Rmd'\n• Modify 'vignettes/gap.Rmd'\n```\n:::\n\n\nThe vignette file opens with the title matching the argument passed to `use_vignette()`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::build_vignettes()\n```\n:::\n\n\n\n### [`Code Coverage`]{style=\"font-size: 1.20em\"}\n\nTest code coverage measures the extent to which the test cases cover the possible execution paths in the package codebase--its a way to ensure that the tests are robust enough to verify that the code behaves as expected.\n\nThere are two functions/methods used to calculate code coverage in your application: `usethis::use_coverage()` and `covrpage::covrpage()`.\n\n#### [`usethis::use_coverage()`]{style=\"font-size: 1.10em\"}\n\n`use_coverage()` is part of the `usethis` package and can be run interactively during development: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_coverage()\n```\n:::\n\n\n````default\n✔ Setting active project to '/Users/mjfrigaard/projects/pkgs/apps/gap'\n````\n\n\n\n#### [`covrpage::covrpage()`]{style=\"font-size: 1.10em\"}\n\nInstall `covrpage` using the following: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# install.packages(\"remotes\")\nremotes::install_github('yonicd/covrpage')\nlibrary(covrpage)\n```\n:::\n\n\nTo use `covrpage`, run the following \n\n\n### [`CI`]{style=\"font-size: 1.20em\"}\n\n\n\n\n## Use \n\n### Writing code\n\nNew modules and utility functions can be created with [`golem::add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) or [`golem::add_utils()`/`golem::add_fct()`](https://thinkr-open.github.io/golem/reference/file_creation.html)\n\n-   These functions are added to the `R/` folder and include [`@noRd`](https://style.tidyverse.org/documentation.html#internal-functions) by default (which must be removed create the `.Rd` files in the `man/` folder)\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # UI module template -------------------\n    #' test UI Function\n    #'\n    #' @description A shiny Module.\n    #'\n    #' @param id,input,output,session Internal parameters for {shiny}.\n    #'\n    #' @noRd\n    #'\n    #' @importFrom shiny NS tagList\n    # server module template ---------------\n    #' test Server Functions\n    #'\n    #' @noRd\n    ```\n    :::\n\n    :::\n\n-   UI module functions end with a `_ui` suffix:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/mod_plot.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    #' plot UI Function\n    #'\n    #' @param id\n    #'\n    #' @return shiny UI module\n    #' @export mod_plot_ui\n    #'\n    #' @importFrom shiny NS tagList tags\n    #' @importFrom shiny plotOutput verbatimTextOutput\n    mod_plot_ui <- function(id) {\n      ns <- shiny::NS(id)\n      shiny::tagList(\n        shiny::tags$br(),\n        shiny::tags$blockquote(\n          shiny::tags$em(\n            shiny::tags$h6(\n              \"The code for this application comes from the \",\n              shiny::tags$a(\"Building web applications with Shiny\",\n                href = \"https://rstudio-education.github.io/shiny-course/\"\n              ),\n              \"tutorial\"\n            )\n          )\n        ),\n        shiny::plotOutput(outputId = ns(\"scatterplot\"))\n      )\n    }\n    ```\n    :::\n\n    :::\n\n-   Server module functions end with a `_server` suffix:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `R/mod_plot.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    #' plot Server Functions\n    #'\n    #' @param id module id\n    #' @param var_inputs inputs from mod_var_input\n    #'\n    #' @return shiny server module\n    #' @export mod_plot_server\n    #'\n    #' @importFrom shiny NS moduleServer reactive\n    #' @importFrom tools toTitleCase\n    #' @importFrom shiny renderPlot\n    #' @importFrom stringr str_replace_all\n    #' @importFrom ggplot2 labs theme_minimal theme\n    mod_plot_server <- function(id, var_inputs) {\n      shiny::moduleServer(id, function(input, output, session) {\n        movies <- gap::movies\n    \n        inputs <- shiny::reactive({\n          plot_title <- tools::toTitleCase(var_inputs$plot_title())\n          list(\n            x = var_inputs$x(),\n            y = var_inputs$y(),\n            z = var_inputs$z(),\n            alpha = var_inputs$alpha(),\n            size = var_inputs$size(),\n            plot_title = plot_title\n          )\n        })\n    \n        output$scatterplot <- shiny::renderPlot({\n          plot <- point_plot(\n            df = movies,\n            x_var = inputs()$x,\n            y_var = inputs()$y,\n            col_var = inputs()$z,\n            alpha_var = inputs()$alpha,\n            size_var = inputs()$size\n          )\n          plot +\n            ggplot2::labs(\n              title = inputs()$plot_title,\n              x = stringr::str_replace_all(tools::toTitleCase(inputs()$x), \"_\", \" \"),\n              y = stringr::str_replace_all(tools::toTitleCase(inputs()$y), \"_\", \" \")\n            ) +\n            ggplot2::theme_minimal() +\n            ggplot2::theme(legend.position = \"bottom\")\n        })\n      })\n    }\n    \n    ## To be copied in the UI\n    # mod_plot_ui(\"plot_1\")\n    \n    ## To be copied in the server\n    # mod_plot_server(\"plot_1\")\n    \n    ```\n    :::\n\n    :::\n\n    -   See all of the modules I use in this application [here on GitHub examples](https://github.com/mjfrigaard/shiny-app-setups/blob/main/gap/R)\\\n    \n\n\n:::: {.callout-note collapse='false'}\n\n## Module names\n\n::: {style='font-size: 1.05em; color: #696969;'}\n\nIncluding `mod` in the name of module scripts and functions makes it easier to separate them from other functions in my package namespace, if I'm using tab-completion, or if I'm searching for a particular file using `Ctrl` + `.`:\n\n::: {#fig-go-to .column}\n![](go-to-file.png){height='90%' width='90%' fig-align='center'}\n\n**Go to File/Function** in RStudio\n:::\n\n::: \n\n::::\n\n\n-   Include tests for new modules and functions using the `with_test = TRUE` argument\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code  code-fold=\"false\"}\n    tests/testthat/\n                ├── _snaps\n                ├── test-golem-recommended.R\n                ├── test-golem_utils_server.R\n                ├── test-golem_utils_ui.R\n                ├── test-mod_plot.R\n                ├── test-mod_plot_utils_server.R\n                └── test-mod_var_input.R\n    \n    2 directories, 6 files\n    ```\n    :::\n\n    :::\n\n\n\n\n\n### Adding resources\n\n-   To include other files (like images), add the image file to `inst/app/www/`, then add the `www/` to the path (see example UI code below)\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # add icon\n    shiny::tags$img(src = \"www/shiny.png\")\n    ```\n    :::\n\n    :::\n    \n-   If I wanted to include images in their own folder (like `images/`), I can use `golem::addResourcePath()` to add the name of the sub-folder to `inst/app/`\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # add icon\n    golem::add_resource_path(\n              prefix = 'images', \n              directoryPath = system.file('app/images', package = 'gap'))\n    ```\n    :::\n\n    :::\n    \n-   Now I can add the image file to the `inst/app/www/images/` folder and include the following code in the UI: \n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    # add icon\n    shiny::tags$img(src = \"www/images/golem-hex.png\")\n    ```\n    :::\n\n    :::\n\n-   In `R/app_ui.R`, the `app_ui()` function contains the UI layout functions (`fluidPage()`, `sidebarLayout()`, etc.), and a call to `golem_add_external_resources()`:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the updated `R/app_ui.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    #' The application User-Interface\n    #'\n    #' @param request Internal parameter for `{shiny}`.\n    #'     DO NOT REMOVE.\n    #' @import shiny\n    #' @noRd\n    app_ui <- function(request) {\n      shiny::tagList(\n        # Leave this function for adding external resources\n        golem_add_external_resources(),\n        # Your application UI logic\n        shiny::fluidPage(\n          shiny::tags$h1(\"gap\"),\n          shiny::sidebarLayout(\n            shiny::sidebarPanel(\n              mod_var_input_ui(\"vars\")\n            ),\n            shiny::mainPanel(\n              # add shiny hex in www/\n              shiny::tags$img(src = \"www/shiny.png\"),\n              mod_plot_ui(\"plot\"),\n              # add golem hex (in www/images/)\n              shiny::fluidRow(\n                shiny::tags$em(shiny::tags$h4(\n                  \"Brought to you by: \",\n                  shiny::tags$img(src = \"www/images/golem-hex.png\")\n                ))\n              )\n            )\n          )\n        )\n      )\n    }\n    ```\n    :::\n\n    :::\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view `golem_add_external_resources()`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\"}\n    # this is also included in the app_ui.R script\n    golem_add_external_resources <- function() {\n      add_resource_path(\n        \"www\",\n        app_sys(\"app/www\")\n      )\n      tags$head(\n        favicon(),\n        bundle_resources(\n          path = app_sys(\"app/www\"),\n          app_title = \"gap\"\n        )\n        # Add here other external resources\n        # for example, you can add shinyalert::useShinyalert()\n      )\n    }\n    ```\n    :::\n\n    :::\n    \n-   Now when I run `devtools::load_all()`, `devtools::document()`, install/restart, and load the package, I see the images properly rendered with the application:\n\n### Deploy\n\n-   The final step in the guided tour contains functions for deploying a new application to Posit Connect or Docker (it opens automatically after completing the `dev/02_dev.R`)\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view code in `dev/03_deploy.R`*\n    :::\n\n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    ## Run checks ----\n    ## Check the package before sending to prod\n    devtools::check()\n    rhub::check_for_cran()\n    \n    # Deploy\n    \n    ## Local, CRAN or Package Manager ----\n    ## This will build a tar.gz that can be installed locally,\n    ## sent to CRAN, or to a package manager\n    devtools::build()\n    \n    ## RStudio ----\n    ## If you want to deploy on RStudio related platforms\n    golem::add_rstudioconnect_file()\n    golem::add_shinyappsio_file()\n    golem::add_shinyserver_file()\n    \n    ## Docker ----\n    ## If you want to deploy via a generic Dockerfile\n    golem::add_dockerfile_with_renv()\n    \n    ## If you want to deploy to ShinyProxy\n    golem::add_dockerfile_with_renv_shinyproxy()\n    ```\n    :::\n\n    :::\n\n    -   RStudio (Posit) Connect\n        -   [`golem::add_rstudioconnect_file()`](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html), [`golem::add_shinyappsio_file()`](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html), and [`golem::add_shinyserver_file()`](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html)\n    -   Docker\n        -   [`golem::add_dockerfile_with_renv()`](https://thinkr-open.github.io/golem/reference/dockerfiles.html) and [`golem::add_dockerfile_with_renv_shinyproxy()`](https://thinkr-open.github.io/golem/reference/dockerfiles.html)\n        \n    -   I'll deploy my app using shinyapps.io, so after running `golem::add_shinyappsio_file()` I will see the following output and a new `app.R` file. \n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the output from `golem::add_shinyappsio_file()`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    golem::add_shinyappsio_file()\n    ── Creating _disable_autoload.R ──────────────────────────────────────────────────────\n    ✔ Created\n    ✔ Setting active project to '/Users/mjfrigaard/projects/gap'\n    ✔ Adding '^app\\\\.R$' to '.Rbuildignore'\n    ✔ Adding '^rsconnect$' to '.Rbuildignore'\n    ✔ Adding 'pkgload' to Imports field in DESCRIPTION\n    • Refer to functions with `pkgload::fun()`\n    ✔ File created at /Users/mjfrigaard/projects/gap/app.R\n    To deploy, run:\n    • rsconnect::deployApp()\n    \n    • Note that you'll need to upload the whole package to ShinyApps.io\n    ```\n    :::\n\n    :::\n    \n    -   The app.R contents\n    \n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the contents of `app.R`*\n    :::\n    \n    ::: {style=\"font-size: 0.80em;\"}\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    # Launch the ShinyApp (Do not remove this comment)\n    # To deploy, run: rsconnect::deployApp()\n    # Or use the blue button on top of this file\n    \n    pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)\n    options( \"golem.app.prod\" = TRUE)\n    gap::run_app() # add parameters here (if any)\n    ```\n    :::\n\n    :::\n\nBuilding an application with `golem` is very similar to developing an R package. New code files are placed in `R/`, external resources are placed in `inst/`, etc. I'll cover creating modules and utility functions in the next section.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}