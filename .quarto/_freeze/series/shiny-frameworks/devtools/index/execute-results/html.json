{
  "hash": "f3271de5dd3241ae6a6f7471dca480cb",
  "result": {
    "markdown": "---\ntitle: \"Creating a shiny app-package\"\nsubtitle: \"Building a shiny app-package with `devtools` & `usethis`\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-05-01\"\ncategories: [shiny, golem, packages]\nimage: \"image.png\"\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n  collapse: true\n---\n\n\n\n\n\nIn this post, I'll be using [`devtools`](https://devtools.r-lib.org/) and [`usethis`](https://usethis.r-lib.org/) to develop  [`duap`](https://github.com/mjfrigaard/duap), an R package that *contains* a shiny application (i.e., *`devtools`/`usethis` app-package*).\n\n\n\n:::: {.callout-important collapse='false'}\n\n## Warning\n\n::: {style='font-size: 1.05em; font-weight: bold; color: #696969;'}\n\n_This is a long post because I cover many of the steps used to build R packages. If you'd prefer to more information on developing R packages, I suggest starting with [the whole game section](https://r-pkgs.org/whole-game.html)._\n\n::: \n\n::::\n\n\nThe R package development workflow is well documented in [R Packages ](https://r-pkgs.org/whole-game.html). I've written this post because I frequently encountered R developers who are comfortable with shiny application development, but have never developed an R package. \n\nThis post walks through converting an existing shiny application into an app-package *in detail* because R package development differs from creating a standalone shiny application. My hope is that by reading this will prevent you from having to rebuild your application entirely from scratch.\n\nI've organized the app-package development process into three areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the steps required to begin building a shiny app withing a package framework (from the console and IDE).\n\n  -   **Build** covers the development process, which includes writing and storing code, data, external resources (i.e., data), documentation, and testing. \n\n  -   **Use** shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE).\n\nThe GitHub repo with the code for `duap` is located  [here](https://github.com/mjfrigaard/duap) if you'd like to follow along.\n\n# Why an app-package?\n\nBuilding a shiny app as a package is [highly recommended](https://mastering-shiny.org/scaling-packaging.html?q=highly%20recommend#scaling-packaging). Both the [`golem`](https://thinkr-open.github.io/golem/) and  [`leprechaun`](https://leprechaun.opifex.org/#/) frameworks convert your shiny application into an R package, and while a package might seem like overkill, when you consider the additional development tools accessible with R packages, I think you'll agree shiny applications are a great fit for R packages.\n\n# Start\n\nTo create a shiny app package, I'll install [`devtools`](https://devtools.r-lib.org/) (which also installs [`usethis`](https://usethis.r-lib.org/)).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ninstall.packages(\"devtools\")\nlibrary(devtools)\n```\n:::\n\n\n## From a Shiny app \n\nConverting an existing shiny app into an R package is covered in [Mastering Shiny](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app), but it doesn't cover *how* this conversion happens. This section will assume your app is a bare-bones shiny app (like this bare-bones shiny app [`bbsa`](https://github.com/mjfrigaard/bbsa)).\n\n### What makes a package?\n\nIf you've read R packages, you'll know that \n\n\n## From the Console\n\nIf I am creating a package from the console, the function for building a new package is `usethis::create_package()`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::create_package(path = \"path/to/app-package/folder\")\n```\n:::\n\n\nA new RStudio session will open (and the name of the project--i.e., the name of the `.Rproj` file--will be identical to the package name).\n\n## From the Project Wizard\n\nIf I am using RStudio's **New Project Wizard** to create a new shiny app package, I'd see the following defaults:\n\n::: {#fig-rpkg-setup .column}\n![](rpkg-setup.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nDefault `usethis::create_package` project setup\n:::\n\nThe new package built from the console will have the following folder and files:\n\n\n\n````default\nduap/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  └── duap.Rproj\n  \n1 directory, 3 files\n````\n\n\nPackages built from the **New Project Wizard** will have a few additional folders and files:\n\n\n\n````default\nduap/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  │   └── hello.R\n  ├── man/\n  │   └── hello.Rd\n  ├── myRPkg.Rproj\n  └── renv/\n      ├── activate.R\n      ├── sandbox/\n      │   └── R-4.2\n      └── settings.dcf\n\n4 directories, 7 files\n````\n\n\nThese additional files are:\n\n-   `hello.R` in the `R/` folder\\\n-   `hello.Rd` in the `man/` folder\\\n-   a `renv/` folder for package management\n\n`R/hello.R` and `man/hello.Rd` are boilerplate files and can be deleted, but both package setups have a `DESCRIPTION`, `NAMESPACE`, `R/` folder, and `.Rproj` file. These four items can be thought of as the 'minimal package' setup required to access RStudio's **Build** tools.\n\n\n\n# Build\n\nI'll work through a 'minimum viable product (MVP) using the app code in the [`vanilla-shiny`](https://github.com/mjfrigaard/shiny-app-setups/tree/main/vanilla-shiny) repo.\n\n## Metadata files\n\nR packages have two metadata files: `DESCRIPTION` and `NAMESPACE`. Neither of these files have extensions, and both contain vital information for your package to function properly.\n\nWe'll manually edit the `DESCRIPTION` file, but the `NAMESPACE` file is automatically generated during the development process.\n\n### DESCRIPTION\n\nThe `DESCRIPTION` file plays an important role in R packages--that's why creating this file is the first step when [converting an existing app](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) (and when creating a [new `golem` apps](https://thinkr-open.github.io/golem/articles/a_start.html#fill-the-description)).\n\n\n\n:::: {.callout-note collapse='false'}\n\n## `DESCRIPTION` files\n\n::: {style='font-size: 1.05em; color: #696969;'}\n\n![](desc.png){height='15%' width='15%' fig-align='left'}\n\n  *'RStudio and `devtools` consider any directory containing `DESCRIPTION` to be a package'* - [R Packages](https://r-pkgs.org/description.html#the-description-file)\n\n::: \n\n::::\n\n\nThe initial `DESCRIPTION` file in `duap` is below:\n\n\n\n\n````default\nPackage: duap\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", \n    role = c(\"aut\", \"cre\"),\n    comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n````\n\n\n\nThe package name is automatically added, but the remaining fields need to be completed (consult [R packages](https://r-pkgs.org/description.html#the-description-file) for more information on filling out the `DESCRIPTION` file).\n\nThe `DESCRIPTION` file in the `duap` prompts the RStudio IDE to activate the **Build** tools pane (see below):\n\n::: {#fig-rpkg-ide .column}\n![](rpkg-ide.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage **Build** tools\n:::\n\n## Application code\n\nThe contents of the `app.R` and `utils.R` need to be moved into the `R/` folder. When developing R packages, new `.R` files are created with `usethis::use_r()`. \n\n### use_r()\n\nI'm going to create `duap` using [modules](https://mastering-shiny.org/scaling-modules.html#module-motivation) to separate the app into the following digestible mental 'chunks':\n\n-   The app collects the inputs in the `shiny::sidebarPanel()`\n\n-   These values are then used to create a plot in the `shiny::mainPanel()`\n\nBased on this layout, I'll create one module to collect and return the user-inputs (`mod_var_input`), and another module to display the plot (`mod_display_plot`). \n\nI'll create these files using [`usethis::use_r()`](https://usethis.r-lib.org/reference/use_r.html) below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_r(\"mod_var_input\")\n```\n:::\n\n\n````default\n✔ Setting active project to '/Users/mjfrigaard/projects/duap'\n• Modify 'R/mod_var_input.R'\n• Call `use_test()` to create a matching test file\n````\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_r(\"mod_display_plot\")\n```\n:::\n\n\n````default\n• Modify 'R/mod_display_plot.R'\n• Call `use_test()` to create a matching test file\n````\n\n\nThe display module also relies on a utility function (`plot_points()`), so I need to create a script for the utility function, which I put in a file with a name similar to the module it belongs to (i.e., `utils_display_plot`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_r(\"utils_display_plot\")\n```\n:::\n\n\n````default\n• Modify 'R/utils_display_plot.R'\n• Call `use_test()` to create a matching test file\n````\n\n\nFinally, I'll place the modules into basic ui and server arguments in a call to `shiny::shinyApp()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_r(\"moviesApp\")\n```\n:::\n\n\n````default\n• Modify 'R/moviesApp.R'\n• Call `use_test()` to create a matching test file\n````\n\n\nModules consist of two functions; one in the UI (with a `_ui` suffix), and another in the server (with a `_server` suffix), but it's common practice to combine them in a single file.\n\nBelow is the `mod_var_input` module: \n\n-   The ui function is stored in `mod_var_input_ui`:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the UI function in `R/mod_var_input/R`*\n    :::\n\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    mod_var_input_ui <- function(id) {\n      ns <- shiny::NS(id)\n      shiny::tagList(\n        shiny::selectInput(\n          inputId = ns(\"y\"),\n          label = \"Y-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"audience_score\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"x\"),\n          label = \"X-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"imdb_rating\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"z\"),\n          label = \"Color by:\",\n          choices = c(\n            \"Title Type\" = \"title_type\",\n            \"Genre\" = \"genre\",\n            \"MPAA Rating\" = \"mpaa_rating\",\n            \"Critics Rating\" = \"critics_rating\",\n            \"Audience Rating\" = \"audience_rating\"\n          ),\n          selected = \"mpaa_rating\"\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"alpha\"),\n          label = \"Alpha:\",\n          min = 0, max = 1, step = 0.1,\n          value = 0.5\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"size\"),\n          label = \"Size:\",\n          min = 0, max = 5,\n          value = 2\n        ),\n        shiny::textInput(\n          inputId = ns(\"plot_title\"),\n          label = \"Plot title\",\n          placeholder = \"Enter plot title\"\n        )\n      )\n    }\n    ```\n    :::\n\n    \n-   The server function is stored in `mod_var_input_server`:\n\n    ::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n    *Click on Code to view the server function in `R/mod_var_input/R`*\n    :::\n    \n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    mod_var_input_server <- function(id) {\n    \n      shiny::moduleServer(id, function(input, output, session) {\n        return(\n          list(\n            \"x\" = shiny::reactive({\n              input$x\n            }),\n            \"y\" = shiny::reactive({\n              input$y\n            }),\n            \"z\" = shiny::reactive({\n              input$z\n            }),\n            \"alpha\" = shiny::reactive({\n              input$alpha\n            }),\n            \"size\" = shiny::reactive({\n              input$size\n            }),\n            \"plot_title\" = shiny::reactive({\n              input$plot_title\n            })\n          )\n        )\n      })\n    }\n    ```\n    :::\n\n    \n    -   View the display module [here.](https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/mod_display_plot.R) \n    \n### Standalone app function \n\nAfter I've written the modules and utility functions, I need to add these into a [standalone app function](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) `moviesApp()` (stored in `R/moviesApp.R`).\n\n-   This file contains a call to `shiny::shinyApp()` and includes the module functions (in their relative positions)\n\n    -   Note the `id`s in each module function pair must match to create the shared namespace. \n    \n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    moviesApp <- function() {\n      # call to shinyApp()\n      shiny::shinyApp(\n        \n        # UI ----\n        ui = shiny::fluidPage(\n          shiny::sidebarLayout(\n            shiny::sidebarPanel(\n              # UI input module ----\n              mod_var_input_ui(\"vars\")\n            ),\n            # UI display module ----\n            shiny::mainPanel(\n              mod_display_plot_ui(\"plot\")\n            )\n          )\n        ),\n        \n        server = function(input, output, session) {\n          # server input module (capturing inputs) ----\n          selected_vars <- mod_var_input_server(\"vars\")\n          # server display module (rendering outputs) ----\n          mod_display_plot_server(\"plot\", \n                                  var_inputs = selected_vars)\n        }\n      )\n    }\n    ```\n    :::\n\n\n\n### roxygen2\n\nWhen I'm confident my code works (and the app renders), I want to make sure these functions are properly documented by describing each function with [`roxygen2`](https://roxygen2.r-lib.org/) tags. To quickly insert a `roxygen2` skeleton, use the RStudio IDE (or the keyboard shortcut: `Option` + `Shift` + `Command` + `R`)\n\nThe standard `roxygen2` skeleton tags include `@param`, `@return`, `@export`, and `@examples`\n\n- `@param` lists the existing arguments (or variables) for the function\n\n- `@return` should be a description of the object/side-effect/thing the function produces (and any warnings or errors if used incorrectly)\n\nThe following [`roxygen2`](https://roxygen2.r-lib.org/) tags will be used to update the `NAMESPACE` file (which you should never edit manually!)\n\n- `@export` will make the function available to other people when they use your package \n\n- `@importFrom` vs. `@import`   \n    -   it's always a good idea to be explicit about the external functions and packages you're using, so most of the time you should use `@importFrom` (there's even a handy helper `usethis::use_import_from(\"package\", \"function\")`)   \n    -   `@import` should only be used when [\"*you make such heavy use of so many functions from another package that you want to import its entire namespace. This should be relatively rare.*\"](https://r-pkgs.org/dependencies-in-practice.html#in-code-below-r)\n\n`roxygen2` imports and exports are covered in more depth [in R packages.](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports).\n\nYou can see the full code for `point_plot()` below (or follow [this link](https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/) to view all the modules in the `R/` folder):\n\n::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n*Click on Code to view*\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#' Plot points (shiny)\n#'\n#' @param df input dataset (tibble or data.frame)\n#' @param x_var x variable\n#' @param y_var y variable\n#' @param col_var color variable\n#' @param alpha_var alpha value\n#' @param size_var size value\n#'\n#' @return plot object\n#' @export point_plot\n#'\n#' @importFrom ggplot2 ggplot aes geom_point\n#'\n#' @examples\n#' require(duap)\n#' movies <- duap::movies\n#' point_plot(df = movies,\n#'   x_var = \"critics_score\",\n#'   y_var = \"imdb_rating\",\n#'   col_var = \"critics_rating\",\n#'   alpha_var = 1/3,\n#'   size_var = 2)\n#' }\npoint_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n```\n:::\n\n\n:::: {.callout-tip collapse='true'}\n\n## Tip: `roxygen2` skeleton\n\n::: {style='font-size: 1.05em; font-style: italic; color: #696969;'}\n\n*As well as generating `.Rd` files, `roxygen` will also create a `NAMESPACE` for you, and will manage the `Collate` field in `DESCRIPTION`*\n\n::: {#fig-roxygen2-tags .column}\n![](ide-roxygen-skeleton.png){height='100%' width='100%' fig-align='center'}\n\nStandard `roxygen2` skeleton\n:::\n\n::: \n\n::::\n\n\n## Test drive\n\n::: {style='font-size: 1.10em; font-weight: bold;'}\n\n> \"The `load_all()` function is arguably the most important part of the devtools workflow.\" - [R Packages, 2ed](https://r-pkgs.org/workflow101.html#sec-workflow101-load-all)\n\n:::\n\nYou'll use the `devtools::load_all()` function frequently while you're developing your app-package. `load_all()` simulates how your functions will work when someone else uses your package. This removes the need to define them in the global workspace. It also gives you access to the functions from any add-on packages you've imported into your `NAMESPACE` (i.e., you won't need to run `library()`). \n\n\nI highly recommend using the keyboard shortcuts: \n\n\n\n:::: {.callout-important title=\"`devtools::load_all()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n:::\n\n::::\n\nThe full benefits of using `load_all()` are covered in [R packages.](https://r-pkgs.org/workflow101.html#benefits-of-load_all)\n\n### load_all()\n\nAfter documenting everything with `roxygen2`, I want to make sure none of the functions are in my **Environment** (remove with `rm()` if necessary) and load the functions with [`devtools::load_all()`](https://r-pkgs.org/whole-game.html#sec-whole-game-load-all).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::load_all()\n```\n:::\n\n\n````default\nℹ Loading duap\n````\n\n\n## NAMESPACE & Help pages \n\n`devtools::document()` processes the `roxygen2` tags to generate the `NAMESPACE` and the `.Rd` files in the `man/` folder. The `.Rd` files are used to access the help files (i.e., `package::function()` can be accessed with `??function`).\n\nManaging your package [NAMESPACE file](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-NAMESPACE-workflow) is not something you do directly: it's handled with the `roxygen2` tags we covered above. The keyboard shortcuts for `devtools::document()` are below:\n\n\n:::: {.callout-important title=\"`devtools::document()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>\n\n:::\n\n::::\n\n### document()\n\nRun `devtools::document()` when you've written a new function with `roxygen2` tags or included a package in the `DESCRIPTION` file under `Imports:`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::document()\n```\n:::\n\n\n````default\nℹ Updating duap documentation\nFirst time using roxygen2. Upgrading automatically...\nSetting `RoxygenNote` to \"7.2.3\"\nℹ Loading duap\nWriting NAMESPACE\nWriting mod_plot_ui.Rd\nWriting mod_plot_server.Rd\nWriting point_plot.Rd\nWriting mod_var_input_ui.Rd\nWriting mod_var_input_server.Rd\nWriting moviesApp.Rd\n````\n\n\n#### ***NAMESPACE != DESCRIPTION***\n\nIt's important to understand that `devtools::document()` will use the `roxygen2` tags to create the `man/*.Rd` files and update the `NAMESPACE`, but **`devtools::document()` does not update the `Imports:` section in the `DESCRIPTION`.** \n\nTo add packages dependencies to the `DESCRIPTION`, you'll need to use the [`usethis::use_package()` function](https://usethis.r-lib.org/reference/use_package.html). Read more on this topic in [Confusion about `Imports` ](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports).\n\nThe table below shows the connection between `roxygen2` tags, the resulting `NAMESPACE` entry, and what should be listed in the `DESCRIPTION`. \n\n::: {style=\"font-size: 0.80em;\"}\n\n\n\n:::: {.callout-note collapse='false'}\n\n## `roxygen2`, `NAMESPACE` & `DESCRPTION`\n\n::: {style='font-size: 1.05em; color: #696969;'}\n\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> roxygen2 tag </th>\n   <th style=\"text-align:left;\"> NAMESPACE directive </th>\n   <th style=\"text-align:right;\"> Added in DESCRIPTION </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> @importFrom </td>\n   <td style=\"text-align:left;\"> importFrom() : import selected object from another NAMESPACE </td>\n   <td style=\"text-align:right;\"> Nothing </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> @import </td>\n   <td style=\"text-align:left;\"> import(): import all objects from another package’s NAMESPACE. </td>\n   <td style=\"text-align:right;\"> Imports: </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> @export </td>\n   <td style=\"text-align:left;\"> export() : export the function, method, generic, or class so it’s available outside of the package (in the NAMESPACE) </td>\n   <td style=\"text-align:right;\"> Nothing </td>\n  </tr>\n</tbody>\n</table>\n\n::: \n\n::::\n\n\n:::\n\n## Checking installation\n\nAfter loading and documenting the `duap` package, I want to make sure I can install the package into my library with [`devtools::install()`](https://r-pkgs.org/whole-game.html#install). The keyboard shortcut for `devtools::install()` is below:\n\n:::: {.callout-important title=\"`devtools::document()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>\n\n:::\n\n::::\n\n### install()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndevtools::install()\n```\n:::\n\n\n````default\n── R CMD build ────────────────────────────────────────────────────────────────\n✔  checking for file ‘/Users/mjfrigaard/projects/duap/DESCRIPTION’ ...\n─  preparing ‘duap’: (1.8s)\n✔  checking DESCRIPTION meta-information\n─  checking for LF line-endings in source and make files and shell scripts (520ms)\n─  checking for empty or unneeded directories\n   Omitted ‘LazyData’ from DESCRIPTION\n─  building ‘duap_0.1.0.tar.gz’\n   \nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD INSTALL \n  --install-tests \n* installing to library ...\n* installing *source* package ‘duap’ ...\n** using staged installation ...\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (duap)\n````\n\n\nRestart your R session and ensure you have a clean workspace:\n\n\n\n````default\n   Restarting R session...\n\n* Project '~/projects/duap' loaded. [renv 0.16.0]\n````\n\n\nThen load your package with `library()`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(duap)\n```\n:::\n\n\nYou can also use **Install** icon in the **Build** pane, which installs the package, restarts the R session, and loads the package all with one click!\n\n::: {#fig-build-install .column}\n![](build-install.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n**Build** install package\n:::\n\n::: {#fig-build-restart .column}\n![](build-restart.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n**Build** restart and load\n:::\n\n#### **Recap: the `R/` folder**\n\nThe sequence I've demonstrated above (create `.R` file, write function, document with `roxygen2`, load, document, install) is the 'minimal version' of the [full development workflow](https://r-pkgs.org/whole-game.html). \n\nOnce a 'beta' version of the app is deployed, you will want to come back to the app to refactor, write tests, and make sure all the items in `devtools::check()` pass.\n\nStoring the application's code in the `R/` folder and (using RStudio's build tools) keeps files organized, well documented, and self-contained:\n\n-   All the code is stored in the `R/` folder\n\n-   I've separated my code into smaller pieces (modules) that can be tested independently (more on this later)\n\n-   My dependencies are being managed by `roxygen2` and `devtools::document()`, which will update the `NAMESPACE` with any functions tagged with `@importFrom` (or `@import`)    \n    -   I can also access functions I've written *outside* by adding `@export`\n\n\n::: {#fig-pkg-man .column}\n![](pkg-man.png){width=\"70%\" fig-align=\"center\"}\n\nFunction documentation in `man/` folder\n:::\n\nNow that I have the R version/package management being tracked and stored with `renv/` & `renv.lock`, function documentation in the `.Rd` files, the `DESCRIPTION` and `NAMESPACE`, I can move onto adding and using **data** in a shiny app package.\n\n## Additional package files\n\nMost app-packages will require files beyond the `.R` files in the `R/` folder. Apps will often use data files when they're deployed, which we'll cover next. \n\n### use_data_raw()\n\n[`usethis::use_data()` or `usethis::use_data_raw()`](https://usethis.r-lib.org/reference/use_data.html) make it simple to add data to the application package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_data_raw(\"movies\")\n```\n:::\n\n\n````default\n✔ Creating 'data-raw/'\n✔ Writing 'data-raw/movies.R'\n• Modify 'data-raw/movies.R'\n• Finish the data preparation script in 'data-raw/movies.R'\n• Use `usethis::use_data()` to add prepared data to package\n````\n\n\nIn the `data-raw/movies.R` script, I want to import the `movies.RData` file, but where should I import it from? It depends. In R packages, data is stored in either [`data/` or `data-raw/`](https://r-pkgs.org/data.html). To access a copy of the `movies` dataset in `duap` (i.e., with `duap::movies`), I can place the `movies.RData` file in `data-raw/` and import it by adding the following to `data-raw/movies.R`:\n\n\n\n\n````default\n## code to prepare `movies` dataset goes here\nload(\"data-raw/movies.RData\")\nusethis::use_data(movies, overwrite = TRUE)\n````\n\n\nNote `data-raw/movies.R` includes a call to `usethis::use_data()`, and when it's executed, I can see a `data/` folder is created and `movies` is saved as `movies.rda`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nload(\"data-raw/movies.RData\")\nusethis::use_data(movies, overwrite = TRUE)\n```\n:::\n\n\n````default\n✔ Adding 'R' to Depends field in DESCRIPTION\n✔ Creating 'data/'\n✔ Saving 'movies' to 'data/movies.rda'\n• Document your data (see 'https://r-pkgs.org/data.html')\n````\n\n\n## Installed package files\n\nThe `inst/` folder plays a special role when developing R packages: \n\n::: {style='font-size: 1.10em; font-weight: bold;'}\n\n> \"*When a package is installed, everything in `inst/` is copied into the top-level directory of the installed package*\" - [R Packages, 2ed](https://r-pkgs.org/misc.html#sec-misc-inst)\n\n:::\n\nConsider the example folder and files below: `file.txt`, `CITATION`, and `extdata/my_data.csv`:\n\n::: {layout-ncol=2}\n\n##### Source (development) form \n\n\n\n````default\ninst/\n  ├── file.txt\n  ├── CITATION\n  └── extdata/\n        └── my_data.csv\n````\n\n\n##### Binary (installed) form \n\n\n\n````default\nfile.txt\nCITATION\nextdata/\n  └── my_data.csv\n````\n\n\n:::\n\nThe neat thing about the `inst/` folder is that after we've loaded and installed our package, we can access the files in `inst/extdata/` with the [`system.file()` function](https://pkgload.r-lib.org/reference/system.file.html):\n\nIf I want to test functions in `duap` using `movies.RData` (or another dataset), those should be placed in `inst/extdata/`\n\n### inst/\n\nA great way to understand what files are available in `inst/` when your package is to pass `system.file()` to `fs::dir_tree()`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfs::dir_tree( # wrap this in a folder tree\n  system.file(package = \"duap\"))\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\" code-summary=\"expand to see inst/ folder contents\"}\n/path/to/installed/package/duap\n├── DESCRIPTION\n├── INDEX\n├── LICENSE\n├── Meta\n│   ├── Rd.rds\n│   ├── data.rds\n│   ├── features.rds\n│   ├── hsearch.rds\n│   ├── links.rds\n│   ├── nsInfo.rds\n│   └── package.rds\n├── NAMESPACE\n├── R\n│   ├── duap\n│   ├── duap.rdb\n│   └── duap.rdx\n├── data\n│   ├── Rdata.rdb\n│   ├── Rdata.rds\n│   └── Rdata.rdx\n├── extdata\n│   └── movies.RData\n├── help\n│   ├── AnIndex\n│   ├── aliases.rds\n│   ├── duap.rdb\n│   ├── duap.rdx\n│   ├── figures\n│   └── paths.rds\n└── html\n    ├── 00Index.html\n    └── R.css\n```\n:::\n\n\nThe `system.file()` function will show me the path to the locally installed version of the package (hence the `/path/to/installed/package/` at the beginning of the path).\n\nThe `inst/exdata/` folder comes in handy for adding example data, but it's also useful for application development (more on that later).\n\n\n:::: {.callout-tip title=\"The `inst/` folder\"}\n\n::: {style='font-size: 1.10em;'}\nTake a look at the `inst/extdata/` folder  [`readr::readr_example()`](https://github.com/tidyverse/readr/blob/5ac729aa9a70fef297a634d2332ff8ff1af874fb/R/example.R) function to understand more about how this works.\n:::\n\n::::\n\n\n\n\n#### **Recap: data and installed files**\n\nR Packages have a consistent and standardized way of storing data, and have designated locations for internal and external data.\n\n::: {#fig-pkg-data .column}\n![](pkg-data.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage data folders\n:::\n\n## Documentation \n\nFunction documentation is handled with the `R/` folder and `roxygen2` comments/tags, but `duap` needs a `README` file, and a place for long-form documentation. Fortuntely, [RMarkdown](https://rmarkdown.rstudio.com/) handles each of these well:\n\n### use_readme_rmd()\n\nI can create a `README` file using [`usethis::use_readme_md()`](https://usethis.r-lib.org/reference/use_readme_rmd.html) or [`usethis::use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html)\n\n-   I prefer the `.Rmd` file because it comes with executable code chunks.\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_readme_rmd()\n    ```\n    :::\n\n    \n    ````default\n    ✔ Setting active project to '/Users/mjfrigaard/projects/duap'\n    ✔ Writing 'README.Rmd'\n    ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n    • Modify 'README.Rmd'\n    • Update 'README.Rmd' to include installation instructions.\n    ✔ Writing '.git/hooks/pre-commit'\n    ````\n\n\n    -   When I knit `README.Rmd`, it automatically generates the `README.md` for the package.\n\n\n### use_vignette()\n\nFor long-form documentation I can use [vignettes.](https://r-pkgs.org/vignettes.html#introduction) \n\n-   Vignettes can be created with [`usethis::use_vignette()`](https://usethis.r-lib.org/reference/use_vignette.html)\n\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    usethis::use_vignette(\"duap\")\n    ```\n    :::\n\n    \n    ````default\n    ✔ Adding 'knitr' to Suggests field in DESCRIPTION\n    ✔ Setting VignetteBuilder field in DESCRIPTION to 'knitr'\n    ✔ Adding 'inst/doc' to '.gitignore'\n    ✔ Creating 'vignettes/'\n    ✔ Adding '*.html', '*.R' to 'vignettes/.gitignore'\n    ✔ Adding 'rmarkdown' to Suggests field in DESCRIPTION\n    ✔ Writing 'vignettes/duap.Rmd'\n    • Modify 'vignettes/duap.Rmd'\n    ````\n\n\nVignettes are also written in RMarkdown and rendered whenever the package is built/installed.\n\n\n\n\n````default\nduap/\n    └── vignettes/\n            └── duap.Rmd\n\n1 directory, 1 file\n````\n\n\n\nBy combining `rmarkdown` and `knitr`, R packages have a documentation framework that has the added benefit of being somewhat fool-proof: vignettes have to successfully render for the package to be installed.\n\n::: {#fig-build-vignettes .column}\n![](install-vignettes.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage vignettes\n:::\n\n\n\n:::: {.callout-note collapse='false'}\n\n## Vignette figures\n\n::: {style='font-size: 1.05em; color: #696969;'}\n\nImages in vignettes are kept in `man/figures/`\n\n<pre>\nduap/\n  ├── vignettes/\n  │       └── duap.Rmd\n  └── man/\n      └── figures/\n          └── duap-img-1.png\n</pre>\n  \n\n::: \n\n::::\n\n\n\n\n#### **Recap: documentation**\n\nThe vignettes folder will long-form documentation about how the application works, use cases, and features (and `roxygen2` will document each function).\n\n::: {#fig-pkg-docs .column}\n![](pkg-docs.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nDocumentation in `README` and `vignettes/`\n:::\n\n\n## Tests \n\nTesting is an important part of any package, and apps tend to require additional tests (especially when they're moving from 'development' into 'production' environments).\n\n### use_testthat()\n\nTo apply the testing framework provided by the [`testthat` package.](https://testthat.r-lib.org/) package, I'll use `usethis::use_testthat()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nusethis::use_testthat()\n```\n:::\n\n\n````default\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\n````\n\n\nThis creates a new `tests/` folder, with a `testthat/` sub-folder and script.\n\n\n\n\n````default\nduap/\n    └── tests/\n          ├── testthat/\n          └── testthat.R\n        \n2 directories, 1 file\n````\n\n\n#### Writing tests \n\n[`testthat`](https://testthat.r-lib.org/) is designed for unit tests (i.e., testing each functional 'unit' in the code), but for shiny apps, we need to think beyond standard unit testing. We need to confirm the functions work and return predictable results, but we also need to make sure they play well with each other (integration tests), and that the application can be deployed (system tests).\n\n#### **Recap: testing**\n\nTesting is well described in the [shiny documentation](https://shiny.rstudio.com/articles/testing-overview.html) and in [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html). Generally speaking, unit tests are performed with [`testthat`](https://testthat.r-lib.org/), and module testing can be done with [`shiny::testServer()`](https://shiny.rstudio.com/reference/shiny/1.7.0/testserver). To test the full application (or a specific behavior) use the [`shinytest2`](https://rstudio.github.io/shinytest2/) package.\n\n::: {#fig-pkg-tests .column}\n![](pkg-tests.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nTesting framework from `testthat`\n:::\n\n\n# Use \n\nUsing an app built as a package is similar to using any R function we've loaded from a package. After successfully loading, documenting, and installing the package, I can run the app by loading the `duap` (with `library(duap)`) and `moviesApp()`:\n\n::: {#fig-duap-inst-app .column}\n![](duap-app.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`duap::moviesApp()`\n:::\n\n## Recap\n\nI've skipped over some important development steps covered in [R packages](https://r-pkgs.org/) (license, using Git/GitHub, code coverage, NEWS, etc.), and you should bookmark this text as you start developing shiny app-packages. Hopefully this post has demonstrated that by building shiny apps as R packages, a suite of developer tools are available in the RStudio IDE (and the application files and folders have a uniform structure).\n\n`duap` is a substantial improvement over a vanilla shiny application--the app-package holds the code, data, documentation, *and* includes explicit information on the dependencies and requirements (in the `DESCRIPTION` and `NAMESPACE`).\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}