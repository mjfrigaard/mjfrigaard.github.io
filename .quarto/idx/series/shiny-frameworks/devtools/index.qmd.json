{"title":"Creating a shiny app-package","markdown":{"yaml":{"title":"Creating a shiny app-package","subtitle":"Building Shiny app-packages with `devtools` & `usethis`","author":"Martin Frigaard","date":"2023-05-01","categories":["shiny","golem","packages"],"image":"image.png","callout-icon":false,"freeze":true,"execute":{"echo":true,"warning":false,"eval":false,"collapse":true}},"headingText":"Outline","containsRefs":false,"markdown":"\n\n```{r}\n#| label: utils\n#| eval: true \n#| echo: false \n#| include: false\nlibrary(kableExtra)\noptions(repos = c(CRAN = \"http://cran.rstudio.com\"))\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n    b = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    g = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    o = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    r = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\n```\n\n\nIn this post, I'll be using [`devtools`](https://devtools.r-lib.org/) and [`usethis`](https://usethis.r-lib.org/) to develop  [`duap`](https://github.com/mjfrigaard/duap), an R package that *contains* a shiny application (i.e., *`devtools`/`usethis` app-package*).\n\n```{r}\n#| label: co_box_long\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(color = \"r\", \"Warning\", \"_This is a long post because I cover many of the steps used to build R packages. If you'd prefer to more information on developing R packages, I suggest starting with [the whole game section](https://r-pkgs.org/whole-game.html)._\")\n```\n\nThe R package development workflow is well documented in [R Packages ](https://r-pkgs.org/whole-game.html). I've written this post because sometimes I encounter shiny developers who are comfortable with reactivity, modules, HTML/CSS, etc., but they haven't developed an R package. I'll walk through converting an existing shiny application into an app-package *in detail*, because R package development differs from creating a standalone shiny application. My hope is that this post will 'fill in the gaps' of package development (and keep you from rebuilding your application entirely from scratch).\n\n\nI’ll be using the application from RStudio’s [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/) tutorial. This is a great resource that can be run locally or on [posit.cloud](https://posit.cloud/). I've organized the app-package development process into three areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the steps required to begin building a shiny app withing a package framework (from the console and IDE).\n\n  -   **Build** covers the development process, which includes writing and storing code, data, external resources (i.e., data), documentation, and testing. \n\n  -   **Use** shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE).\n\nThe GitHub repo with the code for `duap` is located  [here](https://github.com/mjfrigaard/duap) if you'd like to follow along.\n\n## Start\n\nIt's [highly recommended](https://mastering-shiny.org/scaling-packaging.html?q=highly%20recommend#scaling-packaging) to build your [shiny app as an R package](https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package). R packages require more work upfront (and a bit of a learning if you're not familiar with the process), but the long-term benefits are usually well worth the initial investment of time.\n\n### What makes an R package?\n\nIf you've been reading [R packages](https://r-pkgs.org/) or [Mastering Shiny](https://mastering-shiny.org/index.html), you may have seen one of the following quotes, \n\n> \"*‘RStudio and `devtools` consider any directory containing `DESCRIPTION` to be a package*’ - [R Packages](https://r-pkgs.org/description.html#the-description-file)\n\n> '*all a project needs to be a package is a directory of `R/` files and a `DESCRIPTION` file.*' - [Packages Chapter of Mastering Shiny](https://mastering-shiny.org/scaling-packaging.html#summary-18)\n\nSo which is it--a `DESCRIPTION` file or a `DESCRIPTION` file *and* a directory of `R/` files? Typically, R packages contain the following files: \n\n```{bash}\n#| eval: false\n#| code-fold: false\nrpkg/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── rpkg.Rproj\n  ├── R/\n  ├── man/\n  ├── tests/\n  ├── data/ \n  ├── vignettes/ \n  └── inst/ \n\n1 directory, 5 files\n```\n\nHowever, these files are not required to convert an existing shiny app project into an R package. I'll use the app stored in this [bare-bones shiny app (`bbsa`)](https://github.com/mjfrigaard/bbsa) to demonstrate. Feel free to download this app and follow along. \n\nThe initial files in this project are below: \n\n```{bash}\n#| eval: false\n#| code-fold: false\nbbsa/\n  ├── README.md\n  ├── app.R\n  ├── bbsa.Rproj\n  ├── movies.RData\n  └── utils.R\n\n1 directory, 5 files\n```\n\n`bbsa` will run the application stored in `app.R`, load the data (`movies.RData`), and source the utility function stored in `utils.R`. This application has a `README.md`, but no `DESCRIPTION` file. \n\n#### Project [`.Rproj`]{style=\"font-size: 1.10em\"} files\n\nWhen a new shiny app project is created from the **New Project Wizard**, the `.Rproj` file contains the following (if you open it with a text-editor) \n\n```{bash}\n#| eval: false\n#| code-fold: false\nVersion: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: XeLaTeX\n```\n\nThese fields are settings for a shiny app project, and none of them are specific to R packages. \n\nLets see what happens if I create an `R/` folder (with the `utils.R` file) and a `DESCRIPTION` file.\n\n#### [`R/`]{style=\"font-size: 1.10em\"} & [`DESCRIPTION`]{style=\"font-size: 1.10em\"}\n\nThe `R/utils.R` file will hold the contents of `utils.R` in the root folder:\n\n```{r}\n#| eval: false\n#| code-fold: false\npoint_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n```\n\nAnd the contents of the `DESCRIPTION` file are below (adapted from [R Packages](https://r-pkgs.org/description.html#the-description-file)): \n\n```{verbatim}\n#| eval: false\n#| code-fold: false\nPackage: myShinyAppPkg\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", \n    role = c(\"aut\", \"cre\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n```\n\nThe `bbsa` shiny app project now has the following files and folders: \n\n```{bash}\n#| eval: false\n#| code-fold: false\nbbsa/\n├── DESCRIPTION\n├── R\n│   └── utils.R\n├── README.md\n├── app.R\n├── bbsa.Rproj\n├── movies.RData\n└── utils.R\n\n2 directories, 7 files\n```\n\nIf I take a quick look at the available panes in the IDE, I can confirm none of the **Build** tools are available: \n\n:::: {.column-page-inset-right}\n\n::: {#fig-shiny_app_ide}\n![shiny app IDE](shiny_app_ide.png){#fig-shiny_app_ide height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nProject IDE panes\n:::\n\n::::\n\n#### Terminate R session\n\nI'll terminate my R session by clicking on **Session** > **Terminate R...** > **Yes**\n\n::: {#fig-terminate layout-ncol=2}\n\n![Session > Terminate](terminate_session.png){#fig-terminate_session}\n\n![Click Yes](terminate_yes.png){#fig-terminate_yes}\n\nTerminate your R session\n:::\n\n\n#### Package [`.Rproj`]{style=\"font-size: 1.10em\"} file\n\nNow I'll open the `bbsa.Rproj` file with a text-editor again (or expand the code below to view the new `bbsa.Rproj`):\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| code-summary: 'show/hide package .Rproj'\nVersion: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: XeLaTeX\n\nBuildType: Package\nPackageUseDevtools: Yes\nPackageInstallArgs: --no-multiarch --with-keep.source\n```\n\nI can see three new lines have been added to `bbsa.Rproj`: \n\n1. `BuildType: Package`  \n2. `PackageUseDevtools: Yes`   \n3. `PackageInstallArgs: --no-multiarch --with-keep.source` \n\nIt's not important that you know the meaning for each of these fields, but you can probably tell they're for converting our previous project into a package (and you'll see the third one again during package development!)\n\nI'll take another look at the RStudio IDE to review the available panes: \n\n:::: {.column-page-inset-right}\n\n::: {#fig-shiny_app_pkg_ide}\n![shiny app-package IDE](shiny_app_pkg_ide.png){#fig-shiny_app_pkg_ide height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nApp-package IDE panes\n:::\n\n::::\n\nI can see the **Build** pane has been added--now I can **Install**, **Test**, and **Check** my package with a single click!\n\n#### What happened to [`R/utils.R`]{style=\"font-size: 1.10em\"}?\n\nBut wait--if I open `R/utils.R`, I notice that file is now empty: \n\n:::: {.column-page-inset-right}\n\n::: {#fig-clean_out_R}\n![Empty R/ file](clean_out_R.png){#fig-clean_out_R height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`R/utils.R` has been cleared out!\n:::\n\n::::\n\n\n```{r}\n#| label: co_box_description_pkgs\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(\n  color = \"r\", \n  header = \"Converting projects to packages with `DESCRIPTION` files\", \n  contents = \"\nAdding a `DESCRIPTION` file to your RStudio project *will* convert it to an R package, but any files stored in the standard packages folders (i.e., `R/`, `man`, `inst/`, etc.) will be removed (i.e., wait until the **Build** pane is available, then create these folders). \n  \")\n```\n\n\n\nNow I'll cover creating an R package from the **Console** and using the **New Project Wizard**\n\n### From the Console\n\nTo create a shiny app package, I'll install [`devtools`](https://devtools.r-lib.org/) (which also installs [`usethis`](https://usethis.r-lib.org/)).\n\n```{r}\n#| label: install-devtools-duap\n#| code-fold: false\ninstall.packages(\"devtools\")\nlibrary(devtools)\n```\n\nIf I am creating a package from the console, the function for building a new package is `usethis::create_package()`:\n\n```{r}\n#| label: create_package-duap\n#| code-fold: false\nusethis::create_package(path = \"path/to/app-package/folder\")\n```\n\nA new RStudio session will open (and the name of the project--i.e., the name of the `.Rproj` file--will be identical to the package name).\n\n### From the Project Wizard\n\nIf I am using RStudio's **New Project Wizard** to create a new shiny app package, I'd see the following defaults:\n\n::: {#fig-rpkg-setup .column}\n![](rpkg-setup.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nDefault `usethis::create_package` project setup\n:::\n\nThe new package built from the console will have the following folder and files:\n\n```{verbatim}\n#| label: duap-console-tree\n#| code-fold: false\nduap/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  └── duap.Rproj\n  \n1 directory, 3 files\n```\n\nPackages built from the **New Project Wizard** will have a few additional folders and files:\n\n```{verbatim}\n#| label: duap-wizard-tree\n#| code-fold: false\nduap/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  │   └── hello.R\n  ├── man/\n  │   └── hello.Rd\n  ├── myRPkg.Rproj\n  └── renv/\n      ├── activate.R\n      ├── sandbox/\n      │   └── R-4.2\n      └── settings.dcf\n\n4 directories, 7 files\n```\n\nThese additional files are:\n\n-   `hello.R` in the `R/` folder\\\n-   `hello.Rd` in the `man/` folder\\\n-   a `renv/` folder for package management\n\n`R/hello.R` and `man/hello.Rd` are boilerplate files and can be deleted, but both package setups have a `DESCRIPTION`, `NAMESPACE`, `R/` folder, and `.Rproj` file. These four items can be thought of as the 'minimal package' setup required to access RStudio's **Build** tools.\n\n\n\n# Build\n\nThe example app code comes from the [vanilla-shiny](https://github.com/mjfrigaard/vanilla-shiny) repo, which contains a modularized version of the app in [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/).\n\n## Metadata files\n\nR packages have two metadata files: `DESCRIPTION` and `NAMESPACE`. Neither of these files have extensions, and both contain vital information for your package to function properly.\n\nWe'll manually edit the `DESCRIPTION` file, but the `NAMESPACE` file is automatically generated during the development process.\n\n### [`DESCRIPTION`]{style=\"font-size: 1.10em\"}\n\nThe `DESCRIPTION` file plays an important role in R packages (as we learned above)--that's why creating this file is the first step when [converting an existing app](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) (and when creating a [new `golem` apps](https://thinkr-open.github.io/golem/articles/a_start.html#fill-the-description)).\n\n```{r}\n#| label: co_box_desc\n#| eval: false \n#| results: asis\n#| echo: false\nco_box(\n  color = \"b\", \n  header = \"`DESCRIPTION` files\", \n  contents = \"![](desc.png){height='15%' width='15%' fig-align='left'}\\n\n  *'RStudio and `devtools` consider any directory containing `DESCRIPTION` to be a package'* - [R Packages](https://r-pkgs.org/description.html#the-description-file)\")\n```\n\nThe initial `DESCRIPTION` file in `duap` is below:\n\n\n```{verbatim}\n#| label: DESCRIPTION-duap\n#| code-fold: false\nPackage: duap\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", \n    role = c(\"aut\", \"cre\"),\n    comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n```\n\n\nThe package name is automatically added, but the remaining fields need to be completed (consult [R packages](https://r-pkgs.org/description.html#the-description-file) for more information on filling out the `DESCRIPTION` file).\n\nThe `DESCRIPTION` file in the `duap` prompts the RStudio IDE to activate the **Build** tools pane (see below):\n\n::: {#fig-rpkg-ide .column}\n![](rpkg-ide.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage **Build** tools\n:::\n\n## Application code\n\nThe contents of the `app.R` and `utils.R` need to be moved into the `R/` folder. When developing R packages, new `.R` files are created with `usethis::use_r()`. \n\n### [`use_r()`]{style=\"font-size: 1.10em\"}\n\nI'm going to create `duap` using [modules](https://mastering-shiny.org/scaling-modules.html#module-motivation) to separate the app into the following digestible mental 'chunks':\n\n-   The app collects the inputs in the `shiny::sidebarPanel()`\n\n-   These values are then used to create a plot in the `shiny::mainPanel()`\n\nBased on this layout, I'll create one module to collect and return the user-inputs (`mod_var_input`), and another module to display the plot (`mod_display_plot`). \n\nI'll create these files using [`usethis::use_r()`](https://usethis.r-lib.org/reference/use_r.html) below:\n\n\n```{r}\n#| label: use_r-mod_var_input\n#| code-fold: false\nusethis::use_r(\"mod_var_input\")\n```\n\n```{verbatim}\n✔ Setting active project to '/Users/mjfrigaard/projects/duap'\n• Modify 'R/mod_var_input.R'\n• Call `use_test()` to create a matching test file\n```\n\n```{r}\n#| label: use_r-mod_display_plot\n#| code-fold: false\nusethis::use_r(\"mod_display_plot\")\n```\n\n```{verbatim}\n• Modify 'R/mod_display_plot.R'\n• Call `use_test()` to create a matching test file\n```\n\nThe display module also relies on a utility function (`plot_points()`), so I need to create a script for the utility function, which I put in a file with a name similar to the module it belongs to (i.e., `utils_display_plot`).\n\n\n```{r}\n#| label: use_r-utils_display_plot\n#| code-fold: false\nusethis::use_r(\"utils_display_plot\")\n```\n\n```{verbatim}\n• Modify 'R/utils_display_plot.R'\n• Call `use_test()` to create a matching test file\n```\n\nFinally, I'll place the modules into basic ui and server arguments in a call to `shiny::shinyApp()`:\n\n\n```{r}\n#| label: use_r-moviesApp\n#| code-fold: false\nusethis::use_r(\"moviesApp\")\n```\n\n```{verbatim}\n• Modify 'R/moviesApp.R'\n• Call `use_test()` to create a matching test file\n```\n\nModules consist of two functions; one in the UI (with a `_ui` suffix), and another in the server (with a `_server` suffix), but it's common practice to combine them in a single file.\n\nBelow is the `mod_var_input` module: \n\n-   The ui function is stored in `mod_var_input_ui`:\n    \n    ```{r}\n    #| label: mod_var_input_ui\n    #| code-fold: true\n    #| eval: false\n    mod_var_input_ui <- function(id) {\n      ns <- shiny::NS(id)\n      shiny::tagList(\n        shiny::selectInput(\n          inputId = ns(\"y\"),\n          label = \"Y-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"audience_score\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"x\"),\n          label = \"X-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"imdb_rating\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"z\"),\n          label = \"Color by:\",\n          choices = c(\n            \"Title Type\" = \"title_type\",\n            \"Genre\" = \"genre\",\n            \"MPAA Rating\" = \"mpaa_rating\",\n            \"Critics Rating\" = \"critics_rating\",\n            \"Audience Rating\" = \"audience_rating\"\n          ),\n          selected = \"mpaa_rating\"\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"alpha\"),\n          label = \"Alpha:\",\n          min = 0, max = 1, step = 0.1,\n          value = 0.5\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"size\"),\n          label = \"Size:\",\n          min = 0, max = 5,\n          value = 2\n        ),\n        shiny::textInput(\n          inputId = ns(\"plot_title\"),\n          label = \"Plot title\",\n          placeholder = \"Enter plot title\"\n        )\n      )\n    }\n    ```\n    \n-   The server function is stored in `mod_var_input_server`:\n    \n    ```{r}\n    #| label: mod_var_input_server\n    #| code-fold: true\n    #| eval: false\n    mod_var_input_server <- function(id) {\n    \n      shiny::moduleServer(id, function(input, output, session) {\n        return(\n          list(\n            \"x\" = shiny::reactive({\n              input$x\n            }),\n            \"y\" = shiny::reactive({\n              input$y\n            }),\n            \"z\" = shiny::reactive({\n              input$z\n            }),\n            \"alpha\" = shiny::reactive({\n              input$alpha\n            }),\n            \"size\" = shiny::reactive({\n              input$size\n            }),\n            \"plot_title\" = shiny::reactive({\n              input$plot_title\n            })\n          )\n        )\n      })\n    }\n    ```\n    \n    -   View the display module [here.](https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/mod_display_plot.R) \n    \n### Standalone app function \n\nAfter I've written the modules and utility functions, I need to add these into a [standalone app function](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) `moviesApp()` (stored in `R/moviesApp.R`).\n\n-   This file contains a call to `shiny::shinyApp()` and includes the module functions (in their relative positions)\n\n    -   Note the `id`s in each module function pair must match to create the shared namespace. \n    \n    \n    ```{r}\n    #| label: movies-app-file\n    #| code-fold: false\n    moviesApp <- function() {\n      # call to shinyApp()\n      shiny::shinyApp(\n        \n        # UI ----\n        ui = shiny::fluidPage(\n          shiny::sidebarLayout(\n            shiny::sidebarPanel(\n              # UI input module ----\n              mod_var_input_ui(\"vars\")\n            ),\n            # UI display module ----\n            shiny::mainPanel(\n              mod_display_plot_ui(\"plot\")\n            )\n          )\n        ),\n        \n        server = function(input, output, session) {\n          # server input module (capturing inputs) ----\n          selected_vars <- mod_var_input_server(\"vars\")\n          # server display module (rendering outputs) ----\n          mod_display_plot_server(\"plot\", \n                                  var_inputs = selected_vars)\n        }\n      )\n    }\n    ```\n\n\n### [`roxygen2`]{style=\"font-size: 1.10em\"}\n\nWhen I'm confident my code works (and the app renders), I want to make sure these functions are properly documented by describing each function with [`roxygen2`](https://roxygen2.r-lib.org/) tags. To quickly insert a `roxygen2` skeleton, use the RStudio IDE (or the keyboard shortcut: `Option` + `Shift` + `Command` + `R`)\n\nThe standard `roxygen2` skeleton tags include `@param`, `@return`, `@export`, and `@examples`\n\n- `@param` lists the existing arguments (or variables) for the function\n\n- `@return` should be a description of the object/side-effect/thing the function produces (and any warnings or errors if used incorrectly)\n\nThe following [`roxygen2`](https://roxygen2.r-lib.org/) tags will be used to update the `NAMESPACE` file (which you should never edit manually!)\n\n- `@export` will make the function available to other people when they use your package \n\n- `@importFrom` vs. `@import`   \n    -   it's always a good idea to be explicit about the external functions and packages you're using, so most of the time you should use `@importFrom` (there's even a handy helper `usethis::use_import_from(\"package\", \"function\")`)   \n    -   `@import` should only be used when [\"*you make such heavy use of so many functions from another package that you want to import its entire namespace. This should be relatively rare.*\"](https://r-pkgs.org/dependencies-in-practice.html#in-code-below-r)\n\n`roxygen2` imports and exports are covered in more depth [in R packages.](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports).\n\nYou can see the full code for `point_plot()` below (or follow [this link](https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/) to view all the modules in the `R/` folder):\n\n::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n*Click on Code to view*\n:::\n\n\n```{r}\n#| label: roxygen2-point_plot\n#| code-fold: true\n#' Plot points (shiny)\n#'\n#' @param df input dataset (tibble or data.frame)\n#' @param x_var x variable\n#' @param y_var y variable\n#' @param col_var color variable\n#' @param alpha_var alpha value\n#' @param size_var size value\n#'\n#' @return plot object\n#' @export point_plot\n#'\n#' @importFrom ggplot2 ggplot aes geom_point\n#'\n#' @examples\n#' require(duap)\n#' movies <- duap::movies\n#' point_plot(df = movies,\n#'   x_var = \"critics_score\",\n#'   y_var = \"imdb_rating\",\n#'   col_var = \"critics_rating\",\n#'   alpha_var = 1/3,\n#'   size_var = 2)\n#' }\npoint_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n```\n\n\n\n\n\n```{r}\n#| label: co_box_roxygen2_skeleton\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(color = \"g\", \n  header = \"Tip: `roxygen2` skeleton\", \n  contents = \"*As well as generating `.Rd` files, `roxygen` will also create a `NAMESPACE` for you, and will manage the `Collate` field in `DESCRIPTION`*\n\n::: {#fig-roxygen2-tags .column}\n![](ide-roxygen-skeleton.png){height='100%' width='100%' fig-align='center'}\n\nStandard `roxygen2` skeleton\n:::\")\n```\n\n## Test drive\n\n::: {style='font-size: 1.10em; font-weight: bold;'}\n\n> \"The `load_all()` function is arguably the most important part of the devtools workflow.\" - [R Packages, 2ed](https://r-pkgs.org/workflow101.html#sec-workflow101-load-all)\n\n:::\n\nYou'll use the `devtools::load_all()` function frequently while you're developing your app-package. `load_all()` simulates how your functions will work when someone else uses your package. This removes the need to define them in the global workspace. It also gives you access to the functions from any add-on packages you've imported into your `NAMESPACE` (i.e., you won't need to run `library()`). \n\n\nI highly recommend using the keyboard shortcuts: \n\n\n\n:::: {.callout-important title=\"`devtools::load_all()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n:::\n\n::::\n\nRead more about the many benefits of using `load_all()` in [R packages.](https://r-pkgs.org/workflow101.html#benefits-of-load_all)\n\n### [`load_all()`]{style=\"font-size: 1.10em\"}\n\nAfter documenting everything with `roxygen2`, I want to make sure none of the functions are in my **Environment** (remove with `rm()` if necessary) and load the functions with [`devtools::load_all()`](https://r-pkgs.org/whole-game.html#sec-whole-game-load-all).\n\n\n```{r}\n#| label: duap-load_all\n#| code-fold: false\ndevtools::load_all()\n```\n\n```{verbatim}\nℹ Loading duap\n```\n\n## NAMESPACE & Help pages \n\n`devtools::document()` processes the `roxygen2` tags to generate the `NAMESPACE` and the `.Rd` files in the `man/` folder. The `.Rd` files are used to access the help files (i.e., `package::function()` can be accessed with `??function`).\n\nManaging your package [NAMESPACE file](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-NAMESPACE-workflow) is not something you do directly: it's handled with the `roxygen2` tags we covered above. The keyboard shortcuts for `devtools::document()` are below:\n\n\n:::: {.callout-important title=\"`devtools::document()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>\n\n:::\n\n::::\n\n### [`document()`]{style=\"font-size: 1.10em\"}\n\nRun `devtools::document()` when you've written a new function with `roxygen2` tags or included a package in the `DESCRIPTION` file under `Imports:`\n\n```{r}\n#| label: duap-document\n#| code-fold: false\ndevtools::document()\n```\n\n```{verbatim}\nℹ Updating duap documentation\nFirst time using roxygen2. Upgrading automatically...\nSetting `RoxygenNote` to \"7.2.3\"\nℹ Loading duap\nWriting NAMESPACE\nWriting mod_plot_ui.Rd\nWriting mod_plot_server.Rd\nWriting point_plot.Rd\nWriting mod_var_input_ui.Rd\nWriting mod_var_input_server.Rd\nWriting moviesApp.Rd\n```\n\n#### [`NAMESPACE` != `DESCRIPTION`]{style=\"font-size: 0.90em\"}\n\nIt's important to understand that `devtools::document()` will use the `roxygen2` tags to create the `man/*.Rd` files and update the `NAMESPACE`, but **`devtools::document()` does not update the `Imports:` section in the `DESCRIPTION`.** \n\nTo add packages dependencies to the `DESCRIPTION`, you'll need to use the [`usethis::use_package()` function](https://usethis.r-lib.org/reference/use_package.html). Read more on this topic in [Confusion about `Imports` ](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports).\n\nThe table below shows the connection between `roxygen2` tags, the resulting `NAMESPACE` entry, and what should be listed in the `DESCRIPTION`. \n\n::: {style=\"font-size: 0.80em;\"}\n\n```{r}\n#| label: co_box_namespace\n#| eval: true\n#| echo: false \n#| results: asis\n# roxy_ns_df -----\nroxy_ns_df <- data.frame(\n  check.names = FALSE,\n  `roxygen2 tag` = c(\"@importFrom\", \"@import\", \"@export\"),\n  `NAMESPACE directive` = c(\n    \"importFrom() : import selected object from another NAMESPACE\",\n    \"import(): import all objects from another package’s NAMESPACE.\",\n    \"export() : export the function, method, generic, or class so it’s available outside of the package (in the NAMESPACE)\"\n  ),\n  `Added in DESCRIPTION` = c(\"Nothing\", \"Imports:\", \"Nothing\")\n)\n\nco_box(\n  color = \"b\",\n  header = \"`roxygen2`, `NAMESPACE` & `DESCRPTION`\",\n  contents = kable_styling(\n    kable_input = knitr::kable(roxy_ns_df,\n      align = c(\"l\", \"l\", \"r\"),\n      bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\")\n    )\n  )\n)\n```\n\n:::\n\n## Checking installation\n\nAfter loading and documenting the `duap` package, I want to make sure I can install the package into my library with [`devtools::install()`](https://r-pkgs.org/whole-game.html#install). The keyboard shortcut for `devtools::install()` is below:\n\n:::: {.callout-important title=\"`devtools::document()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>\n\n:::\n\n::::\n\n### [`install()`]{style=\"font-size: 1.10em\"}\n\n```{r}\n#| label: duap-install\n#| code-fold: false\ndevtools::install()\n```\n\n```{verbatim}\n── R CMD build ────────────────────────────────────────────────────────────────\n✔  checking for file ‘/Users/mjfrigaard/projects/duap/DESCRIPTION’ ...\n─  preparing ‘duap’: (1.8s)\n✔  checking DESCRIPTION meta-information\n─  checking for LF line-endings in source and make files and shell scripts (520ms)\n─  checking for empty or unneeded directories\n   Omitted ‘LazyData’ from DESCRIPTION\n─  building ‘duap_0.1.0.tar.gz’\n   \nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD INSTALL \n  --install-tests \n* installing to library ...\n* installing *source* package ‘duap’ ...\n** using staged installation ...\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (duap)\n```\n\nRestart your R session and ensure you have a clean workspace:\n\n```{verbatim}\n   Restarting R session...\n\n* Project '~/projects/duap' loaded. [renv 0.16.0]\n```\n\nThen load your package with `library()`:\n\n```{r}\n#| eval: false\n#| echo: true\n#| code-fold: false\nlibrary(duap)\n```\n\nYou can also use **Install** icon in the **Build** pane, which installs the package, restarts the R session, and loads the package all with one click!\n\n::: {#fig-build-install .column}\n![](build-install.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n**Build** install package\n:::\n\n::: {#fig-build-restart .column}\n![](build-restart.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n**Build** restart and load\n:::\n\n#### Recap: the `R/` folder\n\nThe sequence I've demonstrated above (create `.R` file, write function, document with `roxygen2`, load, document, install) is the 'minimal version' of the [full development workflow](https://r-pkgs.org/whole-game.html). \n\nOnce a 'beta' version of the app is deployed, you will want to come back to the app to refactor, write tests, and make sure all the items in `devtools::check()` pass.\n\nStoring the application's code in the `R/` folder and (using RStudio's build tools) keeps files organized, well documented, and self-contained:\n\n-   All the code is stored in the `R/` folder\n\n-   I've separated my code into smaller pieces (modules) that can be tested independently (more on this later)\n\n-   My dependencies are being managed by `roxygen2` and `devtools::document()`, which will update the `NAMESPACE` with any functions tagged with `@importFrom` (or `@import`)    \n    -   I can also access functions I've written *outside* by adding `@export`\n\n\n::: {#fig-pkg-man .column}\n![](pkg-man.png){width=\"70%\" fig-align=\"center\"}\n\nFunction documentation in `man/` folder\n:::\n\nNow that I have the R version/package management being tracked and stored with `renv/` & `renv.lock`, function documentation in the `.Rd` files, the `DESCRIPTION` and `NAMESPACE`, I can move onto adding and using **data** in a shiny app package.\n\n## Additional package files\n\nMost app-packages will require files beyond the `.R` files in the `R/` folder. Apps will often use data files when they're deployed, which we'll cover next. \n\n### [`use_data_raw()`]{style=\"font-size: 1.10em\"}\n\n[`usethis::use_data()` or `usethis::use_data_raw()`](https://usethis.r-lib.org/reference/use_data.html) make it simple to add data to the application package:\n\n\n```{r}\n#| label: use_data_raw\n#| code-fold: false \nusethis::use_data_raw(\"movies\")\n```\n\n```{verbatim}\n✔ Creating 'data-raw/'\n✔ Writing 'data-raw/movies.R'\n• Modify 'data-raw/movies.R'\n• Finish the data preparation script in 'data-raw/movies.R'\n• Use `usethis::use_data()` to add prepared data to package\n```\n\nIn the `data-raw/movies.R` script, I want to import the `movies.RData` file, but where should I import it from? It depends. In R packages, data is stored in either [`data/` or `data-raw/`](https://r-pkgs.org/data.html). To access a copy of the `movies` dataset in `duap` (i.e., with `duap::movies`), I can place the `movies.RData` file in `data-raw/` and import it by adding the following to `data-raw/movies.R`:\n\n\n```{verbatim}\n#| label: write-movies-data-raw\n#| code-fold: false \n## code to prepare `movies` dataset goes here\nload(\"data-raw/movies.RData\")\nusethis::use_data(movies, overwrite = TRUE)\n```\n\nNote `data-raw/movies.R` includes a call to `usethis::use_data()`, and when it's executed, I can see a `data/` folder is created and `movies` is saved as `movies.rda`:\n\n\n```{r}\n#| label: load-movies-RData\n#| code-fold: false \nload(\"data-raw/movies.RData\")\nusethis::use_data(movies, overwrite = TRUE)\n```\n\n```{verbatim}\n✔ Adding 'R' to Depends field in DESCRIPTION\n✔ Creating 'data/'\n✔ Saving 'movies' to 'data/movies.rda'\n• Document your data (see 'https://r-pkgs.org/data.html')\n```\n\n## Installed files\n\nThe `inst/` folder plays a special role when developing R packages: \n\n::: {style='font-size: 0.90em;'}\n\n> \"*When a package is installed, everything in `inst/` is copied into the top-level directory of the installed package*\" - [R Packages, 2ed](https://r-pkgs.org/misc.html#sec-misc-inst)\n\n:::\n\nConsider the example folder and files below: `file.txt`, `CITATION`, and `extdata/my_data.csv`:\n\n::: {layout-ncol=2}\n\n##### Source (development) form \n\n```{verbatim}\n#| code-fold: false\ninst/\n  ├── file.txt\n  ├── CITATION\n  └── extdata/\n        └── my_data.csv\n```\n\n##### Binary (installed) form \n\n```{verbatim}\n#| code-fold: false\nfile.txt\nCITATION\nextdata/\n  └── my_data.csv\n```\n\n:::\n\nThe neat thing about the `inst/` folder is that after we've loaded and installed our package, we can access the files in `inst/extdata/` with the [`system.file()` function](https://pkgload.r-lib.org/reference/system.file.html):\n\nIf I want to test functions in `duap` using `movies.RData` (or another dataset), those should be placed in `inst/extdata/`\n\n### [`inst/`]{style=\"font-size: 1.10em\"}\n\nA great way to understand what files are available in `inst/` when your package is to pass `system.file()` to `fs::dir_tree()`:\n\n```{r}\n#| label: tree-extdata-movies\n#| code-fold: false \nfs::dir_tree( # wrap this in a folder tree\n  system.file(package = \"duap\"))\n```\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| collapse: true \n#| code-summary: 'expand to see inst/ folder contents'\n/path/to/installed/package/duap\n├── DESCRIPTION\n├── INDEX\n├── LICENSE\n├── Meta\n│   ├── Rd.rds\n│   ├── data.rds\n│   ├── features.rds\n│   ├── hsearch.rds\n│   ├── links.rds\n│   ├── nsInfo.rds\n│   └── package.rds\n├── NAMESPACE\n├── R\n│   ├── duap\n│   ├── duap.rdb\n│   └── duap.rdx\n├── data\n│   ├── Rdata.rdb\n│   ├── Rdata.rds\n│   └── Rdata.rdx\n├── extdata\n│   └── movies.RData\n├── help\n│   ├── AnIndex\n│   ├── aliases.rds\n│   ├── duap.rdb\n│   ├── duap.rdx\n│   ├── figures\n│   └── paths.rds\n└── html\n    ├── 00Index.html\n    └── R.css\n```\n\nThe `system.file()` function will show me the path to the locally installed version of the package (hence the `/path/to/installed/package/` at the beginning of the path).\n\nThe `inst/exdata/` folder comes in handy for adding example data, but it's also useful for application development (more on that later).\n\n\n:::: {.callout-tip title=\"The `inst/` folder\"}\n\n::: {style='font-size: 1.10em;'}\nTake a look at the `inst/extdata/` folder  [`readr::readr_example()`](https://github.com/tidyverse/readr/blob/5ac729aa9a70fef297a634d2332ff8ff1af874fb/R/example.R) function to understand more about how this works.\n:::\n\n::::\n\n\n\n\n#### Recap: data and installed files\n\nR Packages have a consistent and standardized way of storing data, and have designated locations for internal and external data.\n\n::: {#fig-pkg-data .column}\n![](pkg-data.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage data folders\n:::\n\n## Documentation \n\nFunction documentation is handled with the `R/` folder and `roxygen2` comments/tags, but `duap` needs a `README` file, and a place for long-form documentation. Fortunately, [RMarkdown](https://rmarkdown.rstudio.com/) handles each of these well:\n\n### [`use_readme_rmd()`]{style=\"font-size: 1.10em\"}\n\nI can create a `README` file using [`usethis::use_readme_md()`](https://usethis.r-lib.org/reference/use_readme_rmd.html) or [`usethis::use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html)\n\n-   I prefer the `.Rmd` file because it comes with executable code chunks.\n    \n    ```{r}\n    #| label: use_readme_rmd\n    #| code-fold: false \n    usethis::use_readme_rmd()\n    ```\n\n    ```{verbatim}\n    ✔ Setting active project to '/Users/mjfrigaard/projects/duap'\n    ✔ Writing 'README.Rmd'\n    ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n    • Modify 'README.Rmd'\n    • Update 'README.Rmd' to include installation instructions.\n    ✔ Writing '.git/hooks/pre-commit'\n    ```\n\n    -   When I knit `README.Rmd`, it automatically generates the `README.md` for the package.\n\n\n### [`use_vignette()`]{style=\"font-size: 1.10em\"}\n\nFor long-form documentation I can use [vignettes.](https://r-pkgs.org/vignettes.html#introduction) \n\n-   Vignettes can be created with [`usethis::use_vignette()`](https://usethis.r-lib.org/reference/use_vignette.html)\n\n    \n    ```{r}\n    #| label: use_vignette\n    #| code-fold: false \n    usethis::use_vignette(\"duap\")\n    ```\n    \n    ```{verbatim}\n    ✔ Adding 'knitr' to Suggests field in DESCRIPTION\n    ✔ Setting VignetteBuilder field in DESCRIPTION to 'knitr'\n    ✔ Adding 'inst/doc' to '.gitignore'\n    ✔ Creating 'vignettes/'\n    ✔ Adding '*.html', '*.R' to 'vignettes/.gitignore'\n    ✔ Adding 'rmarkdown' to Suggests field in DESCRIPTION\n    ✔ Writing 'vignettes/duap.Rmd'\n    • Modify 'vignettes/duap.Rmd'\n    ```\n\nVignettes are also written in RMarkdown and rendered whenever the package is built/installed.\n\n\n```{verbatim}\n#| label: use_vignette-tree\n#| code-fold: false \nduap/\n    └── vignettes/\n            └── duap.Rmd\n\n1 directory, 1 file\n```\n\n\nBy combining `rmarkdown` and `knitr`, R packages have a documentation framework that has the added benefit of being somewhat fool-proof: vignettes have to successfully render for the package to be installed.\n\n::: {#fig-build-vignettes .column}\n![](install-vignettes.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage vignettes\n:::\n\n```{r}\n#| label: co_box_vignettes_images\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(color = \"b\",\n  header = \"Vignette figures\",\n  contents = \"Images in vignettes are kept in `man/figures/`\n\n<pre>\nduap/\n  ├── vignettes/\n  │       └── duap.Rmd\n  └── man/\n      └── figures/\n          └── duap-img-1.png\n</pre>\n  \")\n```\n\n\n\n#### Recap: documentation\n\nThe vignettes folder will long-form documentation about how the application works, use cases, and features (and `roxygen2` will document each function).\n\n::: {#fig-pkg-docs .column}\n![](pkg-docs.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nDocumentation in `README` and `vignettes/`\n:::\n\n\n## Tests \n\nTesting is an important part of any package, and apps tend to require additional tests (especially when they're moving from 'development' into 'production' environments).\n\n### [`use_testthat()`]{style=\"font-size: 1.10em\"}\n\nTo apply the testing framework provided by the [`testthat` package.](https://testthat.r-lib.org/) package, I'll use `usethis::use_testthat()`:\n\n\n```{r}\n#| label: use_testthat\n#| code-fold: false \nusethis::use_testthat()\n```\n\n```{verbatim}\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\n```\n\nThis creates a new `tests/` folder, with a `testthat/` sub-folder and script.\n\n\n```{verbatim}\n#| label: use_testthat-tree\n#| code-fold: false \nduap/\n    └── tests/\n          ├── testthat/\n          └── testthat.R\n        \n2 directories, 1 file\n```\n\n#### Writing tests \n\n[`testthat`](https://testthat.r-lib.org/) is designed for unit tests (i.e., testing each functional 'unit' in the code), but for shiny apps, we need to think beyond standard unit testing. We need to confirm the functions work and return predictable results, but we also need to make sure they play well with each other (integration tests), and that the application can be deployed (system tests).\n\n#### Recap: testing\n\nTesting is well described in the [shiny documentation](https://shiny.rstudio.com/articles/testing-overview.html) and in [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html). Generally speaking, unit tests are performed with [`testthat`](https://testthat.r-lib.org/), and module testing can be done with [`shiny::testServer()`](https://shiny.rstudio.com/reference/shiny/1.7.0/testserver). To test the full application (or a specific behavior) use the [`shinytest2`](https://rstudio.github.io/shinytest2/) package.\n\n::: {#fig-pkg-tests .column}\n![](pkg-tests.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nTesting framework from `testthat`\n:::\n\n\n# Use \n\nUsing an app built as a package is similar to using any R function we've loaded from a package. After successfully loading, documenting, and installing the package, I can run the app by loading the `duap` (with `library(duap)`) and `moviesApp()`:\n\n::: {#fig-duap-inst-app .column}\n![](duap-app.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`duap::moviesApp()`\n:::\n\n## Recap\n\nI've skipped over some important development steps covered in [R packages](https://r-pkgs.org/) ([license](https://r-pkgs.org/whole-game.html#use_mit_license), using [Git/GitHub](https://r-pkgs.org/whole-game.html#use_git), [code coverage](https://r-pkgs.org/testing-design.html#sec-testing-design-coverage), [NEWS](https://r-pkgs.org/other-markdown.html#sec-news), etc.), and you should bookmark this text as you start developing shiny app-packages. Hopefully this post has demonstrated that by building shiny apps as R packages, a suite of developer tools are available in the RStudio IDE (and the application files and folders have a uniform structure).\n\n`duap` is a substantial improvement over a bare-bones shiny application. An app-package holds the code, data, and documentation *and* allows us to write and execute unit tests, document help files for our functions with `roxygen2`, and check installation with `devtools::check()` and `devtools::install()`. App-packages can also be converted to [`pkgdown` sites](https://pkgdown.r-lib.org/articles/pkgdown.html) (which make them even easier to share).\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: utils\n#| eval: true \n#| echo: false \n#| include: false\nlibrary(kableExtra)\noptions(repos = c(CRAN = \"http://cran.rstudio.com\"))\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n    b = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    g = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    o = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    r = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.05em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\n```\n\n\nIn this post, I'll be using [`devtools`](https://devtools.r-lib.org/) and [`usethis`](https://usethis.r-lib.org/) to develop  [`duap`](https://github.com/mjfrigaard/duap), an R package that *contains* a shiny application (i.e., *`devtools`/`usethis` app-package*).\n\n```{r}\n#| label: co_box_long\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(color = \"r\", \"Warning\", \"_This is a long post because I cover many of the steps used to build R packages. If you'd prefer to more information on developing R packages, I suggest starting with [the whole game section](https://r-pkgs.org/whole-game.html)._\")\n```\n\nThe R package development workflow is well documented in [R Packages ](https://r-pkgs.org/whole-game.html). I've written this post because sometimes I encounter shiny developers who are comfortable with reactivity, modules, HTML/CSS, etc., but they haven't developed an R package. I'll walk through converting an existing shiny application into an app-package *in detail*, because R package development differs from creating a standalone shiny application. My hope is that this post will 'fill in the gaps' of package development (and keep you from rebuilding your application entirely from scratch).\n\n## Outline\n\nI’ll be using the application from RStudio’s [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/) tutorial. This is a great resource that can be run locally or on [posit.cloud](https://posit.cloud/). I've organized the app-package development process into three areas: **Start**, **Build**, and **Use**. \n\n  -   **Start** covers the steps required to begin building a shiny app withing a package framework (from the console and IDE).\n\n  -   **Build** covers the development process, which includes writing and storing code, data, external resources (i.e., data), documentation, and testing. \n\n  -   **Use** shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE).\n\nThe GitHub repo with the code for `duap` is located  [here](https://github.com/mjfrigaard/duap) if you'd like to follow along.\n\n## Start\n\nIt's [highly recommended](https://mastering-shiny.org/scaling-packaging.html?q=highly%20recommend#scaling-packaging) to build your [shiny app as an R package](https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package). R packages require more work upfront (and a bit of a learning if you're not familiar with the process), but the long-term benefits are usually well worth the initial investment of time.\n\n### What makes an R package?\n\nIf you've been reading [R packages](https://r-pkgs.org/) or [Mastering Shiny](https://mastering-shiny.org/index.html), you may have seen one of the following quotes, \n\n> \"*‘RStudio and `devtools` consider any directory containing `DESCRIPTION` to be a package*’ - [R Packages](https://r-pkgs.org/description.html#the-description-file)\n\n> '*all a project needs to be a package is a directory of `R/` files and a `DESCRIPTION` file.*' - [Packages Chapter of Mastering Shiny](https://mastering-shiny.org/scaling-packaging.html#summary-18)\n\nSo which is it--a `DESCRIPTION` file or a `DESCRIPTION` file *and* a directory of `R/` files? Typically, R packages contain the following files: \n\n```{bash}\n#| eval: false\n#| code-fold: false\nrpkg/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── rpkg.Rproj\n  ├── R/\n  ├── man/\n  ├── tests/\n  ├── data/ \n  ├── vignettes/ \n  └── inst/ \n\n1 directory, 5 files\n```\n\nHowever, these files are not required to convert an existing shiny app project into an R package. I'll use the app stored in this [bare-bones shiny app (`bbsa`)](https://github.com/mjfrigaard/bbsa) to demonstrate. Feel free to download this app and follow along. \n\nThe initial files in this project are below: \n\n```{bash}\n#| eval: false\n#| code-fold: false\nbbsa/\n  ├── README.md\n  ├── app.R\n  ├── bbsa.Rproj\n  ├── movies.RData\n  └── utils.R\n\n1 directory, 5 files\n```\n\n`bbsa` will run the application stored in `app.R`, load the data (`movies.RData`), and source the utility function stored in `utils.R`. This application has a `README.md`, but no `DESCRIPTION` file. \n\n#### Project [`.Rproj`]{style=\"font-size: 1.10em\"} files\n\nWhen a new shiny app project is created from the **New Project Wizard**, the `.Rproj` file contains the following (if you open it with a text-editor) \n\n```{bash}\n#| eval: false\n#| code-fold: false\nVersion: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: XeLaTeX\n```\n\nThese fields are settings for a shiny app project, and none of them are specific to R packages. \n\nLets see what happens if I create an `R/` folder (with the `utils.R` file) and a `DESCRIPTION` file.\n\n#### [`R/`]{style=\"font-size: 1.10em\"} & [`DESCRIPTION`]{style=\"font-size: 1.10em\"}\n\nThe `R/utils.R` file will hold the contents of `utils.R` in the root folder:\n\n```{r}\n#| eval: false\n#| code-fold: false\npoint_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n```\n\nAnd the contents of the `DESCRIPTION` file are below (adapted from [R Packages](https://r-pkgs.org/description.html#the-description-file)): \n\n```{verbatim}\n#| eval: false\n#| code-fold: false\nPackage: myShinyAppPkg\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", \n    role = c(\"aut\", \"cre\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n```\n\nThe `bbsa` shiny app project now has the following files and folders: \n\n```{bash}\n#| eval: false\n#| code-fold: false\nbbsa/\n├── DESCRIPTION\n├── R\n│   └── utils.R\n├── README.md\n├── app.R\n├── bbsa.Rproj\n├── movies.RData\n└── utils.R\n\n2 directories, 7 files\n```\n\nIf I take a quick look at the available panes in the IDE, I can confirm none of the **Build** tools are available: \n\n:::: {.column-page-inset-right}\n\n::: {#fig-shiny_app_ide}\n![shiny app IDE](shiny_app_ide.png){#fig-shiny_app_ide height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nProject IDE panes\n:::\n\n::::\n\n#### Terminate R session\n\nI'll terminate my R session by clicking on **Session** > **Terminate R...** > **Yes**\n\n::: {#fig-terminate layout-ncol=2}\n\n![Session > Terminate](terminate_session.png){#fig-terminate_session}\n\n![Click Yes](terminate_yes.png){#fig-terminate_yes}\n\nTerminate your R session\n:::\n\n\n#### Package [`.Rproj`]{style=\"font-size: 1.10em\"} file\n\nNow I'll open the `bbsa.Rproj` file with a text-editor again (or expand the code below to view the new `bbsa.Rproj`):\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| code-summary: 'show/hide package .Rproj'\nVersion: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: XeLaTeX\n\nBuildType: Package\nPackageUseDevtools: Yes\nPackageInstallArgs: --no-multiarch --with-keep.source\n```\n\nI can see three new lines have been added to `bbsa.Rproj`: \n\n1. `BuildType: Package`  \n2. `PackageUseDevtools: Yes`   \n3. `PackageInstallArgs: --no-multiarch --with-keep.source` \n\nIt's not important that you know the meaning for each of these fields, but you can probably tell they're for converting our previous project into a package (and you'll see the third one again during package development!)\n\nI'll take another look at the RStudio IDE to review the available panes: \n\n:::: {.column-page-inset-right}\n\n::: {#fig-shiny_app_pkg_ide}\n![shiny app-package IDE](shiny_app_pkg_ide.png){#fig-shiny_app_pkg_ide height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nApp-package IDE panes\n:::\n\n::::\n\nI can see the **Build** pane has been added--now I can **Install**, **Test**, and **Check** my package with a single click!\n\n#### What happened to [`R/utils.R`]{style=\"font-size: 1.10em\"}?\n\nBut wait--if I open `R/utils.R`, I notice that file is now empty: \n\n:::: {.column-page-inset-right}\n\n::: {#fig-clean_out_R}\n![Empty R/ file](clean_out_R.png){#fig-clean_out_R height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`R/utils.R` has been cleared out!\n:::\n\n::::\n\n\n```{r}\n#| label: co_box_description_pkgs\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(\n  color = \"r\", \n  header = \"Converting projects to packages with `DESCRIPTION` files\", \n  contents = \"\nAdding a `DESCRIPTION` file to your RStudio project *will* convert it to an R package, but any files stored in the standard packages folders (i.e., `R/`, `man`, `inst/`, etc.) will be removed (i.e., wait until the **Build** pane is available, then create these folders). \n  \")\n```\n\n\n\nNow I'll cover creating an R package from the **Console** and using the **New Project Wizard**\n\n### From the Console\n\nTo create a shiny app package, I'll install [`devtools`](https://devtools.r-lib.org/) (which also installs [`usethis`](https://usethis.r-lib.org/)).\n\n```{r}\n#| label: install-devtools-duap\n#| code-fold: false\ninstall.packages(\"devtools\")\nlibrary(devtools)\n```\n\nIf I am creating a package from the console, the function for building a new package is `usethis::create_package()`:\n\n```{r}\n#| label: create_package-duap\n#| code-fold: false\nusethis::create_package(path = \"path/to/app-package/folder\")\n```\n\nA new RStudio session will open (and the name of the project--i.e., the name of the `.Rproj` file--will be identical to the package name).\n\n### From the Project Wizard\n\nIf I am using RStudio's **New Project Wizard** to create a new shiny app package, I'd see the following defaults:\n\n::: {#fig-rpkg-setup .column}\n![](rpkg-setup.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nDefault `usethis::create_package` project setup\n:::\n\nThe new package built from the console will have the following folder and files:\n\n```{verbatim}\n#| label: duap-console-tree\n#| code-fold: false\nduap/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  └── duap.Rproj\n  \n1 directory, 3 files\n```\n\nPackages built from the **New Project Wizard** will have a few additional folders and files:\n\n```{verbatim}\n#| label: duap-wizard-tree\n#| code-fold: false\nduap/\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  │   └── hello.R\n  ├── man/\n  │   └── hello.Rd\n  ├── myRPkg.Rproj\n  └── renv/\n      ├── activate.R\n      ├── sandbox/\n      │   └── R-4.2\n      └── settings.dcf\n\n4 directories, 7 files\n```\n\nThese additional files are:\n\n-   `hello.R` in the `R/` folder\\\n-   `hello.Rd` in the `man/` folder\\\n-   a `renv/` folder for package management\n\n`R/hello.R` and `man/hello.Rd` are boilerplate files and can be deleted, but both package setups have a `DESCRIPTION`, `NAMESPACE`, `R/` folder, and `.Rproj` file. These four items can be thought of as the 'minimal package' setup required to access RStudio's **Build** tools.\n\n\n\n# Build\n\nThe example app code comes from the [vanilla-shiny](https://github.com/mjfrigaard/vanilla-shiny) repo, which contains a modularized version of the app in [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/).\n\n## Metadata files\n\nR packages have two metadata files: `DESCRIPTION` and `NAMESPACE`. Neither of these files have extensions, and both contain vital information for your package to function properly.\n\nWe'll manually edit the `DESCRIPTION` file, but the `NAMESPACE` file is automatically generated during the development process.\n\n### [`DESCRIPTION`]{style=\"font-size: 1.10em\"}\n\nThe `DESCRIPTION` file plays an important role in R packages (as we learned above)--that's why creating this file is the first step when [converting an existing app](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) (and when creating a [new `golem` apps](https://thinkr-open.github.io/golem/articles/a_start.html#fill-the-description)).\n\n```{r}\n#| label: co_box_desc\n#| eval: false \n#| results: asis\n#| echo: false\nco_box(\n  color = \"b\", \n  header = \"`DESCRIPTION` files\", \n  contents = \"![](desc.png){height='15%' width='15%' fig-align='left'}\\n\n  *'RStudio and `devtools` consider any directory containing `DESCRIPTION` to be a package'* - [R Packages](https://r-pkgs.org/description.html#the-description-file)\")\n```\n\nThe initial `DESCRIPTION` file in `duap` is below:\n\n\n```{verbatim}\n#| label: DESCRIPTION-duap\n#| code-fold: false\nPackage: duap\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", \n    role = c(\"aut\", \"cre\"),\n    comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n```\n\n\nThe package name is automatically added, but the remaining fields need to be completed (consult [R packages](https://r-pkgs.org/description.html#the-description-file) for more information on filling out the `DESCRIPTION` file).\n\nThe `DESCRIPTION` file in the `duap` prompts the RStudio IDE to activate the **Build** tools pane (see below):\n\n::: {#fig-rpkg-ide .column}\n![](rpkg-ide.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage **Build** tools\n:::\n\n## Application code\n\nThe contents of the `app.R` and `utils.R` need to be moved into the `R/` folder. When developing R packages, new `.R` files are created with `usethis::use_r()`. \n\n### [`use_r()`]{style=\"font-size: 1.10em\"}\n\nI'm going to create `duap` using [modules](https://mastering-shiny.org/scaling-modules.html#module-motivation) to separate the app into the following digestible mental 'chunks':\n\n-   The app collects the inputs in the `shiny::sidebarPanel()`\n\n-   These values are then used to create a plot in the `shiny::mainPanel()`\n\nBased on this layout, I'll create one module to collect and return the user-inputs (`mod_var_input`), and another module to display the plot (`mod_display_plot`). \n\nI'll create these files using [`usethis::use_r()`](https://usethis.r-lib.org/reference/use_r.html) below:\n\n\n```{r}\n#| label: use_r-mod_var_input\n#| code-fold: false\nusethis::use_r(\"mod_var_input\")\n```\n\n```{verbatim}\n✔ Setting active project to '/Users/mjfrigaard/projects/duap'\n• Modify 'R/mod_var_input.R'\n• Call `use_test()` to create a matching test file\n```\n\n```{r}\n#| label: use_r-mod_display_plot\n#| code-fold: false\nusethis::use_r(\"mod_display_plot\")\n```\n\n```{verbatim}\n• Modify 'R/mod_display_plot.R'\n• Call `use_test()` to create a matching test file\n```\n\nThe display module also relies on a utility function (`plot_points()`), so I need to create a script for the utility function, which I put in a file with a name similar to the module it belongs to (i.e., `utils_display_plot`).\n\n\n```{r}\n#| label: use_r-utils_display_plot\n#| code-fold: false\nusethis::use_r(\"utils_display_plot\")\n```\n\n```{verbatim}\n• Modify 'R/utils_display_plot.R'\n• Call `use_test()` to create a matching test file\n```\n\nFinally, I'll place the modules into basic ui and server arguments in a call to `shiny::shinyApp()`:\n\n\n```{r}\n#| label: use_r-moviesApp\n#| code-fold: false\nusethis::use_r(\"moviesApp\")\n```\n\n```{verbatim}\n• Modify 'R/moviesApp.R'\n• Call `use_test()` to create a matching test file\n```\n\nModules consist of two functions; one in the UI (with a `_ui` suffix), and another in the server (with a `_server` suffix), but it's common practice to combine them in a single file.\n\nBelow is the `mod_var_input` module: \n\n-   The ui function is stored in `mod_var_input_ui`:\n    \n    ```{r}\n    #| label: mod_var_input_ui\n    #| code-fold: true\n    #| eval: false\n    mod_var_input_ui <- function(id) {\n      ns <- shiny::NS(id)\n      shiny::tagList(\n        shiny::selectInput(\n          inputId = ns(\"y\"),\n          label = \"Y-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"audience_score\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"x\"),\n          label = \"X-axis:\",\n          choices = c(\n            \"IMDB rating\" = \"imdb_rating\",\n            \"IMDB number of votes\" = \"imdb_num_votes\",\n            \"Critics Score\" = \"critics_score\",\n            \"Audience Score\" = \"audience_score\",\n            \"Runtime\" = \"runtime\"\n          ),\n          selected = \"imdb_rating\"\n        ),\n        shiny::selectInput(\n          inputId = ns(\"z\"),\n          label = \"Color by:\",\n          choices = c(\n            \"Title Type\" = \"title_type\",\n            \"Genre\" = \"genre\",\n            \"MPAA Rating\" = \"mpaa_rating\",\n            \"Critics Rating\" = \"critics_rating\",\n            \"Audience Rating\" = \"audience_rating\"\n          ),\n          selected = \"mpaa_rating\"\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"alpha\"),\n          label = \"Alpha:\",\n          min = 0, max = 1, step = 0.1,\n          value = 0.5\n        ),\n        shiny::sliderInput(\n          inputId = ns(\"size\"),\n          label = \"Size:\",\n          min = 0, max = 5,\n          value = 2\n        ),\n        shiny::textInput(\n          inputId = ns(\"plot_title\"),\n          label = \"Plot title\",\n          placeholder = \"Enter plot title\"\n        )\n      )\n    }\n    ```\n    \n-   The server function is stored in `mod_var_input_server`:\n    \n    ```{r}\n    #| label: mod_var_input_server\n    #| code-fold: true\n    #| eval: false\n    mod_var_input_server <- function(id) {\n    \n      shiny::moduleServer(id, function(input, output, session) {\n        return(\n          list(\n            \"x\" = shiny::reactive({\n              input$x\n            }),\n            \"y\" = shiny::reactive({\n              input$y\n            }),\n            \"z\" = shiny::reactive({\n              input$z\n            }),\n            \"alpha\" = shiny::reactive({\n              input$alpha\n            }),\n            \"size\" = shiny::reactive({\n              input$size\n            }),\n            \"plot_title\" = shiny::reactive({\n              input$plot_title\n            })\n          )\n        )\n      })\n    }\n    ```\n    \n    -   View the display module [here.](https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/mod_display_plot.R) \n    \n### Standalone app function \n\nAfter I've written the modules and utility functions, I need to add these into a [standalone app function](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) `moviesApp()` (stored in `R/moviesApp.R`).\n\n-   This file contains a call to `shiny::shinyApp()` and includes the module functions (in their relative positions)\n\n    -   Note the `id`s in each module function pair must match to create the shared namespace. \n    \n    \n    ```{r}\n    #| label: movies-app-file\n    #| code-fold: false\n    moviesApp <- function() {\n      # call to shinyApp()\n      shiny::shinyApp(\n        \n        # UI ----\n        ui = shiny::fluidPage(\n          shiny::sidebarLayout(\n            shiny::sidebarPanel(\n              # UI input module ----\n              mod_var_input_ui(\"vars\")\n            ),\n            # UI display module ----\n            shiny::mainPanel(\n              mod_display_plot_ui(\"plot\")\n            )\n          )\n        ),\n        \n        server = function(input, output, session) {\n          # server input module (capturing inputs) ----\n          selected_vars <- mod_var_input_server(\"vars\")\n          # server display module (rendering outputs) ----\n          mod_display_plot_server(\"plot\", \n                                  var_inputs = selected_vars)\n        }\n      )\n    }\n    ```\n\n\n### [`roxygen2`]{style=\"font-size: 1.10em\"}\n\nWhen I'm confident my code works (and the app renders), I want to make sure these functions are properly documented by describing each function with [`roxygen2`](https://roxygen2.r-lib.org/) tags. To quickly insert a `roxygen2` skeleton, use the RStudio IDE (or the keyboard shortcut: `Option` + `Shift` + `Command` + `R`)\n\nThe standard `roxygen2` skeleton tags include `@param`, `@return`, `@export`, and `@examples`\n\n- `@param` lists the existing arguments (or variables) for the function\n\n- `@return` should be a description of the object/side-effect/thing the function produces (and any warnings or errors if used incorrectly)\n\nThe following [`roxygen2`](https://roxygen2.r-lib.org/) tags will be used to update the `NAMESPACE` file (which you should never edit manually!)\n\n- `@export` will make the function available to other people when they use your package \n\n- `@importFrom` vs. `@import`   \n    -   it's always a good idea to be explicit about the external functions and packages you're using, so most of the time you should use `@importFrom` (there's even a handy helper `usethis::use_import_from(\"package\", \"function\")`)   \n    -   `@import` should only be used when [\"*you make such heavy use of so many functions from another package that you want to import its entire namespace. This should be relatively rare.*\"](https://r-pkgs.org/dependencies-in-practice.html#in-code-below-r)\n\n`roxygen2` imports and exports are covered in more depth [in R packages.](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports).\n\nYou can see the full code for `point_plot()` below (or follow [this link](https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/) to view all the modules in the `R/` folder):\n\n::: {style=\"font-size: 0.80em; ; color: #696969;\"}\n*Click on Code to view*\n:::\n\n\n```{r}\n#| label: roxygen2-point_plot\n#| code-fold: true\n#' Plot points (shiny)\n#'\n#' @param df input dataset (tibble or data.frame)\n#' @param x_var x variable\n#' @param y_var y variable\n#' @param col_var color variable\n#' @param alpha_var alpha value\n#' @param size_var size value\n#'\n#' @return plot object\n#' @export point_plot\n#'\n#' @importFrom ggplot2 ggplot aes geom_point\n#'\n#' @examples\n#' require(duap)\n#' movies <- duap::movies\n#' point_plot(df = movies,\n#'   x_var = \"critics_score\",\n#'   y_var = \"imdb_rating\",\n#'   col_var = \"critics_rating\",\n#'   alpha_var = 1/3,\n#'   size_var = 2)\n#' }\npoint_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n```\n\n\n\n\n\n```{r}\n#| label: co_box_roxygen2_skeleton\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(color = \"g\", \n  header = \"Tip: `roxygen2` skeleton\", \n  contents = \"*As well as generating `.Rd` files, `roxygen` will also create a `NAMESPACE` for you, and will manage the `Collate` field in `DESCRIPTION`*\n\n::: {#fig-roxygen2-tags .column}\n![](ide-roxygen-skeleton.png){height='100%' width='100%' fig-align='center'}\n\nStandard `roxygen2` skeleton\n:::\")\n```\n\n## Test drive\n\n::: {style='font-size: 1.10em; font-weight: bold;'}\n\n> \"The `load_all()` function is arguably the most important part of the devtools workflow.\" - [R Packages, 2ed](https://r-pkgs.org/workflow101.html#sec-workflow101-load-all)\n\n:::\n\nYou'll use the `devtools::load_all()` function frequently while you're developing your app-package. `load_all()` simulates how your functions will work when someone else uses your package. This removes the need to define them in the global workspace. It also gives you access to the functions from any add-on packages you've imported into your `NAMESPACE` (i.e., you won't need to run `library()`). \n\n\nI highly recommend using the keyboard shortcuts: \n\n\n\n:::: {.callout-important title=\"`devtools::load_all()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\n:::\n\n::::\n\nRead more about the many benefits of using `load_all()` in [R packages.](https://r-pkgs.org/workflow101.html#benefits-of-load_all)\n\n### [`load_all()`]{style=\"font-size: 1.10em\"}\n\nAfter documenting everything with `roxygen2`, I want to make sure none of the functions are in my **Environment** (remove with `rm()` if necessary) and load the functions with [`devtools::load_all()`](https://r-pkgs.org/whole-game.html#sec-whole-game-load-all).\n\n\n```{r}\n#| label: duap-load_all\n#| code-fold: false\ndevtools::load_all()\n```\n\n```{verbatim}\nℹ Loading duap\n```\n\n## NAMESPACE & Help pages \n\n`devtools::document()` processes the `roxygen2` tags to generate the `NAMESPACE` and the `.Rd` files in the `man/` folder. The `.Rd` files are used to access the help files (i.e., `package::function()` can be accessed with `??function`).\n\nManaging your package [NAMESPACE file](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-NAMESPACE-workflow) is not something you do directly: it's handled with the `roxygen2` tags we covered above. The keyboard shortcuts for `devtools::document()` are below:\n\n\n:::: {.callout-important title=\"`devtools::document()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>\n\n:::\n\n::::\n\n### [`document()`]{style=\"font-size: 1.10em\"}\n\nRun `devtools::document()` when you've written a new function with `roxygen2` tags or included a package in the `DESCRIPTION` file under `Imports:`\n\n```{r}\n#| label: duap-document\n#| code-fold: false\ndevtools::document()\n```\n\n```{verbatim}\nℹ Updating duap documentation\nFirst time using roxygen2. Upgrading automatically...\nSetting `RoxygenNote` to \"7.2.3\"\nℹ Loading duap\nWriting NAMESPACE\nWriting mod_plot_ui.Rd\nWriting mod_plot_server.Rd\nWriting point_plot.Rd\nWriting mod_var_input_ui.Rd\nWriting mod_var_input_server.Rd\nWriting moviesApp.Rd\n```\n\n#### [`NAMESPACE` != `DESCRIPTION`]{style=\"font-size: 0.90em\"}\n\nIt's important to understand that `devtools::document()` will use the `roxygen2` tags to create the `man/*.Rd` files and update the `NAMESPACE`, but **`devtools::document()` does not update the `Imports:` section in the `DESCRIPTION`.** \n\nTo add packages dependencies to the `DESCRIPTION`, you'll need to use the [`usethis::use_package()` function](https://usethis.r-lib.org/reference/use_package.html). Read more on this topic in [Confusion about `Imports` ](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports).\n\nThe table below shows the connection between `roxygen2` tags, the resulting `NAMESPACE` entry, and what should be listed in the `DESCRIPTION`. \n\n::: {style=\"font-size: 0.80em;\"}\n\n```{r}\n#| label: co_box_namespace\n#| eval: true\n#| echo: false \n#| results: asis\n# roxy_ns_df -----\nroxy_ns_df <- data.frame(\n  check.names = FALSE,\n  `roxygen2 tag` = c(\"@importFrom\", \"@import\", \"@export\"),\n  `NAMESPACE directive` = c(\n    \"importFrom() : import selected object from another NAMESPACE\",\n    \"import(): import all objects from another package’s NAMESPACE.\",\n    \"export() : export the function, method, generic, or class so it’s available outside of the package (in the NAMESPACE)\"\n  ),\n  `Added in DESCRIPTION` = c(\"Nothing\", \"Imports:\", \"Nothing\")\n)\n\nco_box(\n  color = \"b\",\n  header = \"`roxygen2`, `NAMESPACE` & `DESCRPTION`\",\n  contents = kable_styling(\n    kable_input = knitr::kable(roxy_ns_df,\n      align = c(\"l\", \"l\", \"r\"),\n      bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\")\n    )\n  )\n)\n```\n\n:::\n\n## Checking installation\n\nAfter loading and documenting the `duap` package, I want to make sure I can install the package into my library with [`devtools::install()`](https://r-pkgs.org/whole-game.html#install). The keyboard shortcut for `devtools::install()` is below:\n\n:::: {.callout-important title=\"`devtools::document()` keyboard shortcuts\"}\n\n::: {style='font-size: 1.25em; font-weight: bold;'}\n\n- macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>\n\n- Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>\n\n:::\n\n::::\n\n### [`install()`]{style=\"font-size: 1.10em\"}\n\n```{r}\n#| label: duap-install\n#| code-fold: false\ndevtools::install()\n```\n\n```{verbatim}\n── R CMD build ────────────────────────────────────────────────────────────────\n✔  checking for file ‘/Users/mjfrigaard/projects/duap/DESCRIPTION’ ...\n─  preparing ‘duap’: (1.8s)\n✔  checking DESCRIPTION meta-information\n─  checking for LF line-endings in source and make files and shell scripts (520ms)\n─  checking for empty or unneeded directories\n   Omitted ‘LazyData’ from DESCRIPTION\n─  building ‘duap_0.1.0.tar.gz’\n   \nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD INSTALL \n  --install-tests \n* installing to library ...\n* installing *source* package ‘duap’ ...\n** using staged installation ...\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (duap)\n```\n\nRestart your R session and ensure you have a clean workspace:\n\n```{verbatim}\n   Restarting R session...\n\n* Project '~/projects/duap' loaded. [renv 0.16.0]\n```\n\nThen load your package with `library()`:\n\n```{r}\n#| eval: false\n#| echo: true\n#| code-fold: false\nlibrary(duap)\n```\n\nYou can also use **Install** icon in the **Build** pane, which installs the package, restarts the R session, and loads the package all with one click!\n\n::: {#fig-build-install .column}\n![](build-install.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n**Build** install package\n:::\n\n::: {#fig-build-restart .column}\n![](build-restart.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n**Build** restart and load\n:::\n\n#### Recap: the `R/` folder\n\nThe sequence I've demonstrated above (create `.R` file, write function, document with `roxygen2`, load, document, install) is the 'minimal version' of the [full development workflow](https://r-pkgs.org/whole-game.html). \n\nOnce a 'beta' version of the app is deployed, you will want to come back to the app to refactor, write tests, and make sure all the items in `devtools::check()` pass.\n\nStoring the application's code in the `R/` folder and (using RStudio's build tools) keeps files organized, well documented, and self-contained:\n\n-   All the code is stored in the `R/` folder\n\n-   I've separated my code into smaller pieces (modules) that can be tested independently (more on this later)\n\n-   My dependencies are being managed by `roxygen2` and `devtools::document()`, which will update the `NAMESPACE` with any functions tagged with `@importFrom` (or `@import`)    \n    -   I can also access functions I've written *outside* by adding `@export`\n\n\n::: {#fig-pkg-man .column}\n![](pkg-man.png){width=\"70%\" fig-align=\"center\"}\n\nFunction documentation in `man/` folder\n:::\n\nNow that I have the R version/package management being tracked and stored with `renv/` & `renv.lock`, function documentation in the `.Rd` files, the `DESCRIPTION` and `NAMESPACE`, I can move onto adding and using **data** in a shiny app package.\n\n## Additional package files\n\nMost app-packages will require files beyond the `.R` files in the `R/` folder. Apps will often use data files when they're deployed, which we'll cover next. \n\n### [`use_data_raw()`]{style=\"font-size: 1.10em\"}\n\n[`usethis::use_data()` or `usethis::use_data_raw()`](https://usethis.r-lib.org/reference/use_data.html) make it simple to add data to the application package:\n\n\n```{r}\n#| label: use_data_raw\n#| code-fold: false \nusethis::use_data_raw(\"movies\")\n```\n\n```{verbatim}\n✔ Creating 'data-raw/'\n✔ Writing 'data-raw/movies.R'\n• Modify 'data-raw/movies.R'\n• Finish the data preparation script in 'data-raw/movies.R'\n• Use `usethis::use_data()` to add prepared data to package\n```\n\nIn the `data-raw/movies.R` script, I want to import the `movies.RData` file, but where should I import it from? It depends. In R packages, data is stored in either [`data/` or `data-raw/`](https://r-pkgs.org/data.html). To access a copy of the `movies` dataset in `duap` (i.e., with `duap::movies`), I can place the `movies.RData` file in `data-raw/` and import it by adding the following to `data-raw/movies.R`:\n\n\n```{verbatim}\n#| label: write-movies-data-raw\n#| code-fold: false \n## code to prepare `movies` dataset goes here\nload(\"data-raw/movies.RData\")\nusethis::use_data(movies, overwrite = TRUE)\n```\n\nNote `data-raw/movies.R` includes a call to `usethis::use_data()`, and when it's executed, I can see a `data/` folder is created and `movies` is saved as `movies.rda`:\n\n\n```{r}\n#| label: load-movies-RData\n#| code-fold: false \nload(\"data-raw/movies.RData\")\nusethis::use_data(movies, overwrite = TRUE)\n```\n\n```{verbatim}\n✔ Adding 'R' to Depends field in DESCRIPTION\n✔ Creating 'data/'\n✔ Saving 'movies' to 'data/movies.rda'\n• Document your data (see 'https://r-pkgs.org/data.html')\n```\n\n## Installed files\n\nThe `inst/` folder plays a special role when developing R packages: \n\n::: {style='font-size: 0.90em;'}\n\n> \"*When a package is installed, everything in `inst/` is copied into the top-level directory of the installed package*\" - [R Packages, 2ed](https://r-pkgs.org/misc.html#sec-misc-inst)\n\n:::\n\nConsider the example folder and files below: `file.txt`, `CITATION`, and `extdata/my_data.csv`:\n\n::: {layout-ncol=2}\n\n##### Source (development) form \n\n```{verbatim}\n#| code-fold: false\ninst/\n  ├── file.txt\n  ├── CITATION\n  └── extdata/\n        └── my_data.csv\n```\n\n##### Binary (installed) form \n\n```{verbatim}\n#| code-fold: false\nfile.txt\nCITATION\nextdata/\n  └── my_data.csv\n```\n\n:::\n\nThe neat thing about the `inst/` folder is that after we've loaded and installed our package, we can access the files in `inst/extdata/` with the [`system.file()` function](https://pkgload.r-lib.org/reference/system.file.html):\n\nIf I want to test functions in `duap` using `movies.RData` (or another dataset), those should be placed in `inst/extdata/`\n\n### [`inst/`]{style=\"font-size: 1.10em\"}\n\nA great way to understand what files are available in `inst/` when your package is to pass `system.file()` to `fs::dir_tree()`:\n\n```{r}\n#| label: tree-extdata-movies\n#| code-fold: false \nfs::dir_tree( # wrap this in a folder tree\n  system.file(package = \"duap\"))\n```\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| collapse: true \n#| code-summary: 'expand to see inst/ folder contents'\n/path/to/installed/package/duap\n├── DESCRIPTION\n├── INDEX\n├── LICENSE\n├── Meta\n│   ├── Rd.rds\n│   ├── data.rds\n│   ├── features.rds\n│   ├── hsearch.rds\n│   ├── links.rds\n│   ├── nsInfo.rds\n│   └── package.rds\n├── NAMESPACE\n├── R\n│   ├── duap\n│   ├── duap.rdb\n│   └── duap.rdx\n├── data\n│   ├── Rdata.rdb\n│   ├── Rdata.rds\n│   └── Rdata.rdx\n├── extdata\n│   └── movies.RData\n├── help\n│   ├── AnIndex\n│   ├── aliases.rds\n│   ├── duap.rdb\n│   ├── duap.rdx\n│   ├── figures\n│   └── paths.rds\n└── html\n    ├── 00Index.html\n    └── R.css\n```\n\nThe `system.file()` function will show me the path to the locally installed version of the package (hence the `/path/to/installed/package/` at the beginning of the path).\n\nThe `inst/exdata/` folder comes in handy for adding example data, but it's also useful for application development (more on that later).\n\n\n:::: {.callout-tip title=\"The `inst/` folder\"}\n\n::: {style='font-size: 1.10em;'}\nTake a look at the `inst/extdata/` folder  [`readr::readr_example()`](https://github.com/tidyverse/readr/blob/5ac729aa9a70fef297a634d2332ff8ff1af874fb/R/example.R) function to understand more about how this works.\n:::\n\n::::\n\n\n\n\n#### Recap: data and installed files\n\nR Packages have a consistent and standardized way of storing data, and have designated locations for internal and external data.\n\n::: {#fig-pkg-data .column}\n![](pkg-data.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage data folders\n:::\n\n## Documentation \n\nFunction documentation is handled with the `R/` folder and `roxygen2` comments/tags, but `duap` needs a `README` file, and a place for long-form documentation. Fortunately, [RMarkdown](https://rmarkdown.rstudio.com/) handles each of these well:\n\n### [`use_readme_rmd()`]{style=\"font-size: 1.10em\"}\n\nI can create a `README` file using [`usethis::use_readme_md()`](https://usethis.r-lib.org/reference/use_readme_rmd.html) or [`usethis::use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html)\n\n-   I prefer the `.Rmd` file because it comes with executable code chunks.\n    \n    ```{r}\n    #| label: use_readme_rmd\n    #| code-fold: false \n    usethis::use_readme_rmd()\n    ```\n\n    ```{verbatim}\n    ✔ Setting active project to '/Users/mjfrigaard/projects/duap'\n    ✔ Writing 'README.Rmd'\n    ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n    • Modify 'README.Rmd'\n    • Update 'README.Rmd' to include installation instructions.\n    ✔ Writing '.git/hooks/pre-commit'\n    ```\n\n    -   When I knit `README.Rmd`, it automatically generates the `README.md` for the package.\n\n\n### [`use_vignette()`]{style=\"font-size: 1.10em\"}\n\nFor long-form documentation I can use [vignettes.](https://r-pkgs.org/vignettes.html#introduction) \n\n-   Vignettes can be created with [`usethis::use_vignette()`](https://usethis.r-lib.org/reference/use_vignette.html)\n\n    \n    ```{r}\n    #| label: use_vignette\n    #| code-fold: false \n    usethis::use_vignette(\"duap\")\n    ```\n    \n    ```{verbatim}\n    ✔ Adding 'knitr' to Suggests field in DESCRIPTION\n    ✔ Setting VignetteBuilder field in DESCRIPTION to 'knitr'\n    ✔ Adding 'inst/doc' to '.gitignore'\n    ✔ Creating 'vignettes/'\n    ✔ Adding '*.html', '*.R' to 'vignettes/.gitignore'\n    ✔ Adding 'rmarkdown' to Suggests field in DESCRIPTION\n    ✔ Writing 'vignettes/duap.Rmd'\n    • Modify 'vignettes/duap.Rmd'\n    ```\n\nVignettes are also written in RMarkdown and rendered whenever the package is built/installed.\n\n\n```{verbatim}\n#| label: use_vignette-tree\n#| code-fold: false \nduap/\n    └── vignettes/\n            └── duap.Rmd\n\n1 directory, 1 file\n```\n\n\nBy combining `rmarkdown` and `knitr`, R packages have a documentation framework that has the added benefit of being somewhat fool-proof: vignettes have to successfully render for the package to be installed.\n\n::: {#fig-build-vignettes .column}\n![](install-vignettes.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nPackage vignettes\n:::\n\n```{r}\n#| label: co_box_vignettes_images\n#| eval: true \n#| results: asis\n#| echo: false\nco_box(color = \"b\",\n  header = \"Vignette figures\",\n  contents = \"Images in vignettes are kept in `man/figures/`\n\n<pre>\nduap/\n  ├── vignettes/\n  │       └── duap.Rmd\n  └── man/\n      └── figures/\n          └── duap-img-1.png\n</pre>\n  \")\n```\n\n\n\n#### Recap: documentation\n\nThe vignettes folder will long-form documentation about how the application works, use cases, and features (and `roxygen2` will document each function).\n\n::: {#fig-pkg-docs .column}\n![](pkg-docs.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nDocumentation in `README` and `vignettes/`\n:::\n\n\n## Tests \n\nTesting is an important part of any package, and apps tend to require additional tests (especially when they're moving from 'development' into 'production' environments).\n\n### [`use_testthat()`]{style=\"font-size: 1.10em\"}\n\nTo apply the testing framework provided by the [`testthat` package.](https://testthat.r-lib.org/) package, I'll use `usethis::use_testthat()`:\n\n\n```{r}\n#| label: use_testthat\n#| code-fold: false \nusethis::use_testthat()\n```\n\n```{verbatim}\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\n```\n\nThis creates a new `tests/` folder, with a `testthat/` sub-folder and script.\n\n\n```{verbatim}\n#| label: use_testthat-tree\n#| code-fold: false \nduap/\n    └── tests/\n          ├── testthat/\n          └── testthat.R\n        \n2 directories, 1 file\n```\n\n#### Writing tests \n\n[`testthat`](https://testthat.r-lib.org/) is designed for unit tests (i.e., testing each functional 'unit' in the code), but for shiny apps, we need to think beyond standard unit testing. We need to confirm the functions work and return predictable results, but we also need to make sure they play well with each other (integration tests), and that the application can be deployed (system tests).\n\n#### Recap: testing\n\nTesting is well described in the [shiny documentation](https://shiny.rstudio.com/articles/testing-overview.html) and in [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html). Generally speaking, unit tests are performed with [`testthat`](https://testthat.r-lib.org/), and module testing can be done with [`shiny::testServer()`](https://shiny.rstudio.com/reference/shiny/1.7.0/testserver). To test the full application (or a specific behavior) use the [`shinytest2`](https://rstudio.github.io/shinytest2/) package.\n\n::: {#fig-pkg-tests .column}\n![](pkg-tests.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\nTesting framework from `testthat`\n:::\n\n\n# Use \n\nUsing an app built as a package is similar to using any R function we've loaded from a package. After successfully loading, documenting, and installing the package, I can run the app by loading the `duap` (with `library(duap)`) and `moviesApp()`:\n\n::: {#fig-duap-inst-app .column}\n![](duap-app.png){height=\"100%\" width=\"100%\" fig-align=\"center\"}\n\n`duap::moviesApp()`\n:::\n\n## Recap\n\nI've skipped over some important development steps covered in [R packages](https://r-pkgs.org/) ([license](https://r-pkgs.org/whole-game.html#use_mit_license), using [Git/GitHub](https://r-pkgs.org/whole-game.html#use_git), [code coverage](https://r-pkgs.org/testing-design.html#sec-testing-design-coverage), [NEWS](https://r-pkgs.org/other-markdown.html#sec-news), etc.), and you should bookmark this text as you start developing shiny app-packages. Hopefully this post has demonstrated that by building shiny apps as R packages, a suite of developer tools are available in the RStudio IDE (and the application files and folders have a uniform structure).\n\n`duap` is a substantial improvement over a bare-bones shiny application. An app-package holds the code, data, and documentation *and* allows us to write and execute unit tests, document help files for our functions with `roxygen2`, and check installation with `devtools::check()` and `devtools::install()`. App-packages can also be converted to [`pkgdown` sites](https://pkgdown.r-lib.org/articles/pkgdown.html) (which make them even easier to share).\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"fig-asp":0.618,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr","collapse":true},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","dpi":320,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.37","knitr":{"opts_chunk":{"collapse":true,"comment":"#"}},"editor":{"mode":"source","render-on-save":true},"theme":{"light":["cosmo","../../../custom.scss"]},"lightbox":true,"fontsize":"1.035em","linestretch":1.15,"code-annotations":"hover","title":"Creating a shiny app-package","subtitle":"Building Shiny app-packages with `devtools` & `usethis`","author":"Martin Frigaard","date":"2023-05-01","categories":["shiny","golem","packages"],"image":"image.png","callout-icon":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}