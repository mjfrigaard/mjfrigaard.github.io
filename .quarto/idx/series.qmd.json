{"title":"Series","markdown":{"yaml":{"title":"Series","listing":[{"id":"testing","contents":"series/testing","type":"table","sort":"date asc","sort-ui":false,"filter-ui":false,"fields":["title","date"],"table-striped":true},{"id":"shiny-frameworks","contents":"series/shiny-frameworks","type":"table","sort":"date asc","sort-ui":false,"filter-ui":false,"fields":["title","date"],"table-striped":true}],"page-layout":"full","title-block-banner":false,"execute":{"freeze":"auto"}},"headingText":"Testing shiny apps","containsRefs":false,"markdown":"\n\n\nThese posts focus on testing shiny applications with `testthat`, `shiny::testServer()`, and `shinytest2`.\n\n::: {#testing}\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Testing details\"}\n\n::: {style=\"font-size: 1.02em\"}\n\n-   [**`testthat`**]{style=\"font-size: 1.20em\"}: `testthat` is a popular unit testing framework that allows R package developers to create tests scripts for functions and logic systematically. In a shiny app-package, it's used for testing the non-reactive components (i.e., utility functions). This includes functions for data processing, plots, modeling, and other code that's part of the package. However, it is not designed to work with shiny's reactive model.\n    -   **Post: Unit testing shiny utility functions**: This post covers unit testing a set of utility functions with testthat. You can also read the documentation from the [package website](https://testthat.r-lib.org/), in [R packages](https://r-pkgs.org/testing-basics.html), and in [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html). The app-package for this post is stored in [this Github Repo](https://github.com/mjfrigaard/utap).  \n    -   **Post: Unit tests for (non-package) shiny apps**: Your shiny app *should* be developed as a package, but this isn't always the case. If you'd like to test your application's code *without* converting it to a package, check out the second post ([GitHub repo](https://github.com/mjfrigaard/noap) with the code).\n\n\n-   [**`testServer()`**]{style=\"font-size: 1.20em\"}: `testServer()` comes from the shiny package and is designed to test the `server`-side logic of your app. These tests can be used to simulate user inputs and verify the corresponding outputs. `testServer()` can also test the functionality of module `server` functions (reactivity, outputs, and any returned values) in isolation from their UI function counterparts. However, `testServer()` doesn't capture how UI elements are rendered or simulate key user interactions (i.e., execution paths) through the application.\n    -   **Post: Testing shiny module server functions**: If you've built your shiny application as a package and it contains modules, this post covers testing module server functions using the examples from the ['Modules' chapter of Mastering Shiny](https://mastering-shiny.org/scaling-modules.html). The code and examples are in [this GitHub repo](https://github.com/mjfrigaard/mstsap)\n\n\n\n-   [**`shinytest2()`**]{style=\"font-size: 1.20em\"}: `shinytest2` is designed to perform end-to-end testing of shiny apps. These tests can capture a shiny app's current state (i.e., a snapshot) and compare it with a previously saved (or expected) states. Snapshots are useful for end-to-end testing because they can simulate key user interaction in a way that unit tests and `testServer()` can't (i.e., the delay between input changes and rendering updated outputs, specific sequences of selections on action buttons, radio buttons, etc.). `shinytest2` tests are resource-intensive, so it's recommended to write these tests after writing `testthat` unit tests and `testServer()` tests.\n    -   **Post: Testing shiny apps with `shinytest2`**: This post picks up where the previous post left off with the [`shinytest2` package](https://rstudio.github.io/shinytest2/index.html). The app-package used in the examples is stored in [this GitHub repo](https://github.com/mjfrigaard/msst2ap).\n\nIn summary, use `testthat` for unit testing utility/helper functions, then `testServer()` for the server-side logic, and finish off with `shinytest2` tests for end-to-end functionality of your shiny app. These tools complement each other to provide a comprehensive testing framework.\n:::\n:::\n\n<!--\n## Shiny frameworks\n\nThis series covers building shiny app-packages with [`devtools`](https://mastering-shiny.org/scaling-packaging.html) and other popular shiny frameworks ([`golem`](https://thinkr-open.github.io/golem/), [`rhino`](https://appsilon.github.io/rhino/), and [`leprechaun`](https://leprechaun.opifex.org/#/)).\n\n::: {#shiny-frameworks}\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"shiny frameworks\"}\n\n::: {style=\"font-size: 1.02em\"}\n\n:::\n\n:::\n\n## Other projects\n\n| Project   | Description                                | Purpose                                                                     |\n|-----------|--------------------------------------------|-----------------------------------------------------------------------------|\n| `duap`    | `devtools`/`usethis` app-package           | Demonstrates building an app-package with standard R package tools          |\n| `gap`     | `golem` app-package                        | Demonstrates `golem` framework                                              |\n| `rnap`    | `rhino` app-non-package                    | Demonstrates `rhino` framework (and `box`)                                  |\n| `utap`    | Unit testing app-package                   | Demonstrates testing utility functions in shiny app-package.                |\n| `mstsap`  | Mastering Shiny `testServer()` app-package | Demonstrates using shiny's `testServer()` function for integration testing. |\n| `msst2ap` | Mastering Shiny `shinytest2` app-package   | Demonstrates using `shinytest2` for end-to-end testing                      |\n| `lap`     | `leprechaun` app-package                   | Demonstrates `leprechaun` framework in an app-package                       |\n| `dbsap`   | Debugging shiny app-package                |                                                                             |\n|           |                                            |                                                                             |\n-->","srcMarkdownNoYaml":"\n\n## Testing shiny apps\n\nThese posts focus on testing shiny applications with `testthat`, `shiny::testServer()`, and `shinytest2`.\n\n::: {#testing}\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Testing details\"}\n\n::: {style=\"font-size: 1.02em\"}\n\n-   [**`testthat`**]{style=\"font-size: 1.20em\"}: `testthat` is a popular unit testing framework that allows R package developers to create tests scripts for functions and logic systematically. In a shiny app-package, it's used for testing the non-reactive components (i.e., utility functions). This includes functions for data processing, plots, modeling, and other code that's part of the package. However, it is not designed to work with shiny's reactive model.\n    -   **Post: Unit testing shiny utility functions**: This post covers unit testing a set of utility functions with testthat. You can also read the documentation from the [package website](https://testthat.r-lib.org/), in [R packages](https://r-pkgs.org/testing-basics.html), and in [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html). The app-package for this post is stored in [this Github Repo](https://github.com/mjfrigaard/utap).  \n    -   **Post: Unit tests for (non-package) shiny apps**: Your shiny app *should* be developed as a package, but this isn't always the case. If you'd like to test your application's code *without* converting it to a package, check out the second post ([GitHub repo](https://github.com/mjfrigaard/noap) with the code).\n\n\n-   [**`testServer()`**]{style=\"font-size: 1.20em\"}: `testServer()` comes from the shiny package and is designed to test the `server`-side logic of your app. These tests can be used to simulate user inputs and verify the corresponding outputs. `testServer()` can also test the functionality of module `server` functions (reactivity, outputs, and any returned values) in isolation from their UI function counterparts. However, `testServer()` doesn't capture how UI elements are rendered or simulate key user interactions (i.e., execution paths) through the application.\n    -   **Post: Testing shiny module server functions**: If you've built your shiny application as a package and it contains modules, this post covers testing module server functions using the examples from the ['Modules' chapter of Mastering Shiny](https://mastering-shiny.org/scaling-modules.html). The code and examples are in [this GitHub repo](https://github.com/mjfrigaard/mstsap)\n\n\n\n-   [**`shinytest2()`**]{style=\"font-size: 1.20em\"}: `shinytest2` is designed to perform end-to-end testing of shiny apps. These tests can capture a shiny app's current state (i.e., a snapshot) and compare it with a previously saved (or expected) states. Snapshots are useful for end-to-end testing because they can simulate key user interaction in a way that unit tests and `testServer()` can't (i.e., the delay between input changes and rendering updated outputs, specific sequences of selections on action buttons, radio buttons, etc.). `shinytest2` tests are resource-intensive, so it's recommended to write these tests after writing `testthat` unit tests and `testServer()` tests.\n    -   **Post: Testing shiny apps with `shinytest2`**: This post picks up where the previous post left off with the [`shinytest2` package](https://rstudio.github.io/shinytest2/index.html). The app-package used in the examples is stored in [this GitHub repo](https://github.com/mjfrigaard/msst2ap).\n\nIn summary, use `testthat` for unit testing utility/helper functions, then `testServer()` for the server-side logic, and finish off with `shinytest2` tests for end-to-end functionality of your shiny app. These tools complement each other to provide a comprehensive testing framework.\n:::\n:::\n\n<!--\n## Shiny frameworks\n\nThis series covers building shiny app-packages with [`devtools`](https://mastering-shiny.org/scaling-packaging.html) and other popular shiny frameworks ([`golem`](https://thinkr-open.github.io/golem/), [`rhino`](https://appsilon.github.io/rhino/), and [`leprechaun`](https://leprechaun.opifex.org/#/)).\n\n::: {#shiny-frameworks}\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"shiny frameworks\"}\n\n::: {style=\"font-size: 1.02em\"}\n\n:::\n\n:::\n\n## Other projects\n\n| Project   | Description                                | Purpose                                                                     |\n|-----------|--------------------------------------------|-----------------------------------------------------------------------------|\n| `duap`    | `devtools`/`usethis` app-package           | Demonstrates building an app-package with standard R package tools          |\n| `gap`     | `golem` app-package                        | Demonstrates `golem` framework                                              |\n| `rnap`    | `rhino` app-non-package                    | Demonstrates `rhino` framework (and `box`)                                  |\n| `utap`    | Unit testing app-package                   | Demonstrates testing utility functions in shiny app-package.                |\n| `mstsap`  | Mastering Shiny `testServer()` app-package | Demonstrates using shiny's `testServer()` function for integration testing. |\n| `msst2ap` | Mastering Shiny `shinytest2` app-package   | Demonstrates using `shinytest2` for end-to-end testing                      |\n| `lap`     | `leprechaun` app-package                   | Demonstrates `leprechaun` framework in an app-package                       |\n| `dbsap`   | Debugging shiny app-package                |                                                                             |\n|           |                                            |                                                                             |\n-->"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","dpi":320,"toc":true,"toc-depth":5,"output-file":"series.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","description-meta":"Martin Frigaard's personal website.","knitr":{"opts_chunk":{"collapse":true}},"editor":{"mode":"source"},"theme":{"light":["litera","custom.scss"]},"fig-asp":0.618,"fontsize":"10.5","toc-title":"Contents","toc-location":"left","callout-icon":false,"code-block-bg":"#f8f8f8","code-block-border-left":"#e8e8e8","code-summary":"show/hide","title":"Series","listing":[{"id":"testing","contents":"series/testing","type":"table","sort":"date asc","sort-ui":false,"filter-ui":false,"fields":["title","date"],"table-striped":true},{"id":"shiny-frameworks","contents":"series/shiny-frameworks","type":"table","sort":"date asc","sort-ui":false,"filter-ui":false,"fields":["title","date"],"table-striped":true}],"page-layout":"full","title-block-banner":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}