{"title":"Testing shiny apps with `shinytest2`","markdown":{"yaml":{"title":"Testing shiny apps with `shinytest2`","subtitle":"Part 4: recording tests and snapshots","author":"Martin Frigaard","date":"2023-06-30","categories":["shiny","testing"],"image":"image.svg","toc":true,"toc-depth":5,"toc-title":"Contents","toc-location":"left","draft":true,"code-fold":"show","code-summary":"show/hide","code-link":false,"fig-align":"center","fontsize":"10.5","callout-icon":false,"freeze":true,"execute":{"echo":true,"message":false,"warning":false,"eval":false}},"headingText":"renv::install(\"mjfrigaard/msst2ap\")","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| eval: true\n#| echo: false\n#| include: false\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n    b = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    g = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    o = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    r = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\noptions(scipen = 999)\n# renv::install(\"lobstr\")\nlibrary(lobstr)\nlibrary(dplyr)\nlibrary(Lahman)\nlibrary(NHANES)\nlibrary(palmerpenguins)\n```\n\n```{r}\n#| label: pkgs\n#| eval: true\n#| code-summary: packages\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(shinytest2)\n```\n\n\n```{r}\n#| label: co_box_test\n#| eval: false\n#| results: asis\n#| include: false\nco_box(color = \"r\", \"RED\", \"**This is red**\n\n  **This is a new line**\n\n  **this a another line**\")\n```\n\n\n```{r}\n#| label: co_box_dev\n#| echo: false\n#| results: asis\n#| eval: false\nco_box(\n  color = \"r\",\n  header = \"ALERT!\",\n  contents = \"This post is currently under development. Thank you for your patience.\"\n)\n```\n\nThis is the fourth post in a [series on testing](https://mjfrigaard.github.io/series.html#testing-shiny-applications) shiny applications. My previous posts have covered [unit testing utility functions](https://mjfrigaard.github.io/posts/test-shiny-p1/) and [testing module server functions with `testServer()`](https://mjfrigaard.github.io/posts/test-shiny-p3/). In this post, I'll be covering testing shiny applications using `testthat` and `shinytest2`.\n\n::: {.column-margin}\n![](image.svg){width=70%}\n:::\n\n\n```{r}\n#| label: co_box_shinytest\n#| echo: false\n#| results: asis\n#| eval: true\nco_box(\n  color = \"b\",\n  header = \"Why `shinytest2`?\",\n  contents = \"\n  **What happened to `shinytest`?**\n  \n  `shinytest2` replaced `shinytest` on 2022-04-27. If you've previously written tests with `shinytest`--or are curious how `shinytest2` if different--I recommend going through the [Migrating from `shinytest`](https://cran.r-project.org/web/packages/shinytest2/vignettes/z-migration.html#:~:text) vignette.\n  \"\n)\n```\n\n## Set up\n\n[`shinytest2`](https://rstudio.github.io/shinytest2/index.html) requires a few steps to get up and running, so I've included my start up steps below (in hopes that someone might find them useful).\n\n### Chromium\n\nFirst make sure you have [Chromium headless browser](https://www.chromium.org/chromium-projects/) installed. Chromium is the browser used to test and debug shiny apps with `shinytest2`.\n\nIf you're using macOS, you can install Chromium using [homebrew](https://formulae.brew.sh/cask/chromium): \n\n```{bash}\n#| eval: false\n#| code-fold: false \nbrew install --cask chromium\n```\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| code-summary: 'show/hide output'\n==> Downloading https://download-chromium.appspot.com/dl/Mac?type=snapshots\n==> Downloading from https://commondatastorage.googleapis.com/chromium-browser-s\n######################################################################### 100.0%\nWarning: No checksum defined for cask 'chromium', skipping verification.\n==> Installing Cask chromium\n==> Moving App 'Chromium.app' to '/Applications/Chromium.app'\n==> Linking Binary 'chromium.wrapper.sh' to '/usr/local/bin/chromium'\nüç∫  chromium was successfully installed!\n```\n\n\n### [`chromote`]{style=\"font-size: 1.20em\"}\n\nThe [`chromote` package](https://rstudio.github.io/chromote/index.html) allows R to open Chromium. I had to make sure R knew where to find the Chromium application ([this section helps](https://rstudio.github.io/chromote/#specifying-which-browser-to-use)) by passing the path to the app to `Sys.setenv()` (*you can locate the path to Chromium using by holding <kbd>command (‚åò)</kbd> and clicking on the application icon*)\n\n```{r}\n#| eval: false\n#| code-fold: false\nremotes::install_github(\"rstudio/chromote\")\nlibrary(chromote)\nSys.setenv(CHROMOTE_CHROME = \"/Applications/Chromium.app/Contents/MacOS/Chromium\")\n```\n\nFind your chrome app: \n\n```{r}\n#| eval: false\n#| code-fold: false\nchromote::find_chrome()\n```\n\n```{bash}\n#| eval: false\n#| code-fold: false \n[1] \"/Applications/Chromium.app/Contents/MacOS/Chromium\"\n```\n\nI also verified the Chromium app opened with `ChromoteSession$new()`\n\n```{r}\n#| eval: false\n#| code-fold: false\n#| code-summary: verify ChromoteSession$new()\nb <- ChromoteSession$new()\nb$view()\n```\n\n\n:::: {.column-body-outset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![Chromium](chromium.png){#fig-chromium width=100% fig-align=\"center\"}\n\nChromium headless browser\n:::\n\n::::\n\nGreat! Going through this step means `shinytest2`'s test recorder will (*should*) deploy when I'm recording tests. \n\n## App-package contents\n\nI've created [`msst2ap`](https://github.com/mjfrigaard/msst2ap) (i.e., **M**astering **S**hiny **s**hiny**t**est**2** **a**pp-**p**ackage), which you can download [here](https://github.com/mjfrigaard/msst2ap/archive/refs/heads/main.zip) or install it using the following: \n\n```{r}\n#| code-fold: false\n#| eval: false\n#| results: hide\nremotes::install_github(\"mjfrigaard/msst2ap\",\n  force = TRUE, quiet = TRUE\n)\nlibrary(msst2ap)\n```\n\nThe applications in `msst2ap` can be run with the their standalone app functions.\n\n{{< include _modules_apps.qmd >}}\n\n\n## Using [`shinytest2`]{style=\"font-size: 1.20em\"}\n\n`shinytest2` is extremely [well documentation](https://rstudio.github.io/shinytest2/index.html). I highly recommended the [Get Started vignette](https://rstudio.github.io/shinytest2/articles/shinytest2.html). In the next sections, I'll cover some examples for what I've included in the `msst2ap`.\n\nRun `shinytest2::use_shinytest2()` to create the initial files for `shinytest2`:\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::use_shinytest2()\n```\n\n```{bash}\n#| echo: true\n#| eval: false\n#| code-fold: true\n#| code-summary: 'show/hide output from use_shinytest2()'\n! Runner already found: tests/testthat.R\n‚úî Adding 'shinytest2::load_app_env()' to 'tests/testthat/setup-shinytest2.R'\n‚úî Adding '*_.new.png' to '.gitignore'\n‚úî Adding '_\\\\.new\\\\.png$' to '.Rbuildignore'\n‚úî Setting active project to '/projects/msst2ap'\n‚úî Adding 'shinytest2' to Suggests field in DESCRIPTION\n‚Ä¢ Use `requireNamespace(\"shinytest2\", quietly = TRUE)` to test if package is installed\n‚Ä¢ Then directly refer to functions with `shinytest2::fun()`\n‚úî Setting active project to '<no active project>'\n```\n\n-   `use_shinytest2()` adds the `setup-shinytest2.R` script to my `tests/testthat/` folder:\n\n    ```{bash}\n    #| echo: true\n    #| eval: false\n    #| code-fold: false\n    tests/testthat/\n    ‚îú‚îÄ‚îÄ _snaps/\n    ‚îî‚îÄ‚îÄ setup-shinytest2.R\n    ```\n\nThe `setup-shinytest2.R` file contains a single call to `shinytest2::load_app_env()`, which \"*Executes all `./R` files and `global.R` into the current environment*\"\n\n## Recording tests\n\nNew tests with [`shinytest2`](https://rstudio.github.io/shinytest2/index.html) can be created by launching the test event recorder, which allows us interact with our application, observe it's behavior, and record inputs, reactive values, and outputs. To record a test, run `shinytest2::record_test()`.\n\nThe first argument in `record_test()` is the path to application. If you've stored your application in an `app.R` file, `record_test()` will automatically load that application. \n\nIn `msst2ap`, the application in `app.R` is the `histogramApp()`, so the test recorder will automatically open with this application if I run `record_test()` (without providing the path to a `shiny` app).\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::record_test()\n```\n\n::::{.column-body-outset-right}\n\n::: {#fig-record_test_histogramApp layout-ncol=1}\n![shinytest2::record_test()](record_test_histogramApp.png){#fig-record_test_histogramApp width=100% fig-align=\"center\"}\n\n`record_test()` with application in `app.R`\n:::\n\n::::\n\nThe `app` argument can also be a \"*path to a Shiny application*\". For example, I have 'development' versions of each application in `msst2ap` in [`inst/dev/`](https://github.com/mjfrigaard/msst2ap/tree/main/inst/dev):\n\n```{bash}\n#| echo: true\n#| eval: false \n#| code-fold: true\n#| code-summary: 'show/hide contents of msst2ap/inst/dev'\ninst/dev\n‚îú‚îÄ‚îÄ datasetApp\n‚îÇ   ‚îú‚îÄ‚îÄ DESCRIPTION\n‚îÇ   ‚îú‚îÄ‚îÄ R\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îî‚îÄ‚îÄ app.R\n‚îú‚îÄ‚îÄ histogramApp\n‚îÇ   ‚îú‚îÄ‚îÄ DESCRIPTION\n‚îÇ   ‚îú‚îÄ‚îÄ R\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îî‚îÄ‚îÄ app.R\n‚îú‚îÄ‚îÄ selectDataVarApp\n‚îÇ   ‚îú‚îÄ‚îÄ DESCRIPTION\n‚îÇ   ‚îú‚îÄ‚îÄ R\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îî‚îÄ‚îÄ app.R\n‚îî‚îÄ‚îÄ selectVarApp\n    ‚îú‚îÄ‚îÄ DESCRIPTION\n    ‚îú‚îÄ‚îÄ R\n    ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n    ‚îú‚îÄ‚îÄ README.md\n    ‚îî‚îÄ‚îÄ app.R\n\n9 directories, 16 files\n```\n\nI can pass the path to each application to the `app` argument in `record_test()`:\n\n```{r}\n#| echo: true\n#| eval: false \n#| code-fold: false\nshinytest2::record_test(app = \"inst/dev/histogramApp/\")\n```\n\nThis opens Chromium with our shiny app: \n\n::::{.column-body-outset-right}\n\n::: {#fig-record_test_datasetApp layout-ncol=1}\n\n![record_test(\"inst/dev/histogramApp/\")](record_test_histogramApp.png){#fig-record_test_datasetApp width=100% fig-align=\"center\"}\n\n`record_test()` with app in `inst/dev/histogramApp/` folder\n:::\n\n::::\n\nThe test event recorder displays the `shiny` app, but also includes a window for recording each application 'event.' \n\n### Expectations\n\nI'll start by recording a test for `histogramApp()`. On the right-hand side of the Chromium headless browser, you'll see the **`shinytest2` expectations** window:\n\n::::{.column-body-outset-right}\n\n::: {#fig-shinytest2-expectations layout-ncol=1}\n![`shinytest2` expectations](shinytest2-expectations.png){#fig-expectations}\n\n`shinytest2` expectations in `record_test()`\n:::\n\n::::\n\nThe initial value in the **Code** window displays the dimensions of the application in Chromium (`app$set_window_size(width = , height = )`).\n\n### Events\n\nWhen I interact with the application (i.e., make changes to the inputs), each change is an 'event' that is recorded in the test:\n\n::::{.column-body-outset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![change inputs](shinytest2-change-inputs.png){#fig-change-values-shinytest2 width=100% fig-align=\"center\"}\n\nChanging app inputs \n:::\n\n::::\n\n### Code \n\nAll events are recorded as code in the **Code** section of **`shinytest2` expectations**:\n\n::::{.column-body-outset-right}\n\n::: {#fig-shinytest2-code-expectations layout-ncol=1}\n\n![shinytest2 code expectations](shinytest2-expectations-code.png){#fig-shinytest2-expectations-code width=100% fig-align=\"center\"}\n\nRecorded code for each event\n:::\n\n::::\n\n### Expect Shiny values \n\nWhen I've finished interacting with the application, I click on the **Expect Shiny values** button at the top of **`shinytest2` expectations**. This will add `app$expect_values()` to the **Code** section:\n\n::::{.column-body-outset-right}\n\n::: {#fig-expect-shiny-values layout-ncol=1}\n\n\n![expect-shiny-values](shinytest2-expect-shiny-values.png){#fig-expect-shiny-values width=100% fig-align=\"center\"}\n\n**Expect Shiny values** in `shinytest2` expectations\n:::\n\n::::\n\n### Save test and exit\n\nFinally, to save the test, enter a **Test name** and click **Save test and exit**\n\n::::{.column-body-outset-right}\n\n::: {#fig-name-save-exit layout-ncol=1}\n\n![name-save-exit](shinytest2-name-save.png){#fig-shinytest2-name-save width=100% fig-align=\"center\"}\n\nName, save and exit `record_test()`\n:::\n\n::::\n\nLet's examine the output of the test!\n\n## Console output\n\nBack in the Console, the `shinytest2` test recorder is performing the following actions behind the scenes:\n\n-   The Chromium headless browser opens with the `histogramApp()` and `shiny` is loaded \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    Listening on http://127.0.0.1:7418\n    {shiny} R stderr ----------- Loading required package: shiny\n    ```\n\n\n-   [**`Warning`**]{style=\"font-size: 1.20em\"}: The first warning is a caused by the call to `shiny::loadSupport()`. It's a [known issue](https://github.com/rstudio/shinytest2/issues/264#issuecomment-1251422788), so we can assume the developers are working on it!\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    Warning message:\n    In shiny::loadSupport(app_dir, renv = renv, globalrenv = globalrenv) :\n      Loading R/ subdirectory for Shiny application, but this directory appears to\n      contain an R package. Sourcing files in R/ may cause unexpected behavior.\n    ```\n\n-   We are told the application is being run in [`test mode`](https://rstudio.github.io/shinytest2/reference/AppDriver.html#test-mode), which '*lets the `AppDriver` retrieve values*' from the app \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    {shiny} R stderr ----------- Running application in test mode.\n    {shiny} R stdout ----------- ‚Ñπ Loading msst2ap\n    ```\n\n-   [**`Warning`**]{style=\"font-size: 1.20em\"}: The `tests/testthat.R` file (i.e., the 'test runner') was overwritten and tests are now run with `shinytest2::test_app()`\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    Warning: Overwriting test runner tests/testthat.R with `shinytest2::test_app()`\n    call to ensure proper a testing environment.\n    ```\n\n-   When I clicked \"**Save test and exit**\", the changes made to `tests/testthat.R` and `tests/testthat/test-shinytest2.R` are saved: \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    ‚Ä¢ Saving test runner: tests/testthat.R\n    ‚Ä¢ Saving test file: tests/testthat/test-shinytest2.R\n    ```\n\n-   A call to `shinytest2::load_app_env()` is added to `setup-shinytest2.R` and the test file (`tests/testthat/test-shinytest2.R`) is opened: \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    ‚úî Adding 'shinytest2::load_app_env()' to 'tests/testthat/setup-shinytest2.R'\n    ‚Ä¢ Modify '/projects/msst2ap/tests/testthat/test-shinytest2.R'\n    ```\n\n-   The new test is saved in the `tests/testthat/test-shinytest2.R` file and automatically run. \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    ‚Ä¢ Running recorded test: tests/testthat/test-shinytest2.R\n    ```\n\n## Test results\n\nThe results from running the new test file (`test-shinytest2.R`) are below: \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\n‚Ä¢ Running recorded test: tests/testthat/test-shinytest2.R\n‚úî | F W S  OK | Context\n‚úî |   2     1 | shinytest2 [6.3s]                                             \n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nWarning (test-shinytest2.R:12:3): {shinytest2} recording: histogramApp\nAdding new file snapshot: 'tests/testthat/_snaps/histogramApp-001_.png'\n\nWarning (test-shinytest2.R:12:3): {shinytest2} recording: histogramApp\nAdding new file snapshot: 'tests/testthat/_snaps/histogramApp-001.json'\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n‚ïê‚ïê Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nDuration: 6.7 s\n\n[ FAIL 0 | WARN 2 | SKIP 0 | PASS 1 ]\n```\n\nTwo warnings are displayed because the test adds two new files to the `tests/testthat/_snaps/` folder: \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntests/testthat/_snaps/\n‚îî‚îÄ‚îÄ shinytest2\n    ‚îú‚îÄ‚îÄ histogramApp-001.json\n    ‚îî‚îÄ‚îÄ histogramApp-001_.png\n\n2 directories, 2 files\n```\n\nThese are the files new test runs will be compared against (i.e., our 'baseline' snapshots). I'll briefly cover their contents below: \n\n### [`_snaps`]{style=\"font-size: 1.15em\"}\n\n`expect_values()` generates two snapshot files in the `tests/testthat/_snaps/` folder: one `.png` and one `.json` file:\n\n#### [`.png`]{style=\"font-size: 1.20em\"}\n\nThe image saved in `tests/testthat/_snaps/histogramApp-001_.png` is below:\n\n![](histogramApp-001_.png){fig-align='center'}\n\nThe image is a little grainy and hard to see, but it shows the changed dataset and variable values (**`attitude`** and **`privileges`**).\n\n#### [`.json`]{style=\"font-size: 1.20em\"}\n\nThe `.json` file saved in `tests/testthat/_snaps/histogramApp-001.json` contains the snapshot `input`s, `output`s, and `export`s:\n\n-   The inputs show the three changed values (`\"data-dataset\"`, `\"var-var\"`, and `\"hist-bins\"`).\n \n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: show\n    #| code-summary: 'show/hide snapshot inputs' \n    {\n      \"input\": {\n        \"data-dataset\": \"attitude\",\n        \"hist-bins\": 15,\n        \"var-var\": \"privileges\"\n      },\n    ```\n    \nThe two outputs are stored in `\"hist-hist\"` and `\"vals\"`:\n\n-   `\"hist-hist\"` holds the updated image (stored in the `image data hash`), along with various other characteristics of the plot:\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: true  \n    #| code-summary: 'show/hide snapshot outputs'\n      \"output\": {\n        \"hist-hist\": {\n          \"src\": \"[image data hash: fde4089afc06a814d75c627b823d0806]\",\n          \"width\": 682.6640625,\n          \"height\": 400,\n          \"alt\": \"Plot object\",\n          \"coordmap\": {\n            \"panels\": [\n              {\n                \"domain\": {\n                  \"left\": 27.8,\n                  \"right\": 87.2,\n                  \"bottom\": -0.24,\n                  \"top\": 6.24\n                },\n                \"range\": {\n                  \"left\": 78.79664956011726,\n                  \"right\": 642.3048029692084,\n                  \"bottom\": 301.08,\n                  \"top\": 77.71999999999998\n                },\n                \"log\": {\n                  \"x\": null,\n                  \"y\": null\n                },\n                \"mapping\": {\n    \n                }\n              }\n            ],\n            \"dims\": {\n              \"width\": 682.6640625,\n              \"height\": 400\n            }\n          }\n        },\n    ```\n    \n-   `\"vals\"` contains the reactive values from `reactiveValuesToList()`:\n    \n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: show  \n    #| code-summary: 'show/hide snapshot outputs'\n        \"vals\": \"$`hist-bins`\\n[1] 15\\n\\n$`var-var`\\n[1] \\\"privileges\\\"\\n\\n$`data-dataset`\\n[1] \\\"attitude\\\"\\n\"\n      },\n    ```\n\n-   I didn't export any values in this test, so `\"export\"` is empty:\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: show  \n    #| code-summary: 'show/hide snapshot outputs'\n      \"export\": {\n    \n      }\n    }\n    ```\n\n    -   *I'll cover this in a later test.*\n  \n#### Namespaces\n\nThe contents of the `.json` snapshot should look *somewhat* familiar for the three modules contained in  `histogramApp()`:\n\n-   For example, the `inputId` for `\"dataset\"` in the `datasetInput/Server` module communicates between the UI and server using the shared `id` argument `\"data\"`\n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false  \n    # in datasetInput()\n      shiny::selectInput(\n        shiny::NS(id, \"dataset\"),\n        \"Pick a dataset\",\n        choices = names)\n    # in histogramApp()\n      shiny::sidebarPanel(\n            datasetInput(\"data\", is.data.frame)\n          )\n    ```\n    \n    -   In the `.json` snapshot, this `inputId` is represented in the following `\"input\"`:\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    {\n      \"input\": {\n        \"data-dataset\": \"attitude\",\n      },\n    ```\n    \nNamespaces and `inputId`s will come up again if you start writing your own tests, which I'll cover below. \n\n## [`shinytest2`]{style=\"font-size: 1.20em\"} test contents\n\nThe contents of the test file generated from the test recorder are below: \n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\nlibrary(shinytest2)\n\ntest_that(\"{shinytest2} recording: histogramApp\", {\n  app <- AppDriver$new(name = \"histogramApp\", height = 657, width = 1069)\n  app$set_inputs(`data-dataset` = \"attitude\")\n  app$set_inputs(`var-var` = \"privileges\")\n  app$set_inputs(`hist-bins` = 11)\n  app$set_inputs(`hist-bins` = 12)\n  app$set_inputs(`hist-bins` = 13)\n  app$set_inputs(`hist-bins` = 14)\n  app$set_inputs(`hist-bins` = 15)\n  app$expect_values()\n})\n```\n\nBefore I dive into the contents of the test file, I want to run this new test and make sure it passes. I can do this by clicking on **Run Test** or by using `test_file()` from `testthat`:\n\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\ntestthat::test_file(\"tests/testthat/test-shinytest2.R\")\n```\n\n\n:::: {.callout-important collapse='false'}\n## WARNING\n\n::: {style='font-size: 1.20em; color: #000000;'}\n\nBecause `msst2ap` is a package, running tests with `shinytest2` will produce the warning below:\n  \n![`shiny::loadSupport()` warning](run_tests_out.png){width=100%}\n\nAs noted above, this warning is [known by the `shinytest2` package authors](https://github.com/rstudio/shinytest2/issues/264#issuecomment-1251422788) and is being addressed in a future release. \n\n:::\n\n::::\n\nNow that I know the first `shinytest2` test is passing, I'll dive into each line in the test. \n\n### [`AppDriver`]{style=\"font-size: 1.15em\"}\n\n`shinytest2` uses the [`AppDriver`](https://rstudio.github.io/shinytest2/reference/AppDriver.html) to create \"*a full simulation of a Shiny app*\". When recording tests, this will be the first argument (along with the `name` of the `.png` and `.json` snapshot `testthat` files, and the `height` and `width` of the [`ChromoteSession`](https://rstudio.github.io/chromote/reference/ChromoteSession.html)).\n\n-   The example from the test above is below: \n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n     app <- AppDriver$new(name = \"histogramApp\", height = 657, width = 1069)\n    ```\n\n\n### [`set_inputs()`]{style=\"font-size: 1.15em\"}\n\nWhen recording `shinytest2` tests, every change to the applications inputs will result in a call to `app$set_inputs()`. This function is similar to the `testServer()` call to `session$setInputs()` (i.e., the inputs are provided as \"*name-value pairs*\", i.e., `inputId` = `\"value\"`). \n\n-   In the `histogramApp()`, these are provided with the appended namespaces:\n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n      app$set_inputs(`data-dataset` = \"attitude\")\n      app$set_inputs(`var-var` = \"privileges\")\n      app$set_inputs(`hist-bins` = 11)\n      app$set_inputs(`hist-bins` = 12)\n      app$set_inputs(`hist-bins` = 13)\n      app$set_inputs(`hist-bins` = 14)\n      app$set_inputs(`hist-bins` = 15)\n    ```\n\n### [`expect_values()`]{style=\"font-size: 1.15em\"}\n\n[The documentation](https://rstudio.github.io/shinytest2/articles/in-depth.html#making-expectations) on `expect_values()` is definitely worth reading. `expect_values()` is added to the test file when **Expect Shiny values** is clicked in the test recorder and \"*creates a list of values and compares them to the current values of the application*.\"\n\n-   `expect_values()` = \"*Expect all `input`, `output`, and `export` values are consistent*\"\n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n      app$expect_values()\n    ```\n\n## Writing tests\n\nThe great thing about testing with `shinytest2` is the ability to be view the `AppDriver` interactively as you write tests. I'll demo writing a test for the `datasetApp()` by adapting the contents of `tests/testthat/test-shinytest2.R` into a new `tests/testthat/test-shinytest2-datasetApp.R` file.\n\n-   First I want to make sure I have the development version of Chromium: \n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    # run this in the console to make sure you have dev version of chromote\n    remotes::install_github(\"rstudio/chromote\", force = TRUE, quiet = TRUE)\n    library(chromote)\n    ```\n\nIn the new test `test-shinytest2-datasetApp.R` file, I'll start with a call to `testthat::test_that(),` then create and view a new `app` object with the Chromium headless browser. The namespaced standalone app function can be passed to the first argument of `AppDriver$new()`, followed by the `height` and `weight` (which I've adjusted to fit the `datasetApp()`).\n\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntest_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view\n})\n```\n\nThis opens the following Chromium window: \n\n::::{.column-body-outset-right}\n\n::: {#fig-app_view layout-ncol=1}\n\n![`app$view()`](app_view.png){#fig-app_view}\n\nView application with `app$view()`\n:::\n\n::::\n\nI can see the same app I see when I run `msst2ap::datasetApp()` in the console, but with some additional developer tools.  \n\n### Setting inputs \n\nIf I continue to adapt each line of `test-shinytest2.R`, I see that next lines set the `inputId`s for `dataset-dataset` to the `attitude` dataset with `app$set_input()` (*Note that this uses the module notation above (i.e., `\"id-inputId\"`)*):\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntest_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n})\n```\n\nIf you can see both windows, you'll see the application values change in the Chromium browser: \n\n::::{.column-page-right}\n\n::: {#fig-set_inputs layout-ncol=1}\n\n![`app$set_inputs()`](app_set_inputs.png){#fig-app_set_inputs}\n\nSet application inputs with `app$set_inputs()`\n:::\n\n::::\n\n### Checking inputs\n\nI'll include a call to `app$get_values()` and assign the output to `app_values`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n  app_values <- app$get_values()\n})\n```\n\nThe contents of `app_values` is a list with the same three value types in the `.json` snapshot covered above (`input`, `output`, and `export`):\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\nstr(app_values)\n```\n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\nList of 3\n $ input :List of 1\n  ..$ dataset-dataset: chr \"attitude\"\n $ output:List of 2\n  ..$ data: chr \"<table  class = 'table shiny-table table- \"| __truncated__\n  ..$ vals: chr \"$`dataset-dataset`\\n[1] \\\"attitude\\\"\\n\"\n $ export: Named list()\n```\n\nI can narrow the scope of the test and verify only the `input` that was changed with `app$set_inputs()`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n  app_values <- app$get_values()\n  testthat::expect_equal(\n    object = app_values$input$`dataset-dataset`,\n    expected = \"attitude\")\n})\n```\n\nTo conclude the test, I'll end with a call to [`app$stop()`](https://rstudio.github.io/shinytest2/articles/zzz-faq.html#should-i-manually-shut-down-my-appdriver).\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n  app_values <- app$get_values()\n  testthat::expect_equal(\n    object = app_values$input$`dataset-dataset`,\n    expected = \"attitude\")\n  app$stop()\n})\n```\n\nI'll save the `test-shinytest2-datasetApp.R` file and run the test with `testthat::test_file()`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntest_file(\"tests/testthat/test-shinytest2-datasetApp.R\")\n```\n\nThis is the initial run of the test for `datasetApp()`, and no snapshot files are generated because the test doesn't include a call to `app$export_values()`. I see the tests passes:  \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n```\n\n## Exporting test values \n\nThe `shinytest2` documentation [repeatedly](https://rstudio.github.io/shinytest2/articles/in-depth.html#exported-values) [recommends](https://rstudio.github.io/shinytest2/articles/robust.html#exported-values) exporting test values from shiny applications with `shiny::exportTestValues()`. \n\nI'll demonstrate exporting test values from `selectVarApp()` by adding the following to the `server` function in `R/selectVarApp.R`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\n  server <- function(input, output, session) {\n\n    data <- datasetServer(\"data\")\n    var <- selectVarServer(\"var\", data, filter = filter)\n\n    output$out <- shiny::renderTable(head(var()))\n\n    output$vals <- shiny::renderPrint({\n      x <- shiny::reactiveValuesToList(input,\n                              all.names = TRUE)\n      print(x)\n    })\n\n    shiny::exportTestValues(\n      var = var(),\n      data = data()\n    )\n  }\n```\n\n\nAfter saving, loading and building the package, I'll create the `test-shinytest2-selectVarApp.R` test file and add the initial contents:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: selectVarApp\", {\n  app <- AppDriver$new(msst2ap::selectVarApp(), height = 600, width = 600)\n  app$view()\n  \n})\n```\n\nThe application opens in the Chromium headless browser:\n\n::::{.column-body-outset-right}\n\n::: {#fig-app_view_selectVarApp layout-ncol=1}\n\n![`app$view()`](app_view_selectVarApp.png){#fig-app_view_selectVarApp}\n\nView `selectVarApp()` application with `app$view()`\n:::\n\n::::\n\nIn the test file, I'll use `app$get_values()` to store the exported test values in `app_values`, then verify the structure of each exported object: \n\n-   `data` should be a `data.frame()`\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\n  testthat::expect_true(\n    object = is.data.frame(app_values$export$data))\n```\n\n-   `var` should be a single column `data.frame()`\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\n  testthat::expect_true(\n    object = ncol(app_values$export$var) == 1)\n```\n\nThe completed test for `selectVarApp()` is below: \n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: selectVarApp\", {\n  app <- AppDriver$new(msst2ap::selectVarApp(), height = 600, width = 600)\n  app$view()\n  app_values <- app$get_values()\n  \n  testthat::expect_true(\n    object = is.data.frame(app_values$export$data))\n\n  testthat::expect_true(\n    object = ncol(app_values$export$var) == 1)\n  \n  app$stop()\n})\n```\n\nOnce again, I end the test with a call to `app$stop()`, then run the test with `testthat::test_file()`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_file(path = \"tests/testthat/test-shinytest2-selectVarApp.R\")\n```\n\nThe results are below: \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| eval: true\n#| echo: false\n#| include: false\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n    b = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    g = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    o = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    r = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\noptions(scipen = 999)\n# renv::install(\"mjfrigaard/msst2ap\")\n# renv::install(\"lobstr\")\nlibrary(lobstr)\nlibrary(dplyr)\nlibrary(Lahman)\nlibrary(NHANES)\nlibrary(palmerpenguins)\n```\n\n```{r}\n#| label: pkgs\n#| eval: true\n#| code-summary: packages\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(shinytest2)\n```\n\n\n```{r}\n#| label: co_box_test\n#| eval: false\n#| results: asis\n#| include: false\nco_box(color = \"r\", \"RED\", \"**This is red**\n\n  **This is a new line**\n\n  **this a another line**\")\n```\n\n\n```{r}\n#| label: co_box_dev\n#| echo: false\n#| results: asis\n#| eval: false\nco_box(\n  color = \"r\",\n  header = \"ALERT!\",\n  contents = \"This post is currently under development. Thank you for your patience.\"\n)\n```\n\nThis is the fourth post in a [series on testing](https://mjfrigaard.github.io/series.html#testing-shiny-applications) shiny applications. My previous posts have covered [unit testing utility functions](https://mjfrigaard.github.io/posts/test-shiny-p1/) and [testing module server functions with `testServer()`](https://mjfrigaard.github.io/posts/test-shiny-p3/). In this post, I'll be covering testing shiny applications using `testthat` and `shinytest2`.\n\n::: {.column-margin}\n![](image.svg){width=70%}\n:::\n\n\n```{r}\n#| label: co_box_shinytest\n#| echo: false\n#| results: asis\n#| eval: true\nco_box(\n  color = \"b\",\n  header = \"Why `shinytest2`?\",\n  contents = \"\n  **What happened to `shinytest`?**\n  \n  `shinytest2` replaced `shinytest` on 2022-04-27. If you've previously written tests with `shinytest`--or are curious how `shinytest2` if different--I recommend going through the [Migrating from `shinytest`](https://cran.r-project.org/web/packages/shinytest2/vignettes/z-migration.html#:~:text) vignette.\n  \"\n)\n```\n\n## Set up\n\n[`shinytest2`](https://rstudio.github.io/shinytest2/index.html) requires a few steps to get up and running, so I've included my start up steps below (in hopes that someone might find them useful).\n\n### Chromium\n\nFirst make sure you have [Chromium headless browser](https://www.chromium.org/chromium-projects/) installed. Chromium is the browser used to test and debug shiny apps with `shinytest2`.\n\nIf you're using macOS, you can install Chromium using [homebrew](https://formulae.brew.sh/cask/chromium): \n\n```{bash}\n#| eval: false\n#| code-fold: false \nbrew install --cask chromium\n```\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| code-summary: 'show/hide output'\n==> Downloading https://download-chromium.appspot.com/dl/Mac?type=snapshots\n==> Downloading from https://commondatastorage.googleapis.com/chromium-browser-s\n######################################################################### 100.0%\nWarning: No checksum defined for cask 'chromium', skipping verification.\n==> Installing Cask chromium\n==> Moving App 'Chromium.app' to '/Applications/Chromium.app'\n==> Linking Binary 'chromium.wrapper.sh' to '/usr/local/bin/chromium'\nüç∫  chromium was successfully installed!\n```\n\n\n### [`chromote`]{style=\"font-size: 1.20em\"}\n\nThe [`chromote` package](https://rstudio.github.io/chromote/index.html) allows R to open Chromium. I had to make sure R knew where to find the Chromium application ([this section helps](https://rstudio.github.io/chromote/#specifying-which-browser-to-use)) by passing the path to the app to `Sys.setenv()` (*you can locate the path to Chromium using by holding <kbd>command (‚åò)</kbd> and clicking on the application icon*)\n\n```{r}\n#| eval: false\n#| code-fold: false\nremotes::install_github(\"rstudio/chromote\")\nlibrary(chromote)\nSys.setenv(CHROMOTE_CHROME = \"/Applications/Chromium.app/Contents/MacOS/Chromium\")\n```\n\nFind your chrome app: \n\n```{r}\n#| eval: false\n#| code-fold: false\nchromote::find_chrome()\n```\n\n```{bash}\n#| eval: false\n#| code-fold: false \n[1] \"/Applications/Chromium.app/Contents/MacOS/Chromium\"\n```\n\nI also verified the Chromium app opened with `ChromoteSession$new()`\n\n```{r}\n#| eval: false\n#| code-fold: false\n#| code-summary: verify ChromoteSession$new()\nb <- ChromoteSession$new()\nb$view()\n```\n\n\n:::: {.column-body-outset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![Chromium](chromium.png){#fig-chromium width=100% fig-align=\"center\"}\n\nChromium headless browser\n:::\n\n::::\n\nGreat! Going through this step means `shinytest2`'s test recorder will (*should*) deploy when I'm recording tests. \n\n## App-package contents\n\nI've created [`msst2ap`](https://github.com/mjfrigaard/msst2ap) (i.e., **M**astering **S**hiny **s**hiny**t**est**2** **a**pp-**p**ackage), which you can download [here](https://github.com/mjfrigaard/msst2ap/archive/refs/heads/main.zip) or install it using the following: \n\n```{r}\n#| code-fold: false\n#| eval: false\n#| results: hide\nremotes::install_github(\"mjfrigaard/msst2ap\",\n  force = TRUE, quiet = TRUE\n)\nlibrary(msst2ap)\n```\n\nThe applications in `msst2ap` can be run with the their standalone app functions.\n\n{{< include _modules_apps.qmd >}}\n\n\n## Using [`shinytest2`]{style=\"font-size: 1.20em\"}\n\n`shinytest2` is extremely [well documentation](https://rstudio.github.io/shinytest2/index.html). I highly recommended the [Get Started vignette](https://rstudio.github.io/shinytest2/articles/shinytest2.html). In the next sections, I'll cover some examples for what I've included in the `msst2ap`.\n\nRun `shinytest2::use_shinytest2()` to create the initial files for `shinytest2`:\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::use_shinytest2()\n```\n\n```{bash}\n#| echo: true\n#| eval: false\n#| code-fold: true\n#| code-summary: 'show/hide output from use_shinytest2()'\n! Runner already found: tests/testthat.R\n‚úî Adding 'shinytest2::load_app_env()' to 'tests/testthat/setup-shinytest2.R'\n‚úî Adding '*_.new.png' to '.gitignore'\n‚úî Adding '_\\\\.new\\\\.png$' to '.Rbuildignore'\n‚úî Setting active project to '/projects/msst2ap'\n‚úî Adding 'shinytest2' to Suggests field in DESCRIPTION\n‚Ä¢ Use `requireNamespace(\"shinytest2\", quietly = TRUE)` to test if package is installed\n‚Ä¢ Then directly refer to functions with `shinytest2::fun()`\n‚úî Setting active project to '<no active project>'\n```\n\n-   `use_shinytest2()` adds the `setup-shinytest2.R` script to my `tests/testthat/` folder:\n\n    ```{bash}\n    #| echo: true\n    #| eval: false\n    #| code-fold: false\n    tests/testthat/\n    ‚îú‚îÄ‚îÄ _snaps/\n    ‚îî‚îÄ‚îÄ setup-shinytest2.R\n    ```\n\nThe `setup-shinytest2.R` file contains a single call to `shinytest2::load_app_env()`, which \"*Executes all `./R` files and `global.R` into the current environment*\"\n\n## Recording tests\n\nNew tests with [`shinytest2`](https://rstudio.github.io/shinytest2/index.html) can be created by launching the test event recorder, which allows us interact with our application, observe it's behavior, and record inputs, reactive values, and outputs. To record a test, run `shinytest2::record_test()`.\n\nThe first argument in `record_test()` is the path to application. If you've stored your application in an `app.R` file, `record_test()` will automatically load that application. \n\nIn `msst2ap`, the application in `app.R` is the `histogramApp()`, so the test recorder will automatically open with this application if I run `record_test()` (without providing the path to a `shiny` app).\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::record_test()\n```\n\n::::{.column-body-outset-right}\n\n::: {#fig-record_test_histogramApp layout-ncol=1}\n![shinytest2::record_test()](record_test_histogramApp.png){#fig-record_test_histogramApp width=100% fig-align=\"center\"}\n\n`record_test()` with application in `app.R`\n:::\n\n::::\n\nThe `app` argument can also be a \"*path to a Shiny application*\". For example, I have 'development' versions of each application in `msst2ap` in [`inst/dev/`](https://github.com/mjfrigaard/msst2ap/tree/main/inst/dev):\n\n```{bash}\n#| echo: true\n#| eval: false \n#| code-fold: true\n#| code-summary: 'show/hide contents of msst2ap/inst/dev'\ninst/dev\n‚îú‚îÄ‚îÄ datasetApp\n‚îÇ   ‚îú‚îÄ‚îÄ DESCRIPTION\n‚îÇ   ‚îú‚îÄ‚îÄ R\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îî‚îÄ‚îÄ app.R\n‚îú‚îÄ‚îÄ histogramApp\n‚îÇ   ‚îú‚îÄ‚îÄ DESCRIPTION\n‚îÇ   ‚îú‚îÄ‚îÄ R\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îî‚îÄ‚îÄ app.R\n‚îú‚îÄ‚îÄ selectDataVarApp\n‚îÇ   ‚îú‚îÄ‚îÄ DESCRIPTION\n‚îÇ   ‚îú‚îÄ‚îÄ R\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îî‚îÄ‚îÄ app.R\n‚îî‚îÄ‚îÄ selectVarApp\n    ‚îú‚îÄ‚îÄ DESCRIPTION\n    ‚îú‚îÄ‚îÄ R\n    ‚îÇ   ‚îî‚îÄ‚îÄ modules.R\n    ‚îú‚îÄ‚îÄ README.md\n    ‚îî‚îÄ‚îÄ app.R\n\n9 directories, 16 files\n```\n\nI can pass the path to each application to the `app` argument in `record_test()`:\n\n```{r}\n#| echo: true\n#| eval: false \n#| code-fold: false\nshinytest2::record_test(app = \"inst/dev/histogramApp/\")\n```\n\nThis opens Chromium with our shiny app: \n\n::::{.column-body-outset-right}\n\n::: {#fig-record_test_datasetApp layout-ncol=1}\n\n![record_test(\"inst/dev/histogramApp/\")](record_test_histogramApp.png){#fig-record_test_datasetApp width=100% fig-align=\"center\"}\n\n`record_test()` with app in `inst/dev/histogramApp/` folder\n:::\n\n::::\n\nThe test event recorder displays the `shiny` app, but also includes a window for recording each application 'event.' \n\n### Expectations\n\nI'll start by recording a test for `histogramApp()`. On the right-hand side of the Chromium headless browser, you'll see the **`shinytest2` expectations** window:\n\n::::{.column-body-outset-right}\n\n::: {#fig-shinytest2-expectations layout-ncol=1}\n![`shinytest2` expectations](shinytest2-expectations.png){#fig-expectations}\n\n`shinytest2` expectations in `record_test()`\n:::\n\n::::\n\nThe initial value in the **Code** window displays the dimensions of the application in Chromium (`app$set_window_size(width = , height = )`).\n\n### Events\n\nWhen I interact with the application (i.e., make changes to the inputs), each change is an 'event' that is recorded in the test:\n\n::::{.column-body-outset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![change inputs](shinytest2-change-inputs.png){#fig-change-values-shinytest2 width=100% fig-align=\"center\"}\n\nChanging app inputs \n:::\n\n::::\n\n### Code \n\nAll events are recorded as code in the **Code** section of **`shinytest2` expectations**:\n\n::::{.column-body-outset-right}\n\n::: {#fig-shinytest2-code-expectations layout-ncol=1}\n\n![shinytest2 code expectations](shinytest2-expectations-code.png){#fig-shinytest2-expectations-code width=100% fig-align=\"center\"}\n\nRecorded code for each event\n:::\n\n::::\n\n### Expect Shiny values \n\nWhen I've finished interacting with the application, I click on the **Expect Shiny values** button at the top of **`shinytest2` expectations**. This will add `app$expect_values()` to the **Code** section:\n\n::::{.column-body-outset-right}\n\n::: {#fig-expect-shiny-values layout-ncol=1}\n\n\n![expect-shiny-values](shinytest2-expect-shiny-values.png){#fig-expect-shiny-values width=100% fig-align=\"center\"}\n\n**Expect Shiny values** in `shinytest2` expectations\n:::\n\n::::\n\n### Save test and exit\n\nFinally, to save the test, enter a **Test name** and click **Save test and exit**\n\n::::{.column-body-outset-right}\n\n::: {#fig-name-save-exit layout-ncol=1}\n\n![name-save-exit](shinytest2-name-save.png){#fig-shinytest2-name-save width=100% fig-align=\"center\"}\n\nName, save and exit `record_test()`\n:::\n\n::::\n\nLet's examine the output of the test!\n\n## Console output\n\nBack in the Console, the `shinytest2` test recorder is performing the following actions behind the scenes:\n\n-   The Chromium headless browser opens with the `histogramApp()` and `shiny` is loaded \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    Listening on http://127.0.0.1:7418\n    {shiny} R stderr ----------- Loading required package: shiny\n    ```\n\n\n-   [**`Warning`**]{style=\"font-size: 1.20em\"}: The first warning is a caused by the call to `shiny::loadSupport()`. It's a [known issue](https://github.com/rstudio/shinytest2/issues/264#issuecomment-1251422788), so we can assume the developers are working on it!\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    Warning message:\n    In shiny::loadSupport(app_dir, renv = renv, globalrenv = globalrenv) :\n      Loading R/ subdirectory for Shiny application, but this directory appears to\n      contain an R package. Sourcing files in R/ may cause unexpected behavior.\n    ```\n\n-   We are told the application is being run in [`test mode`](https://rstudio.github.io/shinytest2/reference/AppDriver.html#test-mode), which '*lets the `AppDriver` retrieve values*' from the app \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    {shiny} R stderr ----------- Running application in test mode.\n    {shiny} R stdout ----------- ‚Ñπ Loading msst2ap\n    ```\n\n-   [**`Warning`**]{style=\"font-size: 1.20em\"}: The `tests/testthat.R` file (i.e., the 'test runner') was overwritten and tests are now run with `shinytest2::test_app()`\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false \n    Warning: Overwriting test runner tests/testthat.R with `shinytest2::test_app()`\n    call to ensure proper a testing environment.\n    ```\n\n-   When I clicked \"**Save test and exit**\", the changes made to `tests/testthat.R` and `tests/testthat/test-shinytest2.R` are saved: \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    ‚Ä¢ Saving test runner: tests/testthat.R\n    ‚Ä¢ Saving test file: tests/testthat/test-shinytest2.R\n    ```\n\n-   A call to `shinytest2::load_app_env()` is added to `setup-shinytest2.R` and the test file (`tests/testthat/test-shinytest2.R`) is opened: \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    ‚úî Adding 'shinytest2::load_app_env()' to 'tests/testthat/setup-shinytest2.R'\n    ‚Ä¢ Modify '/projects/msst2ap/tests/testthat/test-shinytest2.R'\n    ```\n\n-   The new test is saved in the `tests/testthat/test-shinytest2.R` file and automatically run. \n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    ‚Ä¢ Running recorded test: tests/testthat/test-shinytest2.R\n    ```\n\n## Test results\n\nThe results from running the new test file (`test-shinytest2.R`) are below: \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\n‚Ä¢ Running recorded test: tests/testthat/test-shinytest2.R\n‚úî | F W S  OK | Context\n‚úî |   2     1 | shinytest2 [6.3s]                                             \n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nWarning (test-shinytest2.R:12:3): {shinytest2} recording: histogramApp\nAdding new file snapshot: 'tests/testthat/_snaps/histogramApp-001_.png'\n\nWarning (test-shinytest2.R:12:3): {shinytest2} recording: histogramApp\nAdding new file snapshot: 'tests/testthat/_snaps/histogramApp-001.json'\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n‚ïê‚ïê Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nDuration: 6.7 s\n\n[ FAIL 0 | WARN 2 | SKIP 0 | PASS 1 ]\n```\n\nTwo warnings are displayed because the test adds two new files to the `tests/testthat/_snaps/` folder: \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntests/testthat/_snaps/\n‚îî‚îÄ‚îÄ shinytest2\n    ‚îú‚îÄ‚îÄ histogramApp-001.json\n    ‚îî‚îÄ‚îÄ histogramApp-001_.png\n\n2 directories, 2 files\n```\n\nThese are the files new test runs will be compared against (i.e., our 'baseline' snapshots). I'll briefly cover their contents below: \n\n### [`_snaps`]{style=\"font-size: 1.15em\"}\n\n`expect_values()` generates two snapshot files in the `tests/testthat/_snaps/` folder: one `.png` and one `.json` file:\n\n#### [`.png`]{style=\"font-size: 1.20em\"}\n\nThe image saved in `tests/testthat/_snaps/histogramApp-001_.png` is below:\n\n![](histogramApp-001_.png){fig-align='center'}\n\nThe image is a little grainy and hard to see, but it shows the changed dataset and variable values (**`attitude`** and **`privileges`**).\n\n#### [`.json`]{style=\"font-size: 1.20em\"}\n\nThe `.json` file saved in `tests/testthat/_snaps/histogramApp-001.json` contains the snapshot `input`s, `output`s, and `export`s:\n\n-   The inputs show the three changed values (`\"data-dataset\"`, `\"var-var\"`, and `\"hist-bins\"`).\n \n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: show\n    #| code-summary: 'show/hide snapshot inputs' \n    {\n      \"input\": {\n        \"data-dataset\": \"attitude\",\n        \"hist-bins\": 15,\n        \"var-var\": \"privileges\"\n      },\n    ```\n    \nThe two outputs are stored in `\"hist-hist\"` and `\"vals\"`:\n\n-   `\"hist-hist\"` holds the updated image (stored in the `image data hash`), along with various other characteristics of the plot:\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: true  \n    #| code-summary: 'show/hide snapshot outputs'\n      \"output\": {\n        \"hist-hist\": {\n          \"src\": \"[image data hash: fde4089afc06a814d75c627b823d0806]\",\n          \"width\": 682.6640625,\n          \"height\": 400,\n          \"alt\": \"Plot object\",\n          \"coordmap\": {\n            \"panels\": [\n              {\n                \"domain\": {\n                  \"left\": 27.8,\n                  \"right\": 87.2,\n                  \"bottom\": -0.24,\n                  \"top\": 6.24\n                },\n                \"range\": {\n                  \"left\": 78.79664956011726,\n                  \"right\": 642.3048029692084,\n                  \"bottom\": 301.08,\n                  \"top\": 77.71999999999998\n                },\n                \"log\": {\n                  \"x\": null,\n                  \"y\": null\n                },\n                \"mapping\": {\n    \n                }\n              }\n            ],\n            \"dims\": {\n              \"width\": 682.6640625,\n              \"height\": 400\n            }\n          }\n        },\n    ```\n    \n-   `\"vals\"` contains the reactive values from `reactiveValuesToList()`:\n    \n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: show  \n    #| code-summary: 'show/hide snapshot outputs'\n        \"vals\": \"$`hist-bins`\\n[1] 15\\n\\n$`var-var`\\n[1] \\\"privileges\\\"\\n\\n$`data-dataset`\\n[1] \\\"attitude\\\"\\n\"\n      },\n    ```\n\n-   I didn't export any values in this test, so `\"export\"` is empty:\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: show  \n    #| code-summary: 'show/hide snapshot outputs'\n      \"export\": {\n    \n      }\n    }\n    ```\n\n    -   *I'll cover this in a later test.*\n  \n#### Namespaces\n\nThe contents of the `.json` snapshot should look *somewhat* familiar for the three modules contained in  `histogramApp()`:\n\n-   For example, the `inputId` for `\"dataset\"` in the `datasetInput/Server` module communicates between the UI and server using the shared `id` argument `\"data\"`\n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false  \n    # in datasetInput()\n      shiny::selectInput(\n        shiny::NS(id, \"dataset\"),\n        \"Pick a dataset\",\n        choices = names)\n    # in histogramApp()\n      shiny::sidebarPanel(\n            datasetInput(\"data\", is.data.frame)\n          )\n    ```\n    \n    -   In the `.json` snapshot, this `inputId` is represented in the following `\"input\"`:\n\n    ```{bash}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    {\n      \"input\": {\n        \"data-dataset\": \"attitude\",\n      },\n    ```\n    \nNamespaces and `inputId`s will come up again if you start writing your own tests, which I'll cover below. \n\n## [`shinytest2`]{style=\"font-size: 1.20em\"} test contents\n\nThe contents of the test file generated from the test recorder are below: \n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\nlibrary(shinytest2)\n\ntest_that(\"{shinytest2} recording: histogramApp\", {\n  app <- AppDriver$new(name = \"histogramApp\", height = 657, width = 1069)\n  app$set_inputs(`data-dataset` = \"attitude\")\n  app$set_inputs(`var-var` = \"privileges\")\n  app$set_inputs(`hist-bins` = 11)\n  app$set_inputs(`hist-bins` = 12)\n  app$set_inputs(`hist-bins` = 13)\n  app$set_inputs(`hist-bins` = 14)\n  app$set_inputs(`hist-bins` = 15)\n  app$expect_values()\n})\n```\n\nBefore I dive into the contents of the test file, I want to run this new test and make sure it passes. I can do this by clicking on **Run Test** or by using `test_file()` from `testthat`:\n\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\ntestthat::test_file(\"tests/testthat/test-shinytest2.R\")\n```\n\n\n:::: {.callout-important collapse='false'}\n## WARNING\n\n::: {style='font-size: 1.20em; color: #000000;'}\n\nBecause `msst2ap` is a package, running tests with `shinytest2` will produce the warning below:\n  \n![`shiny::loadSupport()` warning](run_tests_out.png){width=100%}\n\nAs noted above, this warning is [known by the `shinytest2` package authors](https://github.com/rstudio/shinytest2/issues/264#issuecomment-1251422788) and is being addressed in a future release. \n\n:::\n\n::::\n\nNow that I know the first `shinytest2` test is passing, I'll dive into each line in the test. \n\n### [`AppDriver`]{style=\"font-size: 1.15em\"}\n\n`shinytest2` uses the [`AppDriver`](https://rstudio.github.io/shinytest2/reference/AppDriver.html) to create \"*a full simulation of a Shiny app*\". When recording tests, this will be the first argument (along with the `name` of the `.png` and `.json` snapshot `testthat` files, and the `height` and `width` of the [`ChromoteSession`](https://rstudio.github.io/chromote/reference/ChromoteSession.html)).\n\n-   The example from the test above is below: \n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n     app <- AppDriver$new(name = \"histogramApp\", height = 657, width = 1069)\n    ```\n\n\n### [`set_inputs()`]{style=\"font-size: 1.15em\"}\n\nWhen recording `shinytest2` tests, every change to the applications inputs will result in a call to `app$set_inputs()`. This function is similar to the `testServer()` call to `session$setInputs()` (i.e., the inputs are provided as \"*name-value pairs*\", i.e., `inputId` = `\"value\"`). \n\n-   In the `histogramApp()`, these are provided with the appended namespaces:\n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n      app$set_inputs(`data-dataset` = \"attitude\")\n      app$set_inputs(`var-var` = \"privileges\")\n      app$set_inputs(`hist-bins` = 11)\n      app$set_inputs(`hist-bins` = 12)\n      app$set_inputs(`hist-bins` = 13)\n      app$set_inputs(`hist-bins` = 14)\n      app$set_inputs(`hist-bins` = 15)\n    ```\n\n### [`expect_values()`]{style=\"font-size: 1.15em\"}\n\n[The documentation](https://rstudio.github.io/shinytest2/articles/in-depth.html#making-expectations) on `expect_values()` is definitely worth reading. `expect_values()` is added to the test file when **Expect Shiny values** is clicked in the test recorder and \"*creates a list of values and compares them to the current values of the application*.\"\n\n-   `expect_values()` = \"*Expect all `input`, `output`, and `export` values are consistent*\"\n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n      app$expect_values()\n    ```\n\n## Writing tests\n\nThe great thing about testing with `shinytest2` is the ability to be view the `AppDriver` interactively as you write tests. I'll demo writing a test for the `datasetApp()` by adapting the contents of `tests/testthat/test-shinytest2.R` into a new `tests/testthat/test-shinytest2-datasetApp.R` file.\n\n-   First I want to make sure I have the development version of Chromium: \n\n    ```{r}\n    #| eval: false\n    #| echo: true \n    #| code-fold: false\n    # run this in the console to make sure you have dev version of chromote\n    remotes::install_github(\"rstudio/chromote\", force = TRUE, quiet = TRUE)\n    library(chromote)\n    ```\n\nIn the new test `test-shinytest2-datasetApp.R` file, I'll start with a call to `testthat::test_that(),` then create and view a new `app` object with the Chromium headless browser. The namespaced standalone app function can be passed to the first argument of `AppDriver$new()`, followed by the `height` and `weight` (which I've adjusted to fit the `datasetApp()`).\n\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntest_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view\n})\n```\n\nThis opens the following Chromium window: \n\n::::{.column-body-outset-right}\n\n::: {#fig-app_view layout-ncol=1}\n\n![`app$view()`](app_view.png){#fig-app_view}\n\nView application with `app$view()`\n:::\n\n::::\n\nI can see the same app I see when I run `msst2ap::datasetApp()` in the console, but with some additional developer tools.  \n\n### Setting inputs \n\nIf I continue to adapt each line of `test-shinytest2.R`, I see that next lines set the `inputId`s for `dataset-dataset` to the `attitude` dataset with `app$set_input()` (*Note that this uses the module notation above (i.e., `\"id-inputId\"`)*):\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntest_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n})\n```\n\nIf you can see both windows, you'll see the application values change in the Chromium browser: \n\n::::{.column-page-right}\n\n::: {#fig-set_inputs layout-ncol=1}\n\n![`app$set_inputs()`](app_set_inputs.png){#fig-app_set_inputs}\n\nSet application inputs with `app$set_inputs()`\n:::\n\n::::\n\n### Checking inputs\n\nI'll include a call to `app$get_values()` and assign the output to `app_values`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n  app_values <- app$get_values()\n})\n```\n\nThe contents of `app_values` is a list with the same three value types in the `.json` snapshot covered above (`input`, `output`, and `export`):\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\nstr(app_values)\n```\n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\nList of 3\n $ input :List of 1\n  ..$ dataset-dataset: chr \"attitude\"\n $ output:List of 2\n  ..$ data: chr \"<table  class = 'table shiny-table table- \"| __truncated__\n  ..$ vals: chr \"$`dataset-dataset`\\n[1] \\\"attitude\\\"\\n\"\n $ export: Named list()\n```\n\nI can narrow the scope of the test and verify only the `input` that was changed with `app$set_inputs()`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n  app_values <- app$get_values()\n  testthat::expect_equal(\n    object = app_values$input$`dataset-dataset`,\n    expected = \"attitude\")\n})\n```\n\nTo conclude the test, I'll end with a call to [`app$stop()`](https://rstudio.github.io/shinytest2/articles/zzz-faq.html#should-i-manually-shut-down-my-appdriver).\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: datasetApp\", {\n  app <- AppDriver$new(msst2ap::datasetApp(), height = 600, width = 800)\n  app$view()\n  app$set_inputs(`dataset-dataset` = \"attitude\")\n  app_values <- app$get_values()\n  testthat::expect_equal(\n    object = app_values$input$`dataset-dataset`,\n    expected = \"attitude\")\n  app$stop()\n})\n```\n\nI'll save the `test-shinytest2-datasetApp.R` file and run the test with `testthat::test_file()`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntest_file(\"tests/testthat/test-shinytest2-datasetApp.R\")\n```\n\nThis is the initial run of the test for `datasetApp()`, and no snapshot files are generated because the test doesn't include a call to `app$export_values()`. I see the tests passes:  \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n```\n\n## Exporting test values \n\nThe `shinytest2` documentation [repeatedly](https://rstudio.github.io/shinytest2/articles/in-depth.html#exported-values) [recommends](https://rstudio.github.io/shinytest2/articles/robust.html#exported-values) exporting test values from shiny applications with `shiny::exportTestValues()`. \n\nI'll demonstrate exporting test values from `selectVarApp()` by adding the following to the `server` function in `R/selectVarApp.R`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\n  server <- function(input, output, session) {\n\n    data <- datasetServer(\"data\")\n    var <- selectVarServer(\"var\", data, filter = filter)\n\n    output$out <- shiny::renderTable(head(var()))\n\n    output$vals <- shiny::renderPrint({\n      x <- shiny::reactiveValuesToList(input,\n                              all.names = TRUE)\n      print(x)\n    })\n\n    shiny::exportTestValues(\n      var = var(),\n      data = data()\n    )\n  }\n```\n\n\nAfter saving, loading and building the package, I'll create the `test-shinytest2-selectVarApp.R` test file and add the initial contents:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: selectVarApp\", {\n  app <- AppDriver$new(msst2ap::selectVarApp(), height = 600, width = 600)\n  app$view()\n  \n})\n```\n\nThe application opens in the Chromium headless browser:\n\n::::{.column-body-outset-right}\n\n::: {#fig-app_view_selectVarApp layout-ncol=1}\n\n![`app$view()`](app_view_selectVarApp.png){#fig-app_view_selectVarApp}\n\nView `selectVarApp()` application with `app$view()`\n:::\n\n::::\n\nIn the test file, I'll use `app$get_values()` to store the exported test values in `app_values`, then verify the structure of each exported object: \n\n-   `data` should be a `data.frame()`\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\n  testthat::expect_true(\n    object = is.data.frame(app_values$export$data))\n```\n\n-   `var` should be a single column `data.frame()`\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\n  testthat::expect_true(\n    object = ncol(app_values$export$var) == 1)\n```\n\nThe completed test for `selectVarApp()` is below: \n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_that(\"{shinytest2}: selectVarApp\", {\n  app <- AppDriver$new(msst2ap::selectVarApp(), height = 600, width = 600)\n  app$view()\n  app_values <- app$get_values()\n  \n  testthat::expect_true(\n    object = is.data.frame(app_values$export$data))\n\n  testthat::expect_true(\n    object = ncol(app_values$export$var) == 1)\n  \n  app$stop()\n})\n```\n\nOnce again, I end the test with a call to `app$stop()`, then run the test with `testthat::test_file()`:\n\n```{r}\n#| eval: false\n#| echo: true \n#| code-fold: false\ntestthat::test_file(path = \"tests/testthat/test-shinytest2-selectVarApp.R\")\n```\n\nThe results are below: \n\n```{bash}\n#| eval: false\n#| echo: true \n#| code-fold: false\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\n```\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","dpi":320,"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"show/hide","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","knitr":{"opts_chunk":{"collapse":true}},"theme":{"light":["litera","../../custom.scss"]},"fig-asp":0.618,"fontsize":"10.5","toc-title":"Contents","toc-location":"left","callout-icon":false,"code-block-bg":"#f8f8f8","code-block-border-left":"#e8e8e8","title-block-banner":true,"title":"Testing shiny apps with `shinytest2`","subtitle":"Part 4: recording tests and snapshots","author":"Martin Frigaard","date":"2023-06-30","categories":["shiny","testing"],"image":"image.svg","draft":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}