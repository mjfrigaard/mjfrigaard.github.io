{"title":"Testing shiny apps with `shinytest2`","markdown":{"yaml":{"title":"Testing shiny apps with `shinytest2`","subtitle":"Part 4: recording tests and snapshots","author":"Martin Frigaard","date":"2023-06-30","categories":["shiny","testing"],"image":"image.svg","toc":true,"toc-depth":5,"toc-title":"Contents","toc-location":"left","draft":true,"code-fold":"show","code-summary":"show/hide","code-link":false,"fig-align":"center","fontsize":"10.5","callout-icon":false,"freeze":true,"execute":{"echo":true,"message":false,"warning":false,"eval":false}},"headingText":"renv::install(\"mjfrigaard/msst2ap\")","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| eval: true\n#| echo: false\n#| include: false\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n    b = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    g = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    o = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    r = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\noptions(scipen = 999)\n# renv::install(\"lobstr\")\nlibrary(lobstr)\nlibrary(dplyr)\nlibrary(Lahman)\nlibrary(NHANES)\nlibrary(palmerpenguins)\n```\n\n```{r}\n#| label: pkgs\n#| eval: true\n#| code-summary: packages\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(vdiffr)\nlibrary(shinytest2)\n```\n\n\n```{r}\n#| label: co_box_test\n#| eval: false\n#| results: asis\n#| include: false\nco_box(color = \"r\", \"RED\", \"**This is red**\n\n  **This is a new line**\n\n  **this a another line**\")\n```\n\n\n```{r}\n#| label: co_box_dev\n#| echo: false\n#| results: asis\n#| eval: false\nco_box(\n  color = \"r\",\n  header = \"ALERT!\",\n  contents = \"This post is currently under development. Thank you for your patience.\"\n)\n```\n\nThis is the fourth post in a [series on testing](https://mjfrigaard.github.io/series.html#testing-shiny-applications) shiny applications. My previous posts have covered [unit testing utility functions](https://mjfrigaard.github.io/posts/test-shiny-p1/) and [testing module server functions with `testServer()`](https://mjfrigaard.github.io/posts/test-shiny-p3/). In this post, I'll be covering testing shiny applications using `testthat` and `shinytest2`.\n\n::: {.column-margin}\n![](image.svg){width=70%}\n:::\n\n\n```{r}\n#| label: co_box_shinytest\n#| echo: false\n#| results: asis\n#| eval: true\nco_box(\n  color = \"b\",\n  header = \"Why `shinytest2`?\",\n  contents = \"\n  **What happened to `shinytest`?**\n  \n  `shinytest2` replaced `shinytest` on 2022-04-27. If you've previously written tests with `shinytest`--or are curious how `shinytest2` if different--I recommend going through the [Migrating from `shinytest`](https://cran.r-project.org/web/packages/shinytest2/vignettes/z-migration.html#:~:text) vignette.\n  \"\n)\n```\n\n## Set up\n\n[`shinytest2`](https://rstudio.github.io/shinytest2/index.html) requires a few steps to get up and running, so I've included my start up steps below (in hopes that someone might find them useful).\n\n## Chromium\n\nFirst make sure you have [Chromium headless browser](https://www.chromium.org/chromium-projects/) installed. Chromium is the browser used to test and debug shiny apps with `shinytest2`.\n\nIf you're using macOS, you can install Chromium using [homebrew](https://formulae.brew.sh/cask/chromium): \n\n```{bash}\n#| eval: false\n#| code-fold: false \nbrew install --cask chromium\n```\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| code-summary: 'show/hide output'\n==> Downloading https://download-chromium.appspot.com/dl/Mac?type=snapshots\n==> Downloading from https://commondatastorage.googleapis.com/chromium-browser-s\n######################################################################### 100.0%\nWarning: No checksum defined for cask 'chromium', skipping verification.\n==> Installing Cask chromium\n==> Moving App 'Chromium.app' to '/Applications/Chromium.app'\n==> Linking Binary 'chromium.wrapper.sh' to '/usr/local/bin/chromium'\nüç∫  chromium was successfully installed!\n```\n\n\n## [`chromote`]{style=\"font-size: 1.20em\"}\n\nThe [`chromote` package](https://rstudio.github.io/chromote/index.html) allows R to open Chromium. I had to make sure R knew where to find the Chromium application ([this section helps](https://rstudio.github.io/chromote/#specifying-which-browser-to-use)) by passing the path to the app to `Sys.setenv()` (*you can locate the path to Chromium using by holding <kbd>command (‚åò)</kbd> and clicking on the application icon*)\n\n```{r}\n#| eval: false\n#| code-fold: false\nremotes::install_github(\"rstudio/chromote\")\nlibrary(chromote)\nSys.setenv(CHROMOTE_CHROME = \"/Applications/Chromium.app/Contents/MacOS/Chromium\")\n```\n\nFind your chrome app: \n\n```{r}\n#| eval: false\n#| code-fold: false\nchromote::find_chrome()\n```\n\n```{bash}\n#| eval: false\n#| code-fold: false \n[1] \"/Applications/Chromium.app/Contents/MacOS/Chromium\"\n```\n\nI also verified the Chromium app opened with `ChromoteSession$new()`\n\n```{r}\n#| eval: false\n#| code-fold: false\n#| code-summary: verify ChromoteSession$new()\nb <- ChromoteSession$new()\nb$view()\n```\n\n\n:::: {.column-body-outset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![Chromium](chromium.png){#fig-chromium width=100% fig-align=\"center\"}\n\nChromium headless browser\n:::\n\n::::\n\nGreat! Going through this step means `shinytest2`'s test recorder will (*should*) deploy when I'm recording tests. \n\n## A shiny app-package\n\nI've created [`msst2ap`](https://github.com/mjfrigaard/msst2ap) (i.e., **M**astering **S**hiny **s**hiny**t**est**2** **a**pp-**p**ackage), which you can download [here](https://github.com/mjfrigaard/msst2ap/archive/refs/heads/main.zip) or install it using the following: \n\n```{r}\n#| code-fold: false\n#| eval: false\n#| results: hide\nremotes::install_github(\"mjfrigaard/msst2ap\",\n  force = TRUE, quiet = TRUE\n)\nlibrary(msst2ap)\n```\n\nThe applications in `msst2ap` can be run with the their standalone app functions.\n\n{{< include _modules_apps.qmd >}}\n\n\n## Using [`shinytest2`]{style=\"font-size: 1.15em\"}\n\n`shinytest2` is extremely [well documentation](https://rstudio.github.io/shinytest2/index.html). I highly recommended the [Get Started vignette](https://rstudio.github.io/shinytest2/articles/shinytest2.html). In the next sections, I'll cover some examples for what I've included in the `msst2ap`.\n\nRun `shinytest2::use_shinytest2()` to create the initial files for `shinytest2`:\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::use_shinytest2()\n```\n\n```{bash}\n#| echo: true\n#| eval: false\n#| code-fold: true\n#| code-summary: 'show/hide output from use_shinytest2()'\n! Runner already found: tests/testthat.R\n‚úî Adding 'shinytest2::load_app_env()' to 'tests/testthat/setup-shinytest2.R'\n‚úî Adding '*_.new.png' to '.gitignore'\n‚úî Adding '_\\\\.new\\\\.png$' to '.Rbuildignore'\n‚úî Setting active project to '/projects/apps/msst2ap'\n‚úî Adding 'shinytest2' to Suggests field in DESCRIPTION\n‚Ä¢ Use `requireNamespace(\"shinytest2\", quietly = TRUE)` to test if package is installed\n‚Ä¢ Then directly refer to functions with `shinytest2::fun()`\n‚úî Setting active project to '<no active project>'\n```\n\n-   `use_shinytest2()` adds the `setup-shinytest2.R` script to my `tests/testthat/` folder:\n\n    ```{bash}\n    #| echo: true\n    #| eval: false\n    #| code-fold: false\n    tests/testthat/\n    ‚îú‚îÄ‚îÄ _snaps/\n    ‚îî‚îÄ‚îÄ setup-shinytest2.R\n    ```\n\nThe `setup-shinytest2.R` file contains a single call to `shinytest2::load_app_env()`, which \"*Executes all `./R` files and `global.R` into the current environment*\"\n\n### Recording tests\n\nNew tests with [`shinytest2`](https://rstudio.github.io/shinytest2/index.html) can be created by launching the test event recorder, which allows us interact with our application, observe it's behavior, and record inputs, reactive values, and outputs. To record a test, run `shinytest2::record_test()`.\n\nThe first argument in `record_test()` is the path to application. If you've stored your application in an `app.R` file, `record_test()` will automatically load that application. In `msst2ap`, the application in `app.R` is the `histogramApp()`, so the test recorder will automatically open with this application if I run `record_test()` (without providing the path to a `shiny` app).\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::record_test()\n```\n\n::::{.column-page-inset-right}\n\n::: {#fig-record_test_histogramApp layout-ncol=1}\n![shinytest2::record_test()](record_test_histogramApp.png){#fig-record_test_histogramApp width=100% fig-align=\"center\"}\n\n`record_test()` with application in `app.R`\n:::\n\n::::\n\nIf you have an application is stored in another location (like the `inst/dev/` folder), the you can pass the path to `record_test()`:\n\n```{r}\n#| echo: true\n#| eval: false \n#| code-fold: false\nshinytest2::record_test(app = \"\")\n```\n\nThis opens Chromium with our shiny app: \n\n::::{.column-page-inset-right}\n\n::: {#fig-record_test_datasetApp layout-ncol=1}\n\n![record_test(\"inst/dev/datasetApp/\") ](record_test_datasetApp.png){#fig-record_test_datasetApp width=100% fig-align=\"center\"}\n\n`record_test()` for `datasetApp()`\n:::\n\n::::\n\nThe test event recorder displays the `shiny` app, but also includes a window for recording each application 'event.' \n\n#### Expectations\n\nI'll start by recording a test for `datasetApp()`. On the right-hand side of the Chromium headless browser, you'll see the **`shinytest2` expectations** window:\n\n::::{.column-page-inset-right}\n\n::: {#fig-shinytest2-expectations layout-ncol=1}\n![`shinytest2` expectations](shinytest2-expectations.png){#fig-expectations}\n\n`shinytest2` expectations in `record_test()`\n:::\n\n::::\n\nThe initial value in the **Code** window displays the dimensions of the application in Chromium (`app$set_window_size(width = , height = )`).\n\n#### Events\n\nWhen I interact with the application (i.e., make changes to the inputs), each change is an 'event' that is recorded in the test:\n\n::::{.column-page-inset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![change inputs](shinytest2-change-inputs.png){#fig-change-values-shinytest2 width=100% fig-align=\"center\"}\n\nChanging app inputs \n:::\n\n::::\n\n#### Code \n\nAll events are recorded as code in the **Code** section of **`shinytest2` expectations**:\n\n::::{.column-page-inset-right}\n\n::: {#fig-shinytest2-code-expectations layout-ncol=1}\n\n![shinytest2 code expectations](shinytest2-expectations-code.png){#fig-shinytest2-expectations-code width=100% fig-align=\"center\"}\n\nRecorded code for each event\n:::\n\n::::\n\n\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| eval: true\n#| echo: false\n#| include: false\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n    b = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    g = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='true'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    o = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    r = cat(paste0(\n      \"\\n\",\n      \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n      \"## \", header, \"\\n\\n\",\n      \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n      glue::glue_collapse(contents), \"\\n\\n\",\n      \"::: \\n\\n\",\n      \"::::\", \"\\n\"\n    )),\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\noptions(scipen = 999)\n# renv::install(\"mjfrigaard/msst2ap\")\n# renv::install(\"lobstr\")\nlibrary(lobstr)\nlibrary(dplyr)\nlibrary(Lahman)\nlibrary(NHANES)\nlibrary(palmerpenguins)\n```\n\n```{r}\n#| label: pkgs\n#| eval: true\n#| code-summary: packages\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(vdiffr)\nlibrary(shinytest2)\n```\n\n\n```{r}\n#| label: co_box_test\n#| eval: false\n#| results: asis\n#| include: false\nco_box(color = \"r\", \"RED\", \"**This is red**\n\n  **This is a new line**\n\n  **this a another line**\")\n```\n\n\n```{r}\n#| label: co_box_dev\n#| echo: false\n#| results: asis\n#| eval: false\nco_box(\n  color = \"r\",\n  header = \"ALERT!\",\n  contents = \"This post is currently under development. Thank you for your patience.\"\n)\n```\n\nThis is the fourth post in a [series on testing](https://mjfrigaard.github.io/series.html#testing-shiny-applications) shiny applications. My previous posts have covered [unit testing utility functions](https://mjfrigaard.github.io/posts/test-shiny-p1/) and [testing module server functions with `testServer()`](https://mjfrigaard.github.io/posts/test-shiny-p3/). In this post, I'll be covering testing shiny applications using `testthat` and `shinytest2`.\n\n::: {.column-margin}\n![](image.svg){width=70%}\n:::\n\n\n```{r}\n#| label: co_box_shinytest\n#| echo: false\n#| results: asis\n#| eval: true\nco_box(\n  color = \"b\",\n  header = \"Why `shinytest2`?\",\n  contents = \"\n  **What happened to `shinytest`?**\n  \n  `shinytest2` replaced `shinytest` on 2022-04-27. If you've previously written tests with `shinytest`--or are curious how `shinytest2` if different--I recommend going through the [Migrating from `shinytest`](https://cran.r-project.org/web/packages/shinytest2/vignettes/z-migration.html#:~:text) vignette.\n  \"\n)\n```\n\n## Set up\n\n[`shinytest2`](https://rstudio.github.io/shinytest2/index.html) requires a few steps to get up and running, so I've included my start up steps below (in hopes that someone might find them useful).\n\n## Chromium\n\nFirst make sure you have [Chromium headless browser](https://www.chromium.org/chromium-projects/) installed. Chromium is the browser used to test and debug shiny apps with `shinytest2`.\n\nIf you're using macOS, you can install Chromium using [homebrew](https://formulae.brew.sh/cask/chromium): \n\n```{bash}\n#| eval: false\n#| code-fold: false \nbrew install --cask chromium\n```\n\n```{bash}\n#| eval: false\n#| code-fold: true \n#| code-summary: 'show/hide output'\n==> Downloading https://download-chromium.appspot.com/dl/Mac?type=snapshots\n==> Downloading from https://commondatastorage.googleapis.com/chromium-browser-s\n######################################################################### 100.0%\nWarning: No checksum defined for cask 'chromium', skipping verification.\n==> Installing Cask chromium\n==> Moving App 'Chromium.app' to '/Applications/Chromium.app'\n==> Linking Binary 'chromium.wrapper.sh' to '/usr/local/bin/chromium'\nüç∫  chromium was successfully installed!\n```\n\n\n## [`chromote`]{style=\"font-size: 1.20em\"}\n\nThe [`chromote` package](https://rstudio.github.io/chromote/index.html) allows R to open Chromium. I had to make sure R knew where to find the Chromium application ([this section helps](https://rstudio.github.io/chromote/#specifying-which-browser-to-use)) by passing the path to the app to `Sys.setenv()` (*you can locate the path to Chromium using by holding <kbd>command (‚åò)</kbd> and clicking on the application icon*)\n\n```{r}\n#| eval: false\n#| code-fold: false\nremotes::install_github(\"rstudio/chromote\")\nlibrary(chromote)\nSys.setenv(CHROMOTE_CHROME = \"/Applications/Chromium.app/Contents/MacOS/Chromium\")\n```\n\nFind your chrome app: \n\n```{r}\n#| eval: false\n#| code-fold: false\nchromote::find_chrome()\n```\n\n```{bash}\n#| eval: false\n#| code-fold: false \n[1] \"/Applications/Chromium.app/Contents/MacOS/Chromium\"\n```\n\nI also verified the Chromium app opened with `ChromoteSession$new()`\n\n```{r}\n#| eval: false\n#| code-fold: false\n#| code-summary: verify ChromoteSession$new()\nb <- ChromoteSession$new()\nb$view()\n```\n\n\n:::: {.column-body-outset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![Chromium](chromium.png){#fig-chromium width=100% fig-align=\"center\"}\n\nChromium headless browser\n:::\n\n::::\n\nGreat! Going through this step means `shinytest2`'s test recorder will (*should*) deploy when I'm recording tests. \n\n## A shiny app-package\n\nI've created [`msst2ap`](https://github.com/mjfrigaard/msst2ap) (i.e., **M**astering **S**hiny **s**hiny**t**est**2** **a**pp-**p**ackage), which you can download [here](https://github.com/mjfrigaard/msst2ap/archive/refs/heads/main.zip) or install it using the following: \n\n```{r}\n#| code-fold: false\n#| eval: false\n#| results: hide\nremotes::install_github(\"mjfrigaard/msst2ap\",\n  force = TRUE, quiet = TRUE\n)\nlibrary(msst2ap)\n```\n\nThe applications in `msst2ap` can be run with the their standalone app functions.\n\n{{< include _modules_apps.qmd >}}\n\n\n## Using [`shinytest2`]{style=\"font-size: 1.15em\"}\n\n`shinytest2` is extremely [well documentation](https://rstudio.github.io/shinytest2/index.html). I highly recommended the [Get Started vignette](https://rstudio.github.io/shinytest2/articles/shinytest2.html). In the next sections, I'll cover some examples for what I've included in the `msst2ap`.\n\nRun `shinytest2::use_shinytest2()` to create the initial files for `shinytest2`:\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::use_shinytest2()\n```\n\n```{bash}\n#| echo: true\n#| eval: false\n#| code-fold: true\n#| code-summary: 'show/hide output from use_shinytest2()'\n! Runner already found: tests/testthat.R\n‚úî Adding 'shinytest2::load_app_env()' to 'tests/testthat/setup-shinytest2.R'\n‚úî Adding '*_.new.png' to '.gitignore'\n‚úî Adding '_\\\\.new\\\\.png$' to '.Rbuildignore'\n‚úî Setting active project to '/projects/apps/msst2ap'\n‚úî Adding 'shinytest2' to Suggests field in DESCRIPTION\n‚Ä¢ Use `requireNamespace(\"shinytest2\", quietly = TRUE)` to test if package is installed\n‚Ä¢ Then directly refer to functions with `shinytest2::fun()`\n‚úî Setting active project to '<no active project>'\n```\n\n-   `use_shinytest2()` adds the `setup-shinytest2.R` script to my `tests/testthat/` folder:\n\n    ```{bash}\n    #| echo: true\n    #| eval: false\n    #| code-fold: false\n    tests/testthat/\n    ‚îú‚îÄ‚îÄ _snaps/\n    ‚îî‚îÄ‚îÄ setup-shinytest2.R\n    ```\n\nThe `setup-shinytest2.R` file contains a single call to `shinytest2::load_app_env()`, which \"*Executes all `./R` files and `global.R` into the current environment*\"\n\n### Recording tests\n\nNew tests with [`shinytest2`](https://rstudio.github.io/shinytest2/index.html) can be created by launching the test event recorder, which allows us interact with our application, observe it's behavior, and record inputs, reactive values, and outputs. To record a test, run `shinytest2::record_test()`.\n\nThe first argument in `record_test()` is the path to application. If you've stored your application in an `app.R` file, `record_test()` will automatically load that application. In `msst2ap`, the application in `app.R` is the `histogramApp()`, so the test recorder will automatically open with this application if I run `record_test()` (without providing the path to a `shiny` app).\n\n```{r}\n#| echo: true\n#| eval: false\n#| code-fold: false\nshinytest2::record_test()\n```\n\n::::{.column-page-inset-right}\n\n::: {#fig-record_test_histogramApp layout-ncol=1}\n![shinytest2::record_test()](record_test_histogramApp.png){#fig-record_test_histogramApp width=100% fig-align=\"center\"}\n\n`record_test()` with application in `app.R`\n:::\n\n::::\n\nIf you have an application is stored in another location (like the `inst/dev/` folder), the you can pass the path to `record_test()`:\n\n```{r}\n#| echo: true\n#| eval: false \n#| code-fold: false\nshinytest2::record_test(app = \"\")\n```\n\nThis opens Chromium with our shiny app: \n\n::::{.column-page-inset-right}\n\n::: {#fig-record_test_datasetApp layout-ncol=1}\n\n![record_test(\"inst/dev/datasetApp/\") ](record_test_datasetApp.png){#fig-record_test_datasetApp width=100% fig-align=\"center\"}\n\n`record_test()` for `datasetApp()`\n:::\n\n::::\n\nThe test event recorder displays the `shiny` app, but also includes a window for recording each application 'event.' \n\n#### Expectations\n\nI'll start by recording a test for `datasetApp()`. On the right-hand side of the Chromium headless browser, you'll see the **`shinytest2` expectations** window:\n\n::::{.column-page-inset-right}\n\n::: {#fig-shinytest2-expectations layout-ncol=1}\n![`shinytest2` expectations](shinytest2-expectations.png){#fig-expectations}\n\n`shinytest2` expectations in `record_test()`\n:::\n\n::::\n\nThe initial value in the **Code** window displays the dimensions of the application in Chromium (`app$set_window_size(width = , height = )`).\n\n#### Events\n\nWhen I interact with the application (i.e., make changes to the inputs), each change is an 'event' that is recorded in the test:\n\n::::{.column-page-inset-right}\n\n::: {#fig-chromium layout-ncol=1}\n![change inputs](shinytest2-change-inputs.png){#fig-change-values-shinytest2 width=100% fig-align=\"center\"}\n\nChanging app inputs \n:::\n\n::::\n\n#### Code \n\nAll events are recorded as code in the **Code** section of **`shinytest2` expectations**:\n\n::::{.column-page-inset-right}\n\n::: {#fig-shinytest2-code-expectations layout-ncol=1}\n\n![shinytest2 code expectations](shinytest2-expectations-code.png){#fig-shinytest2-expectations-code width=100% fig-align=\"center\"}\n\nRecorded code for each event\n:::\n\n::::\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","dpi":320,"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"show/hide","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","knitr":{"opts_chunk":{"collapse":true}},"theme":{"light":["litera","../../custom.scss"]},"fig-asp":0.618,"fontsize":"10.5","toc-title":"Contents","toc-location":"left","callout-icon":false,"code-block-bg":"#f8f8f8","code-block-border-left":"#e8e8e8","title-block-banner":true,"title":"Testing shiny apps with `shinytest2`","subtitle":"Part 4: recording tests and snapshots","author":"Martin Frigaard","date":"2023-06-30","categories":["shiny","testing"],"image":"image.svg","draft":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}