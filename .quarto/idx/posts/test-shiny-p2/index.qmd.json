{"title":"Unit tests for (non-package) shiny apps","markdown":{"yaml":{"title":"Unit tests for (non-package) shiny apps","subtitle":"Part 2: Testing in non-package shiny apps","author":"Martin Frigaard","date":"2023-05-07","categories":["shiny","testing"],"image":"image.png","draft":false,"callout-icon":false,"freeze":true,"execute":{"echo":true,"warning":false,"eval":false,"collapse":true}},"headingText":"Testing module server functions","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| eval: true \n#| echo: false \n#| include: false\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(vdiffr)\nlibrary(testthat)\nlibrary(shinytest2)\noptions(width = 60)\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n  b = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  g = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  o = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  r = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\noptions(scipen = 999)\n```\n\n\n```{r}\n#| label: pkgs\n#| code-summary: packages\n#| eval: false\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(vdiffr)\nlibrary(shinytest2)\n```\n\n\n```{r}\n#| label: co_box_test\n#| eval: false \n#| results: asis\n#| include: false\nco_box(color = \"r\", \"RED\", \"**This is red**\n  \n  **This is a new line**\n  \n  **this a another line**\")\n```\n\nThis post is the second in a series on testing shiny applications. I'll cover testing shiny module server functions using the [`testhat` package](https://testthat.r-lib.org/) *outside* an R package. This application is stored in the [`noap`](https://github.com/mjfrigaard/noap) GitHub repo if you'd like to follow along. \n\n\n\n::: {style=\"font-size: 1.10em;\"}\n*...the ABCs of testing shiny server modules...*\n:::\n\nThis post covers how `shiny::testServer()` works using the  [abcApp() shiny app.](https://github.com/mjfrigaard/noap/blob/main/app.R). The code for `abcApp()` is an RStudio project (i.e., there is a `noap.Rproj` file in the parent folder), but it's not part of an R package. Developing shiny applications as R packages is [highly](https://mastering-shiny.org/scaling-packaging.html) [recommended](https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package), but it's *possible* to begin writing unit tests before your application is a fully developed shiny app-package. \n\nFor more information regarding performing tests outside of the package environment, see [this issue on GitHub](https://github.com/r-lib/testthat/issues/659). \n\n### abcApp()\n\nThe `abcApp()` application has been written using [shiny modules](https://shiny.posit.co/r/articles/improve/modules/) and a single [utility function](https://github.com/mjfrigaard/noap/blob/main/utils.R). \n\n`testthat` is designed to perform unit tests for R packages, but for the sake of simplicity,`abcApp()` has not been developed as part of a package. This will allow us to focus on the files involved in testing (and not all the other files that accompany R packages).\n\nThe standalone application function (`abcApp()`) is stored in `app.R`, the modules are contained in `modules.R`, and the single utility function is stored in `utils.R`: \n\n```{verbatim}\n#| code-fold: show\n#| code-summary: \"abcApp() files and folder structure\"\n├── README.md\n├── app.R\n├── app.Rproj\n├── modules.R\n├── tests\n└── utils.R\n\n2 directories, 5 files\n```\n\n-   The `tests` folder contains the following:\n\n    ```{verbatim}\n    #| code-fold: show\n    #| code-summary: \"abcApp() test files\"\n    tests\n    ├── testthat\n    │   └── test-mod_abc_server.R\n    └── testthat.R\n    \n    2 directories, 2 files\n    ```\n\n    -   `tests/` has a `testthat.R` file   \n    -   New test files should be placed in `tests/testthat/` (see example `test-mod_abc_server.R` below):\n\n#### UI module function\n\nIn this small example app, both ui and server modules are stored in the `modules.R` file. \n\n-   UI module: \n\n    ```{r}\n    #| label: mod_abc_ui\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: mod_abc_ui() (example ui module function)\n    # ui module\n    mod_abc_ui <- function(id) {\n      \n      ns <- shiny::NS(id)\n      \n      shiny::tagList(\n        shiny::numericInput(\n          inputId = ns(\"num\"),\n          label = shiny::h4(\n            shiny::code(\"alphabet number\")),\n            value = 5, min = 1, max = 26\n        ),\n        shiny::verbatimTextOutput(\n          outputId = ns(\"txt\"))\n      )\n    }\n    ```\n\n\n#### Server module function\n\nThe counterpart to `mod_abc_ui()` is `mod_abc_server()`:\n\n-   Server module:\n\n    ```{r}\n    #| label: mod_abc_server\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: mod_abc_server() (example server module function)\n    # server module\n    mod_abc_server <- function(id) {\n      \n      shiny::moduleServer(id, function(input, output, session) {\n        # reactive \n        letter <- shiny::reactive({ LETTERS[input$num] })\n        # super script\n        sup_scrpt <- shiny::reactive({ \n          num_super_script(x = input$num)\n        })\n        # output\n        output$txt <- shiny::renderPrint({\n          paste0(\"The \", input$num, sup_scrpt(), \n                 \" letter in the alphabet is: \", letter())\n        })\n        \n      })\n    }\n    ```\n\n#### Module utility function\n\nThe `mod_abc_server()` function uses the `num_super_script()` function stored in `utils.R`:\n\n-   Utility function:\n\n    ```{r}\n    #| label: num_super_script\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: num_super_script() (example utility function)\n    # utility function\n    num_super_script <- function(x) {\n          num <- as.numeric(x)\n          if (num == 1) {\n            super_script <- \"st\"\n          } else if (num == 2) {\n            super_script <- \"nd\"\n          } else if (num == 3) {\n            super_script <- \"rd\"\n          } else {\n            super_script <- \"th\"\n          }\n        return(super_script)\n    }\n    ```\n\n#### Standalone app function\n\n-   Standalone app functions include a call to `shiny::shinyApp()`:\n\n    ```{r}\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: abcApp() (example app with modules)\n    # standalone shiny app function\n    abcApp <- function() {\n      shiny::shinyApp(\n        ui = shiny::fluidPage(\n          mod_abc_ui(\"x\")\n        ), \n        server = function(input, output, session) { \n          mod_abc_server(\"x\")\n        }\n      )\n    }\n    abcApp()\n    ```\n    \n    -   The call to `shiny::shinyApp()` is placed inside the `abcApp()` function \n    \n    - The `ui` argument is wrapped in `shiny::fluidPage()` and the ui module function (`mod_abc_ui()`) is placed inside\n    \n    -   The `server` argument includes the standard `function(input, output, session)` and the module server companion function--`mod_abc_server()`--with a matching `id` arguments\n    \n    -   The `abcApp()` function is stored in the `app.R` file\n    \nBecause `abcApp()` is not part of a package, `shiny` and `testthat` are loaded and the modules and utility function are sourced in the top of the `app.R` file.\n\n```{r}\n#| code-fold: show \n#| eval: false\n#| code-summary: 'source utils.R and modules.R in app.R'\n# packages --------------------------------------------------------\nlibrary(shiny)\nlibrary(testthat)\n\n# utils ------------------------------------------------------------------\nsource(\"utils.R\")\n\n# modules ------------------------------------------------------------------\nsource(\"modules.R\")\n```\n\n\n### Using `testServer()`\n\nIn the `test-mod_abc_server.R` file, I'll add `testServer()` and include the module server function as the first argument:   \n\n-   `app` is the module server function (`mod_abc_server`) or any [`shiny.appobj`](https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html) \n\n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: 'app = shiny.appobj'\n    shiny::testServer(app = mod_abc_server, {\n\n    })\n    ```\n    \n#### Testing `input$`s\n\n-   The first test I'll add will check the initial value of `input$num`\n    \n    -   I'll also include a custom message with `cat()`\n\n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: test initial value with custom message\n    shiny::testServer(mod_abc_server, {\n      # Test 1: check initial value\n      testthat::expect_equal(input$num, NULL)\n      cat(\"\\n Test 1 initial input$num = NULL: \", is.null(input$num), \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n    Test 1 initial input$num = NULL:  TRUE \n    ```\n    \n    -   `testServer()` allows me to set new `input` values with `session$setInputs()`\n    \n        -   Use `session$setInputs()` to set `input$num` to `3`\n        \n        -   Test 2 confirms `input$num` has changed  \n        \n        -   Add another custom message with `cat()`\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: setInputs() and test inputs\n    shiny::testServer(mod_abc_server, {\n      # set inputs\n      session$setInputs(num = 3)\n      # Test 2: check set inputs\n      testthat::expect_equal(input$num, 3)\n      cat(\"\\n Test 2 setInputs(num = 3):\", input$num, \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 2 setInputs(num = 3): 3 \n    ```\n    \n#### Testing reactive values\n\n-   The module's reactive values are also available to in `testServer()`\n\n    -   Test 3 adds a test for `sup_scrpt()` (given the changed value of `input$num`)   \n    \n        -   The `expected` value is what I'm expecting `num_super_script()` to return.\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: Check sup_scrpt() reactive value with expect_equal()\n    shiny::testServer(mod_abc_server, {\n      # Test 3: check super script\n      testthat::expect_equal(object = sup_scrpt(), expected = \"rd\")\n      cat(\"\\n Test 3 sup_scrpt(): = 'rd':\", sup_scrpt(), \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 3 sup_scrpt(): = 'rd': rd  \n    ```\n    \n    -   For completeness I'll add a test for `letter()`\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: Check letter() reactive value with expect_equal()\n    shiny::testServer(mod_abc_server, {\n      # Test 4: check letter\n      testthat::expect_equal(object = letter(), expected = \"C\")\n      cat(\"\\n Test 4 letter() = C:\", letter(), \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 4 letter() = C: C \n    ```\n    \n#### Testing `output$`s\n\n-   The module output values are also available as `output$<value>`\n\n    -   Test 5 will verify the `output$txt` (given the updated `input$num`)\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: Check module output values\n    shiny::testServer(mod_abc_server, {\n      # Test 5: check output\n    testthat::expect_equal(object = output$txt,\n      expected =  \"The 3rd letter in the alphabet is: C\")\n    cat(\"\\n Test 5 output$ = 'The 3rd letter in the alphabet is: C': \\n\",\n      output$txt, \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n     FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    \n    ─- Failure (test-mod_abc_server.R:1:1): (code run outside of `test_that()`) ──\n    output$txt (`actual`) not equal to \"The 3rd letter in the alphabet is: C\" (`expected`).\n    \n    `actual`:   \"[1] \\\"The 3rd letter in the alphabet is: C\\\"\"\n    `expected`: \"The 3rd letter in the alphabet is: C\"        \n    Backtrace:\n      1. shiny::testServer(...)\n           at test-mod_abc_server.R:1:0\n     22. testthat::expect_equal(object = output$txt, \n       expected = \"The 3rd letter in the alphabet is: C\")\n           at test-mod_abc_server.R:17:4\n    \n    [ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n    ```\n    \n    -   **What happened?** I forgot to add the escape characters (`\\\"`) and line number (`[1]`) for the output\n        -   I'll change the `expected` value and re-run the test: \n        \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: 'Check module output values (again)'\n    shiny::testServer(mod_abc_server, {\n      # Test 5: check output\n    testthat::expect_equal(object = output$txt,\n      expected =  \"The 3rd letter in the alphabet is: C\")\n    cat(\"\\n Test 5 output$ = 'The 3rd letter in the alphabet is: C': \\n\",\n      output$txt, \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    ```\n    \n    -   Finally, I'll run the tests with `test_dir()`      \n    \n    ```{r}\n    #| eval: false\n    #| code-fold: false\n    #| echo: true\n    #| code-summary: test_dir()\n    test_dir(path = \"/path/to/app/tests/testthat/\")\n    ```\n\n    ```{verbatim}\n    ✔ | F W S  OK | Context\n    ⠏ |         0 | mod_abc_server         \n    \n     Test 1 initial input$num = NULL:  TRUE \n    \n     Test 2 setInputs(num = 3): 3 \n    \n     Test 3 sup_scrpt(): = 'rd': rd \n    \n     Test 4 letter() = C: C \n    \n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    ✔ |         5 | mod_abc_server\n    ══ Results ════════════════════════════════════════════════════\n    Duration: 0.2 s\n     [ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]\n    🌈 Your tests are over the rainbow 🌈\n    ```\n    \nThe results show the tests passed! Now I am confident inputs, reactive values (`sup_scrpt()` & `letter()`), outputs behave as expected.\n    \n### Recap\n\nThe example above provides a workflow for using `testServer()` with `testthat` *outside* a package environment. The checklist below summarizes the steps required to test your application's module server functions:\n\n1. Create test files (in `tests/testthat/`)  \n\n    - [x]  All test files should have the `test-` prefix\n  \n2. Verify inputs with `session$setInputs(inputId = <value>)`\n\n    - [x]   All `input$` values should initially be `NULL`\n\n3. Test reactive values by referring to them as you would in the module server \n\n    - [x]   Compare expected values after changing inputs with `session$setInputs()`\n  \n4. Test outputs using `output$<value>` to check changes to the inputs and reactives\n\n    - [x]   Check output values with `output$txt`\n\nThis concludes running tests on `abcApp()`. Ideally, shiny applications are developed as an R package (which I'll cover in a future post), but now you know how to perform tests if this isn't the case. The files for this demonstration are located [here.](https://github.com/mjfrigaard/noap) \n\nFor a more comprehensive review of testing, check out the chapters on testing in [R packages](https://r-pkgs.org/testing-basics.html) and [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html).","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| eval: true \n#| echo: false \n#| include: false\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(vdiffr)\nlibrary(testthat)\nlibrary(shinytest2)\noptions(width = 60)\nco_box <- function(color, header, contents = \"Your text\") {\n  class <- switch(color,\n    b = \"note\",\n    g = \"tip\",\n    r = \"important\",\n    o = \"caution\",\n    stop(\"Invalid `type`\", call. = FALSE)\n  )\n  switch(color,\n  b = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  g = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  o = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  r = cat(paste0(\n    \"\\n\",\n    \":::: {.callout-\", class, \" collapse='false'}\", \"\\n\\n\",\n    \"## \", header, \"\\n\\n\", \n    \"::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\\n\\n\",\n    glue::glue_collapse(contents), \"\\n\\n\",\n    \"::: \\n\\n\",\n    \"::::\", \"\\n\")),\n  stop(\"Invalid `type`\", call. = FALSE)\n  )\n}\noptions(scipen = 999)\n```\n\n\n```{r}\n#| label: pkgs\n#| code-summary: packages\n#| eval: false\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(vdiffr)\nlibrary(shinytest2)\n```\n\n\n```{r}\n#| label: co_box_test\n#| eval: false \n#| results: asis\n#| include: false\nco_box(color = \"r\", \"RED\", \"**This is red**\n  \n  **This is a new line**\n  \n  **this a another line**\")\n```\n\nThis post is the second in a series on testing shiny applications. I'll cover testing shiny module server functions using the [`testhat` package](https://testthat.r-lib.org/) *outside* an R package. This application is stored in the [`noap`](https://github.com/mjfrigaard/noap) GitHub repo if you'd like to follow along. \n\n\n## Testing module server functions\n\n::: {style=\"font-size: 1.10em;\"}\n*...the ABCs of testing shiny server modules...*\n:::\n\nThis post covers how `shiny::testServer()` works using the  [abcApp() shiny app.](https://github.com/mjfrigaard/noap/blob/main/app.R). The code for `abcApp()` is an RStudio project (i.e., there is a `noap.Rproj` file in the parent folder), but it's not part of an R package. Developing shiny applications as R packages is [highly](https://mastering-shiny.org/scaling-packaging.html) [recommended](https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package), but it's *possible* to begin writing unit tests before your application is a fully developed shiny app-package. \n\nFor more information regarding performing tests outside of the package environment, see [this issue on GitHub](https://github.com/r-lib/testthat/issues/659). \n\n### abcApp()\n\nThe `abcApp()` application has been written using [shiny modules](https://shiny.posit.co/r/articles/improve/modules/) and a single [utility function](https://github.com/mjfrigaard/noap/blob/main/utils.R). \n\n`testthat` is designed to perform unit tests for R packages, but for the sake of simplicity,`abcApp()` has not been developed as part of a package. This will allow us to focus on the files involved in testing (and not all the other files that accompany R packages).\n\nThe standalone application function (`abcApp()`) is stored in `app.R`, the modules are contained in `modules.R`, and the single utility function is stored in `utils.R`: \n\n```{verbatim}\n#| code-fold: show\n#| code-summary: \"abcApp() files and folder structure\"\n├── README.md\n├── app.R\n├── app.Rproj\n├── modules.R\n├── tests\n└── utils.R\n\n2 directories, 5 files\n```\n\n-   The `tests` folder contains the following:\n\n    ```{verbatim}\n    #| code-fold: show\n    #| code-summary: \"abcApp() test files\"\n    tests\n    ├── testthat\n    │   └── test-mod_abc_server.R\n    └── testthat.R\n    \n    2 directories, 2 files\n    ```\n\n    -   `tests/` has a `testthat.R` file   \n    -   New test files should be placed in `tests/testthat/` (see example `test-mod_abc_server.R` below):\n\n#### UI module function\n\nIn this small example app, both ui and server modules are stored in the `modules.R` file. \n\n-   UI module: \n\n    ```{r}\n    #| label: mod_abc_ui\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: mod_abc_ui() (example ui module function)\n    # ui module\n    mod_abc_ui <- function(id) {\n      \n      ns <- shiny::NS(id)\n      \n      shiny::tagList(\n        shiny::numericInput(\n          inputId = ns(\"num\"),\n          label = shiny::h4(\n            shiny::code(\"alphabet number\")),\n            value = 5, min = 1, max = 26\n        ),\n        shiny::verbatimTextOutput(\n          outputId = ns(\"txt\"))\n      )\n    }\n    ```\n\n\n#### Server module function\n\nThe counterpart to `mod_abc_ui()` is `mod_abc_server()`:\n\n-   Server module:\n\n    ```{r}\n    #| label: mod_abc_server\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: mod_abc_server() (example server module function)\n    # server module\n    mod_abc_server <- function(id) {\n      \n      shiny::moduleServer(id, function(input, output, session) {\n        # reactive \n        letter <- shiny::reactive({ LETTERS[input$num] })\n        # super script\n        sup_scrpt <- shiny::reactive({ \n          num_super_script(x = input$num)\n        })\n        # output\n        output$txt <- shiny::renderPrint({\n          paste0(\"The \", input$num, sup_scrpt(), \n                 \" letter in the alphabet is: \", letter())\n        })\n        \n      })\n    }\n    ```\n\n#### Module utility function\n\nThe `mod_abc_server()` function uses the `num_super_script()` function stored in `utils.R`:\n\n-   Utility function:\n\n    ```{r}\n    #| label: num_super_script\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: num_super_script() (example utility function)\n    # utility function\n    num_super_script <- function(x) {\n          num <- as.numeric(x)\n          if (num == 1) {\n            super_script <- \"st\"\n          } else if (num == 2) {\n            super_script <- \"nd\"\n          } else if (num == 3) {\n            super_script <- \"rd\"\n          } else {\n            super_script <- \"th\"\n          }\n        return(super_script)\n    }\n    ```\n\n#### Standalone app function\n\n-   Standalone app functions include a call to `shiny::shinyApp()`:\n\n    ```{r}\n    #| code-fold: show \n    #| eval: false\n    #| code-summary: abcApp() (example app with modules)\n    # standalone shiny app function\n    abcApp <- function() {\n      shiny::shinyApp(\n        ui = shiny::fluidPage(\n          mod_abc_ui(\"x\")\n        ), \n        server = function(input, output, session) { \n          mod_abc_server(\"x\")\n        }\n      )\n    }\n    abcApp()\n    ```\n    \n    -   The call to `shiny::shinyApp()` is placed inside the `abcApp()` function \n    \n    - The `ui` argument is wrapped in `shiny::fluidPage()` and the ui module function (`mod_abc_ui()`) is placed inside\n    \n    -   The `server` argument includes the standard `function(input, output, session)` and the module server companion function--`mod_abc_server()`--with a matching `id` arguments\n    \n    -   The `abcApp()` function is stored in the `app.R` file\n    \nBecause `abcApp()` is not part of a package, `shiny` and `testthat` are loaded and the modules and utility function are sourced in the top of the `app.R` file.\n\n```{r}\n#| code-fold: show \n#| eval: false\n#| code-summary: 'source utils.R and modules.R in app.R'\n# packages --------------------------------------------------------\nlibrary(shiny)\nlibrary(testthat)\n\n# utils ------------------------------------------------------------------\nsource(\"utils.R\")\n\n# modules ------------------------------------------------------------------\nsource(\"modules.R\")\n```\n\n\n### Using `testServer()`\n\nIn the `test-mod_abc_server.R` file, I'll add `testServer()` and include the module server function as the first argument:   \n\n-   `app` is the module server function (`mod_abc_server`) or any [`shiny.appobj`](https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html) \n\n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: 'app = shiny.appobj'\n    shiny::testServer(app = mod_abc_server, {\n\n    })\n    ```\n    \n#### Testing `input$`s\n\n-   The first test I'll add will check the initial value of `input$num`\n    \n    -   I'll also include a custom message with `cat()`\n\n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: test initial value with custom message\n    shiny::testServer(mod_abc_server, {\n      # Test 1: check initial value\n      testthat::expect_equal(input$num, NULL)\n      cat(\"\\n Test 1 initial input$num = NULL: \", is.null(input$num), \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n    Test 1 initial input$num = NULL:  TRUE \n    ```\n    \n    -   `testServer()` allows me to set new `input` values with `session$setInputs()`\n    \n        -   Use `session$setInputs()` to set `input$num` to `3`\n        \n        -   Test 2 confirms `input$num` has changed  \n        \n        -   Add another custom message with `cat()`\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: setInputs() and test inputs\n    shiny::testServer(mod_abc_server, {\n      # set inputs\n      session$setInputs(num = 3)\n      # Test 2: check set inputs\n      testthat::expect_equal(input$num, 3)\n      cat(\"\\n Test 2 setInputs(num = 3):\", input$num, \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 2 setInputs(num = 3): 3 \n    ```\n    \n#### Testing reactive values\n\n-   The module's reactive values are also available to in `testServer()`\n\n    -   Test 3 adds a test for `sup_scrpt()` (given the changed value of `input$num`)   \n    \n        -   The `expected` value is what I'm expecting `num_super_script()` to return.\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: Check sup_scrpt() reactive value with expect_equal()\n    shiny::testServer(mod_abc_server, {\n      # Test 3: check super script\n      testthat::expect_equal(object = sup_scrpt(), expected = \"rd\")\n      cat(\"\\n Test 3 sup_scrpt(): = 'rd':\", sup_scrpt(), \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 3 sup_scrpt(): = 'rd': rd  \n    ```\n    \n    -   For completeness I'll add a test for `letter()`\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: Check letter() reactive value with expect_equal()\n    shiny::testServer(mod_abc_server, {\n      # Test 4: check letter\n      testthat::expect_equal(object = letter(), expected = \"C\")\n      cat(\"\\n Test 4 letter() = C:\", letter(), \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    #| eval: false\n    #| echo: true\n    #| code-fold: false\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 4 letter() = C: C \n    ```\n    \n#### Testing `output$`s\n\n-   The module output values are also available as `output$<value>`\n\n    -   Test 5 will verify the `output$txt` (given the updated `input$num`)\n    \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: Check module output values\n    shiny::testServer(mod_abc_server, {\n      # Test 5: check output\n    testthat::expect_equal(object = output$txt,\n      expected =  \"The 3rd letter in the alphabet is: C\")\n    cat(\"\\n Test 5 output$ = 'The 3rd letter in the alphabet is: C': \\n\",\n      output$txt, \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n     FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    \n    ─- Failure (test-mod_abc_server.R:1:1): (code run outside of `test_that()`) ──\n    output$txt (`actual`) not equal to \"The 3rd letter in the alphabet is: C\" (`expected`).\n    \n    `actual`:   \"[1] \\\"The 3rd letter in the alphabet is: C\\\"\"\n    `expected`: \"The 3rd letter in the alphabet is: C\"        \n    Backtrace:\n      1. shiny::testServer(...)\n           at test-mod_abc_server.R:1:0\n     22. testthat::expect_equal(object = output$txt, \n       expected = \"The 3rd letter in the alphabet is: C\")\n           at test-mod_abc_server.R:17:4\n    \n    [ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n    ```\n    \n    -   **What happened?** I forgot to add the escape characters (`\\\"`) and line number (`[1]`) for the output\n        -   I'll change the `expected` value and re-run the test: \n        \n    ```{r}\n    #| eval: false\n    #| echo: true\n    #| code-summary: 'Check module output values (again)'\n    shiny::testServer(mod_abc_server, {\n      # Test 5: check output\n    testthat::expect_equal(object = output$txt,\n      expected =  \"The 3rd letter in the alphabet is: C\")\n    cat(\"\\n Test 5 output$ = 'The 3rd letter in the alphabet is: C': \\n\",\n      output$txt, \"\\n\")\n    })\n    ```\n    \n    ```{verbatim}\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    ```\n    \n    -   Finally, I'll run the tests with `test_dir()`      \n    \n    ```{r}\n    #| eval: false\n    #| code-fold: false\n    #| echo: true\n    #| code-summary: test_dir()\n    test_dir(path = \"/path/to/app/tests/testthat/\")\n    ```\n\n    ```{verbatim}\n    ✔ | F W S  OK | Context\n    ⠏ |         0 | mod_abc_server         \n    \n     Test 1 initial input$num = NULL:  TRUE \n    \n     Test 2 setInputs(num = 3): 3 \n    \n     Test 3 sup_scrpt(): = 'rd': rd \n    \n     Test 4 letter() = C: C \n    \n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    ✔ |         5 | mod_abc_server\n    ══ Results ════════════════════════════════════════════════════\n    Duration: 0.2 s\n     [ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]\n    🌈 Your tests are over the rainbow 🌈\n    ```\n    \nThe results show the tests passed! Now I am confident inputs, reactive values (`sup_scrpt()` & `letter()`), outputs behave as expected.\n    \n### Recap\n\nThe example above provides a workflow for using `testServer()` with `testthat` *outside* a package environment. The checklist below summarizes the steps required to test your application's module server functions:\n\n1. Create test files (in `tests/testthat/`)  \n\n    - [x]  All test files should have the `test-` prefix\n  \n2. Verify inputs with `session$setInputs(inputId = <value>)`\n\n    - [x]   All `input$` values should initially be `NULL`\n\n3. Test reactive values by referring to them as you would in the module server \n\n    - [x]   Compare expected values after changing inputs with `session$setInputs()`\n  \n4. Test outputs using `output$<value>` to check changes to the inputs and reactives\n\n    - [x]   Check output values with `output$txt`\n\nThis concludes running tests on `abcApp()`. Ideally, shiny applications are developed as an R package (which I'll cover in a future post), but now you know how to perform tests if this isn't the case. The files for this demonstration are located [here.](https://github.com/mjfrigaard/noap) \n\nFor a more comprehensive review of testing, check out the chapters on testing in [R packages](https://r-pkgs.org/testing-basics.html) and [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html)."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"collapse":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","dpi":320,"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","description-meta":"Martin Frigaard's personal website.","knitr":{"opts_chunk":{"collapse":true}},"editor":{"mode":"source"},"theme":{"light":["litera","../../custom.scss"]},"fig-asp":0.618,"fontsize":"10.5","toc-title":"Contents","toc-location":"left","callout-icon":false,"code-block-bg":"#f8f8f8","code-block-border-left":"#e8e8e8","code-summary":"show/hide","title-block-banner":true,"title":"Unit tests for (non-package) shiny apps","subtitle":"Part 2: Testing in non-package shiny apps","author":"Martin Frigaard","date":"2023-05-07","categories":["shiny","testing"],"image":"image.png","draft":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}