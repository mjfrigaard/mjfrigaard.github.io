fs::dir_tree("./")
fs::dir_tree("../")
fs::dir_tree("../.")
fs::dir_tree("../../")
source("_common.R")
source("https://github.com/mjfrigaard/sapkgs/blob/utap/tests/testthat/helper.R")
install.packages(c("dbplyr", "lattice", "survey"))
paste(rep("level", times = 3), 1:3)
paste(rep("level", times = 3), 1:3) |> dput()
paste(rep("item:", times = 3), 1:3) |> dput()
paste0(rep("item:", times = 3), 1:3)
test_col_class <- data.frame(
log_var = c(TRUE, FALSE, TRUE),
int_var = c(1L, 2L, 3L),
dbl_var = c(1.1, 2.2, 3.3),
chr_var = paste0(rep("item:", times = 3), 1:3),
ord_var = factor(
x = paste(rep("level", times = 3), 1:3),
levels = paste(rep("level", times = 3), 1:3),
labels = paste(rep("level", times = 3), 1:3),
ordered = TRUE
),
fct_var = factor(
x = paste(rep("group", times = 3), 1:3),
levels = paste(rep("group", times = 3), 1:3),
labels = paste(rep("group", times = 3), 1:3)
)
# create list variable
list_var <- list(
log = c(TRUE, FALSE, TRUE),
dbl = c(1.1, 2.2, 3.3),
chr = paste0(rep("item:", times = 3), 1:3)
)
# add to df
test_col_class$list_var <- list_var
test_col_class
str(test_col_class)
#| label: setup
#| eval: true
#| echo: false
#| include: false
library(ggplot2)
library(dplyr)
library(shiny)
library(vdiffr)
library(testthat)
library(shinytest2)
options(width = 60)
source("https://raw.githubusercontent.com/mjfrigaard/utap/main/tests/testthat/helper.R")
remotes::install_github("mjfrigaard/utap",
force = TRUE, quiet = TRUE)
# library(utap)
source("../_common.R")
#| eval: true
#| echo: false
#| code-fold: false
#| collapse: false
lobstr::ast(
pull_cols(
pull_binary_cols(
select_class(is_class()),
make_binary_vec(),
),
pull_cat_cols(
select_class(is_class())
),
pull_facet_cols(
select_class(is_class()),
make_facet_vec()
),
pull_numeric_cols(
select_class(is_class())
)
#| eval: true
#| echo: false
#| code-fold: false
#| collapse: false
lobstr::ast(
pull_cols(
pull_binary_cols(
select_class(is_class()),
make_binary_vec()
),
pull_cat_cols(
select_class(is_class())
),
pull_facet_cols(
select_class(is_class()),
make_facet_vec()
),
pull_numeric_cols(
select_class(is_class())
)
#| label: setup
#| eval: true
#| echo: false
#| include: false
library(ggplot2)
library(dplyr)
library(shiny)
library(vdiffr)
library(testthat)
library(shinytest2)
options(width = 60)
source("https://raw.githubusercontent.com/mjfrigaard/utap/main/tests/testthat/helper.R")
remotes::install_github("mjfrigaard/utap",
force = TRUE, quiet = TRUE)
# library(utap)
source("../_common.R")
#| eval: true
#| echo: false
#| code-fold: false
#| collapse: false
lobstr::ast(
pull_cols(
pull_binary_cols(
select_class(is_class()),
make_binary_vec(
check_binary_vec(
check_log_binary(),
check_int_binary(),
check_chr_binary(),
check_ord_binary()
)
)),
pull_cat_cols(
select_class(is_class())),
pull_facet_cols(
pull_binary_cols(),
select_class(is_class()),
make_facet_vec(
check_facet_vec(
check_chr_facet(),
check_fct_facet()
)
),
pull_numeric_cols(
pull_binary_cols(),
pull_facet_cols()
)
styler:::style_selection()
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
tibble::tibble(
log_var = log_maker(size = 3),
int_var = int_maker(size = 3),
fct_var = fct_maker(size = 3),
list_var = list(chr_var = chr_maker(size = 3),
ord_var = ord_maker(size = 3)),
)
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
tibble::tibble(
log_var = log_maker(size = 3),
int_var = int_maker(size = 3),
fct_var = fct_maker(size = 3),
list = list(chr_var = chr_maker(size = 3),
ord_var = ord_maker(size = 3)),
)
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
tibble::tibble(
log_var = log_maker(size = 3),
int_var = int_maker(size = 3),
fct_var = fct_maker(size = 3),
)
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
tibble::tibble(
log_var = log_maker(size = 3),
list_var = list(chr_var = chr_maker(size = 3),
ord_var = ord_maker(size = 3))
)
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
list(chr_var = chr_maker(size = 3),
ord_var = ord_maker(size = 3))
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
list_var <- list(chr_var = chr_maker(size = 3),
ord_var = ord_maker(size = 3))
tibble::tibble(
log_var = log_maker(size = 3),
list_var
)
tibble::tibble(
log_var = log_maker(size = 3),
list_var = list_var
)
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
list_var <- list(chr_var = chr_maker(size = 3),
ord_var = ord_maker(size = 3))
list_var
tibble::tibble(
log_var = log_maker(size = 3),
'list_var' = list_var
)
tibble::tibble(
list_var
)
tibble::tibble(
list_var,
fct_maker(size = 3, lvls = 2, missing = FALSE)
)
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
tibble::tibble(
log_var = log_maker(size = 3),
chr_var = chr_maker(size = 3),
ord_var = ord_maker(size = 3)
)
#| eval: true
#| echo: true
#| collapse: true
#| code-fold: false
tibble::tibble(
log_var = log_maker(size = 3),
chr_var = chr_maker(size = 3, lvls = 3),
ord_var = ord_maker(size = 3, lvls = 2)
)
#| label: setup
#| eval: true
#| echo: false
#| include: false
library(ggplot2)
library(dplyr)
library(shiny)
library(vdiffr)
library(testthat)
library(shinytest2)
options(width = 60)
source("https://raw.githubusercontent.com/mjfrigaard/utap/main/tests/testthat/helper.R")
remotes::install_github("mjfrigaard/utap",
force = TRUE, quiet = TRUE)
# library(utap)
source("../_common.R")
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
#| label: pkgs
#| eval: true
#| code-summary: packages
library(shiny)
library(shinytest2)
library(testthat)
library(rhino)
styler:::style_active_file()
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
#| code-fold: false
#| eval: false
install.packages("remotes")
remotes::install_github(
"https://github.com/mjfrigaard/sapkgs",
ref = "mstsap")
install.packages("remotes")
ls(package:mstsap)
ls('package:mstsap')
search()
library(mstsap)
search()
ls('package:mstsap')
library(msst2ap)
ls('package:msst2ap')
#| label: utils
#| eval: true
#| echo: false
#| include: false
library(kableExtra)
source("../_common.R")
#| label: co_box_long
#| eval: true
#| results: asis
#| echo: false
co_box(color = "r", "Warning", "_This is a long post because it covers many of the steps used to build R packages. If you want more information on developing R packages *without* Shiny apps, I suggest starting with [the whole game section](https://r-pkgs.org/whole-game.html)._")
#| label: install-devtools-duap
#| code-fold: false
install.packages("devtools")
library(devtools)
#| label: create_package-duap
#| code-fold: false
usethis::create_package(path = "duap")
install.packages(c("broom.helpers", "DT", "ggstats", "htmltools", "promises", "RcppArmadillo", "rsconnect", "shinyWidgets"))
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
palmerpenguins::penguins |> dplyr::glimpse()
palmerpenguins::penguins |> dplyr::glimpse(60)
install.packages('reticulate')
install.packages("httr2")
install.packages(c("curl", "httr2", "rmarkdown", "waldo"))
install.packages(c("curl", "gdtools", "httr2", "rmarkdown", "terra", "waldo"), lib="/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library")
install.packages(c("curl", "gdtools", "httr2", "rmarkdown", "terra", "waldo"), lib = "/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library")
renv::snapshot()
renv::remove('dbap')
renv::snapshot()
remove.packages('dbap')
renv::snapshot()
renv::dependencies()
install.packages("terra", lib="/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library")
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
library(reticulate)
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
library(reticulate)
lobstr::ast(
layout(
row(column(),
column())
)
install.packages('reticulate')
install.packages("reticulate")
#| label: setup
#| eval: true
#| echo: false
#| include: false
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
library(reticulate)
#| eval: true
#| echo: false
lobstr::ast(
layout(
row(column(),
column())
)
#| eval: true
#| echo: false
lobstr::ast(
layout(
row(column(),
column())
)
#| eval: true
#| echo: false
lobstr::ast(
layout(
row(
column()
#| eval: true
#| echo: false
lobstr::ast(
orientation(
row(
column(),
column()
)
#| eval: true
#| echo: false
#| collapse: false
#| comment: ''
lobstr::ast(
orientation('rows',
row('height=',
code(),
row('height='),
code(),
code()
)
#| eval: true
#| echo: false
#| collapse: false
#| comment: ''
lobstr::ast(
orientation('rows',
row(
code()
),
row(,
code(),
code()
)
library(shinytest2)
??expect_values
source("~/.active-rstudio-document", echo=TRUE)
