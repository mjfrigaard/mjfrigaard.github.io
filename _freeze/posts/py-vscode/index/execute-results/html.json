{
  "hash": "a17035cbdaf1c016f032e7c65f374c0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"VS Code, meet Quarto.\" \nsubtitle: \"Quarto, say 'hello' to Python.\"\nauthor: \"Martin Frigaard\"\ndate: \"2024-05-30\"\ncategories: [quarto, python, vscode]\nimage: \"img/quarto-vscode-python.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\n# draft: true\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n\n:::: {.callout-note collapse='false' appearance='simple' icon=false}\n\n## [Note]{style='font-weight: bold; font-size: 1.10em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\nI've been developing more in Python lately, so I've decided to document some thoughts on adopting a new programming language, working with VS Code, and trying to use Python to solve some common problems I would previously solve with R.\n\n::: \n\n::::\n\n\n\n\n\n\n## Background\n\nI've been an avid R/RStudio (now Posit Workbench) user for over 15 years now, so a new IDE and programming language has taken some getting used to. This post covers setting up VS Code, potential sticky spots, learning pains, tips, and early successes. \n\n<!--\nreceived my new copy of [Learning Data Science](https://learningds.org/intro.html) by Sam Lau, Joseph Gonzalez, and Deborah Nolan. The [code examples](https://github.com/DS-100/textbook/) are in Python, so I  \n-->\n\n## Install VS Code\n\n:::: {layout=\"[75, 25]\"}\n\nIf you haven’t already installed VS Code, download it from the [official website](https://code.visualstudio.com/) and follow the installation instructions for your operating system. After installing VS Code, you'll want to install the [Quarto extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) and [Python extension from Microsoft](https://marketplace.visualstudio.com/items?itemName=ms-python.python). \n\n![](img/vscode.jpeg){class=\"cover\" width=\"450\" fig-align=\"right\"}\n\n::::\n\n![VS Code Start](img/vscode_start.png){fig-align='center' width='80%'}\n\nBelow we'll cover configuring your Quarto installation in VS Code.\n\n<br>\n\n## Install Quarto\n\n:::: {layout=\"[25, 75]\"}\n\n![](img/quarto.png){class=\"cover\" width=\"500\" fig-align=\"right\"}\n\nQuarto can be downloaded and installed from its [official website](https://quarto.org/docs/get-started/). Follow the platform-specific instructions to install it on your system. Make sure Quarto has been installed correctly and is available in your system’s `PATH`.\n\n::::\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='default' icon=false}\n\n## [OS DISCLAIMER]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\nI'm using macOS Sonoma (14.4.1 (23E224)) with [Bash](https://www.gnu.org/software/bash/) and [iTerm2](https://iterm2.com/).\n\n::: \n\n::::\n\n\n\n\nCheck if Quarto is on `PATH`:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\nquarto --version\n# 1.5.28\n```\n:::\n\n\n\nIf it isn't, you'll need to add the location of your quarto installation to `PATH`. You can do that with the commands below (depending on your shell).\n\nFor Bash (common in Linux and older macOS versions):\n\n``` sh\necho 'export PATH=\"$PATH:/path/to/quarto\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\nFor Zsh (default in newer macOS versions):\n\n``` sh\necho 'export PATH=\"$PATH:/path/to/quarto\"' >> ~/.zshrc\nsource ~/.zshrc\n```\n\nYou can also use `which` to locate quarto path: \n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\nwhich quarto\n# /usr/local/bin/quarto\n```\n:::\n\n\n\nOn macOS, you can use `find` in the Terminal: \n\n``` sh\nfind / -name quarto 2>/dev/null\n```\n\nNow we'll cover installing Python and making sure VS Code and Quarto can find it.\n\n<br>\n\n## Install Python\n\n::: {layout=\"[15, 85]\"}\n\n![](img/python-black.png){class=\"cover\" width=\"375\" fig-align=\"right\"}\n\nInstalling python has always been a maze for me. I would find myself stuck on questions like, *'Do I use conda, miniconda, pip?'* *'Do I need to specify the version of pip (i.e., `pip3 install`)?'* *'What version of python do I have installed?'* *'Is it stored in `PATH`?'* The Python tutorial offered by VS Code clarified many of the issues I was having with Python. [^python-tutorial] \n\n:::\n\nFor example, I typically work on macOS, so I use Homebrew to install Python 3:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\nbrew install python3\n```\n:::\n\n\n\nIf you're using Homebrew, it's important to note the different locations for python installations. The `which` command is helpful here:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\nwhich python3\n# /usr/bin/python3\n```\n:::\n\n\n\n`/usr/bin/python3` is the **system-managed Python installation**. It's minimal and less likely to change, and is intended to ensure stability.\n\n### Python via Homebrew \n\nIf you're using Homebrew to install Python, you'll probably notice there are other installations of Python in `/usr/local/bin`.[^usr-local-bin] I display these below using the `tree` command:\n\n[^usr-local-bin]: `/usr/local/bin` is commonly used for user-installed software, separate from the system's default utilities.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\ntree -P \"python*\" /usr/local/bin -L 2\n# /usr/local/bin\n# ├── python3 -> ../Cellar/python@3.12/3.12.3/bin/python3\n# ├── python3-config -> ../Cellar/python@3.12/3.12.3/bin/python3-config\n# ├── python3.12 -> ../Cellar/python@3.12/3.12.3/bin/python3.12\n# └── python3.12-config -> ../Cellar/python@3.12/3.12.3/bin/python3.12-config\n# \n# 1 directory, 4 files\n```\n:::\n\n\n\nThe output above shows the files and the [symbolic links](https://linuxize.com/post/how-to-create-symbolic-links-in-linux-using-the-ln-command/) they are referencing. The links are pointing to the actual binaries located under the `../Cellar/python@3.12/` directory.[^homebrew-links] \n\n[^homebrew-links]: This is typical of Homebrew installations on macOS, where Homebrew installs software under `/usr/local/Cellar` and creates symlinks in `/usr/local/bin` for easy execution.\n\nThe symbolic links in `/usr/local/bin` are a modular approach to updating python. This is handy for user-installed environments where uninstallation or updates can be managed flexibly without disrupting the system's core functionality.\n\n## Quarto Check\n\nI highly recommend running `quarto check` to confirm Python and the other dependencies have been installed. I've provided the output from my setup and a brief description below: \n\n**`Quarto installation`** displays the path to the installation of the current Quarto version.\n\n``` sh\nQuarto 1.5.28\n[✓] Checking versions of quarto binary dependencies...\n      Pandoc version 3.1.11: OK\n      Dart Sass version 1.70.0: OK\n      Deno version 1.41.0: OK\n      Typst version 0.10.0: OK\n[✓] Checking versions of quarto dependencies......OK\n[✓] Checking Quarto installation......OK\n      Version: 1.5.28\n      Path: /Applications/quarto/bin\n```\n\n**`tools`** checks for a [TinyTex](https://yihui.org/tinytex/) installation (and installs it if its not there), `Latex` confirms the installation of [LaTeX](https://www.latex-project.org/) or [TinyTex](https://yihui.org/tinytex/) and displays the path (in this case, the path to the TinyTex installation), and basic markdown rendering is confirmed.\n\n``` sh\n[✓] Checking tools....................OK\n      TinyTeX: (external install)\n      Chromium: 869685\n\n[✓] Checking LaTeX....................OK\n      Using: TinyTex\n      Path: /Users/username/Library/TinyTeX/bin/universal-darwin\n      Version: 2023\n\n[✓] Checking basic markdown render....OK\n```\n\n**`Python 3 installation`** returns the python and jupyter versions, the python installation path, and kernels.\n\n``` sh\n[✓] Checking Python 3 installation....OK\n      Version: 3.11.5 (Conda)\n      Path: /Users/username/miniconda3/bin/python\n      Jupyter: 5.7.2\n      Kernels: python3\n\n[✓] Checking Jupyter engine render....OK\n```\n\nNotice Quarto is using the python version installed in `/Users/username/miniconda3/bin/python`, not the `/usr/bin/python3` version above.\n\n**`R installation`** checks all the R stuff (`LibPaths`, `knitr`, `rmarkdown`)\n\n``` sh\n[✓] Checking R installation...........OK\n      Version: 4.3.2\n      Path: /Library/Frameworks/R.framework/Resources\n      LibPaths:\n        - /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n      knitr: 1.46\n      rmarkdown: 2.26\n\n[✓] Checking Knitr engine render......OK\n```\n\n## Python Interpreter\n\nVS Code requires that we select a Python interpreter to run Python code. Do this by using the command palette (<kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd>). Below are the multiple Python interpreters I can select from on my machine:[^py-interpreter]\n\n[^py-interpreter]: The path of the recommended interpreter is `~/pyenv/versions/3.9.15/bin/python`.\n\n![Python interpreter](img/py_interpreter.png){fig-align='center' width='70%'}\n\nIf I run `which python3` in the terminal *inside* VS Code, I see the python version is stored in `/Users/username/.pyenv/versions/`:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"Inside VS Code Terminal\"}\nwhich python3\n# /Users/username/.pyenv/versions/3.9.15/bin/python3\n```\n:::\n\n\n\nBut when I run `which python3` in a Terminal *outside* of VS Code, I see the following: \n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"Outside VS Code (macOS Terminal)\"}\nwhich python3\n# /Users/username/miniconda3/bin/python3\n```\n:::\n\n\n\nThe differences in Python versions when running `which python3` in the VS Code Terminal versus the macOS Terminal are due to distinct Python environments being picked up by each terminal session. This is a common situation caused by different environment settings, specifically the `PATH` environment variable, and potentially Python version management configurations. \n\n### VS Code (`pyenv`)\n\nIn the VS Code Terminal, `which python3` uses Python installed via [`pyenv`](https://github.com/pyenv/pyenv), a popular version management tool used to manage multiple Python versions. [`pyenv`](https://github.com/pyenv/pyenv?tab=readme-ov-file#how-it-works) is a simple Python version management tool that allows you to easily switch between multiple versions of Python. It focuses primarily on managing different versions of the Python interpreter.\n\nPyenv modifies the `PATH` to prioritize its versions of Python over system-installed versions (like the one stored in `/usr/bin/python3`).\n\n\n\n::: {.cell}\n\n:::\n\n\n\n- **Python Version**: 3.9.15\n- **Source**: Pyenv environment\n- **Path**: `/Users/username/.pyenv/versions/3.9.15/bin/python3`\n\n### macOS (`miniconda3`)\n\nThe output from `which python3` in the macOS terminal indicates it's using Python from a [Conda environment.](https://docs.anaconda.com/free/distro-or-miniconda/). [Miniconda](https://docs.anaconda.com/free/miniconda/) is a popular package, dependency, and environment management system which is typically used for scientific computing and data science, where managing complex dependencies is crucial. The miniconda environment has its own isolated directory, separate from the system-wide installations.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n- **Python Version**: 3.11.5\n- **Source**: Conda environment\n- **Path**: `/Users/username/miniconda3/bin/python3`\n\n\nThe primary reason for the differences is how the `PATH` environment variable is set up in each terminal instance. VS Code’s terminal is configured to add the `pyenv` managed Python to the `PATH` ahead of the Conda managed version, resulting in the `pyenv` version being used when `which python3` is executed.\n\n### Key Features \n\n| Feature                   | Pyenv                        | Miniconda          |\n|---------------------------|-----------------------------|---------------------|\n| Python Version Management | Yes                         | Yes                 |\n| Virtual Environment       | Yes (with pyenv-virtualenv) | Yes                 |\n| Package Management        | Basic (via pip)             | Advanced (via Conda)|\n| Cross-Language Support    | No                          | Yes                 |\n| Dependency Management     | Limited                     | Robust              |\n| Ideal for Simple Projects | Yes                         | No                  |\n| Ideal for Complex Projects| No                          | Yes                 |\n| Multi-Language Support    | No                          | Yes                 |\n\n\n#### Environment Management\n\n::: {layout-ncol=2 layout-valign=\"top\"}\n\n**`miniconda`**: Generally creates and manages self-contained environments that include Python and other dependencies. It modifies the `PATH` within the shell it's activated in, which might be automatically configured in your standard macOS Terminal.\n\n**`pyenv`**: Manages multiple Python versions by manipulating the PATH environment variable and does not concern itself with non-Python dependencies.\n\n:::\n\n## VS Code + Quarto + Python \n\nNow I can create the Quarto document (`hello.qmd`) following the introduction on the [Quarto website](https://quarto.org/docs/get-started/hello/vscode.html#render-and-preview), I end up with the following YAML header, python code, and output:\n\n![Hello Quarto](img/vscode_hello_quarto.png){fig-align='center' width='90%'}\n\n## More resources\n\n[Rami Krispin](https://github.com/RamiKrispin) also has a great  [guide](https://github.com/RamiKrispin/vscode-python) for setting up Python and Docker in VS Code. The [Quick Start Guide for Python in VS Code](https://code.visualstudio.com/docs/python/python-quick-start) has a lot of information (and .gifs!). Eric Nantz also has a fantastic and thorough [Setting up my Quarto adventures!](https://youtu.be/XgzcNu-8HeM?si=bswcEvm4qUsni24K) video on the [Shiny Developer Series YouTube channel](https://www.youtube.com/@ShinyDeveloperSeries), too.\n\n[^python-tutorial]: [Getting Started with Python in VS Code](https://code.visualstudio.com/docs/python/python-tutorial).\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}