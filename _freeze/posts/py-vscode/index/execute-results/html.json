{
  "hash": "4862e512134018163315701af11a9f0a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"VS Code, meet Quarto.\" \nsubtitle: \"Quarto, say 'hello' to Python.\"\nauthor: \"Martin Frigaard\"\ndate: \"2024-07-05\"\ncategories: [quarto, python, vscode]\nimage: \"img/quarto-vscode-python.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\n# draft: true\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n\n:::: {.callout-note collapse='false' appearance='simple' icon=false}\n\n## [Note]{style='font-weight: bold; font-size: 1.10em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\nI've been using VS Code to write more and more Python code lately, so I've decided make some notes on 1) installing Python, 2) working in VS Code, and 3) using Python code chunks in Quarto.\n\n::: \n\n::::\n\n\n\n\n## Background\n\nI'd been an avid R/RStudio (now Posit Workbench) user for 10+ years, but lately I've been spending a lot of time with Python in VS Code. Transitioning from one programming language and development environment to another was daunting at first, but Quarto opens up a world of new opportunities for learning new languages. This post covers setting up Quarto and Python in VS Code, learning pains, tips, and early successes. \n\n<!--\n\nreceived my new copy of [Learning Data Science](https://learningds.org/intro.html) by Sam Lau, Joseph Gonzalez, and Deborah Nolan. The [code examples](https://github.com/DS-100/textbook/) are in Python, so I \n\n-->\n\n## Installing VS Code\n\n:::: {layout=\"[75, 25]\"}\n\nYou can download VS Code from the [official website](https://code.visualstudio.com/). I recommend following the installation instructions for your particular operating system. After installing VS Code, you'll want to install the [Quarto extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) and [Python extension from Microsoft](https://marketplace.visualstudio.com/items?itemName=ms-python.python). \n\n![](img/vscode.jpeg){class=\"cover\" width=\"450\" fig-align=\"right\"}\n\n::::\n\n:::{#fig-vscode_start}\n\n![](img/vscode_start.png){#fig-vscode_start fig-align='center' width='90%'}\n\nVS Code Start\n:::\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='default' icon=false}\n\n## [OS DISCLAIMER]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\nI'm using macOS Sonoma (14.4.1 (23E224)) with [Bash](https://www.gnu.org/software/bash/) and [iTerm2](https://iterm2.com/).\n\n::: \n\n::::\n\n\n\nNow we'll cover a few options for installing and using Python.\n\n## Installing Python\n\n::: {layout=\"[85, 15]\"}\n\nInstalling Python was always a little fuzzy for me. There are multiple ways to install Python: from the official [Python website](https://www.python.org); using a package manager like [Chocolatey](https://community.chocolatey.org/) or [Homebrew](https://brew.sh/); or with an IDE like [PyCharm](https://www.jetbrains.com/pycharm/) or [Anaconda.](https://www.anaconda.com/) These options would often result in questions like:\n\n![](img/python-black.png){class=\"cover\" width=\"375\" fig-align=\"right\"}\n\n:::\n\n*How do I install Python on other operating systems (i.e., Windows and Linux)?*\n\n*What is the differences between Python versions? Which one should I install and use?*\n\n*How do I manage multiple Python versions on my machine?*\n\n*Should I use anaconda or miniconda or pip for managing Python packages?*\n\nThe safest way I found to install Python was to follow the following steps:\n\n1. Go to the [Python website](https://www.python.org).\n\n2. Click on the \"Downloads\" tab and choose the appropriate version for your operating system (Windows, macOS, Linux).\n\n::: {#fig-download_python}\n\n![](img/download_python.png){#fig-download_python fig-align='center' width='90%'}\n\nPython Downloads\n:::\n\n\n3. Run the installer and make sure to check the box that says \"Add Python to `PATH`\" during installation.\n\n### Homebrew \n\nWhen using Homebrew, it's important to note the different locations for Python installations. The `which` command is helpful here:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\nwhich python3\n# /usr/bin/python3\n```\n:::\n\n\n\n`/usr/bin/python3` is the **system-managed Python installation**. It's minimal and less likely to change, and is intended to ensure stability.\n\nIf you're using Homebrew to install Python, you'll probably notice there are other installations of Python in `/usr/local/bin`. This is because `/usr/local/bin` is commonly location for user-installed software, separate from the system's default utilities.[^usr-local-bin]\n\n[^usr-local-bin]: I display these below using the `tree` command.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\ntree -P \"python*\" /usr/local/bin -L 2\n# /usr/local/bin\n# ├── python3 -> ../Cellar/python@3.12/3.12.4/bin/python3\n# ├── python3-config -> ../Cellar/python@3.12/3.12.4/bin/python3-config\n# ├── python3.12 -> ../Cellar/python@3.12/3.12.4/bin/python3.12\n# └── python3.12-config -> ../Cellar/python@3.12/3.12.4/bin/python3.12-config\n# \n# 1 directory, 4 files\n```\n:::\n\n\n\nThe output above shows the files and the [symbolic links](https://linuxize.com/post/how-to-create-symbolic-links-in-linux-using-the-ln-command/) they are referencing. The links are pointing to the actual binaries located under the `../Cellar/python@3.12/` directory.[^homebrew-links] \n\n[^homebrew-links]: This is typical of Homebrew installations on macOS, where Homebrew installs software under `/usr/local/Cellar` and creates symlinks in `/usr/local/bin` for easy execution.\n\nThe symbolic links in `/usr/local/bin` are a modular approach to updating Python. This is handy for user-installed environments where installations or updates can be managed flexibly without disrupting the system's core functionality.\n\nThe Python tutorial offered by VS Code also clarified many of the previous questions I'd struggle with.[^python-tutorial] \n\n[^python-tutorial]: [Getting Started with Python in VS Code](https://code.visualstudio.com/docs/python/python-tutorial).\n\n### Python VS Code Extension\n\nLocate and install the Python VS Code [extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) using the search bar in the **Extensions**:\n\n::: {#fig-python-ext layout-ncol=2}\n\n![Search for 'Python'](img/python_ext_search.png){#fig-python_ext_search width='90%'}\n\n![Python VS Code Extension](img/python_ext.png){#fig-python_ext width='95%'}\n\n\n\nSearch for and install Python VS Code extension\n:::\n\n## Installing Quarto\n\n:::: {layout=\"[25, 75]\"}\n\n![](img/quarto.png){class=\"cover\" width=\"500\" fig-align=\"right\"}\n\nQuarto can be downloaded and installed from its [official website](https://quarto.org/docs/get-started/). Follow the platform-specific instructions to install it on your system. Make sure Quarto has been installed correctly and is available in your system’s `PATH`.\n\n::::\n\nCheck if Quarto is on `PATH`:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\nquarto --version\n# 1.5.28\n```\n:::\n\n\n\nIf it isn't, you'll need to add the location of your quarto installation to `PATH`. You can do that with the commands below (depending on your shell).\n\nFor Bash (common in Linux and older macOS versions):\n\n``` sh\necho 'export PATH=\"$PATH:/path/to/quarto\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\nFor Zsh (default in newer macOS versions):\n\n``` sh\necho 'export PATH=\"$PATH:/path/to/quarto\"' >> ~/.zshrc\nsource ~/.zshrc\n```\n\nYou can also use `which` to locate quarto path: \n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In Terminal\"}\nwhich quarto\n# /usr/local/bin/quarto\n```\n:::\n\n\n\nNow that we have Quarto installed and configured, we'll check our dependencies and install the VS Code extension to make sure VS Code can find Quarto and Python.\n\n### Quarto Check\n\nI highly recommend running `quarto check` to confirm Python and the other dependencies have been installed. I've provided the output from my setup and a brief description below: \n\n**`Quarto installation`** displays the path to the installation of the current Quarto version.\n\n``` sh\nQuarto 1.5.28\n[✓] Checking versions of quarto binary dependencies...\n      Pandoc version 3.1.11: OK\n      Dart Sass version 1.70.0: OK\n      Deno version 1.41.0: OK\n      Typst version 0.10.0: OK\n[✓] Checking versions of quarto dependencies......OK\n[✓] Checking Quarto installation......OK\n      Version: 1.5.28\n      Path: /Applications/quarto/bin\n```\n\n**`tools`** checks for a [TinyTex](https://yihui.org/tinytex/) installation (and installs it if its not there), `Latex` confirms the installation of [LaTeX](https://www.latex-project.org/) or [TinyTex](https://yihui.org/tinytex/) and displays the path (in this case, the path to the TinyTex installation), and basic markdown rendering is confirmed.\n\n``` sh\n[✓] Checking tools....................OK\n      TinyTeX: (external install)\n      Chromium: 869685\n\n[✓] Checking LaTeX....................OK\n      Using: TinyTex\n      Path: /Users/username/Library/TinyTeX/bin/universal-darwin\n      Version: 2023\n\n[✓] Checking basic markdown render....OK\n```\n\n**`Python 3 installation`** returns the python and jupyter versions, the python installation path, and kernels.\n\n``` sh\n[✓] Checking Python 3 installation....OK\n      Version: 3.11.5 (Conda)\n      Path: /Users/username/miniconda3/bin/python\n      Jupyter: 5.7.2\n      Kernels: python3\n\n[✓] Checking Jupyter engine render....OK\n```\n\nNotice Quarto is using the python version installed in `/Users/username/miniconda3/bin/python`, not the `/usr/bin/python3` version above.\n\n**`R installation`** checks all the R stuff (`LibPaths`, `knitr`, `rmarkdown`)\n\n``` sh\n[✓] Checking R installation...........OK\n      Version: 4.3.2\n      Path: /Library/Frameworks/R.framework/Resources\n      LibPaths:\n        - /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n      knitr: 1.46\n      rmarkdown: 2.26\n\n[✓] Checking Knitr engine render......OK\n```\n\n### Quarto VS Code Extension\n\nAfter installing Quarto, locate and install the [Quarto VS Code Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) from VS Code by searching for 'Quarto':\n\n::: {#fig-quarto-ext layout-ncol=2}\n\n![Search for 'Quarto'](img/quarto_ext_search.png){#fig-quarto_ext_search width='90%'}\n\n![Quarto VS Code Extension](img/quarto_ext.png){#fig-quarto_ext width='95%'}\n\n\n\nSearch for and install Quarto VS Code extension\n:::\n\n\n\n### Quarto (`.qmd`) files\n\nI've created a `hello.qmd` file in the `py-quarto-hello` folder to run the example code from the Quarto website.[^quarto-code-example] The document contains a [YAML header]{style='color: #FF2600; font-weight: bold;'}, some [markdown text]{style='color: #FF9300; font-weight: bold;'}, and a [Python code chunk]{style='color: #0433FF; font-weight: bold;'}. \n\n![Quarto document with Python code](img/hello_qmd.png){width='100%' fig-align='center'}\n\n[^quarto-code-example]: The example code in `hello.qmd` comes from the [Render and Preview](https://quarto.org/docs/get-started/hello/vscode.html#render-and-preview) section.\n\n## Python Interpreter\n\nWe can select a Python interpreter to run Python in VS Code by using the command palette. Below are the available Python interpreters I can select on my machine:[^py-interpreter]\n\n[^py-interpreter]: The path of the recommended interpreter is `~/pyenv/versions/3.9.15/bin/python`.\n\n:::{.column-margin}\n\nCommand Palette Keyboard Shortcut:\n\n<br>\n\n<kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd>\n\n:::\n\n![Python interpreter](img/py_interpreter.png){fig-align='center' width='90%'}\n\nIf I select the recommended Python interpreter in the command palette and run `which python3` in the terminal *inside* VS Code, I see the following:[^username-replace]\n\n[^username-replace]: I've replaced my username with `<username>`.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"Inside VS Code Terminal\"}\nwhich python3\n# /Users/<username>/.pyenv/versions/3.9.15/bin/python3\n```\n:::\n\n\n\nBut when I run `which python3` in a Terminal *outside* of VS Code, I see the following: \n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"Outside VS Code (in iTerm2)\"}\nwhich python3\n# /Users/<username>/miniconda3/bin/python3\n```\n:::\n\n\n\nThe differences in Python versions when running `which python3` in the VS Code Terminal versus the iTerm2 Terminal are due to distinct Python environments being picked up by each terminal session. \n\n### `pyenv`\n\nIn the VS Code Terminal, `which python3` identifies the Python version installed via [`pyenv`](https://github.com/pyenv/pyenv). `pyenv` is a simple Python version management tool that allows you to easily switch between multiple versions of Python. It focuses primarily on managing different versions of the Python interpreter.[^read-more-pyenv]\n\n[^read-more-pyenv]: [Read more](https://github.com/pyenv/pyenv?tab=readme-ov-file#how-it-works) about how `pyenv` works.\n\n`pyenv` modifies the `PATH` to prioritize its versions of Python over system-installed versions (like the one stored in `/usr/bin/python3`):\n\n- **Python Version**: 3.9.15\n- **Source**: `pyenv` environment\n- **Path**: `/Users/username/.pyenv/versions/3.9.15/bin/python3`\n\n### `miniconda3`\n\nThe output from `which python3` in the iTerm2 terminal indicates it's using Python from a [Conda environment.](https://docs.anaconda.com/free/distro-or-miniconda/)--specifically, [`miniconda`](https://docs.anaconda.com/free/miniconda/). \n\n`miniconda` is a popular package, dependency, and environment management system which is typically used for scientific computing and data science, where managing complex dependencies is crucial. The `miniconda` environment has its own isolated directory, separate from the system-wide installations (like `/usr/bin/python3`).\n\n\n\n::: {.cell}\n\n:::\n\n\n\n- **Python Version**: 3.11.5\n- **Source**: Conda environment\n- **Path**: `/Users/<username>/miniconda3/bin/python3`\n\n\nThe primary reason for the differences between the VS Code terminal and iTerm2 is how the `PATH` environment variable is set up in each terminal instance. VS Code’s terminal is configured to add the `pyenv` managed Python to the `PATH` ahead of the `miniconda` managed version, resulting in the `pyenv` version being used when `which python3` is executed.\n\n### Key Features \n\n**`pyenv`** manages multiple Python versions by manipulating the `PATH` environment variable and does not concern itself with non-Python dependencies.\n\n**`miniconda`** generally creates and manages self-contained environments that include Python and other dependencies. It modifies the `PATH` within the shell it's activated in, which might be automatically configured in your standard macOS Terminal.\n\nThe table below compares key features between `pyenv` and `miniconda`:\n\n\n| Feature                   | Pyenv                        | Miniconda          |\n|---------------------------|-----------------------------|---------------------|\n| Python Version Management | Yes                         | Yes                 |\n| Virtual Environment       | Yes (with pyenv-virtualenv) | Yes                 |\n| Package Management        | Basic (via pip)             | Advanced (via Conda)|\n| Cross-Language Support    | No                          | Yes                 |\n| Dependency Management     | Limited                     | Robust              |\n| Ideal for Simple Projects | Yes                         | No                  |\n| Ideal for Complex Projects| No                          | Yes                 |\n| Multi-Language Support    | No                          | Yes                 |\n\n\n## VS Code + Quarto + Python \n\nWe're finally ready to render our Quarto document! Quarto documents can be rendered by clicking on the [Preview icon]{style='color: #FF2600; font-weight: bold;'}:\n\n:::{.column-margin}\n\nQuarto Render Keyboard Shortcut:\n\n<br>\n\n<kbd>Shift</kbd>+<kbd>Cmd</kbd>+<kbd>K</kbd>\n\n:::\n\n![](img/quarto_preview.png){fig-align='center' width='100%'}\n\nI've also added `editor: render-on-save:` and set the value to `true` so the document will automatically render in the Quarto preview pane. \n\n![Hello Quarto](img/vscode_hello_quarto.png){fig-align='center' width='90%'}\n\n### Dependencies and metadata\n\nIf we continue adding the Python code [^more-python-code] to our Quarto document, it’s a good practice to create and work within a virtual environment to manage project-specific dependencies. We can do this by entering the following in the VS Code terminal: \n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In VS Code Terminal\"}\npython -m venv .venv\nsource .venv/bin/activate\n```\n:::\n\n\n\nThe commands above uses the `venv` module that is included with Python to create a virtual environment. `.venv` is the directory where the virtual environment will be created. Inside this directory, a standalone Python environment is set up. This environment includes its own Python interpreter and a `site-packages` directory where Python packages can be installed independently of the global Python environment.\n\nThe `source .venv/bin/activate` command adjusts the environment variables so the shell uses the Python interpreter and libraries from the virtual environment instead of the global Python installation. Any Python packages installed using `pip` will be installed in the virtual environment's `site-packages` directory.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In VS Code Terminal\"}\npip install jupyter matplotlib plotly pandas\n```\n:::\n\n\n\nOnce all the dependencies are installed, we should generate a list of all installed packages along with their versions in a `requirements.txt` file using the `pip freeze` command:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In VS Code Terminal\"}\npip freeze > requirements.txt\n```\n:::\n\n\n\n[^more-python-code]: The Python code we're using comes from the [Computations section](https://quarto.org/docs/get-started/computations/vscode.html) of the Quarto website. \n\nWe should also include our virtual environment folder in the `.gitignore` file (because all of the dependencies are safely listed in the `requirements.txt`).\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"In .gitignore\"}\n# Ignore the virtual environment directory\n.venv/\n```\n:::\n\n\n\nWe can also add a `_quarto.yml` file to store project-level metadata like styling, outputs, and code cell configurations.\n\n```yml\nproject:\n  title: \"Python in Quarto\"\n  output-dir: .\n\ntoc: true\ntoc-title: Contents\ntoc-location: left\ntoc-expand: true\nnumber-sections: false\n\nformat:\n  html:\n    code-fold: show\n\neditor: \n  render-on-save: true\n```\n\n## More resources\n\n[Rami Krispin](https://github.com/RamiKrispin) also has a great  [guide](https://github.com/RamiKrispin/vscode-python) for setting up Python and Docker in VS Code. The [Quick Start Guide for Python in VS Code](https://code.visualstudio.com/docs/python/python-quick-start) has a lot of information (and .gifs!). Eric Nantz also has a fantastic and thorough [Setting up my Quarto adventures!](https://youtu.be/XgzcNu-8HeM?si=bswcEvm4qUsni24K) video on the [Shiny Developer Series YouTube channel](https://www.youtube.com/@ShinyDeveloperSeries), too.\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}