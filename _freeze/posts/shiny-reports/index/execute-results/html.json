{
  "hash": "5352cde09b1f77689ca2f33e8b9105fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shiny Reports\"\nsubtitle: \"A deep dive into downloadable reports\"\nauthor: \"Martin Frigaard\"\ndate: \"2025-06-02\"\ncategories: [Quarto, Shiny, RMarkdown]\n# image: \"image.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\n\ndraft: false\n\nfreeze: true\n\nknitr:\n  opts_chunk: \n    fig-dpi: 320\n    fig-width: 6\n    out-width: '85%'\n    fig-format: png\n    fig-align: 'center'\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [ALERT!]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\nThis post is currently under development--thank you for your patience.\n\n::: \n\n::::\n:::\n\n\n\nThis post covers parameterized reports in Shiny applications (via R Markdown and/or Quarto). Downloadable reports are a great feature to include in your application, and I've put together some tips I've learned by adding this feature to multiple applications. \n\n## shrapports\n\nTo help demonstrate a variety of report options, I've written the [`shrapports` R  package](https://github.com/mjfrigaard/shrapports), which contains a Shiny application with a variety of plot outputs.\n\n### Package structure\n\nI've displayed the R folder for `shrapports` below. The package includes three modules, UI and server functions, a handful of utility functions, and a standalone app function. \n\n\n\n\n```{.default}\nshrapports/\nR/\n├── app_server.R #<1>\n├── app_ui.R #<1>\n├── get_tt_data.R #<2>\n├── inspect_plot.R #<3>\n├── launch_app.R #<4>\n├── logr_msg.R #<5>\n├── mod_report.R #<6>\n├── mod_table.R #<6>\n├── mod_var_input.R #<6>\n└── mod_viz.R #<6>\n\n1 directory, 10 files\n```\n\n\n1. App functions \n2. Data utility function   \n3. Plot utility function   \n4. Standalone app function \n5. Logging function \n6. Shiny modules   \n\nBelow is an abstract syntax tree[^ast] of the application's functions:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```\n█─launch_app \n├─█─app_ui \n│ ├─█─mod_var_input_ui \n│ ├─█─mod_viz_ui \n│ └─█─mod_table_ui \n└─█─app_server \n  ├─█─mod_var_input_server \n  │ └─█─get_tt_data \n  ├─█─mod_viz_server \n  │ └─█─inspect_plot \n  └─█─mod_table_server \n```\n:::\n\n\n\n[^ast]: Compliments of the [`lobstr::ast()`](https://lobstr.r-lib.org/reference/ast.html) function.\n\n### TidyTuesday data \n\nThe `get_tt_data()` function can be used to access the data from teh [TidyTuesday](https://github.com/rfordatascience/tidytuesday) project.[^tidytues]\n\n[^tidytues]: `get_tt_data()` joins the metadata from [`ttmeta`](https://r4ds.github.io/ttmeta/) with functions from [`tidytuesdayR`](https://dslc-io.github.io/tidytuesdayR/).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\npkgs <- c(\"ttmeta\", \"tidytuesdayR\")\npak::pkg_install(pkg = pkgs)\n```\n:::\n\n\n\nA demo of the `get_tt_data()` function is below: \n\n:::{.column-margin}\n\n*The `ttd` lists are named according to the number of datasets they include.*\n\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nttd <- get_tt_data(\"Netflix Titles\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show/hide ttd structure\"}\nstr(ttd)\n# List of 1\n#  $ netflix_titles.csv: spc_tbl_ [7,787 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#   ..$ show_id     : chr [1:7787] \"s1\" \"s2\" \"s3\" \"s4\" ...\n#   ..$ type        : chr [1:7787] \"TV Show\" \"Movie\" \"Movie\" \"Movie\" ...\n#   ..$ title       : chr [1:7787] \"3%\" \"7:19\" \"23:59\" \"9\" ...\n#   ..$ director    : chr [1:7787] NA \"Jorge Michel Grau\" \"Gilbert Chan\" \"Shane Acker\" ...\n#   ..$ cast        : chr [1:7787] \"João Miguel, Bianca Comparato, Michel Gomes, Rodolfo Valente, Vaneza Oliveira, Rafael Lozano, Viviane Porto, Me\"| __truncated__ \"Demián Bichir, Héctor Bonilla, Oscar Serrano, Azalia Ortiz, Octavio Michel, Carmen Beato\" \"Tedd Chan, Stella Chung, Henley Hii, Lawrence Koh, Tommy Kuan, Josh Lai, Mark Lee, Susan Leong, Benjamin Lim\" \"Elijah Wood, John C. Reilly, Jennifer Connelly, Christopher Plummer, Crispin Glover, Martin Landau, Fred Tatasc\"| __truncated__ ...\n#   ..$ country     : chr [1:7787] \"Brazil\" \"Mexico\" \"Singapore\" \"United States\" ...\n#   ..$ date_added  : chr [1:7787] \"August 14, 2020\" \"December 23, 2016\" \"December 20, 2018\" \"November 16, 2017\" ...\n#   ..$ release_year: num [1:7787] 2020 2016 2011 2009 2008 ...\n#   ..$ rating      : chr [1:7787] \"TV-MA\" \"TV-MA\" \"R\" \"PG-13\" ...\n#   ..$ duration    : chr [1:7787] \"4 Seasons\" \"93 min\" \"78 min\" \"80 min\" ...\n#   ..$ listed_in   : chr [1:7787] \"International TV Shows, TV Dramas, TV Sci-Fi & Fantasy\" \"Dramas, International Movies\" \"Horror Movies, International Movies\" \"Action & Adventure, Independent Movies, Sci-Fi & Fantasy\" ...\n#   ..$ description : chr [1:7787] \"In a future where the elite inhabit an island paradise far from the crowded slums, you get one chance to join t\"| __truncated__ \"After a devastating earthquake hits Mexico City, trapped survivors from all walks of life wait to be rescued wh\"| __truncated__ \"When an army recruit is found dead, his fellow soldiers are forced to confront a terrifying secret that's haunt\"| __truncated__ \"In a postapocalyptic world, rag-doll robots hide in fear from dangerous machines out to exterminate them, until\"| __truncated__ ...\n#   ..- attr(*, \"spec\")=\n#   .. .. cols(\n#   .. ..   show_id = col_character(),\n#   .. ..   type = col_character(),\n#   .. ..   title = col_character(),\n#   .. ..   director = col_character(),\n#   .. ..   cast = col_character(),\n#   .. ..   country = col_character(),\n#   .. ..   date_added = col_character(),\n#   .. ..   release_year = col_double(),\n#   .. ..   rating = col_character(),\n#   .. ..   duration = col_character(),\n#   .. ..   listed_in = col_character(),\n#   .. ..   description = col_character()\n#   .. .. )\n#   ..- attr(*, \"problems\")=<externalptr> \n#  - attr(*, \"clean_title\")= chr \"netflix_titles\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nttd2 <- get_tt_data(\"Space Launches\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show/hide ttd2 structure\"}\nstr(ttd2)\n# List of 2\n#  $ agencies.csv: spc_tbl_ [74 × 19] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#   ..$ agency            : chr [1:74] \"RVSN\" \"UNKS\" \"NASA\" \"USAF\" ...\n#   ..$ count             : num [1:74] 1528 904 469 388 258 ...\n#   ..$ ucode             : chr [1:74] \"RVSN\" \"GUKOS\" \"NASA\" \"USAF\" ...\n#   ..$ state_code        : chr [1:74] \"SU\" \"SU\" \"US\" \"US\" ...\n#   ..$ type              : chr [1:74] \"O/LA\" \"O/LA\" \"O/LA/LV/PL/S\" \"O/LA/S\" ...\n#   ..$ class             : chr [1:74] \"D\" \"D\" \"C\" \"D\" ...\n#   ..$ tstart            : chr [1:74] \"1960\" \"1986 Apr 24\" \"1958 Oct  1\" \"1947 Sep 18\" ...\n#   ..$ tstop             : chr [1:74] \"1991 Dec\" \"1991\" \"-\" \"-\" ...\n#   ..$ short_name        : chr [1:74] \"RVSN\" \"UNKS\" \"NASA\" \"USAF\" ...\n#   ..$ name              : chr [1:74] \"Rakentiye Voiska Strategicheskogo Naznacheniye\" \"Upravleniye Nachalnika Kosmicheskikh Sredstv\" \"National Aeronautics and Space Administration\" \"United States Air Force\" ...\n#   ..$ location          : chr [1:74] \"Mosvka?\" \"Moskva\" \"Washington, D.C.\" \"Washington, DC-Pentagon\" ...\n#   ..$ longitude         : chr [1:74] \"-\" \"-\" \"-\" \"-\" ...\n#   ..$ latitude          : chr [1:74] \"-\" \"-\" \"-\" \"-\" ...\n#   ..$ error             : chr [1:74] \"-\" \"-\" \"-\" \"-\" ...\n#   ..$ parent            : chr [1:74] \"-\" \"MO\" \"-\" \"-\" ...\n#   ..$ short_english_name: chr [1:74] \"-\" \"-\" \"-\" \"-\" ...\n#   ..$ english_name      : chr [1:74] \"Strategic Rocket Forces\" \"-\" \"-\" \"-\" ...\n#   ..$ unicode_name      : chr [1:74] \"Ракетные войска стратегического назначения\" \"Управление начальника космических средств МО СССР\" \"National Aeronautics and Space Administration\" \"United States Air Force\" ...\n#   ..$ agency_type       : chr [1:74] \"state\" \"state\" \"state\" \"state\" ...\n#   ..- attr(*, \"spec\")=\n#   .. .. cols(\n#   .. ..   agency = col_character(),\n#   .. ..   count = col_double(),\n#   .. ..   ucode = col_character(),\n#   .. ..   state_code = col_character(),\n#   .. ..   type = col_character(),\n#   .. ..   class = col_character(),\n#   .. ..   tstart = col_character(),\n#   .. ..   tstop = col_character(),\n#   .. ..   short_name = col_character(),\n#   .. ..   name = col_character(),\n#   .. ..   location = col_character(),\n#   .. ..   longitude = col_character(),\n#   .. ..   latitude = col_character(),\n#   .. ..   error = col_character(),\n#   .. ..   parent = col_character(),\n#   .. ..   short_english_name = col_character(),\n#   .. ..   english_name = col_character(),\n#   .. ..   unicode_name = col_character(),\n#   .. ..   agency_type = col_character()\n#   .. .. )\n#   ..- attr(*, \"problems\")=<externalptr> \n#  $ launches.csv: spc_tbl_ [5,726 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#   ..$ tag        : chr [1:5726] \"1967-065\" \"1967-080\" \"1967-096\" \"1968-042\" ...\n#   ..$ JD         : num [1:5726] 2439671 2439726 2439775 2440000 2440153 ...\n#   ..$ launch_date: Date[1:5726], format:  ...\n#   ..$ launch_year: num [1:5726] 1967 1967 1967 1968 1968 ...\n#   ..$ type       : chr [1:5726] \"Thor Burner 2\" \"Thor Burner 2\" \"Thor Burner 2\" \"Thor Burner 2\" ...\n#   ..$ variant    : chr [1:5726] NA NA NA NA ...\n#   ..$ mission    : chr [1:5726] \"Secor Type II S/N 10\" \"DAPP 3419\" \"DAPP 4417\" \"DAPP 5420\" ...\n#   ..$ agency     : chr [1:5726] \"US\" \"US\" \"US\" \"US\" ...\n#   ..$ state_code : chr [1:5726] \"US\" \"US\" \"US\" \"US\" ...\n#   ..$ category   : chr [1:5726] \"O\" \"O\" \"O\" \"O\" ...\n#   ..$ agency_type: chr [1:5726] \"state\" \"state\" \"state\" \"state\" ...\n#   ..- attr(*, \"spec\")=\n#   .. .. cols(\n#   .. ..   tag = col_character(),\n#   .. ..   JD = col_double(),\n#   .. ..   launch_date = col_date(format = \"\"),\n#   .. ..   launch_year = col_double(),\n#   .. ..   type = col_character(),\n#   .. ..   variant = col_character(),\n#   .. ..   mission = col_character(),\n#   .. ..   agency = col_character(),\n#   .. ..   state_code = col_character(),\n#   .. ..   category = col_character(),\n#   .. ..   agency_type = col_character()\n#   .. .. )\n#   ..- attr(*, \"problems\")=<externalptr> \n#  - attr(*, \"clean_title\")= chr \"space_launches\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nttd3 <- get_tt_data(\"Moore’s Law\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show/hide ttd3 structure\"}\nstr(ttd3)\n# List of 3\n#  $ cpu.csv: spc_tbl_ [176 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#   ..$ processor           : chr [1:176] \"MP944 (20-bit, 6-chip)\" \"Intel 4004 (4-bit, 16-pin)\" \"Intel 8008 (8-bit, 18-pin)\" \"NEC μCOM-4 (4-bit)\" ...\n#   ..$ transistor_count    : num [1:176] NA 2250 3500 2500 2800 ...\n#   ..$ date_of_introduction: num [1:176] 1970 1971 1972 1973 1973 ...\n#   ..$ designer            : chr [1:176] \"Garrett AiResearch\" \"Intel\" \"Intel\" \"NEC\" ...\n#   ..$ process             : num [1:176] NA 10000 10000 7500 6000 10000 6000 6000 8000 8000 ...\n#   ..$ area                : num [1:176] NA 12 14 NA 32 12 16 20 11 21 ...\n#   ..- attr(*, \"spec\")=\n#   .. .. cols(\n#   .. ..   processor = col_character(),\n#   .. ..   transistor_count = col_double(),\n#   .. ..   date_of_introduction = col_double(),\n#   .. ..   designer = col_character(),\n#   .. ..   process = col_double(),\n#   .. ..   area = col_double()\n#   .. .. )\n#   ..- attr(*, \"problems\")=<externalptr> \n#  $ gpu.csv: spc_tbl_ [112 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#   ..$ processor           : chr [1:112] \"µPD7220 GDC\" \"ARTC HD63484\" \"YM7101 VDP\" \"Tom & Jerry\" ...\n#   ..$ transistor_count    : num [1:112] 40000 60000 100000 750000 1000000 1000000 1000000 2600000 1200000 1000000 ...\n#   ..$ date_of_introduction: num [1:112] 1982 1984 1988 1993 1994 ...\n#   ..$ designer_s          : chr [1:112] \"NEC\" \"Hitachi\" \"Sega\" \"Flare\" ...\n#   ..$ manufacturer_s      : chr [1:112] \"NEC\" \"Hitachi\" \"Yamaha\" \"IBM\" ...\n#   ..$ process             : num [1:112] 5000 NA NA NA 500 500 500 350 350 500 ...\n#   ..$ area                : num [1:112] NA NA NA NA NA NA 90 81 NA NA ...\n#   ..$ ref                 : chr [1:112] \"[107]\" \"[108]\" \"[109]\" \"[109]\" ...\n#   ..- attr(*, \"spec\")=\n#   .. .. cols(\n#   .. ..   processor = col_character(),\n#   .. ..   transistor_count = col_double(),\n#   .. ..   date_of_introduction = col_double(),\n#   .. ..   designer_s = col_character(),\n#   .. ..   manufacturer_s = col_character(),\n#   .. ..   process = col_double(),\n#   .. ..   area = col_double(),\n#   .. ..   ref = col_character()\n#   .. .. )\n#   ..- attr(*, \"problems\")=<externalptr> \n#  $ ram.csv: spc_tbl_ [47 × 10] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#   ..$ chip_name           : chr [1:47] \"N/A\" \"N/A\" \"?\" \"SP95\" ...\n#   ..$ capacity_bits       : num [1:47] 1 1 8 16 16 NA 256 64 144 256 ...\n#   ..$ bit_units           : chr [1:47] \"Bits\" \"Bits\" \"Bits\" \"Bits\" ...\n#   ..$ ram_type            : chr [1:47] \"SRAM (cell)\" \"DRAM (cell)\" \"SRAM (bipolar)\" \"SRAM (bipolar)\" ...\n#   ..$ transistor_count    : num [1:47] 6 1 48 80 96 ...\n#   ..$ date_of_introduction: num [1:47] 1963 1965 1965 1965 1966 ...\n#   ..$ manufacturer_s      : chr [1:47] \"Fairchild\" \"Toshiba\" \"SDS, Signetics\" \"IBM\" ...\n#   ..$ process             : num [1:47] NA NA NA NA NA NA NA NA NA 12000 ...\n#   ..$ area                : num [1:47] NA NA NA NA NA NA NA NA NA NA ...\n#   ..$ ref                 : chr [1:47] \"[162]\" \"[163][164]\" \"[162]\" \"[165]\" ...\n#   ..- attr(*, \"spec\")=\n#   .. .. cols(\n#   .. ..   chip_name = col_character(),\n#   .. ..   capacity_bits = col_double(),\n#   .. ..   bit_units = col_character(),\n#   .. ..   ram_type = col_character(),\n#   .. ..   transistor_count = col_double(),\n#   .. ..   date_of_introduction = col_double(),\n#   .. ..   manufacturer_s = col_character(),\n#   .. ..   process = col_double(),\n#   .. ..   area = col_double(),\n#   .. ..   ref = col_character()\n#   .. .. )\n#   ..- attr(*, \"problems\")=<externalptr> \n#  - attr(*, \"clean_title\")= chr \"moores_law\"\n```\n:::\n\n\n\n### Inspect plots\n\nThe [`inspectdf` package](https://github.com/alastairrushworth/inspectdf/tree/master) provides \"*collection of utilities for columnwise summary, comparison and visualisation of data frames.*\" I've written a wrapper function (`inspect_plot()`) for handling the ttd lists. \n\n`inspect_plot()` combines the `inspectdf::inspect_*()` + `inspectdf::show_plot()` functions and returns the corresponding plot.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\ninspect_plot(\n  ttd = ttd, \n  plot = \"cat\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd_cat-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n\n\nBelow is an example of the `inspect_imb()` + `show_plot()` functions on `ttd2`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\ninspect_plot(\n  ttd = ttd2, \n  plot = \"imb\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd2_imb-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n\nBelow is an example of the `inspect_types()` + `show_plot()` functions on `ttd3`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\ninspect_plot(\n  ttd = ttd3, \n  plot = \"types\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd3_types-1.png){fig-align='center' width=85%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd3_types-2.png){fig-align='center' width=85%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd3_types-3.png){fig-align='center' width=85%}\n:::\n:::\n\n\n\nIf `inspect_plot()` is passed without any arguments, all plots are returned: \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\ninspect_plot(ttd = ttd)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd_all-1.png){fig-align='center' width=85%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd_all-2.png){fig-align='center' width=85%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd_all-3.png){fig-align='center' width=85%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd_all-4.png){fig-align='center' width=85%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd_all-5.png){fig-align='center' width=85%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/inspect_plot_ttd_all-6.png){fig-align='center' width=85%}\n:::\n:::\n\n\n\n\nIn the sections below, we'll cover how to reliably pass the contents of each module into a downloadable report.\n\n### Modules \n\nThere are three modules in the application: mod_var_input collects the dataset title, mod_viz displays the graphs, mod_table displays a table of the data used in the graph(s).\n\n## Report templates \n\nWe'll store the report templates in the `inst/` folder. Anything in `inst/` automatically included and accessible from an installed application with `system.file()`, so it's a great place for template files. \n\n### Templates \n\nThe templates are accessed with the `get_template_path()` function.\n\nThe `get_template_path()` function returns the installed location of our templates: \n\n\n\n\n```{.default}\n└── inst\n    └── rmarkdown\n        └── report_template.Rmd\n```\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nidentical(\n  # response from function\n  x = get_template_path('rmarkdown'), \n  # response from system.file()\n  y = system.file(\"rmarkdown\", \"report_template.Rmd\", \n                  package = \"shrapports\"))\n#  [1] TRUE\n```\n:::\n\n\n```{.default}\n└── inst\n    └── quarto\n        └── report_template.qmd\n```\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nidentical(\n  # response from function\n  x = get_template_path('quarto'), \n  # response from system.file()\n  y = system.file(\"quarto\", \"report_template.qmd\", \n                  package = \"shrapports\"))\n#  [1] TRUE\n```\n:::\n\n\n\n### Fallback templates \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nrmd_temp <- create_fallback_template(format = \"rmarkdown\")\nbasename(rmd_temp)\n#  [1] \"file4f125a69628c.Rmd\"\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nqmd_temp <- create_fallback_template(format = \"quarto\")\nbasename(qmd_temp)\n#  [1] \"file4f1227ef5f57.qmd\"\n```\n:::\n\n\n\n## Download handler\n\n### filename\n\n### content\n\n### render_report()\n\nThe `render_report()` utility function controls the template used when the download button is clicked:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```\n█─mod_report_server \n├─█─render_report \n│ ├─█─get_template_path \n│ ├─█─create_fallback_template \n│ │ ├─█─create_fallback_rmd_template \n│ │ └─█─create_fallback_qmd_template \n│ ├─█─render_rmarkdown_report \n│ └─█─render_quarto_report \n└─█─create_error_report \n```\n:::\n\n\n\n## Reactives and params\n\n### R Markdown params\n\n### Quarto params\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}