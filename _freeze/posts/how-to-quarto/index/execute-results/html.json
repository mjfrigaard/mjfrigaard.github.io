{
  "hash": "b60d022a1b4be2aba07390a6f50f495d",
  "result": {
    "markdown": "---\ntitle: \"Up and running with Quarto\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-01-23\"\ncategories: [quarto, code]\nimage: \"image.png\"\nfig-align: center\n\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n---\n\n\n# What is `quarto`?\n\n`quarto` combines metadata, markup syntax, and executable code to create reproducible reports, slide decks, websites, dashboards, etc.\n\n## Using `quarto` \n\nI was an early adopter of R Markdown because I immediately fell in love with how I had a single location for my thoughts, code, output tables and figures, and that I could quickly change the output format. R markdown has helped me create reports, blogs, slide decks, and dashboards--all without having to leave the comfort of the IDE. \n\nThen [Posit releases `quarto`](https://quarto.org/), a new 'open-source scientific and technical publishing system,' and I'll admit it--I was equally excited and hesitant. Should I take the time to learn a new tool, especially when I already know how amazing R Markdown is?\n\nThe fact that you're reading this on a `quarto` blog tells you the answer: **learning `quarto` is worth your time.**\n\n`quarto` and R markdown documents both share a similar structure: both start with a YAML header, use markdown formatted text, and include  executable code chunks. The output is a wide range of beautifully rendered target documents (which includes `.html`, `.pdf`, `.docx`, and more!)\n\nIn this post I'll cover some of my initial impressions, similarities to R Markdown, and some `quarto` projects I've created.\n\n:::: {.column-screen-inset layout-ncol=2}\n![](input-quarto.png)\n\n![](rendered-quarto.png)\n::::\n\nI've described each section below and included figures to connect what is written to the rendered output.\n\n### `YAML` header \n\n:::: {.column-margin}\n::: {style=\"font-size: 0.95em; color: #1e83c8;\"}\n*`YAML` is a human friendly data serialization standard for all programming languages, so it's ideal for storing metadata*\n:::\n::::\n\n::: {style=\"font-size: 0.70em;\"}\n```yml\ntitle: \"How to build a blog with quarto\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-01-23\"\ncategories: [code, analysis]\nimage: \"image.png\"\n```\n:::\n\n\n\n::: {.column-body-outset #fig-yaml-render}\n![](quarto-01.png){width=100% fig-align=\"center\"}\n\n`YAML` output \n:::\n\nBelow is the YAML header used for an example `.Qmd` blog post. As you can see, many of the same arguments from R Markdown documents are used (`title:`, `author:`, `date:`), and we still provide `key: \"value\"` pairs. A few specific keys are included if you're writing a blog post:\n\n::: {.column-margin}\n![`image:` rendered on landing page](site.png){width=100%}\n:::\n\n- `categories:` creates tags for blog post topics   \n- `image:` the thumbnail image rendered on the main page    \n\n\n## Markdown\n\nThe example blog post includes a level 2 header (`##`), formatted text, and text with a figure reference (*below the code chunk*).\n\n:::: {.column-body-outset #fig-markdown-render}\n![](quarto-02.png){width=100% fig-align=\"center\"}\n\n`markdown` output\n::::\n\n`quarto` figure cross-referencing: \n\n1. The `#| label: <NAME>` value is used to build an index for the plot   \n2. In the markdown text, the figure is referenced with `@<NAME>`   \n3. In the rendered text, the figure is given a name and number (**Figure 1**). \n\n`quarto`'s method for cross-referencing is seamless, and appears to be much easier than the [R Markdown method](https://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.html), which takes a few extra steps to setup. \n\nUnlike R Markdown, the tab-completion will also save me from confusing `fig-height` and `fig-width` with `out-height` and `out-width` (which can take percentages as a character string, like `\"80%\"`). \n\n## Code chunks\n\n`quarto` chunks have the same components as `.Rmd` code chunks, but with a slightly different structure: \n\n- `knitr` options (i.e., `eval=TRUE`) are included in the curly brackets of the top fence:\n\n::: {style=\"font-size: 0.70em;\"}\n\n\n````default\n```{r eval=TRUE}\nlibrary(rmarkdown)\n```\n\n````\n:::\n\nIn `quarto`, all options are included in the between the fences.\n\n::: {style=\"font-size: 0.70em;\"}\n\n\n````default\n```{r}\n#| eval: true\n```\n````\n\n:::\n\n\nYou might have noticed the case of `TRUE`/`FALSE` have changed, but I've found the tab-completion comes to the rescue before I can make a mistake: \n\n::: {#fig-tab-completion layout-ncol=2}\n\n![options tab completion](eval-tab-comp.png){#fig-eval}\n\n![TRUE/FALSE tab-completion](tf-tab-comp.png){#fig-tf}\n\nTab-completion\n:::\n\nMany of the same options exist, with some great additions. \n\n1. `code-fold:` it's nice have this option at each chunk in a single argument (in R Markdown selectively folding/showing code chunks is [more involved](https://bookdown.org/yihui/rmarkdown-cookbook/fold-show.html))  \n2. `fig-cap:` and `fig-cap-location:` we can place a figure caption (`fig-cap:`, text string) in one of three locations in the document: `top`, `bottom`, or `margin`  \n\n:::: {.column-body-outset #fig-code-render}\n![](quarto-03.png){width=100% fig-align=\"center\"}\n\n`Code` output\n::::\n\nWe can also use the label to reference (like we did in @fig-yaml-render)\n\n## Quick deployment & publishing\n\nMaybe the greatest thing about `quarto` is that **it just works, right out of the box**. I love working in the IDE, but I was able to open this document in Sublime Text, run the `quarto preview` command, and bam: \n\n:::: {.column-body-outset #fig-st3-preview}\n![](st3-quarto.png){width=100% fig-align=\"center\"}\n\nSublime text with `quarto preview`\n::::\n\nIf you're publishing a blog using GitHub pages, deployment is also fairly quick. In a Terminal (outside of the IDE). After we've added all the files (and included a `.nojekyll` file), we want to confirm the changes have been committed to the [current working branch](https://quarto.org/docs/publishing/github-pages.html#publish-command)\n\n::: {style=\"font-size: 0.70em;\"}\n```bash\ntouch .nojekyll\ngit add -A\ngit commit -m \"new .nojekyll\"\n...\n\ngit status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\n```\n:::\n\nNow we create a `gh-pages` `orphan` branch, reset, then commit and push the empty `gh-pages` branch.\n\n::: {style=\"font-size: 0.70em;\"}\n```bash\ngit checkout --orphan gh-pages\nSwitched to a new branch 'gh-pages'\ngit reset --hard\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\n```\n:::\n\n::: {style=\"font-size: 0.70em;\"}\n```\n[gh-pages (root-commit) 8bd928d] Initialising gh-pages branch\ngit push origin gh-pages\nEnumerating objects: 2, done.\nCounting objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 181 bytes | 181.00 KiB/s, done.\nTotal 2 (delta 0), reused 0 (delta 0), pack-reused 0\nremote: \nremote: Create a pull request for 'gh-pages' on GitHub by visiting:\nremote:      https://github.com/mjfrigaard/mjfrigaard.github.io/pull/new/gh-pages\nremote: \nTo github.com:mjfrigaard/mjfrigaard.github.io.git\n * [new branch]      gh-pages -> gh-pages\n```\n:::\n\n[Publish from Terminal](https://quarto.org/docs/publishing/github-pages.html#publishing) using `quarto publish gh-pages`\n\n::: {style=\"font-size: 0.70em;\"}\n```bash\nquarto publish gh-pages\n? Update site at https://mjfrigaard.github.io/? (Y/n) â€º \n```\n:::\n\nEnter `y`, `Yes`, or `Y`\n\n::: {style=\"font-size: 0.70em;\"}\n```\nYes\nFrom github.com:mjfrigaard/mjfrigaard.github.io\n * branch            gh-pages   -> FETCH_HEAD\nRendering for publish:\n\n[1/4] posts/welcome/index.qmd\n[2/4] posts/how-to-quarto/index.qmd\n[3/4] index.qmd\n[4/4] about.qmd\n\nbranch 'gh-pages' set up to track 'origin/gh-pages'.\nHEAD is now at 4c6a0cd Built site for gh-pages\nPreparing worktree (resetting branch 'gh-pages'; was at 4c6a0cd)\n[gh-pages 21e966c] Built site for gh-pages\n 6 files changed, 17 insertions(+), 22 deletions(-)\norigin  git@github.com:mjfrigaard/mjfrigaard.github.io.git (fetch)\norigin  git@github.com:mjfrigaard/mjfrigaard.github.io.git (push)\nTo github.com:mjfrigaard/mjfrigaard.github.io.git\n   4c6a0cd..21e966c  HEAD -> gh-pages\n```\n:::\n\n## Some `quarto` projects\n\n+ **Slides:** I use `quarto` to create my presentation for ODSC west, and it's a great comparison a slight variation of the same talk I gave at ODSC east (written in R Markdown)  \n  - [ODSC West (quarto website)](https://mjfrigaard.github.io/odsc-west-ggplot2-2022/)  \n    - [Slides](https://mjfrigaard.github.io/odsc-west-ggplot2-2022/slides/slides.html#/title-slide)  \n  - [ODSC East (R markdown website)](https://mjfrigaard.github.io/odsc-east-ggplot2-2022/)  \n    - [Slides part 1](https://mjfrigaard.github.io/odsc-east-ggplot2-2022/ggplot2-slides-01.html#1)   \n    - [Slides part 2](https://mjfrigaard.github.io/odsc-east-ggplot2-2022/ggplot2-slides-02.html#1) \n<hr>\n\n* **Book:** The `ggplot2` graph gallery is also availabe as [a `quarto` book](https://mjfrigaard.github.io/fm-ggp2/) (with slightly more details and graphs)   \n\nEach project is managed using a `_quarto.yml` configuration file (the ODSC west website/slides is listed below):\n\n::: {style=\"font-size: 0.70em;\"}\n```yml\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"ODSC-ggplot2-west\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: about.qmd\n        text: About\n    right:\n      - href: slides/slides.qmd\n        text: Slides\n      - icon: github\n        href: https://github.com/mjfrigaard/odsc-west-ggplot2-2022\n      - icon: twitter\n        href: https://twitter.com/mjfrigaard\n\nformat:\n  html:\n    theme:\n      dark: [cyborg, styles.scss]\n      light: [minty, styles-dark.scss]\n    css: styles.css\n    toc: true\n```\n:::\n\nAs you can see, the `_quarto.yml` defines the type of the project (`type:`, `project:`), sets the location of the output files (`output-dir:`), outlines the sections of the website (`title:`, `navbar:`), and sets some of the target document format options (`theme:`, `css:`, `toc:`).\n\n## In closing\n\nI'm still learning `quarto`, so I'm just scrathing the surface of it's abilities. However, I was able to spin up this website following the documentation in about an hour, so I'm definitely going to stick with it (early wins are important!)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}