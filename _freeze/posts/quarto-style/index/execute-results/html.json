{
  "hash": "23ad31f8ddb73da04988da8d65fde256",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quarto Shiny Apps in R Packages\" \nsubtitle: \"modules, launching and deployment\"\nauthor: \"Martin Frigaard\"\ndate: \"2024-11-06\"\ncategories: [quarto, shiny, scss]\nimage: \"img/quarto.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\ndraft: true\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n\n---\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Important!]{style='font-weight: bold; font-size: 1.10em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\nThis is currently under development. Thank you for your patience.\n\n::: \n\n::::\n\n\n\nThis post was prompted by a new chapter I've been working on for Shiny App-Packages. I've recently been building a Shiny application in a Quarto document[^quarto-interactivity], and noticed quite a few deviations from the standard app-package practices that deserve some attention. I'll cover how to include modules *inside* a Quarto document, creating a standalone function to launch your Quarto + Shiny app, and how to deploy a Quarto + Shiny dashboard from an app-package.\n\n[^quarto-interactivity]: Shiny is covered in the [Interactivity section](https://quarto.org/docs/interactive/shiny/) of the Quarto documentation. \n\n## Reactivity \n\nQuarto documents can be converted into Shiny's apps using the `server` option in the YAML header:\n\n\n```yaml\n---\ntitle: \"Movies App\"\nformat: html\nserver: shiny\n---\n```\n\nTo differentiate the server (back-end) code from user inputs and outputs, add the `context: server` option: \n\n\n\n````{.default}\n```{r}\n#| context: server\n```\n````\n\n\n\n\n### Modules \n\nIf you're developing a Quarto + Shiny application using modules (and you should be[^shiny-mods-1] [^shiny-mods-2]), the module functions can be placed in the code blocks like regular Shiny code:\n\n\n\n[^shiny-mods-1]: See the [Modularizing Shiny app code](https://shiny.posit.co/r/articles/improve/modules/) in the Shiny documentation.\n\n[^shiny-mods-2]: See the [Shiny modules chapter](https://mastering-shiny.org/scaling-modules.html) of Mastering Shiny.\n\n\n\n## Dashboards\n\nDashboard layouts are covered extensively in the Quarto documentation[^quarto-dashs] and elsewhere[^youtube], and I've included example layouts in the [code repo](https://github.com/mjfrigaard/quarto-dash-r). Key things to remember about Quarto dashboard layouts:\n\n1. Dashboard layouts are configured using a combination of YAML fields and markdown headings. By default, the `orientation` field is set to `rows`, but multiple code chunks will add new columns:\n    \n    ```yml\n    format: \n      dashboard:\n        orientation: columns\n    ```\n    \n2. Level 1 headers create pages (with titles)\n\n    ```markdown\n    # Page 1\n    ```\n\n3. Level 2 and 3 headers create columns and rows (with height and width options)\n\n    ```markdown\n    ## Row {height=20%}\n\n    ### Column {width=35%}\n    ```\n\n4. Tabsets can be created `{.tabset}`:\n\n    ```markdown\n    ### Column {.tabset}\n    ```\n\n5. Inside the columns and rows, cards provide a flexible, grid-based structure for presenting different types of content. Cards are automatically created with text or a code chunk, and they can be labeled with a `title`. Cards can also be included using `{.card}` inside a div (`:::`):\n\n    ```markdown\n    #| title: Cost per week\n    ```\n\n    ```markdown\n    ::: {.card title=\"Cost per week\"}\n\n    :::\n    ```\n\n6. To customize the navigation bar in a Quarto dashboard, we can incorporate elements such as a `logo` and `nav-buttons`.\n\n    ```yml\n    format:\n      dashboard:\n        nav-buttons:\n          - text: About\n            href: https://quarto.org/\n          - icon: github\n            href: https://github.com/mjfrigaard/quarto-dash-r\n          - icon: wikipedia\n            target: _blank\n            href: https://en.wikipedia.org/wiki/RStudio#Reproducible_analyses_with_vignettes\n    ```\n    \n<!-- {{< include _navbar.qmd >}} -->\n\n::: {.column-margin}\n\nView various layouts in the [GitHub repository.](https://github.com/mjfrigaard/quarto-dash-r) for this post.\n\n:::\n\nBelow is an example dashboard layout with most of the features mentioned above. Note that the standard code chunk options are also available (i.e., code echo/folding):\n\n![Quarto layout options page 1 (click to enlarge)](img/layout_p1.png)\n\n![Quarto layout options page 2 (click to enlarge)](img/layout_p2.png)\n\nView the code used for the layout above (and others[^layouts]) in the GitHub repository.\n\n[^layouts]: The [`.qmd` files ending in `layout`](https://github.com/search?q=repo%3Amjfrigaard%2Fquarto-dash-r+path%3A%22layout.qmd%22&type=code) are examples of various dashboard layouts.  \n\n## Styling\n\nWhen building a Quarto dashboard, SCSS (Sassy CSS) can be a powerful tool for customizing its appearance. Unlike standard CSS, SCSS introduces features like variables, nesting, and mixins, which help keep the code organized and modular. These features can be particularly useful in a Quarto dashboards, where we might want complex styling requirements.\n\n### SCSS\n\nSCSS is a syntax of [SASS (Syntactically Awesome Style Sheets)](https://en.wikipedia.org/wiki/Sass_(style_sheet_language)), which extends [CSS (Cascading Style Sheets)](https://en.wikipedia.org/wiki/CSS).\n\n#### Display options\n\nWe'll start by covering how to style our Quarto dashboard the HTML document/website layout options. Let's assume we want to change the width of our dashboard to be fixed (similar to Streamlit apps[^streamlit-width]). \n\nWe'll start with a \n\nWe can adjust column and row width *within* the dashboard, but I wanted the overall width to be fixed. \n\n[^streamlit-width]: The width of Streamlit apps can be adjusted with the [`st.set_page_config(layout=\"wide\")` option](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#placeholders-help-and-options). Read more [here.](https://discuss.streamlit.io/t/how-to-increase-the-width-of-web-page/7697/4)\n\n#### External SCSS file\n\nwith an external `.scss` file. Having a dedicated `.scss` file keeps styles organized and separated from content, improving readability and maintainability. \n\n\n\n### Custom elements\n\n```html\n<button style=\"background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px;\">\n  Click Me\n</button>\n```\n\n\n\n## Deploying\n\n### Launching\n\n## Recap\n\n[^quarto-dashs]: [Quarto dashboards.](https://quarto.org/docs/dashboards/)\n\n[^youtube]: Mine Ã‡etinkaya-Rundel has an excellent three part tutorial on Posit's YouTube channel ([part 1](https://youtu.be/HW7QbqI4fH0?si=WuBui8y9uRjOVQzD), [part 2](https://www.youtube.com/watch?v=KdsQgwaY950), [part 3](https://www.youtube.com/watch?v=NigWSB-jG4Y&t=112s)).\n\n\nhttps://www.w3schools.com/sass/sass_intro.asp\n\nhttps://icons.getbootstrap.com/",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}