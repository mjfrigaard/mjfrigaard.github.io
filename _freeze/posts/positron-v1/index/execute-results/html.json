{
  "hash": "0e9579a3d77915bc1d74b7231f3714ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Positron\" \nsubtitle: \"Initial thoughts on Shiny App/R Package Development\"\nauthor: \"Martin Frigaard\"\ndate: \"2024-10-14\"\ncategories: [R, quarto, Shiny]\nimage: \"img/image.png\"\ndraft: false\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\nengine: knitr\nfreeze: true\ncallout-appearance: simple\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n\n\n::: {.column-margin}\n![](img/image.png){width=70%}\n:::\n\nI’ve been trying out Posit’s new Positron IDE for a few weeks, so I put together a post covering my initial impressions of developing Shiny apps and R packages.\n\n## Why switch?\n\nI use RStudio daily for R development and have no complaints about the IDE's capabilities. However, I've recently started using VS Code for Python and JavaScript. When I heard about Positron, I wondered if it would offer enough overlapping features to allow me to use a single IDE for all three languages.\n\nPositron was covered [at posit::conf(2024)](https://youtu.be/8uRcB34Hhsw?si=kVUQOjxNfaZjavLe), and the [Getting Started](https://positron.posit.co/start.html#is-positron-for-me) article on the new website lists reasons you might (or might not) want to switch IDEs. I’ve summarized them below:\n\n:::{layout=\"[50,50]\" layout-valign=\"top\"}\n\n### Switch\n\n- [ ] You use VS Code or JupyterLab for data science but want more features.\n\n- [x] You want more customization in RStudio. \n\n- [x] You program in languages other than R/Python.\n\n### Don't switch\n\n- [ ] You need reliable and fully functioning software (Positron is still a work-in-progress, so some features may not be stable or polished).\n\n- [ ] You need all RStudio's features (i.e., inline output for Quarto and R Markdown, Sweave, Add-In support, profiling, etc.). Not all these features are implemented in Positron.\n\n:::\n\n<!-- https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/ -->\n\n\n\n\n:::: {.callout-tip collapse='true' appearance='default' icon=false}\n\n## [Download and Install Positron]{style='font-weight: bold; font-size: 1.20em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\nPositron now has [a website](https://positron.posit.co) with much of the information below (without the screenshots).\n  \nPositron can be downloaded from it's [GitHub repository](https://github.com/posit-dev/positron). I'm running it on my MacBook (2019, 2.6 GHz 6-Core Intel Core i7, macOS Sonoma Version 14.5), so this involved downloading the .dmg file from the [releases page](https://github.com/posit-dev/positron/releases) and installing it like I would any new application.[^positron-version]\n  \n[^positron-version]: I'm using version [2024.07.0-107](https://github.com/posit-dev/positron/releases/tag/2024.07.0-107)\n\n\n::: \n\n::::\n\n\n\n## IDE Layout\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [NOTE]{style='font-weight: bold; font-size: 1.20em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\nThroughout this post, I'll make the assumption the reader hasn't spent much time in VS Code (if you have, Positron will be easier to navigate and use).\n\n::: \n\n::::\n\n\n\n\n<!-- https://open-vsx.org/extension/grrrck/positron-plus-1-e -->\n\nAt first glance, Positron looks like VS Code, but with the four panes we're used to seeing in RStudio. The default layout includes a [Welcome]{style=\"color: #990000; font-weight: bold;\"} pane with options for opening files and folders above the [Panel]{style=\"color: #990000; font-weight: bold;\"}, which displays the current version of R running:  \n\n[^variables]: The **Variables** pane is similar to the **Environments** pane in RStudio.\n\n:::: {.column-page-inset-right}\n\n::: {layout=\"[50,50]\"}\n\n![Welcome page](img/positron_welcome.png){fig-align=\"center\" width=\"100%\"}\n\n![Console](img/positron_console.png){fig-align=\"center\" width=\"100%\"}\n\n:::\n\n::::\n\nThe [Panel]{style=\"color: #990000; font-weight: bold;\"} is similar to the **Console** in RStudio but also includes tabs for Terminal, Problems, Output, etc.\n\n:::{layout=\"[50,50]\" layout-valign=\"top\"}\n\n![Positron's panel (click to enlarge)](img/positron_panel.png){fig-align=\"center\" width=\"100%\"}\n\n![RStudio's console (click to enlarge)](img/rstudio_console.png){fig-align=\"center\" width=\"100%\"}\n\n:::\n\nThe [Session]{style=\"color: #990000; font-weight: bold;\"} and [Variables]{style=\"color: #990000; font-weight: bold;\"}[^variables]  panes are open and initially empty, but we can see this where our [Plots]{style=\"color: #990000; font-weight: bold;\"} will be displayed.\n\n::: {.column-page-inset-right}\n\n![Session and Variables (click to enlarge)](img/positron_session_vars.png){fig-align=\"center\" width=\"80%\"}\n\n:::\n\n### Layout options\n\nTo customize Positron's panes, we can use the layout presets icon (in the upper-right corner of the IDE). \n\n:::{.column-margin}\n\n![Layout presets icon ](img/layout_presets.png){fig-align=\"left\" width=\"70%\"}\n\n:::\n\n![Layout outptions (click to enlarge)](img/customize_layout.png){fig-align=\"center\" width=\"90%\"}\n\n\nOr we can position each pane manually via **View** >  **Appearance** > **Panel Position** ...\n\n![Positron's view options (click to enlarge)](img/view_appearance_options.png){fig-align=\"center\" width=\"90%\"}\n\nWe'll continue using the default  '*Stacked Layout*' configuration in this post, but I recommend exploring the other options to find a customization that fits your needs.  \n\n### R & Python versions\n\nI had R ([R 4.4.1]{style=\"color: #990000; font-weight: bold;\"}) and Python (3.11.5) previously installed, and Positron quickly located both R and Python versions (and displays them in multiple places in the IDE): \n\n::: {.column-page-inset-right}\n\n![R versions (click to enlarge)](img/r-version.png){fig-align=\"center\" width=\"90%\"}\n\n:::\n\nFor more information on detecting Python and R versions, see the [Interpreter Selection](https://positron.posit.co/interpreters.html) section of the documentation. \n\n### R Dependencies \n\nPositron's documentation recommends installing the following packages:[^pkg-depends]\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npak::pak(c(\"usethis\", \"cli\", \"crayon\", \n           \"rlang\", \"roxygen2\", \"pkgload\"))\n```\n:::\n\n\n\n[^pkg-depends]: These packages are described in the [R prerequisites section](https://positron.posit.co/start.html#r-prerequisites).\n\n### Files, Folders and Projects\n\nI use the [folder icon]{style=\"color: #990000; font-weight: bold;\"} in the upper right corner of the IDE to locate and open project folders. Still, Positron has multiple options for opening project folders from the [welcome page]{style=\"color: #990000; font-weight: bold;\"} and with the [explorer]{style=\"color: #990000; font-weight: bold;\"} sidebar menu item:\n\n\n::: {.column-page-inset-right}\n\n![Open folder (click to enlarge)](img/open_folder.png){fig-align=\"center\" width=\"90%\"}\n\n:::\n\nI'll be using my [`sap`](https://github.com/mjfrigaard/sap) repository because it contains the following:\n\n1. Version control   \n2. An R project (i.e., with an `.Rproj` file)   \n3. A Shiny app   \n4. An R package[^movies-app]  \n\n[^movies-app]: [`sap`](https://github.com/mjfrigaard/sap) is the Shiny app-package I used to demonstrate development in my [Shiny-App-Packages](https://mjfrigaard.github.io/shiny-app-pkgs/) book. \n\n### Activity bar \n\nOne of Positron's major distinguishing factors is its activity bar. This sidebar lets us open and edit files, perform searches, access source control (like Git), and find/install extensions.\n\n![Positron Layout (click to enlarge)](img/positron-wireframe.png){width=\"100%\" fig-align=\"center\"}\n\nI’ll briefly cover a few of Positron’s sidebar menu items in the sections below.\n\n#### Explorer \n\n:::: {layout=\"[-2, 8, 90]\"}\n\n![](img/explorer.png)\n\nAs noted above, the [Explorer]{style=\"color: #990000; font-weight: bold;\"} menu item can open project files and folders.\n\n::::\n\nThis closely resembles the **Files** pane in RStudio. \n\n::: {layout=\"[50,50]\"}\n\n![Shiny app files (click to enlarge)](img/files.png){width=\"100%\" fig-align=\"center\"}\n\n![RStudio Files Pane (click to enlarge)](img/rs_files.png){width=\"100%\" fig-align=\"center\"}\n\n:::\n\nClicking on files in the [Explorer]{style=\"color: #990000; font-weight: bold;\"} will open them in the [Editor]{style=\"color: #990000; font-weight: bold;\"}. After opening files, the cursor location will also display additional information on hover (i.e., version control information):\n\n![Hover information in Editor (click to enlarge)](img/editor_hover_info.png)\n\n#### Search\n\n:::: {layout=\"[-2, 8, 90]\"}\n\n![](img/search.png){fig-align=\"right\"}\n\nThe [Search]{style=\"color: #990000; font-weight: bold;\"} menu item allows us to find and replace across all files.\n\n::::\n\nSimilar to the **Find in Files** (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd>) window in RStudio.\n\n::: {layout=\"[50,50]\"}\n\n![Search and replace (click to enlarge)](img/search_replace.png){width=\"100%\" fig-align=\"center\"}\n\n\n![RStudio 'Find in Files' (click to enlarge)](img/rs_find_in_files.png){width=\"100%\" fig-align=\"center\"}\n\n:::\n\n#### Source Control\n\n:::: {layout=\"[-2, 8, 90]\"}\n\n![](img/source_control.png){fig-align=\"right\"}\n\nThe [Source Control]{style=\"color: #990000; font-weight: bold;\"} menu can open local Git folders and clone repositories. \n\n::::\n\nWhen in a Git repo, it displays Git commits, branches, remotes, stashes, tags, work trees, and contributors (similar to the **Git pane** in RStudio).\n\n::: {layout=\"[40,60]\"}\n\n![Source control menu (click to enlarge)](img/initial_source_control.png){width=\"100%\" fig-align=\"center\"}\n\n\n![RStudio Git Pane (click to enlarge)](img/rs_git_pane.png){width=\"100%\" fig-align=\"center\"}\n\n:::\n\nIn RStudio, I still use the Terminal for ~90% of my interactions with Git, but Positron also comes with a [Source Control]{style=\"color: #990000; font-weight: bold;\"} menu.[^non-pkg-app]\n\n[^non-pkg-app]: I'm using a branch from [`sap`](https://github.com/mjfrigaard/sap/), which is a collection of Shiny apps/R packages. \n\n![Checking out Git branch with [Source Control]{style='color: #990000; font-weight: bold;'} (click to enlarge)](img/source_control_branch.png){width='100%' fig-align=\"center\"}\n\n#### Extensions\n\n:::: {layout=\"[-2, 8, 90]\"}\n\n![](img/extensions.png){fig-align=\"right\"}\n\nWe can install Positron extensions from the **Extensions** menu item. \n\n::::\n\nPositron’s extensions are somewhat similar to RStudio Addins but with a few key differences:\n\n1. Positron extensions enhance the IDE's capabilities by interacting with the VS Code API. They can range from language support (e.g., R, Python) to tools and features for general coding tasks (debugging, version control, syntax highlighting, code snippets, etc.)\n\n2. [RStudio Addins](https://rstudio.github.io/rstudio-extensions/rstudio_addins.html) are custom tools and features to extend IDE’s functionality, focusing on R-specific tasks (package development, customizing visualizations, R markdown document generation, etc.)\n\n::: {layout=\"[50,50]\"}\n\n![Positron Extensions via Positron +1e (click to enlarge)](img/posit_publisher_ext.png){width=\"100%\" fig-align=\"center\"}\n\n\n![RStudio Addins (click to enlarge)](img/rs_addins.png){width=\"100%\" fig-align=\"center\"}\n\n:::\n\nAt a minimum, be sure to install the [Posit Publisher extension](https://open-vsx.org/extension/posit/publisher). I've also installed [Positron +1e](https://open-vsx.org/extension/grrrck/positron-plus-1-e), a collection of extensions curated by Garrick Aden-Buie[^garrick] for '*git-backed data science and dev work shared primarily on GitHub*'. \n\n[^garrick]: Read more on [Garrick's blog](https://www.garrickadenbuie.com/)\n\n\n\n\n:::: {.callout-tip collapse='true' appearance='default' icon=false}\n\n## [Positron Extensions]{style='font-weight: bold; font-size: 1.20em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\n\nExtensions can be installed from [VS Code Marketplace](https://marketplace.visualstudio.com/) or the [Open VXS Registry](https://open-vsx.org/). VS Code Marketplace is maintained by Microsoft, ensuring high-quality and secure extensions, whereas the Open VXS Registry is an open-source alternative for those looking to avoid vendor lock-in.[^eclipse] Most extensions on Open VXS Registry are identical to those found on the VS Code marketplace, but with a focus on open-source principles.\n\nFor more Positron extensions, I recommend checking out [this post](https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/#my-extensions) from Andrew Heiss[^andrew] and [this LinkedIn post](https://www.linkedin.com/posts/veerlevanleemput_positron-r-rstats-activity-7221481394013642752-60Pg?utm_source=share&utm_medium=member_desktop) from Veerle van Leemput.[^veerle]\n\n::: \n\n::::\n\n\n\n[^eclipse]: The Open VXS Registry is manages by the [Eclipse Foundation](https://www.eclipse.org/).\n\n[^andrew]: Read more on [Andrew's blog](https://www.andrewheiss.com/blog/) \n\n[^veerle]: Read more on [Veerle's blog](https://hypebright.nl/index.php/home/blog/) \n\n## Shiny Apps\n\nI've checked out a branch of `sap` that's in the early stages of development, so it's a Shiny app (and not an R package yet).[^app-pkg] The image below highlights some of the IDE's features after opening the [app.R file]{style=\"color: #990000; font-weight: bold;\"}: \n\n[^app-pkg]: I'm demoing the [`02.1_shiny-app`](https://github.com/mjfrigaard/moviesApp/tree/02.1_shiny-app), which is a boilerplate Shiny app project with the Old Faithful Geyser data.  \n\n![Open `app.R` file (click to enlarge)](img/shiny_app_files.png){fig-align=\"center\" width=\"90%\"}\n\n::: {.column-margin}\n\nPositron displays the [current folder]{style=\"color: #990000; font-weight: bold;\"} (or project) in a familiar location, and the active [Git branch]{style=\"color: #990000; font-weight: bold;\"} and [Quarto version]{style=\"color: #990000; font-weight: bold;\"} are conveniently placed in the footer.  \n\n:::\n\nAs we can see from the image above, Positron displays much of the same information as the RStudio IDE but with a VS Code*ish* layout. The most notable change I had to adapt to was the new location of the [project files]{style=\"color: #990000; font-weight: bold;\"} in the file [Explorer]{style=\"color: #990000; font-weight: bold;\"}.\n\n### Running Applications\n\nPositron detects that I’m developing a Shiny application and places a [Run Shiny App]{style=\"color: #990000; font-weight: bold;\"} icon at the top of the `app.R` file. Clicking the [Run Shiny App]{style=\"color: #990000; font-weight: bold;\"} button launches our application in the [Viewer]{style=\"color: #990000; font-weight: bold;\"} pane. \n\n![Terminal runs the Shiny app (click to enlarge)](img/shiny_runs_in_terminal.png){fig-align=\"center\" width=\"100%\"}\n\n\n:::{.column-margin}\n\n![](img/shiny_terminal.png){width='50%' fig-align=\"center\"}\n\nUnlike RStudio, Positron runs Shiny applications from the [Terminal]{style=\"color: #990000; font-weight: bold;\"} with a dedicated Shiny process when the [Run Shiny App]{style=\"color: #990000; font-weight: bold;\"} button is clicked.\n\n:::\n\nIn the [Terminal]{style=\"color: #990000; font-weight: bold;\"}, a message tells us that `autoreload` has been turned on (which means we can make live updates to our application):\n\n::: {.column-page-inset-right}\n\n![Live updates to Shiny app](img/app_refresh.gif){fig-align=\"center\" width=\"100%\"}\n\n:::\n\nWe’re also told that the application runs with the ‘minified’ JavaScript file (`shiny.min.js`), which results in using `--devmode`. Both of these options are covered in the [Shiny documentation](https://shiny.posit.co/r/reference/shiny/0.13.1/shiny-options.html).\n\n\n\n\n:::: {.callout-tip collapse='true' appearance='default' icon=false}\n\n## [Run Shiny App Terminal Commands]{style='font-weight: bold; font-size: 1.20em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\n\nI've broken down the Shiny terminal commands below: \n\nThe first commands specifies the `Rscript` interpreter, the scripting front-end for R. `Rscript` allows the execution of R scripts directly from the command line.\n\n```sh\n# Rscript interpreter \n$/usr/local/bin/Rscript \n```\n\nThe next command is the path to an R script that comes with your Positron installation for running Shiny applications. \n\n```sh\n# runShinyApp.R Positron Shiny extension  \n$/Users/username/.positron/extensions/posit.shiny-1.0.0-universal/rscripts/runShinyApp.R \n```\n\nYou can view the contents of `runShinyApp.R` by passing the path into another Terminal window preceded by `cat`.\n\nThe final Terminal command is the path to the `moviesApp` Shiny application's main `app.R` script (with two additional arguments):\n\n```sh\n# moviesApp app.R file\n/Users/username/projects/apps/R/moviesApp/app.R 51146 --devmode \n```\n\n-   `51146` specifies the port on which the Shiny application will run.\n\n-  `--devmode` enables development mode for the Shiny application.[^devmode]\n\n[^devmode]: Read more about Shiny development mode [here.](https://shiny.posit.co/r/reference/shiny/latest/devmode.html)\n\n::: \n\n::::\n\n\n\n### Stopping Applications\n\nWe can stop the application like we would any other [Terminal]{style=\"color: #990000; font-weight: bold;\"} process:\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n:::\n\n::: {.column width=\"20%\"}\n\n[<kbd>Ctrl</kbd> + <kbd>C</kbd>]{style=\"font-size: 1.20em; font-weight: bold;\"}\n\n:::\n\n::: {.column width=\"40%\"}\n\n:::\n\n::::\n\nAfter stopping the application, you can clear the [Viewer]{style=\"color: #990000; font-weight: bold;\"} by clicking on the [Clear the current URL]{style=\"color: #990000; font-weight: bold;\"} icon in the upper-right corner.\n\n![Clear viewer (click to enlarge)](img/clear_current_url.png){width='100%' fig-align=\"center\"}\n\nThese changes make application development much more seamless, and now the `app.R` file also includes icon for editing our Shiny UI with the [`shinyuieditor` package](https://rstudio.github.io/shinyuieditor/) (provided it's installed).\n\n![Run Shiny App Options](img/run_shiny_app_options.png){fig-align=\"center\" width=\"90%\"}\n\n## Package Development\n\nTransitioning from developing R packages in RStudio to Positron has been pretty smooth. For example, I wanted to change the [`display_type()`](https://mjfrigaard.github.io/shiny-app-pkgs/launch.html#shiny.launch.browser) function to check if the application runs in RStudio before setting the `shiny.launch.browser` option.[^launch-app-pkg]\n\n[^launch-app-pkg]: This is covered in the  [`08_launch-app`](https://github.com/mjfrigaard/sap/tree/08_launch-app) branch of `moviesApp`, which is covered in the [Launch](https://mjfrigaard.github.io/shiny-app-pkgs/launch.html) chapter of Shiny-App-Packages. \n\n\n\n\n\n:::: {.callout-tip collapse='true' appearance='default' icon=false}\n\n## [Positron tab-completion]{style='font-weight: bold; font-size: 1.20em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\nPositron also comes with IntelliSense for R functions.  Place your cursor inside the parentheses and use <kbd>^</kbd>+<kbd>SPACE</kbd> or <kbd>tab</kbd>:\n\n![Positron function IntelliSense](img/fun_intel.gif){width='100%' fig-align='center'}\n\n\n::: \n\n::::\n\n\n\n### Loading & Documenting\n\nAfter making changes to `R/display_type.R`, I can use the same keyboard shortcuts from `devtools` to load and document the package:\n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"80%\"}\n\n[<kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> =  `devtools::load_all()`]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::::\n\n:::: {.columns}\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"80%\"}\n\n[<kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd> = `devtools::document()`]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::::\n\n<br>\n\nUnder the hood, Positron calls [`devtools::load_all()`](https://r-pkgs.org/code.html#sec-code-load-all) and [`devtools::document()`](https://r-pkgs.org/man.html), but instead of launching a **Build** pane, Positron displays the messages from  in the [Console]{style=\"color: #990000; font-weight: bold;\"}:\n\n![Document R/display_type.R (click to enlarge)](img/devtools_document.png){width='80%' fig-align=\"center\"}\n\nThe [display_type.Rd]{style=\"color: #990000; font-weight: bold;\"} in the [Console]{style=\"color: #990000; font-weight: bold;\"} is a hyperlink we can use to preview our updated help file.\n\n::: {.column-page-inset-right}\n\n![Preview help file for R/display_type.R (click to enlarge)](img/preview_rd_file.gif){width='100%' fig-align=\"center\"}\n\n:::\n\n### Installing\n\nPositron uses the same keyboard shortcut as RStudio for installing packages, but the underlying process differs slightly. Instead of calling [`devtools::install()`](https://devtools.r-lib.org/reference/install.html) in the *Build* pane, Positron launches the [Terminal]{style=\"color: #990000; font-weight: bold;\"} and runs `pak::local_install(upgrade = FALSE)`:\n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"1%\"}\n\n:::\n\n::: {.column width=\"98%\"}\n\n[<kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd> = `pak::local_install(upgrade = FALSE)`]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\n:::\n\n::: {.column width=\"1%\"}\n\n:::\n\n::::\n\n<br>\n\n![The new package install Terminal commands are bookended with an asterick (`*`) and a message (click to enlarge)](img/terminal_install.png){width='100%' fig-align=\"center\"}\n\n:::{.column-margin}\n\n![](img/install_r_pkg_task.png){width='100%' fig-align=\"center\"}\n\nThe [Terminal]{style=\"color: #990000; font-weight: bold;\"} pane displays a dedicated Install R package task when a package is installed.\n\n:::\n\n[`local_install(upgrade = FALSE)`](https://pak.r-lib.org/reference/local_install.html) updates the package with the minimum work needed, upgrading dependencies only if the package or one of its dependencies requires a higher version. It prefers binary packages to source packages, even if the binaries are older.\n\n`local_install()` also seems to takes a bit longer to run than `devtools::install()`, but the end result is the same (i.e., the package is installed, the R session restarts, and the package is loaded with `library()` in the [Console]{style=\"color: #990000; font-weight: bold;\"}).\n\n\n\n\n:::: {.callout-tip collapse='true' appearance='default' icon=false}\n\n## [IntelliSense]{style='font-weight: bold; font-size: 1.20em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\n\n\n<br>\n\nIn the [Console]{style='color: #990000; font-weight: bold;'}, Positron's tab completion and IntelliSense displays a large preview each function's help file:\n\n![Preview of help file with IntelliSense](img/launch_app_intel.gif){width='100%' fig-align='center'}\n\n::: \n\n::::\n\n\n\n### Testing\n\nPositron comes with a variety of options for testing code. We can use the standard keyboard shortcut to call `devtools::test()`. This will open a [Terminal]{style=\"color: #990000; font-weight: bold;\"} task with the test results:[^test-app-pkg]\n\n[^test-app-pkg]: I'm demonstrating with the [`12.3_tests-snapshots`](https://github.com/mjfrigaard/sap/tree/12.3_tests-snapshots) branch of `sap`, which is covered in the [Test Tools](https://mjfrigaard.github.io/shiny-app-pkgs/test_tools.html) chapter of Shiny-App-Packages. \n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"80%\"}\n\n[<kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd> = `devtools::test()`]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::::\n\n<br>\n\n![Running `devtools::test()` (click to enlarge)](img/run_devtools_test.gif){width=\"100%\" fig-align=\"center\"}\n\n:::: {layout=\"[8, 92]\"}\n\n![](img/testing.png){width=\"100%\" fig-align=\"left\"}\n\nPositron also has a dedicated [testing]{style=\"color: #990000; font-weight: bold;\"} sidebar menu item that allows us to select or filter the test files in the `tests/testthat/` folder.\n\n::::\n\n![Test files in `tests/testthat/` (click to enlarge)](img/test_files.png){width=\"80%\" fig-align=\"center\"}\n\nThe [testing]{style=\"color: #990000; font-weight: bold;\"} sidebar menu also displays the contents of each test file. If you're using `testthat`'s behavior-driven development functions (`describe` and `it`), the descriptions are organized hierarchically under [TESTING]{style=\"color: #990000; font-weight: bold;\"}: \n\n![BDD test descriptions (click to enlarge)](img/bdd_funs_display.png){width=\"100%\" fig-align=\"center\"}\n\nIf `test_that()` is used, the function being tested is displayed each time an `expect_*` function is called: \n\n![`test_that()` test descriptions (click to enlarge)](img/test_that_funs_display.png){width=\"80%\" fig-align=\"center\"}\n\n### Running tests\n\nThe ![](img/run_tests_icon.png){width=80} icon under the [TESTING]{style=\"color: #990000; font-weight: bold;\"} sidebar menu item can also be used to run all the tests in the `testthat` folder. \n\n![Running tests with icon (click to enlarge)](img/running_tests_icon.gif){width=\"100%\" fig-align=\"center\"}\n\n\n\n\n\n:::: {.callout-tip collapse='true' appearance='default' icon=false}\n\n## [Package Development Keyboard Shortcuts]{style='font-weight: bold; font-size: 1.20em;'}\n\n::: {style='font-size: 1.10em; color: #282b2d;'}\n\n\n\n\nTwo additional shortcuts I recommend adding are:\n<br><br>\n<kbd>Cmd</kbd> / <kbd>Ctrl</kbd>  + <kbd>T</kbd> = `devtools::test_active_file()` \n<br><br>\n<kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd> = `devtools::test_coverage_active_file()`\n<br><br>\n\nCheck out Andrew Heiss' [Positron post](https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/) for more information on changing keyboard shortcuts\n\n::: \n\n::::\n\n\n\n\n## Recap\n\nPositron brings a refined experience for RStudio users, blending powerful tools in a streamlined layout that promotes an efficient workflow. Here’s a recap of the features we've explored:\n\n* **IDE Layout**: Positron’s design ensures smooth navigation. It focuses on customizable panels that allow developers to arrange code editors, data viewers, and debugging consoles based on their workflow. \n\n* **Support for R & Python**: The IDE accommodates multiple versions of R and Python, offering a consistent environment for both languages. Integrated version control helps manage and switch between environments seamlessly, making it ideal for teams working on cross-language projects.\n\n* **Shiny App Development**: Positron provides robust tools for developers to build, test, and deploy Shiny applications. The IDE simplifies UI-building with live previews and reactive programming support, enabling users to refine interactive components.\n\n* **Package Development**: Positron includes a comprehensive suite for R package development, with features that streamline code documentation, testing, and version management. These tools make it easier to follow best practices, ensuring well-organized, maintainable packages.\n\nPositron can enhance productivity for R and Python users, making it a strong choice for data science and development.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}