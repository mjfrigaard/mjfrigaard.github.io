{
  "hash": "da483fbeafcf95548a4cd94453883b48",
  "result": {
    "markdown": "---\ntitle: \"Testing Shiny module server functions\" \nsubtitle: \"Part 3: Using testthat and testServer()\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-06-20\"\ncategories: [shiny, testing]\nimage: \"image.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n\n\n\nThis is the third post in a [series on testing](https://mjfrigaard.github.io/series.html) shiny applications. I'll cover testing shiny module server functions using the [`testhat` package](https://testthat.r-lib.org/) and shiny's [`testServer()` function](https://shiny.rstudio.com/reference/shiny/1.7.0/testserver).\n\n\n\n\n\n## Testing shiny modules \n\n::: {.column-margin}\n![](shiny.png){width=40%}\n:::\n\nShiny functions pose a couple of unique challenges for testing. First, we can't execute shiny `server` functions in the console. Second, as shiny apps become more complex, it's [highly](https://engineering-shiny.org/structuring-project.html#using-shiny-modules) [recommended](https://mastering-shiny.org/scaling-modules.html#module-motivation) to break up the code base into [modules](https://shiny.posit.co/r/articles/improve/modules/index.html). Modules have additional challenges due to their reactivity being split between interconnected UI and server functions.\n\n`shiny` doesn't provide a direct, built-in way to test modules, but the [`testServer()`](https://shiny.posit.co/r/articles/improve/server-function-testing/) function addresses these challenges by testing \"*reactive interactions*\" in module server functions. `testServer()` also works with [`testthat`](https://testthat.r-lib.org/), which means we can structure these 'reactive interaction' tests just like other unit tests (for non-application functions).\n\n\n## Shiny app-package\n\n`testthat` is designed to work within an R package, so I've put together the [`mstsap`](https://mjfrigaard.github.io/mstsap/index.html), (i.e., a **M**astering **S**hiny **t**est**S**erver **a**pp-**p**ackage) to demonstrate writing tests with `testServer()`. The functions, modules, and applications in `mstsap` come from the [Shiny Modules chapter](https://mastering-shiny.org/scaling-modules.html) of Mastering Shiny. Specifically, sections [19.3](https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs) through [19.3.4](https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules). If you haven't read this chapter--start there. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# to get the mstsap package used in this post:\nrenv::install(\"mjfrigaard/mstsap\", prompt = FALSE)\nlibrary(mstsap)\n```\n:::\n---\ntitle-meta: \"Why create an app-package?\"\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n:::: {.callout-tip collapse='true' title=\"Why create an app-package?\"}\n\n::: {style='font-size: 1.10em;'}\nA shiny app-package is a shiny application that's been developed as (or converted to) an R package. The benefits of storing shiny apps in R packages have been [well](https://mastering-shiny.org/scaling-packaging.html) [documented](https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package), but I'll summarize just a few that are specific to testing: \n\n1. **Standardized folder structure**: \n    a. If unit tests are performed with `testthat`, minimal setup is required to perform tests.\n    b. `usethis::use_testthat()` sets up test files in the tests/testthat/ folder (to test the code in the R/ folder)    \n    c. *Read more about using `testthat` with R packages [here.](https://r-pkgs.org/testing-basics.html)*\n        \n2. **Test extras**:\n    a. Test data can be placed in `tests/testthat/<test dir>/<test_data.rds>`     \n    b. The code used to create the test data should be placed in `make_<test_data.rds>`   \n    c. Additional testing functions can be stored in `tests/testthat/helpers.R`    \n    d. *Read more about test helpers [here.](https://r-pkgs.org/testing-design.html#testthat-helper-files)*\n    \n3. **Development tools**: \n    a. If you're using RStudio, tests can be run individually (`testthat::test_file()`) or collectively (`devtools::test()`), and code helpers and data are loaded using `devtools::load_all()`     \n    b. Tests created with `testthat` remain isolated during development    \n    c. *Read more about developing packages with RStudio in the [R Packages text.](https://r-pkgs.org/)*\n\n:::\n::::\n\n\n\n## Modules \n\nShiny modules are ['*a pair of UI and server functions*'](https://mastering-shiny.org/scaling-modules.html) designed to compartmentalize input and output IDs into distinct namespaces (\"*a namespace is to an ID as a directory is to a file*\"). \n\n\n::: {.cell}\n\n```\n█─shinyApp \n├─ui = █─fluidPage \n│      └─█─mod_ui \n│        └─id = \"X\" \n├─server = `function(input, output, session)` \n└─█─mod_server \n  └─id = \"X\" \n```\n:::\n\n\nIn [a previous post](https://mjfrigaard.github.io/posts/test-shiny-p1/#unit-tests), I used the following definition for unit tests,\n\n> \"*A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work.*\" - [The Art of Unit Testing, 2nd edition](https://www.manning.com/books/the-art-of-unit-testing-second-edition)\n\nModules can also be broken into discrete 'units of work' with expected 'end results.' However, the 'unit of work' for a shiny module is usually accomplished using a combination of three functions: a module UI function, a module server function, and any helper/utility functions.\n\n\n---\ntitle-meta: \"Shiny module refresher\"\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n:::: {.callout-tip collapse='true' title=\"Shiny module refresher\"}\n\nModule UI functions typically wrap the layout, input, and output functions in `tagList()`. Module server functions contain the 'backend' code that typically goes in a shiny `server` function. Both the UI and server module functions are linked by an `id` argument, which is created using `NS()` (namespace) in the UI function, and called in the server function with `moduleServer()`.\n\n### Module UI functions\n\nBelow is an example module UI function:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmod_fun_ui <- function(id) {\n  tagList(\n    numericInput(inputId = NS(namespace = id, id = \"num_input\")),\n    uiOutput(outputId = NS(namespace = id, id = \"num_out\"))\n  )\n}\n```\n:::\n\n-   `mod_fun_ui` creates a dedicated namespace for one `inputId` and one `outputId` with `shiny::NS()`:\n\n    ::: {.cell}\n    \n    ```\n    █─mod_fun_ui \n    ├─id \n    └─█─tagList \n      ├─█─numericInput \n      │ └─inputId = █─NS \n      │             ├─namespace = id \n      │             └─id = \"num_input\" \n      └─█─uiOutput \n        └─outputId = █─NS \n                     ├─namespace = id \n                     └─id = \"num_out\" \n    ```\n    :::\n    \n### Module server functions\n\nThe corresponding module server function is below:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmod_fun_server <- function(id) {\n        moduleServer(id, function(input, output, session) {\n            ns <- session\n          output$num_out <- uiOutput(outputId = input$num_input)\n      })\n}\n```\n:::\n\n-   The code to render the reactive `input$num_input` with `output$num_out` is contained in the nested call to `moduleServer()`\n\n    ::: {.cell}\n    \n    ```\n    █─mod_fun_server \n    ├─id \n    └─█─moduleServer \n      ├─id = id \n      ├─server = █─`function(input, output, session)` \n      │          ├─`ns <- session` \n      │          ├─`output$num_out <-` \n      │          └─█─renderUI \n      │            └─`input$num_input` \n      └─session = session \n    ```\n    :::\n\n### Using modules\n\nBoth module functions are combined in the `ui` and `server` arguments of  `shinyApp()`:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshinyApp(\n    ui = fluidPage(\n          mod_fun_ui(id = \"mod\")\n        ),\n   server = function(input, output, session) \n          mod_fun_server(\"mod\")\n  )\n```\n:::\n\n-   The `id` arguments connect the UI and server functions to communicate between the UI and backend of the app:\n\n    ::: {.cell}\n    \n    ```\n    █─shinyApp \n    ├─ui = █─fluidPage \n    │      └─█─mod_fun_ui \n    │        └─id = \"mod namespace\" \n    └─server = █─`function(input, output, session)` \n               └─█─mod_fun_server \n                 └─id = \"mod namespace\" \n    ```\n    :::\n\n\nI recommend creating test files when you create module files (i.e., with `usethis::use_r()` & `usethis::use_test()`).\n\n\n\n::::\n\n\n\n### Modules in `mstsap`\n\n`mstsap` contains three modules: `dataset`, `selectVar`, and `selectDataVar`. If you're like more information on a module, click on the links in the numbered list.  \n\n#### Dataset module\n\n1) [`datasetInput`](https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output)/[`datasetServer`](https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output): loads and returns data object from the `datasets` package (filtered by data frames or matrices) \n\n::: {#fig-dataset}\n\n![`dataset` module](dataset.png){#fig-dataset fig-align=\"center\" width=80%}\n\n`dataset` module \n:::\n\n-   The objects from `datasets` are filtered in the UI module function with a `filter` argument that can be used to *\"limit the options to built-in datasets that are either data frames (`filter = is.data.frame`) or matrices (`filter = is.matrix`)\"*. The `names` are passed to the `choices` in the `selectInput()`:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide choices in datasetInput()\"}\n    names <- ls(\"package:datasets\")\n      if (!is.null(filter)) {\n        data <- lapply(names, get, \"package:datasets\")\n        names <- names[vapply(data, filter, logical(1))]\n      }\n    ```\n    :::\n\n\n-   The `datasets` object is returned with `get()` (wrapped in `reactive()`). See below:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide returned data from datasetServer()\"}\n    shiny::reactive(\n          get(input$dataset, \"package:datasets\")\n        )\n    ```\n    :::\n\n\n\n#### selectVar module \n\n2) [`selectVarInput`](https://mastering-shiny.org/scaling-modules.html#case-study-selecting-a-numeric-variable)/[`selectVarServer`](https://mastering-shiny.org/scaling-modules.html#server-inputs): displays a `selectInput()` that \"*allows the user to select variables of specified type from a given reactive dataset.*\"\n\n::: {#fig-selectVar}\n\n![`selectVar` module](selectVar.png){#fig-selectVar fig-align=\"center\" width=80%}\n\n`selectVar` module \n:::\n\nThe `data` argument in `selectVarServer()` is the returned value from `datasetServer()`:\n\n-   `data()` is used with the `filter` argument in the `find_vars()` function:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"show/hide find_vars()\"}\n    find_vars <- function(data, filter) {\n     # I've included the updated version with the 'stopifnot()' checks!\n      stopifnot(is.data.frame(data))\n      stopifnot(is.function(filter))\n      names(data)[vapply(data, filter, logical(1))]\n    }\n    ```\n    :::\n\n    \n    -   The filter argument can be used to return variables by class/type (using `is.*` functions like `is.numeric()` or `is.character()`)\n\n-   When `data()` changes, the output from `find_vars()` updates the choices in the variable `selectInput()` (i.e., `input$var`) (see below)\n\n::: {#fig-selectVar_find_vars}\n\n![`selectVar` and `find_vars()`](selectVar_find_vars.png){#fig-selectVar_find_vars fig-align=\"center\" width=100%}\n\n`selectVar` module and `find_vars()` function\n:::\n\n-   `selectVarServer()` also returns the selected variable (`input$var`) as a reactive value (`var()`)\n\n#### selectDataVar module \n\n3) [`selectDataVarUI`](https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules)/[`selectDataVarServer`](https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules): The `selectDataVar` module is from the section titled, \"[*Modules inside of modules*](https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules)\", so here we see the `dataset` and `selectVar` modules placed *inside* the `selectDataVar` module (each with a new namespace (`NS()`)).\n\n::: {#fig-selectDataVar}\n\n![`selectDataVar` module](selectDataVar.png){#fig-selectDataVar fig-align=\"center\" width=80%}\n\n`selectDataVar` module \n:::\n\n---\ntitle-meta: \"Naming modules\"\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n\n:::: {.callout-tip collapse='true' title=\"Naming modules\"}\n\n::: {style='font-size: 1.15em; color: #063E23;'}\nWhen creating an app-packages, modules are stored in the `R/` folder as a single file, typically following a [naming convention](https://mastering-shiny.org/scaling-modules.html#naming-conventions) that differentiates modules from the other package functions. The modules in this post use [camelCase](https://en.wikipedia.org/wiki/Camel_case), with suffix variations (i.e., `Input`/`Server` and `UI`/`Server`) for each functions. Other options come from the [`golem`](https://thinkr-open.github.io/golem/) and [`leprechaun`](https://leprechaun.opifex.org/#/) packages. \n\n`golem` modules are created with  [`golem::add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) \n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"expand to see golem::add_module(\\\"inputs\\\")\"}\nmod_inputs_ui <- function(id){\n  ns <- NS(id)\n  tagList(\n  )\n}\nmod_inputs_server <- function(id){\n  moduleServer( id, function(input, output, session){\n    ns <- session$ns\n \n  })\n}\n## To be copied in the UI\n# mod_inputs_ui(\"inputs_1\")\n    \n## To be copied in the server\n# mod_inputs_server(\"inputs_1\")\n```\n:::\n\n::: {style='font-size: 1.15em; color: #063E23;'}\n\n`golem` modules the following naming convention: \n\n1. All new module functions have a `mod_` prefix \n\n2. `golem` module functions are differentiated with either a `_ui` or `_server` suffix\n\n3. New `golem` module files are named `R/mod_<name>.R`\n\n`leprechaun` modules are also created with a [`leprechaun::add_module()`](https://leprechaun.opifex.org/#/reference/add_module) function.\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"expand to see leprechaun::add_module(\\\"inputs\\\")\"}\ninputsUI <- function(id){\n\tns <- NS(id)\n\ttagList(\n\t\th2(\"inputs\")\n\t)\n}\ninputs_server <- function(id){\n  moduleServer(id, function(input, output, session) {\n\t\t\t\tns <- session$ns\n\t\t\t\tsend_message <- make_send_message(session)\n\t\t\t\t# your code here\n\t\t}\n\t)\n}\n# UI\n# inputsUI('id')\n\n# server\n# inputs_server('id')\n```\n:::\n\n::: {style='font-size: 1.15em; color: #063E23;'}\n\n`leprechaun` modules have a slightly different naming convention: \n\n1. All new UI module functions have a `UI` suffix\n\n2. All new module server functions have a `_server` suffix \n\n3. `leprechaun` module functions *do not have a prefix*\n\n4. New `leprechaun` modules named `module_<name>.R`\n\nShiny app-packages often require multiple modules and utility functions, so uniform names will make it easier to manage (and test!) your code.\n:::\n::::\n\n\n\n### Standalone app functions\n\n`mstsap` contains three [standalone functions](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) for running each set of module functions. \n\nI've made a small change to each standalone app function--each app has a call to `reactiveValuesToList()` that displays in the UI. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"print reactive values\"}\n  shiny::verbatimTextOutput(\"vals\")\n\n  output$vals <- shiny::renderPrint({\n    x <- shiny::reactiveValuesToList(input,\n                            all.names = TRUE)\n    print(x)\n  })\n```\n:::\n\n\n\n#### datasetApp\n\n`datasetApp()` contains a call to the `dataset` module, and includes a `tableOutput()` to render the selected data object: \n\n::: {#fig-datasetApp}\n\n![`datasetApp`](datasetApp.png){#fig-datasetApp fig-align=\"center\" width=80%}\n\n`datasetApp` \n:::\n\nWhen `datasetApp()` is run, the app displays the dataset object in the `tableOutput()`, and the `verbatimTextOutput()` renders the reactive values as a text: \n\n::: {#fig-datasetApp_run}\n\n![`datasetApp` with reactive values](datasetApp_run.png){#fig-datasetApp_run fig-align=\"center\" width=100%}\n\n`datasetApp` with `reactiveValuesToList()`\n:::\n\nThe output above shows what `NS()` does in the `dataset` module--it appends the module `id` argument to the `inputId` (which is why we see `dataset-dataset`).\n\n- **`dataset-`:** the module id \n\n- **`dataset-dataset`** the `inputId` from the `selectInput()`\n\n#### selectVarApp\n\n`selectVarApp()` includes both `dataset` and `selectVar` modules, but instead of rendering the output in a table, the UI renders the variable output in a `verbatimTextOutput()`.\n\n::: {#fig-selectVarApp}\n\n![`selectVarApp`](selectVarApp.png){#fig-selectVarApp fig-align=\"center\" width=80%}\n\n`selectVarApp` \n:::\n\nNote that `selectVarApp()` contains namespaces for two modules: \n\n1. **`\"data\"`**: the namespace for the `datasetnput()` and `datasetServer()` modules, inheriting the `filter` argument and creating the data object \n\n2. **`\"var\"`**: the `selectVar` modules are linked with the `\"var\"` id. `selectVarServer()` uses the `data` object created by `datasetServer()` (and also inherits the `filter` argument).\n\nThese namespaced IDs are rendered below with `reactiveValuesToList()`:\n\n::: {#fig-selectVarApp_run}\n\n![`selectVarApp` with reactive values](selectVarApp_run.png){#fig-selectVarApp_run fig-align=\"center\" width=100%}\n\n`selectVarApp` with `reactiveValuesToList()`\n:::\n\nThere's a lot happening in `selectVarApp()`, so I've created the figure below to display the code for the modules with their displayed outputs: \n\n:::: {.column-page-inset-right}\n\n::: {#fig-selectVarApp_schema}\n\n![`selectVarApp` schema](selectVarApp_schema.png){#fig-selectVarApp_schema fig-align=\"center\" width=100%}\n\n`dataset` and `selectVar` modules with rendered outputs\n:::\n\n::::\n\nAs we can see, the `data` output from the `dataset` module is used to generate the `vars()` reactive for the `verbatimTextOutput()` in `selectVarApp()`. Note that both `dataset` and `selectVar` modules don't contain any output functions--these have been provided in the UI for both `datasetApp()` and `selectVarApp()`.\n\n#### selectDataVarApp\n\nThe final app in `mstsap` is `selectDataVarApp()`. Here the inputs from `dataset` and `selectVar` have been moved into the `sidebarPanel()`, and the output is rendered in the `mainPanel()`. \n\n\n::: {#fig-selectDataVarApp}\n\n![`selectDataVarApp`](selectDataVarApp.png){#fig-selectDataVarApp fig-align=\"center\" width=80%}\n\n`selectDataVarApp` \n:::\n\n\nThe reactive values here show how the ['Modules inside of modules'](https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules) work--by adding the additional call to `NS()` in the `datasetInput()` and `selectVarInput()` functions *within* `selectDataVarUI()` and `selectDataVarServer()`, an additional namespace is appended to the reactive values (`input$dataset` and `input$var`):\n\n::: {#fig-selectDataVarApp_run}\n\n![`selectDataVarApp` with reactive values](selectDataVarApp_run.png){#fig-selectDataVarApp_run fig-align=\"center\" width=100%}\n\n`selectDataVarApp` with `reactiveValuesToList()`\n:::\n\nBelow is a figure that displays the contents of the `selectDataVar` modules (I've removed the `tagList()` and `moduleServer()` for simplicity), the `selectDataVarApp()`, and the rendered outputs:\n\n:::: {.column-page-right}\n\n::: {#fig-selectDataVarApp_schema}\n\n![`selectDataVarApp` schema](selectDataVarApp_schema.png){#fig-selectDataVarApp_schema fig-align=\"center\" width=100%}\n\n`dataset` and `selectVar` modules inside `selectDataVar` module with rendered outputs\n:::\n\n::::\n\n## testServer() \n\nModule server functions can be tested the same way as a traditional shiny `server` function, as long as you provide the inputs and verify the correct outputs. Below I'll cover some general advice on module server tests (and the arguments in `testServer()`).\n\n### Testing module server functions\n\nBefore writing tests, make sure you can answer the following:\n\n1. ***What is the overall purpose of the application?***\n    -   This information is typically referred to as the 'business logic' of the application, and should be stored in a specifications or requirements document. If I can't answer this question, I'm probably better off not writing test for code that is likely to undergo major changes. \n    \n2. ***How does this module fit within that overall purpose?***\n    -   Specifically, how does this module help the application achieve the specifications or requirements? This could also be considered the 'unit of work' and 'end result' for the module.\n\n3. ***What dependencies (i.e., utility functions, data, add-on packages) are required for the module to execute?***\n    -   If the module depends on other functions, data, or packages to perform it's expected behavior, those functions should either be included in the `testServer()` test, or have their own tests (or both).\n    \n#### What should I test?\n\nThe items below have been compiled from [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html#basic-workflow), [R Packages](https://r-pkgs.org/testing-design.html#what-to-test), and [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/build-yourself-safety-net.html#testing-your-app): \n\n1. ***Do the inputs/outputs behave as expected?***\n    -   These tests verify the module server function `inputId`s and `outputId`s are properly namespaced and accessible \n    \n2. ***Does the module contain the expected reactive values/objects?***\n    -   Tests should verify it's reactivity--module server functions will automatically recompute the outputs when it's inputs change, so tests should verify changes to inputs produce the expected behaviors and outputs. This includes any returned values from the module (and any additional function arguments).\n    \n3. ***Are the calculations correct?***\n    -   If the module server function performs calculations or data manipulations, the tests should verify the module produces the correct result (ideally for a variety of inputs and edge cases).\n    \n4. ***How are errors handled in the module?***\n    -   What errors are displayed from the module? Tests should simulate scenarios that can test if the module: 1) returns errors that are informative, 2) fails silently (when appropriate), or 3) falls back to the correct default behavior.\n    \nThe last piece of advice I've found helpful when writing tests comes from [R Packages](https://r-pkgs.org/testing-design.html#what-to-test), \n\n> *\"focus your time on code that you’re not sure about, is fragile, or has complicated interdependencies\"*\n\n\nThe quote isn't in reference to testing modules or shiny application functions, but I've found it's easy to fall into the trap of trying to test *everything* when a targeted approach is more efficient (and equally valid).\n\nThe first test I'll perform is for `datasetServer()`, the module used to return a data object from the `datasets` package.\n\n### `testServer()` arguments \n\n-   `app` can be a module server function (i.e., `datasetServer`), or any [`shiny.appobj`](https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html) \n\n-   `expr` is where I'll add the `testthat` expectations and other test code \n\n-   `args` is a `list()` I can use to include any module server function arguments\n\n### Inputs\n\nI created the test file with `usethis::use_test(\"datasetServer\")` and the module server function is the first argument in `testServer()`.\n\nI'll start by testing if the initial input value (`input$dataset`) in `datasetServer()` is set to `NULL`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshiny::testServer(app = datasetServer, expr = {\n  testthat::expect_equal(input$dataset, NULL)\n  cat(\"\\ndatasetServer: dataset$input is NULL\", \"\\n\")\n})\n```\n:::\n\n\n-   I'll add a custom message with `cat()` and the `inputId` I'm testing, load, document, and install the package, then run the test with `testthat::test_file()`:\n\n\n    \n    ````default\n    devtools::load_all()\n    ℹ Loading mstsap\n    devtools::document()\n    ℹ Updating mstsap documentation\n    ℹ Loading mstsap\n    \n    Restarting R session...\n    \n    library(mstsap)\n    ````\n\n    \n    -   And run the test with `testthat::test_file()`:\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    test_file(\"tests/testthat/test-datasetServer.R\")\n    ```\n    :::\n\n    \n    ````default\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n    datasetServer: dataset$input is NULL \n    ````\n---\ntitle-meta: \"Creating test messages with `testServer()`\"\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n:::: {.callout-note collapse='false' title=\"Creating test messages with `testServer()`\"}\n\n::: {style='font-size: 1.10em;'}\n\nThe `testServer()` documentation has [examples](https://shiny.posit.co/r/articles/improve/server-function-testing/) of using `cat()` to create custom messages. I put a function for creating `testServer()` messages (`test_cmt()`) in the [`helper.R`](https://github.com/mjfrigaard/mstsap/blob/main/tests/testthat/helper.R) file ([read more about test helpers here](https://r-pkgs.org/testing-advanced.html)). \n\nIt has two arguments (`test` and `msg`), and makes it easy to print messages to the console while I'm developing tests.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntest_cmt(test = \"mod_server_function\", msg = \"test contents\")\n\n\t   mod_server_function: test contents \n```\n:::\n\n\n:::\n\n::::\n\n\n\n#### Setting test inputs \n\n`testServer()` allows us to mimic changing application (or module) `inputId`s with `session$setInputs()` like so: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsession$setInputs(inputId = \"value\")\n```\n:::\n\n\nI'll demonstrate with a test for `input$dataset` in `datasetServer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n  session$setInputs(dataset = \"faithful\")\n  testthat::expect_equal(\n    object = input$dataset,\n    expected = \"faithful\")\n  test_cmt(\"datasetServer\", \"dataset$input\")\n```\n:::\n\n\nThe results from `test_file()` are below:\n\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\n\t   datasetServer: dataset$input\n````\n\n\n### Returned values\n\nAny returned values from module server functions can be accessed in `testServer()` with [`session$returned()`](https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-return-values). I'll verify `input$dataset` returns an object from `datasetServer()` by testing the class of `session$returned()`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide test with session$returned()\"}\n  session$setInputs(dataset = \"airquality\")\n  testthat::expect_equal(\n    object = class(session$returned()),\n    expected = \"data.frame\")\n  test_cmt(\"datasetServer\", \"class(session$returned())\")\n\n  session$setInputs(dataset = \"WorldPhones\")\n  testthat::expect_true(\n    object = is.matrix(session$returned()))\n  test_cmt(\"datasetServer\", \"is.matrix(session$returned())\")\n```\n:::\n\n\nNote that both methods above can be used to check the class of the returned object. \n\nThe updated results from `test_file()` are below:\n\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]\n\t   datasetServer: class(session$returned()) \n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]\n\t   datasetServer: is.matrix(session$returned()) \n````\n\n\n-   I can also use the `typeof(datasets::mtcars)` for a direct comparison: \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"show/hide test with session$returned()\"}\n      session$setInputs(dataset = \"mtcars\")\n      expect_equal(\n        # app value...\n        object = typeof(session$returned()), \n        # ...compared to actual output\n        expected = typeof(datasets::mtcars)) \n      test_cmt(\"datasetServer\", \"typeof(session$returned())\")\n    ```\n    :::\n\n\n\n### Module server arguments\n\nIf the module server function has additional arguments beyond `id`, then it has additional functionality to verify with unit tests. To test additional module server arguments, pass these to [`testServer(args = list())`.](https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-additional-parameters) The `args` list should include named arguments from the module server function, i.e., `list(arg1 = \"param1\", arg2 = \"param2\")`. \n\nFor example, `selectVarServer()` has `data` and `filter` arguments: \n\n-   `data` is the returned reactive object from `datasetServer()` \n\n-   `filter` is the function passed to the `find_vars()` utility function\n\n\n::::{.column-body-outset-right}\n\n:::{#fig-dataset_selectVar}\n\n![`dataset()` -> `selectVar()`](dataset_selectVar.png){#fig-dataset_selectVar fig-align=\"center\" width=100%}\n\nObject returned from `datasetServer()` and passed to `selectVarServer()`\n:::\n\n::::\n\nBelow is a test for `selectVarServer()` using `args` to verify the reactive `data()` is `datasets::mtcars`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshiny::testServer(selectVarServer,\n  args = list(data = datasets::mtcars,\n              filter = is.numeric), expr = {\n  testthat::expect_true(\n    object = is.reactive(data))\n  test_cmt(\"selectVarServer\", \"is.reactive(data())\")\n})\n```\n:::\n\n\n::: {style='font-size: 1.05em; color: #A20025;'}\n\n***But this fails with the following error:***\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-selectVarServer.R\")\n```\n:::\n\n\n````default\n[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n── Error (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ───\nError in `(function (id, data, filter = is.numeric) \n{\n    stopifnot(shiny::is.reactive(data))\n    stopifnot(!shiny::is.reactive(filter))\n````\n\n\n::: {style='font-size: 1.05em; color: #006CD9;'}\n\n***What happened?***\n\n:::\n\nI've included this example because it's not in the [`testServer()` documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/#testing-shiny-modules), and it's common to pass values between modules (see [here in Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/structuring-project.html#a.-returning-values-from-the-module) and [here in Mastering Shiny](https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs)) \n\n#### Testing module communication\n\nThe error message above tells me the issue is originating from the `stopifnot()` calls in `selectVarServer()`. \n\n---\ntitle-meta: \"Updating selectVarServer() and find_vars()\"\n\ncallout-icon: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  message: false\n  warning: false\n  eval: false\n---\n\n\n\n:::: {.callout-important collapse='true'}\n\n## Updating selectVarServer() and find_vars()\n\n::: {style='font-size: 1.10em;'}\n\nBoth `selectVarServer()` and `find_vars()` are updated from their original versions to include `stopifnot()` checks for `is.reactive()`, `is.data.frame()` and `is.function()`: \n\n-   [Original versions:](https://mastering-shiny.org/scaling-modules.html#server-inputs)\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    find_vars <- function(data, filter) {\n      names(data)[vapply(data, filter, logical(1))]\n    }\n    ```\n    :::\n    \n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    selectVarServer <- function(id, data, filter = is.numeric) {\n      moduleServer(id, function(input, output, session) {\n        observeEvent(data(), {\n          updateSelectInput(session, \"var\", choices = find_vars(data(), filter))\n        })\n        \n        reactive(data()[[input$var]])\n      })\n    }\n    ```\n    :::\n\n-   [Updated versions:](https://mastering-shiny.org/scaling-modules.html#server-inputs) \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    selectVarServer <- function(id, data, filter = is.numeric) {\n      \n      stopifnot(is.reactive(data))\n      stopifnot(!is.reactive(filter))\n      \n      moduleServer(id, function(input, output, session) {\n        observeEvent(data(), {\n          updateSelectInput(session = session, \n            inputId = \"var\", \n            choices = find_vars(data(), filter)\n            )\n        })\n        \n        reactive(data()[[input$var]])\n      })\n    }\n    ```\n    :::\n    \n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\"}\n    find_vars <- function(data, filter) {\n      stopifnot(is.data.frame(data))\n      stopifnot(is.function(filter))\n      names(data)[vapply(data, filter, logical(1))]\n    }\n    ```\n    :::\n\n:::\n\n::::\n\n\n\nI'll stop a moment here to address what's happening in each module:\n\n1. The `datasetServer()` returns the results of `input$dataset` as a reactive (`data()`)\n\n2. `data()` enters `selectVarServer()` in the `data` argument \n\n3. *Inside* `selectVarServer()`, two `stopifnot()` functions evaluate the reactivity of `data` and `filter` with `shiny::is.reactive()`\n\nIn `datasetServer()`, the return object is [wrapped in the `reactive()` function](https://github.com/mjfrigaard/mstsap/blob/f10e497df195cfa188afd031e7d082ed1466989d/R/datasetServer.R#L20), so the items `args = list()` also need to be wrapped in `reactive()`. \n\nI'll re-write the test above to a more basic test using `is.reactive()`: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshiny::testServer(selectVarServer,\n  args = list(data = reactive(datasets::mtcars), \n              filter = is.numeric), expr = {\n  testthat::expect_true(\n    object = is.reactive(data()))\n  test_cmt(\"selectVarServer\", \"is.reactive(data())\")\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-selectVarServer.R\")\n```\n:::\n\n\n````default\n[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n\t   selectVarServer: is.reactive(data()) \n── Failure (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ───\nis.reactive(data()) is not TRUE\n\n`actual`:   FALSE\n`expected`: TRUE \n````\n\n\n::: {style='font-size: 1.05em; color: #A20025;'}\n\n***Another failure???***\n\n:::\n\nThe results of this test might seem confusing given my advice to wrap the `args` list in `reactive()`, but some reading of the `x` argument in `is.reactive()` will clear up the error: \n\n> *For `is.reactive()`, an object to test. For `reactive()`, an expression.*\n\nRemoving the parentheses from `data()` will result in the proper test results: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshiny::testServer(selectVarServer,\n  args = list(data = reactive(datasets::mtcars), \n              filter = is.numeric), expr = {\n  testthat::expect_true(\n    object = is.reactive(data))\n  test_cmt(\"selectVarServer\", \"is.reactive(data())\")\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-selectVarServer.R\")\n```\n:::\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n\t   selectVarServer: is.reactive(data()) \n````\n\n\n### Utility functions\n\nNow that I have a reactive `data()` input, I can explore how this value is used inside `selectVarServer()`. To update `input$var`, the `data()` input is passed to `find_vars()` (a function that uses a `filter` argument \"*used to select which variables to list*\"). See the example below:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmstsap::find_vars(\n  data = datasets::chickwts, \n  filter = is.factor)\n## [1] \"feed\"\n```\n:::\n\n\nI'll write an expectation that captures the behavior of `find_vars()` in `selectVarServer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshiny::testServer(selectVarServer,\n  args = list(data = reactive(datasets::chickwts),\n              filter = is.numeric), expr = {\n  testthat::expect_equal(\n    object = find_vars(data(), is.factor),\n    expected = \"feed\")\n  test_cmt(\"selectVarServer\", \"find_vars()\")\n})\n```\n:::\n\n\nThe results are below:\n\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\n\t   selectVarServer: find_vars()\n````\n\n\nTo verify that the returned object from `selectVarServer()` is the selected column, I'll need to simulate the application behavior in the tests:\n\n-   Create a reactive `data()` input in `selectVarServer()`:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"setting args = list()\"}\n      shiny::testServer(selectVarServer,\n        args = list(data = reactive(datasets::chickwts),\n                    filter = is.numeric), expr = {\n        \n        # include expectations below...\n        \n      })\n    ```\n    :::\n\n    \n-   Set the `input$var` and verify the `input$var`:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"verify input$var\"}\n      session$setInputs(var = \"weight\")\n      testthat::expect_equal(object = input$var,\n          expected = \"weight\")\n      test_cmt(\"selectVarServer\", \"input$var\")\n    ```\n    :::\n\n    \n-   Set the `input$var` and verify the `session$returned()`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"verify session$returned()\"}\n      session$setInputs(var = \"feed\")\n      testthat::expect_equal(object = session$returned(),\n        expected = datasets::chickwts[[\"feed\"]])\n      test_cmt(\"selectVarServer\", \"session$returned()\")\n    ```\n    :::\n\n\nThe results from these tests are below:\n\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]\n\t   selectVarServer: input$var \n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]\n\t   selectVarServer: session$returned() \n````\n\n\n\n### Module outputs\n\nRendered outputs can be accessed in `testServer()` just like inputs (i.e., with `output$outputId`). But the modules in `mstsap` don't have outputs--these are included in the standalone app functions (`datasetApp()`, `selectVarApp()`, and `selectDaraVarApp()`). \n\nFortunately, app functions can also be passed to the `app` argument of `testServer()`. I'll use `datasetApp()` to demonstrate.\n\n![](datasetApp.png){fig-align=\"center\" width=80%}\n\nTesting a standalone app function is similar to testing a module server function, but with a few minor differences. First, the output from the standalone app function is [assigned to an object](https://shiny.posit.co/r/articles/improve/server-function-testing/#shiny-app-objects) (`ds_app`), then placed in the `app` argument: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nds_app <- datasetApp()\n  shiny::testServer(ds_app, expr = {\n\n  })\n```\n:::\n\n\n To use `session$setInputs()`  need to include the namespace for the `inputId`:\n\n![](datasetApp_reactives.png){fig-align=\"center\" width=100%}\n\nThe output from `reactiveValuesToList()` in `datasetApp()` shows me how to access the `inputId` in the `datasetServer()` module (i.e., ``` input$`dataset-dataset` ```):\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nds_app <- datasetApp()\nshiny::testServer(ds_app, expr = {\n  session$setInputs(`dataset-dataset` = \"chickwts\")\n\n})\n```\n:::\n\n\n\n#### Output testing strategy\n\nTesting outputs with `testServer()` is different than testing outputs in regular unit tests, because shiny outputs are executed in the server, but then rendered in the UI. The [`testServer()` documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/#complex-outputs-plots-htmlwidgets) outlines a testing strategy for complex outputs:\n\n> *The goal for your tests should be to ask “is the code that I wrote producing the plot I want?” There are two components to that question:\n> \n> 1. *Does the plot generate without producing an error?*\n> 2. *Is the plot visually correct?*\n> \n> *`testServer` is great for assessing the first component here. By merely referencing `output$plot` in your test, you’ll confirm that the plot was generated without an error.*\n\nIf we replace *plot* with *table* in the advice above, the tests for `datasetApp()` should confirm `output$data` is generated without producing an error. \n\nInstead of writing an expectation, I'll use `cat()` to display the contents of `output$data` after setting the ``` `dataset-dataset` ``` input:\n    \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nds_app <- datasetApp()\nshiny::testServer(ds_app, expr = {\n  session$setInputs(`dataset-dataset` = \"chickwts\")\n  cat(\"\\n\\toutput$data:\\n\", output$data, \"\\n\")\n})\n```\n:::\n\n\nThe results from the test is below:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-datasetApp.R\")\n```\n:::\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]\n\toutput$data:\n````\n\n\n```{.html}\n <table  class = 'table shiny-table table- spacing-s' style = 'width:auto;'>\n  <thead> \n\t  <tr> \n\t    <th style='text-align: right;'> weight </th> \n\t    <th style='text-align: left;'> feed </th>  \n\t </tr> \n\t</thead> \n\t  <tbody>\n      <tr> <td align=\"right\"> 179.00 </td> <td> horsebean </td> </tr>\n      <tr> <td align=\"right\"> 160.00 </td> <td> horsebean </td> </tr>\n      <tr> <td align=\"right\"> 136.00 </td> <td> horsebean </td> </tr>\n      <tr> <td align=\"right\"> 227.00 </td> <td> horsebean </td> </tr>\n      <tr> <td align=\"right\"> 217.00 </td> <td> horsebean </td> </tr>\n      <tr> <td align=\"right\"> 168.00 </td> <td> horsebean </td> </tr>\n   </tbody> \n </table> \n```\n\nThe output is the HTML used to render the table in the UI. This doesn't add a passing test, but it confirms that the table is being generated from the `data()` reactive. \n\nThe tests for `datasetApp()` will confirm the `inputId`, and verify the `class` and `names` of the `data()` reactive (which will be passed to the `renderTable()` function): \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n  testthat::expect_equal(\n    object = input$`dataset-dataset`,\n    expected = \"chickwts\")\n  test_cmt(\"datasetApp\", \"input$`dataset-dataset`\")\n\n  testthat::expect_true(\n    object = is.data.frame(data()))\n  test_cmt(\"datasetApp\", \"is.data.frame(data())\")\n\n  testthat::expect_equal(\n    object = names(data()),\n    expected = names(datasets::chickwts))\n  test_cmt(\"datasetApp\", \"names(data())\")\n```\n:::\n\n\nI can include a test for the `class` of `output$data`, but note that this is a character output:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n  testthat::expect_equal(\n    object = class(output$data),\n    expected = \"character\")\n  test_cmt(\"datasetApp\", \"class(output$data)\")\n```\n:::\n\n\nThe results from `test_file()` are below:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-datasetApp.R\")\n```\n:::\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n\t   datasetApp: input$`dataset-dataset` \n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\n\t   datasetApp: is.data.frame(data()) \n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]\n\t   datasetApp: names(data()) \n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]\n\t   datasetApp: class(output$data) \n````\n\n\nThe same method can be used to test the `selectVarApp()`, but note this app requires passing both `inputId`s to `session$setInputs()`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show/hide selectVarApp() tests\"}\nsv_app <- selectVarApp()\nshiny::testServer(app = sv_app, expr = {\n  session$setInputs(`var-var` = \"Ozone\",\n                    `data-dataset` = \"airquality\")\n  # confirm contents of output$out\n  cat(\"\\n\\toutput$out:\\n\", output$out, \"\\n\")\n  \n  # confirm var is reactive \n  testthat::expect_true(object = is.reactive(var))\n  # confirm var input\n  testthat::expect_equal(\n    object = input$`var-var`,\n    expected = \"Ozone\")\n  # confirm data is reactive\n  testthat::expect_true(object = is.reactive(data))\n  # confirm data() is a data.frame\n  testthat::expect_true(\n    object = is.data.frame(data()))\n  # confirm 'data' can be subsetted with 'var'\n  testthat::expect_equal(\n    object = data()[[input$`var-var`]],\n    expected = airquality[[\"Ozone\"]])\n})\n```\n:::\n\n\n\n#### Testing nested modules \n\nI highly recommend viewing the output of `reactiveValuesToList()` if your application has nested modules. It's easy to lose track of ids if they span multiple layers. \n\nWe know `selectDataVarApp()` contains 'modules inside other modules', and these layers are reflected in the namespaces: \n\n![](selectDataVarApp_reactives.png){fig-align=\"center\" width=100%}\n\nTo access the `inputId`s in the nested modules, we need to pass the full 'appended' namespace:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndv_app <- selectDataVarApp()\nshiny::testServer(app = dv_app, expr = {\n  session$setInputs(`var-var-var` = \"Ozone\",\n                    `var-data-dataset` = \"airquality\")\n})\n```\n:::\n\n\nAfter setting the inputs, I can confirm the contents of `output$out`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndv_app <- selectDataVarApp()\nshiny::testServer(app = dv_app, expr = {\n  session$setInputs(`var-var-var` = \"Ozone\",\n                    `var-data-dataset` = \"airquality\")\n  cat(\"\\n\\toutput$out:\\n\", output$out, \"\\n\")\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-selectDataVarApp.R\")\n```\n:::\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]\n\toutput$out:\n   [1]  41  36  12  18  NA  28  23  19   8  NA   7  16  11  14  18\n [16]  14  34   6  30  11   1  11   4  32  NA  NA  NA  23  45 115\n [31]  37  NA  NA  NA  NA  NA  NA  29  NA  71  39  NA  NA  23  NA\n [46]  NA  21  37  20  12  13  NA  NA  NA  NA  NA  NA  NA  NA  NA\n [61]  NA 135  49  32  NA  64  40  77  97  97  85  NA  10  27  NA\n [76]   7  48  35  61  79  63  16  NA  NA  80 108  20  52  82  50\n [91]  64  59  39   9  16  78  35  66 122  89 110  NA  NA  44  28\n[106]  65  NA  22  59  23  31  44  21   9  NA  45 168  73  NA  76\n[121] 118  84  85  96  78  73  91  47  32  20  23  21  24  44  21\n[136]  28   9  13  46  18  13  24  16  13  23  36   7  14  30  NA\n[151]  14  18  20 \n````\n\n\nAfter confirming `output$out`, I'll test the inputs: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n  testthat::expect_equal(\n    object = input$`var-var-var`,\n    expected = \"Ozone\")\n  test_cmt(\"selectDataVarApp\", \"input$`var-var-var`\")\n\n  testthat::expect_equal(\n    object = input$`var-data-dataset`,\n    expected = \"airquality\")\n  test_cmt(\"selectDataVarApp\", \"input$`var-data-dataset`\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-selectDataVarApp.R\")\n```\n:::\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n\t   selectDataVarApp: input$`var-var-var` \n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\n\t   selectDataVarApp: input$`var-data-dataset`\n````\n\n\nI can also verify the contents of the reactive `var()` inside the test:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n  testthat::expect_true(object = is.reactive(var))\n  test_cmt(\"selectDataVarApp\", \"is.reactive(var)\")\n  cat(\"\\n\\tvar:\\n\", var(), \"\\n\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntestthat::test_file(\"tests/testthat/test-selectDataVarApp.R\")\n```\n:::\n\n\n````default\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]\n\t   selectDataVarApp: is.reactive(var) \n\n\tvar:\n 41 36 12 18 NA 28 23 19 8 NA 7 16 11 14 18 14 34 6 30 11 1 11 4 32 NA NA NA 23 \n\t45 115 37 NA NA NA NA NA NA 29 NA 71 39 NA NA 23 NA NA 21 37 20 12 13 NA NA NA\n\tNA NA NA NA NA NA NA 135 49 32 NA 64 40 77 97 97 85 NA 10 27 NA 7 48 35 61 79 \n\t63 16 NA NA 80 108 20 52 82 50 64 59 39 9 16 78 35 66 122 89 110 NA NA 44 28 \n\t65 NA 22 59 23 31 44 21 9 NA 45 168 73 NA 76 118 84 85 96 78 73 91 47 32 20 23\n\t21 24 44 21 28 9 13 46 18 13 24 16 13 23 36 7 14 30 NA 14 18 20 \n````\n\n\n \n## Recap \n\nThis post has shown how shiny's `testServer()` function allows you to isolate and test module server functions, which makes it easier to ensure that your `server` function behaves as expected (and locate and fix bugs).\n\nI hope you have a better understanding of how you can use `testServer()` to test a modules inputs/outputs, reactivity, calculations, and errors.\n\nIn the next post I'll cover performing integration tests with `shinytest2`!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}