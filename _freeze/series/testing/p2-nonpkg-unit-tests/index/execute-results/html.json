{
  "hash": "98d6af8aafb3b568f63b3f604862d329",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using `testthat` with Shiny\"\nsubtitle: \"Part 2 (series): Unit tests for non-package Shiny apps\"\nauthor: \"Martin Frigaard\"\ndate: \"2023-05-07\"\ncategories: [shiny, testing]\nimage: \"image.png\"\ntoc: true\ntoc-depth: 5\ntoc-title: 'Contents'\ntoc-location: \"left\"\n# code-block-border-left: true\ncode-block-bg: \"#f8f8f8\"\ncode-block-border-left: \"#e8e8e8\"\ncode-fold: show\ncode-summary: 'show/hide'\ncallout-icon: false\n\ndraft: false\n\nfreeze: true\n\nexecute:\n  echo: true\n  warning: false\n  eval: false\n  collapse: true\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"packages\"}\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(vdiffr)\nlibrary(shinytest2)\n```\n:::\n\n\n\n\nThis post is the second in a series on testing shiny applications. I'll cover testing shiny module server functions using the [`testhat` package](https://testthat.r-lib.org/) *outside* an R package. This application is stored in the [`noap`](https://github.com/mjfrigaard/noap) GitHub repo if you'd like to follow along. \n\n\n## Testing module server functions\n\n::: {style=\"font-size: 1.10em;\"}\n*...the ABCs of testing shiny server modules...*\n:::\n\nThis post covers how `shiny::testServer()` works using the  [abcApp() shiny app.](https://github.com/mjfrigaard/noap/blob/main/app.R). The code for `abcApp()` is an RStudio project (i.e., there is a `noap.Rproj` file in the parent folder), but it's not part of an R package. Developing shiny applications as R packages is [highly](https://mastering-shiny.org/scaling-packaging.html) [recommended](https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package), but it's *possible* to begin writing unit tests before your application is a fully developed shiny app-package. \n\nFor more information regarding performing tests outside of the package environment, see [this issue on GitHub](https://github.com/r-lib/testthat/issues/659). \n\n### abcApp()\n\nThe `abcApp()` application has been written using [shiny modules](https://shiny.posit.co/r/articles/improve/modules/) and a single [utility function](https://github.com/mjfrigaard/noap/blob/main/utils.R). \n\n`testthat` is designed to perform unit tests for R packages, but for the sake of simplicity,`abcApp()` has not been developed as part of a package. This will allow us to focus on the files involved in testing (and not all the other files that accompany R packages).\n\nThe standalone application function (`abcApp()`) is stored in `app.R`, the modules are contained in `modules.R`, and the single utility function is stored in `utils.R`: \n\n\n\n```{.default}\n├── README.md\n├── app.R\n├── app.Rproj\n├── modules.R\n├── tests\n└── utils.R\n\n2 directories, 5 files\n```\n\n\n-   The `tests` folder contains the following:\n\n\n    \n    ```{.default}\n    tests\n    ├── testthat\n    │   └── test-mod_abc_server.R\n    └── testthat.R\n    \n    2 directories, 2 files\n    ```\n\n\n    -   `tests/` has a `testthat.R` file   \n    -   New test files should be placed in `tests/testthat/` (see example `test-mod_abc_server.R` below):\n\n#### UI module function\n\nIn this small example app, both ui and server modules are stored in the `modules.R` file. \n\n-   UI module: \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"mod_abc_ui() (example ui module function)\"}\n    # ui module\n    mod_abc_ui <- function(id) {\n      \n      ns <- shiny::NS(id)\n      \n      shiny::tagList(\n        shiny::numericInput(\n          inputId = ns(\"num\"),\n          label = shiny::h4(\n            shiny::code(\"alphabet number\")),\n            value = 5, min = 1, max = 26\n        ),\n        shiny::verbatimTextOutput(\n          outputId = ns(\"txt\"))\n      )\n    }\n    ```\n    :::\n\n\n\n#### Server module function\n\nThe counterpart to `mod_abc_ui()` is `mod_abc_server()`:\n\n-   Server module:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"mod_abc_server() (example server module function)\"}\n    # server module\n    mod_abc_server <- function(id) {\n      \n      shiny::moduleServer(id, function(input, output, session) {\n        # reactive \n        letter <- shiny::reactive({ LETTERS[input$num] })\n        # super script\n        sup_scrpt <- shiny::reactive({ \n          num_super_script(x = input$num)\n        })\n        # output\n        output$txt <- shiny::renderPrint({\n          paste0(\"The \", input$num, sup_scrpt(), \n                 \" letter in the alphabet is: \", letter())\n        })\n        \n      })\n    }\n    ```\n    :::\n\n\n#### Module utility function\n\nThe `mod_abc_server()` function uses the `num_super_script()` function stored in `utils.R`:\n\n-   Utility function:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"num_super_script() (example utility function)\"}\n    # utility function\n    num_super_script <- function(x) {\n          num <- as.numeric(x)\n          if (num == 1) {\n            super_script <- \"st\"\n          } else if (num == 2) {\n            super_script <- \"nd\"\n          } else if (num == 3) {\n            super_script <- \"rd\"\n          } else {\n            super_script <- \"th\"\n          }\n        return(super_script)\n    }\n    ```\n    :::\n\n\n#### Standalone app function\n\n-   Standalone app functions include a call to `shiny::shinyApp()`:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"show\" code-summary=\"abcApp() (example app with modules)\"}\n    # standalone shiny app function\n    abcApp <- function() {\n      shiny::shinyApp(\n        ui = shiny::fluidPage(\n          mod_abc_ui(\"x\")\n        ), \n        server = function(input, output, session) { \n          mod_abc_server(\"x\")\n        }\n      )\n    }\n    abcApp()\n    ```\n    :::\n\n    \n    -   The call to `shiny::shinyApp()` is placed inside the `abcApp()` function \n    \n    - The `ui` argument is wrapped in `shiny::fluidPage()` and the ui module function (`mod_abc_ui()`) is placed inside\n    \n    -   The `server` argument includes the standard `function(input, output, session)` and the module server companion function--`mod_abc_server()`--with a matching `id` arguments\n    \n    -   The `abcApp()` function is stored in the `app.R` file\n    \nBecause `abcApp()` is not part of a package, `shiny` and `testthat` are loaded and the modules and utility function are sourced in the top of the `app.R` file.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"source utils.R and modules.R in app.R\"}\n# packages --------------------------------------------------------\nlibrary(shiny)\nlibrary(testthat)\n\n# utils ------------------------------------------------------------------\nsource(\"utils.R\")\n\n# modules ------------------------------------------------------------------\nsource(\"modules.R\")\n```\n:::\n\n\n\n### Using `testServer()`\n\nIn the `test-mod_abc_server.R` file, I'll add `testServer()` and include the module server function as the first argument:   \n\n-   `app` is the module server function (`mod_abc_server`) or any [`shiny.appobj`](https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html) \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-summary=\"app = shiny.appobj\"}\n    shiny::testServer(app = mod_abc_server, {\n    \n    })\n    ```\n    :::\n\n    \n#### Testing `input$`s\n\n-   The first test I'll add will check the initial value of `input$num`\n    \n    -   I'll also include a custom message with `cat()`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-summary=\"test initial value with custom message\"}\n    shiny::testServer(mod_abc_server, {\n      # Test 1: check initial value\n      testthat::expect_equal(input$num, NULL)\n      cat(\"\\n Test 1 initial input$num = NULL: \", is.null(input$num), \"\\n\")\n    })\n    ```\n    :::\n\n    \n    ```{.default}\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n    Test 1 initial input$num = NULL:  TRUE \n    ```\n\n    \n    -   `testServer()` allows me to set new `input` values with `session$setInputs()`\n    \n        -   Use `session$setInputs()` to set `input$num` to `3`\n        \n        -   Test 2 confirms `input$num` has changed  \n        \n        -   Add another custom message with `cat()`\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-summary=\"setInputs() and test inputs\"}\n    shiny::testServer(mod_abc_server, {\n      # set inputs\n      session$setInputs(num = 3)\n      # Test 2: check set inputs\n      testthat::expect_equal(input$num, 3)\n      cat(\"\\n Test 2 setInputs(num = 3):\", input$num, \"\\n\")\n    })\n    ```\n    :::\n\n    \n    ```{.default}\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 2 setInputs(num = 3): 3 \n    ```\n\n    \n#### Testing reactive values\n\n-   The module's reactive values are also available to in `testServer()`\n\n    -   Test 3 adds a test for `sup_scrpt()` (given the changed value of `input$num`)   \n    \n        -   The `expected` value is what I'm expecting `num_super_script()` to return.\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-summary=\"Check sup_scrpt() reactive value with expect_equal()\"}\n    shiny::testServer(mod_abc_server, {\n      # Test 3: check super script\n      testthat::expect_equal(object = sup_scrpt(), expected = \"rd\")\n      cat(\"\\n Test 3 sup_scrpt(): = 'rd':\", sup_scrpt(), \"\\n\")\n    })\n    ```\n    :::\n\n    \n    ```{.default}\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 3 sup_scrpt(): = 'rd': rd  \n    ```\n\n    \n    -   For completeness I'll add a test for `letter()`\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-summary=\"Check letter() reactive value with expect_equal()\"}\n    shiny::testServer(mod_abc_server, {\n      # Test 4: check letter\n      testthat::expect_equal(object = letter(), expected = \"C\")\n      cat(\"\\n Test 4 letter() = C:\", letter(), \"\\n\")\n    })\n    ```\n    :::\n\n    \n    ```{.default}\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 4 letter() = C: C \n    ```\n\n    \n#### Testing `output$`s\n\n-   The module output values are also available as `output$<value>`\n\n    -   Test 5 will verify the `output$txt` (given the updated `input$num`)\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-summary=\"Check module output values\"}\n    shiny::testServer(mod_abc_server, {\n      # Test 5: check output\n    testthat::expect_equal(object = output$txt,\n      expected =  \"The 3rd letter in the alphabet is: C\")\n    cat(\"\\n Test 5 output$ = 'The 3rd letter in the alphabet is: C': \\n\",\n      output$txt, \"\\n\")\n    })\n    ```\n    :::\n\n    \n    ```{.default}\n     FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    \n    ─- Failure (test-mod_abc_server.R:1:1): (code run outside of `test_that()`) ──\n    output$txt (`actual`) not equal to \"The 3rd letter in the alphabet is: C\" (`expected`).\n    \n    `actual`:   \"[1] \\\"The 3rd letter in the alphabet is: C\\\"\"\n    `expected`: \"The 3rd letter in the alphabet is: C\"        \n    Backtrace:\n      1. shiny::testServer(...)\n           at test-mod_abc_server.R:1:0\n     22. testthat::expect_equal(object = output$txt, \n       expected = \"The 3rd letter in the alphabet is: C\")\n           at test-mod_abc_server.R:17:4\n    \n    [ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n    ```\n\n    \n    -   **What happened?** I forgot to add the escape characters (`\\\"`) and line number (`[1]`) for the output\n        -   I'll change the `expected` value and re-run the test: \n        \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-summary=\"Check module output values (again)\"}\n    shiny::testServer(mod_abc_server, {\n      # Test 5: check output\n    testthat::expect_equal(object = output$txt,\n      expected =  \"The 3rd letter in the alphabet is: C\")\n    cat(\"\\n Test 5 output$ = 'The 3rd letter in the alphabet is: C': \\n\",\n      output$txt, \"\\n\")\n    })\n    ```\n    :::\n\n    \n    ```{.default}\n    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    ```\n\n    \n    -   Finally, I'll run the tests with `test_dir()`      \n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"false\" code-summary=\"test_dir()\"}\n    test_dir(path = \"/path/to/app/tests/testthat/\")\n    ```\n    :::\n\n    \n    ```{.default}\n    ✔ | F W S  OK | Context\n    ⠏ |         0 | mod_abc_server         \n    \n     Test 1 initial input$num = NULL:  TRUE \n    \n     Test 2 setInputs(num = 3): 3 \n    \n     Test 3 sup_scrpt(): = 'rd': rd \n    \n     Test 4 letter() = C: C \n    \n     Test 5 output$ = 'The 3rd letter in the alphabet is: C': \n     [1] \"The 3rd letter in the alphabet is: C\" \n    ✔ |         5 | mod_abc_server\n    ══ Results ════════════════════════════════════════════════════\n    Duration: 0.2 s\n     [ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]\n    🌈 Your tests are over the rainbow 🌈\n    ```\n\n    \nThe results show the tests passed! Now I am confident inputs, reactive values (`sup_scrpt()` & `letter()`), outputs behave as expected.\n    \n### Recap\n\nThe example above provides a workflow for using `testServer()` with `testthat` *outside* a package environment. The checklist below summarizes the steps required to test your application's module server functions:\n\n1. Create test files (in `tests/testthat/`)  \n\n    - [x]  All test files should have the `test-` prefix\n  \n2. Verify inputs with `session$setInputs(inputId = <value>)`\n\n    - [x]   All `input$` values should initially be `NULL`\n\n3. Test reactive values by referring to them as you would in the module server \n\n    - [x]   Compare expected values after changing inputs with `session$setInputs()`\n  \n4. Test outputs using `output$<value>` to check changes to the inputs and reactives\n\n    - [x]   Check output values with `output$txt`\n\nThis concludes running tests on `abcApp()`. Ideally, shiny applications are developed as an R package (which I'll cover in a future post), but now you know how to perform tests if this isn't the case. The files for this demonstration are located [here.](https://github.com/mjfrigaard/noap) \n\nFor a more comprehensive review of testing, check out the chapters on testing in [R packages](https://r-pkgs.org/testing-basics.html) and [Mastering Shiny](https://mastering-shiny.org/scaling-testing.html).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}