---
title: "Up and running with Quarto"
author: "Martin Frigaard"
date: "2023-01-23"
categories: [quarto, code]
image: "image.png"
fig-align: center


freeze: true

execute:
  echo: true
  warning: false
  eval: false
---

## What is `quarto`?

`quarto` combines metadata, markup syntax, and executable code to create reproducible reports, slide decks, websites, dashboards, etc.

## Using `quarto` 

I was an early adopter of R Markdown because I immediately fell in love with how I had a single location for my thoughts, code, output tables and figures, and that I could quickly change the output format. R markdown has helped me create reports, blogs, slide decks, and dashboards--all without having to leave the comfort of the IDE. 

Then [Posit releases `quarto`](https://quarto.org/), a new 'open-source scientific and technical publishing system,' and I'll admit it--I was equally excited and hesitant. Should I take the time to learn a new tool, especially when I already know how amazing R Markdown is?

The fact that you're reading this on a `quarto` blog tells you the answer: **learning `quarto` is worth your time.**

`quarto` and R markdown documents both share a similar structure: both start with a YAML header, use markdown formatted text, and include  executable code chunks. The output is a wide range of beautifully rendered target documents (which includes `.html`, `.pdf`, `.docx`, and more!)

In this post I'll cover some of my initial impressions, similarities to R Markdown, and some `quarto` projects I've created.

:::: {.column-screen-inset layout-ncol=2}
![](input-quarto.png)

![](rendered-quarto.png)
::::

I've described each section below and included figures to connect what is written to the rendered output.

### `YAML` header 

:::: {.column-margin}
::: {style="font-size: 0.95em; color: #1e83c8;"}
*`YAML` is a human friendly data serialization standard for all programming languages, so it's ideal for storing metadata*
:::
::::

::: {style="font-size: 0.70em;"}
```yml
title: "How to build a blog with quarto"
author: "Martin Frigaard"
date: "2023-01-23"
categories: [code, analysis]
image: "image.png"
```
:::



::: {.column-body-outset #fig-yaml-render}
![](quarto-01.png){width=100% fig-align="center"}

`YAML` output 
:::

Below is the YAML header used for an example `.Qmd` blog post. As you can see, many of the same arguments from R Markdown documents are used (`title:`, `author:`, `date:`), and we still provide `key: "value"` pairs. A few specific keys are included if you're writing a blog post:

::: {.column-margin}
![`image:` rendered on landing page](site.png){width=100%}
:::

- `categories:` creates tags for blog post topics   
- `image:` the thumbnail image rendered on the main page    


## Markdown

The example blog post includes a level 2 header (`##`), formatted text, and text with a figure reference (*below the code chunk*).

:::: {.column-body-outset #fig-markdown-render}
![](quarto-02.png){width=100% fig-align="center"}

`markdown` output
::::

`quarto` figure cross-referencing: 

1. The `#| label: <NAME>` value is used to build an index for the plot   
2. In the markdown text, the figure is referenced with `@<NAME>`   
3. In the rendered text, the figure is given a name and number (**Figure 1**). 

`quarto`'s method for cross-referencing is seamless, and appears to be much easier than the [R Markdown method](https://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.html), which takes a few extra steps to setup. 

Unlike R Markdown, the tab-completion will also save me from confusing `fig-height` and `fig-width` with `out-height` and `out-width` (which can take percentages as a character string, like `"80%"`). 

## Code chunks

`quarto` chunks have the same components as `.Rmd` code chunks, but with a slightly different structure: 

- `knitr` options (i.e., `eval=TRUE`) are included in the curly brackets of the top fence:

::: {style="font-size: 0.70em;"}
````{verbatim}
```{r eval=TRUE}
library(rmarkdown)
```
````
:::

In `quarto`, all options are included in the between the fences.

::: {style="font-size: 0.70em;"}

````{verbatim}
```{r}
#| eval: true
```
````

:::


You might have noticed the case of `TRUE`/`FALSE` have changed, but I've found the tab-completion comes to the rescue before I can make a mistake: 

::: {#fig-tab-completion layout-ncol=2}

![options tab completion](eval-tab-comp.png){#fig-eval}

![TRUE/FALSE tab-completion](tf-tab-comp.png){#fig-tf}

Tab-completion
:::

Many of the same options exist, with some great additions. 

1. `code-fold:` it's nice have this option at each chunk in a single argument (in R Markdown selectively folding/showing code chunks is [more involved](https://bookdown.org/yihui/rmarkdown-cookbook/fold-show.html))  
2. `fig-cap:` and `fig-cap-location:` we can place a figure caption (`fig-cap:`, text string) in one of three locations in the document: `top`, `bottom`, or `margin`  

:::: {.column-body-outset #fig-code-render}
![](quarto-03.png){width=100% fig-align="center"}

`Code` output
::::

We can also use the label to reference (like we did in @fig-yaml-render)

## Quick deployment & publishing

Maybe the greatest thing about `quarto` is that **it just works, right out of the box**. I love working in the IDE, but I was able to open this document in Sublime Text, run the `quarto preview` command, and bam: 

:::: {.column-body-outset #fig-st3-preview}
![](st3-quarto.png){width=100% fig-align="center"}

Sublime text with `quarto preview`
::::

If you're publishing a blog using GitHub pages, deployment is also fairly quick. In a Terminal (outside of the IDE). After we've added all the files (and included a `.nojekyll` file), we want to confirm the changes have been committed to the [current working branch](https://quarto.org/docs/publishing/github-pages.html#publish-command)

::: {style="font-size: 0.70em;"}
```bash
touch .nojekyll
git add -A
git commit -m "new .nojekyll"
...

git status
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
```
:::

Now we create a `gh-pages` `orphan` branch, reset, then commit and push the empty `gh-pages` branch.

::: {style="font-size: 0.70em;"}
```bash
git checkout --orphan gh-pages
Switched to a new branch 'gh-pages'
git reset --hard
git commit --allow-empty -m "Initialising gh-pages branch"
```
:::

::: {style="font-size: 0.70em;"}
```
[gh-pages (root-commit) 8bd928d] Initialising gh-pages branch
git push origin gh-pages
Enumerating objects: 2, done.
Counting objects: 100% (2/2), done.
Writing objects: 100% (2/2), 181 bytes | 181.00 KiB/s, done.
Total 2 (delta 0), reused 0 (delta 0), pack-reused 0
remote: 
remote: Create a pull request for 'gh-pages' on GitHub by visiting:
remote:      https://github.com/mjfrigaard/mjfrigaard.github.io/pull/new/gh-pages
remote: 
To github.com:mjfrigaard/mjfrigaard.github.io.git
 * [new branch]      gh-pages -> gh-pages
```
:::

[Publish from Terminal](https://quarto.org/docs/publishing/github-pages.html#publishing) using `quarto publish gh-pages`

::: {style="font-size: 0.70em;"}
```bash
quarto publish gh-pages
? Update site at https://mjfrigaard.github.io/? (Y/n) â€º 
```
:::

Enter `y`, `Yes`, or `Y`

::: {style="font-size: 0.70em;"}
```
Yes
From github.com:mjfrigaard/mjfrigaard.github.io
 * branch            gh-pages   -> FETCH_HEAD
Rendering for publish:

[1/4] posts/welcome/index.qmd
[2/4] posts/how-to-quarto/index.qmd
[3/4] index.qmd
[4/4] about.qmd

branch 'gh-pages' set up to track 'origin/gh-pages'.
HEAD is now at 4c6a0cd Built site for gh-pages
Preparing worktree (resetting branch 'gh-pages'; was at 4c6a0cd)
[gh-pages 21e966c] Built site for gh-pages
 6 files changed, 17 insertions(+), 22 deletions(-)
origin  git@github.com:mjfrigaard/mjfrigaard.github.io.git (fetch)
origin  git@github.com:mjfrigaard/mjfrigaard.github.io.git (push)
To github.com:mjfrigaard/mjfrigaard.github.io.git
   4c6a0cd..21e966c  HEAD -> gh-pages
```
:::

## Some `quarto` projects

+ **Slides:** I use `quarto` to create my presentation for ODSC west, and it's a great comparison a slight variation of the same talk I gave at ODSC east (written in R Markdown)  
  - [ODSC West (quarto website)](https://mjfrigaard.github.io/odsc-west-ggplot2-2022/)  
    - [Slides](https://mjfrigaard.github.io/odsc-west-ggplot2-2022/slides/slides.html#/title-slide)  
  - [ODSC East (R markdown website)](https://mjfrigaard.github.io/odsc-east-ggplot2-2022/)  
    - [Slides part 1](https://mjfrigaard.github.io/odsc-east-ggplot2-2022/ggplot2-slides-01.html#1)   
    - [Slides part 2](https://mjfrigaard.github.io/odsc-east-ggplot2-2022/ggplot2-slides-02.html#1) 
<hr>

* **Book:** The `ggplot2` graph gallery is also availabe as [a `quarto` book](https://mjfrigaard.github.io/fm-ggp2/) (with slightly more details and graphs)   

Each project is managed using a `_quarto.yml` configuration file (the ODSC west website/slides is listed below):

::: {style="font-size: 0.70em;"}
```yml
project:
  type: website
  output-dir: docs

website:
  title: "ODSC-ggplot2-west"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - href: about.qmd
        text: About
    right:
      - href: slides/slides.qmd
        text: Slides
      - icon: github
        href: https://github.com/mjfrigaard/odsc-west-ggplot2-2022
      - icon: twitter
        href: https://twitter.com/mjfrigaard

format:
  html:
    theme:
      dark: [cyborg, styles.scss]
      light: [minty, styles-dark.scss]
    css: styles.css
    toc: true
```
:::

As you can see, the `_quarto.yml` defines the type of the project (`type:`, `project:`), sets the location of the output files (`output-dir:`), outlines the sections of the website (`title:`, `navbar:`), and sets some of the target document format options (`theme:`, `css:`, `toc:`).

## In closing

I'm still learning `quarto`, so I'm just scrathing the surface of it's abilities. However, I was able to spin up this website following the documentation in about an hour, so I'm definitely going to stick with it (early wins are important!)
