---
title-meta: "Modules & apps"

callout-icon: false

freeze: true

execute:
  echo: true
  message: false
  warning: false
  eval: false
---

```{r}
#| label: modules_apps_setup
#| eval: true 
#| echo: false 
#| include: false
co_box <- function(color, header, contents = "Your text") {
  class <- switch(color,
    b = "note",
    g = "tip",
    r = "important",
    o = "caution",
    stop("Invalid `type`", call. = FALSE)
  )
  switch(color,
  b = cat(paste0(
    "\n",
    ":::: {.callout-", class, " collapse='false'}", "\n\n",
    "## ", header, "\n\n", 
    "::: {style='font-size: 1.10em; color: #696969;'}\n\n",
    glue::glue_collapse(contents), "\n\n",
    "::: \n\n",
    "::::", "\n")),
  g = cat(paste0(
    "\n",
    ":::: {.callout-", class, " collapse='false'}", "\n\n",
    "## ", header, "\n\n", 
    "::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\n\n",
    glue::glue_collapse(contents), "\n\n",
    "::: \n\n",
    "::::", "\n")),
  o = cat(paste0(
    "\n",
    ":::: {.callout-", class, " collapse='false'}", "\n\n",
    "## ", header, "\n\n", 
    "::: {style='font-size: 1.10em; color: #696969;'}\n\n",
    glue::glue_collapse(contents), "\n\n",
    "::: \n\n",
    "::::", "\n")),
  r = cat(paste0(
    "\n",
    ":::: {.callout-", class, " collapse='false'}", "\n\n",
    "## ", header, "\n\n", 
    "::: {style='font-size: 1.10em; font-weight: bold; color: #696969;'}\n\n",
    glue::glue_collapse(contents), "\n\n",
    "::: \n\n",
    "::::", "\n")),
  stop("Invalid `type`", call. = FALSE)
  )
}
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
```

### Modules & apps 

The modules in `msst2ap` are from the [Modules chapter of Mastering Shiny](https://mastering-shiny.org/scaling-modules.html), with a few minor adjustments. These modules create namespaces for their inputs and outputs with the `shiny::NS()` function, which appends a second `id` string to each `inputId`/`outputId`.

Each standalone app also includes the output from `shiny::reactiveValuesToList()`:

-   In the `ui`: 

    ```{r}
    #| eval: false
    #| echo: true
    #| code-fold: false
    # for printing reactive values in application modules
    shiny::verbatimTextOutput("vals")
    ```
    
-   In the `server`: 

    ```{r}
    #| eval: false
    #| echo: true
    #| code-fold: false
    # for printing reactive values in application modules
    output$vals <- shiny::renderPrint({
      x <- shiny::reactiveValuesToList(input,
                              all.names = TRUE)
      print(x, width = 30, max.levels = NULL)
    }, width = 30)
    ```


#### [`dataset`]{style="font-size: 1.15em"} module

The `dataset` module displays the objects in the `datasets` package in a `selectInput()` according to a filter argument (i.e., `is.data.frame`, `is.matrix`, etc.).

`datasetServer()` returns the selected object as a reactive value. Read more [here](https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output).

```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'datasetInput() & datasetServer()'
datasetInput <- function(id, filter = NULL) {
  names <- ls("package:datasets")

  if (!is.null(filter)) {
    data <- lapply(names, get, "package:datasets")
    names <- names[vapply(data, filter, logical(1))]
  }

  shiny::selectInput(
    shiny::NS(id, "dataset"),
    "Pick a dataset",
    choices = names)
}
datasetServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
    shiny::reactive(get(input$dataset, "package:datasets"))
  })
}
```

##### [`datasetApp()`]{style="font-size: 1.10em"}

```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'datasetApp()'
datasetApp <- function(filter = NULL) {
  ui <- shiny::fluidPage(
    datasetInput("dataset", filter = is.data.frame),
    shiny::tableOutput("data"),
    
    # for printing reactive values in application modules
    shiny::verbatimTextOutput("vals")
  )
  server <- function(input, output, session) {
    data <- datasetServer("dataset")
    output$data <- shiny::renderTable(head(data()))
    
    # for printing reactive values in application modules
    output$vals <- shiny::renderPrint({
      x <- shiny::reactiveValuesToList(input,
                              all.names = TRUE)
      print(x, width = 30, max.levels = NULL)
    }, width = 30)

  }
  shiny::shinyApp(ui, server)
}
```


:::: {.column-body-outset-right}

::: {#fig-datasetApp}

![`datasetApp()`](datasetApp.png){#fig-datasetApp fig-align="center" width=100%}

`datasetApp()` in `msst2ap`
:::

::::

##### Reactive values ([`vals`]{style="font-size: 1.15em"})

Below the table output in `datasetApp()`, the reactive values displays the `inputId` from `datasetInput()` and the namespace value from the shared `id` argument with `datasetServer()`:

```r
$`dataset-dataset`
```

#### [`selectVar`]{style="font-size: 1.15em"} module

The `selectVar` module [selects a numeric variable](https://mastering-shiny.org/scaling-modules.html#case-study-selecting-a-numeric-variable) the `data()` object returned from `datasetServer()`.

It has a single utility function (`find_vars()`) which is used to filter the columns (variables):

```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'show/hide selectVarInput() & selectVarServer()'
selectVarInput <- function(id) {
  shiny::selectInput(
    shiny::NS(id, "var"),
    label = "Variable",
    choices = NULL
  )
}
selectVarServer <- function(id, data, filter = is.numeric) {
  
  stopifnot(shiny::is.reactive(data))
  stopifnot(!shiny::is.reactive(filter))

  shiny::moduleServer(id, function(input, output, session) {

    shiny::observe({
      shiny::updateSelectInput(
        session, "var",
        choices = find_vars(data(), filter))
    }) |>
      shiny::bindEvent(data())

    return(
      shiny::reactive({
        if (input$var %in% names(data())) {
          data()[input$var]
        } else {
          NULL
        }
      }) |>
      shiny::bindEvent(input$var)
    )

  })
}
```

I've made a few small changes to `selectVarServer()`: 

-   In the original version, `input$var` is returned as a vector: 

    ```{r}
    #| eval: false
    #| echo: true
    #| code-fold: false
    reactive(data()[[input$var]])
    ```
    
-   I've added some validation and return `input$var` as a single column from `data()`: 

    ```{r}
    #| eval: false
    #| echo: true
    #| code-fold: false
    shiny::reactive({
        if (input$var %in% names(data())) {
            data()[input$var]
        } else {
            NULL
        }
      }) 
    ```

-   The `find_vars()` function is also below:

    ```{r}
    #| eval: false
    #| echo: true
    #| code-fold: show
    #| code-summary: 'show/hide find_vars()'
    find_vars <- function(data, filter = is.vector) {
      stopifnot(is.data.frame(data))
      stopifnot(is.function(filter))
      names(data)[vapply(data, filter, logical(1))]
    }
    ```

##### [`selectVarApp()`]{style="font-size: 1.10em"}

The `selectVarApp()` extends the `dataset` module by collecting the returned reactive value, passing it to `find_vars()`, and returning a single column.

```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'show/hide selectVarApp()'
selectVarApp <- function(filter = is.numeric) {
  ui <- shiny::fluidPage(
            datasetInput("data", is.data.frame),
            selectVarInput("var"),
            shiny::tableOutput("out"),
            shiny::verbatimTextOutput("vals")
  )
  server <- function(input, output, session) {

    data <- datasetServer("data")
    var <- selectVarServer("var", data, filter = filter)

    output$out <- shiny::renderTable(head(var()))

    output$vals <- shiny::renderPrint({
      x <- shiny::reactiveValuesToList(input,
                              all.names = TRUE)
      print(x)
    })
  }

  shiny::shinyApp(ui, server)
}
```

:::: {.column-body-outset-right}

::: {#fig-selectVarApp}

![`selectVarApp()`](selectVarApp.png){#fig-selectVarApp fig-align="center" width=100%}

`selectVarApp()` in `msst2ap`
:::

::::

##### Reactive values ([`vals`]{style="font-size: 1.15em"})

The reactive values in `selectVarApp()` are displayed below the table: 

:::: {layout-ncol=2}

##### Variables 

::: {style="font-size: 0.80em"}

-   the 1st `var` is from the `inputId` in `selectVarInput()`

    ```
    $`-var` 
    ```

-   the 2nd `var` is the shared namespace `id` from the `selectVar` module 

    ```
    $`var-var` 
    ```

:::

##### Data

::: {style="font-size: 0.80em"}
    
-   `dataset` is from the `inputId` in `datasetInput()`

    ```r
    $`-dataset`
    ```
    
-   `data` is the shared namespace `id` from the `dataset` module

    ```r
    $`data-dataset`
    ```
    
:::

::::

#### [`selectDataVar`]{style="font-size: 1.10em"} module

`selectDataVar` is from the [Modules inside of modules](https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules) section, so true to form, both the `dataset` and `selectVar` modules are called inside of the UI and Server modules: 

```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'selectDataVarUI() & selectDataVarServer()'
selectDataVarUI <- function(id) {
  shiny::tagList(
    datasetInput(
      shiny::NS(id, "data"), 
        filter = is.data.frame),
    selectVarInput(
      shiny::NS(id, "var"))
  )
}
selectDataVarServer <- function(id, filter = is.numeric) {

  shiny::moduleServer(id, function(input, output, session) {
    data <- datasetServer("data")
    var <- selectVarServer("var", data, filter = filter)
    var

  })
}
```

##### [`selectDataVarApp()`]{style="font-size: 1.15em"}

The `selectDataVarApp()` places the inputs in the `sidebarPanel()` and the outputs in the `mainPanel()`.

```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'selectDataVarApp()'
selectDataVarApp <- function(filter = is.numeric) {
  ui <- shiny::fluidPage(
    shiny::sidebarLayout(
      shiny::sidebarPanel(
        selectDataVarUI("var")
        ),
      shiny::mainPanel(
        shiny::tableOutput("out"),
        
        shiny::verbatimTextOutput("vals")
        )
    )
  )
  server <- function(input, output, session) {
    var <- selectDataVarServer("var", filter)
    output$out <- shiny::renderTable(head(var()))

    output$vals <- shiny::renderPrint({
      x <- shiny::reactiveValuesToList(input,
                              all.names = TRUE)
      print(x)
    })

  }
  shiny::shinyApp(ui, server)
}
```

:::: {.column-body-outset-right}

::: {#fig-selectDataVarApp}

![`selectDataVarApp()`](selectDataVarApp.png){#fig-selectDataVarApp fig-align="center" width=100%}

`selectDataVarApp()` in `msst2ap`
:::

::::

The reactive values from `selectDataVarApp()` reflect the nested module structure:

:::: {layout-ncol=2}

##### Variables 

::: {style="font-size: 0.80em"}

-   The first `var` belongs to the `inputId` in `selectVarInput()`, 

    ```r
    $`-var` 
    ```

-   the 2nd `var` is the shared namespace `id` from the `selectVar` module,

    ```r
    $`-var-var`
    ```
    
-   the 3rd `var` is the call to the `selectVar` module *inside* `selectDataVar`

    ```r
    $`var-var-var` 
    [1] "Ozone"
    ```
    
:::

##### Data

::: {style="font-size: 0.80em"}

-   `dataset` belongs to the `inputId` in `datasetInput()`, 

    ```r
    $`-dataset` 
    ```

-   `data` is the shared namespace `id` from the `dataset` module, 

    ```r
    $`-data-dataset` 
    ```

-   `var` is the call to the `dataset` module *inside* `selectDataVar`
        
    ```r
    $`var-data-dataset` 
    [1] "airquality"
    ```
    
:::

::::



#### [`histogram`]{style="font-size: 1.10em"} module

The final modules and application I'll use from Mastering Shiny are from the [Case study: histogram](https://mastering-shiny.org/scaling-modules.html#case-study-histogram) section. This application uses the existing `dataset` and `selectVar` modules to pass a single variable to the render a histogram:

```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'show/hide histogramOutput() & histogramServer()'
histogramOutput <- function(id) {
  shiny::tagList(
    shiny::numericInput(
      shiny::NS(id, "bins"),
      label = "bins",
      value = 10,
      min = 1,
      step = 1
    ),
    shiny::plotOutput(
      shiny::NS(id, "hist"))
  )
}
histogramServer <- function(id, x, title = reactive("Histogram")) {
  stopifnot(shiny::is.reactive(x))
  stopifnot(shiny::is.reactive(title))

  shiny::moduleServer(id, function(input, output, session) {
    output$hist <- shiny::renderPlot({
        shiny::req(x())
        main <- paste0(title(), " [", input$bins, "]")
        hist(purrr::as_vector(x()),
          breaks = input$bins,
          main = main
        )
      }, res = 96)

    output$data <- shiny::renderPrint({
      shiny::req(x())
      print(head(x()))
    })
  })
}
```

I've made some changes to the `histogramServer()` function (to accomodate the changes to the `selectVar` module). 

-   The original `renderPlot()` call in `histogramServer()`:

    ```{r}
    #| eval: false
    #| echo: true
    #| code-fold: false
      output$hist <- renderPlot({
        req(is.numeric(x()))
        main <- paste0(title(), " [", input$bins, "]")
        hist(x(), breaks = input$bins, main = main)
      }, res = 96)
    ```

-   The updated `renderPlot()` call in `histogramServer()`:

    ```{r}
    #| eval: false
    #| echo: true
    #| code-fold: false
      output$hist <- shiny::renderPlot({
        shiny::req(x())
        main <- paste0(title(), " [bins =", input$bins, "]")
        hist(purrr::as_vector(x()),
          breaks = input$bins,
          main = main)
      }, res = 96)
    ```
    
    -   As you can see, `req()` is verifying `x()` exists, but doesn't check it's class with `is.numeric()`. 
    
    -   `x()` is also passed to `purrr::as_vector()` before it's plotted with `hist()`


##### [`histogramApp()`]{style="font-size: 1.15em"}



```{r}
#| eval: false
#| echo: true
#| code-fold: true
#| code-summary: 'histogramApp()'
histogramApp <- function() {
  ui <- shiny::fluidPage(
    shiny::sidebarLayout(
      shiny::sidebarPanel(
        datasetInput("data", is.data.frame),
        selectVarInput("var"),
      ),
      shiny::mainPanel(
        histogramOutput("hist"),
        
        shiny::verbatimTextOutput("vals")
      )
    )
  )

  server <- function(input, output, session) {
    data <- datasetServer("data")
    x <- selectVarServer("var", data)
    histogramServer("hist", x)

    output$vals <- shiny::renderPrint({
      x <- shiny::reactiveValuesToList(input,
                              all.names = TRUE)
      print(x)
    })

  }
  shiny::shinyApp(ui, server)
}

```

:::: {.column-body-outset-right}

::: {#fig-histogramApp}

![`histogramApp()`](histogramApp.png){#fig-dataStrApp fig-align="center" width=100%}

`histogramApp()` in `msst2ap`
:::

::::

##### Reactive values ([`vals`]{style="font-size: 1.15em"})

The displayed reactive values in `histogramApp()` are described below:

:::: {layout-ncol=3}

##### Plot

::: {style="font-size: 0.80em"}

-   The `inputId` from `histogramOutput()` and the shared namespace `id`

    ```r
    $`hist-bins`
    [1] 10
    ```
    
:::

##### Variables 

::: {style="font-size: 0.80em"}

-   The `inputId` from `selectVarInput()` and the shared namespace `id`

    ```r
    $`var-var`
    [1] "Ozone"
    ```
    
:::
    
##### Data

::: {style="font-size: 0.80em"}

-   The `inputId` from `datasetInput()` and the shared namespace `id`

    ```r
    $`data-dataset` 
    [1] "airquality"
    ```
    
:::

::::
