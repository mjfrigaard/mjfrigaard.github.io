<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>@mjfrigaard</title>
<link>https://mjfrigaard.github.io/posts.html</link>
<atom:link href="https://mjfrigaard.github.io/posts.xml" rel="self" type="application/rss+xml"/>
<description>Martin Frigaard&#39;s personal website</description>
<generator>quarto-1.3.353</generator>
<lastBuildDate>Tue, 20 Jun 2023 07:00:00 GMT</lastBuildDate>
<item>
  <title>How do I test shiny modules?</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/test-shiny-p3/index.html</link>
  <description><![CDATA[ 




<p>This is the third post in a <a href="https://mjfrigaard.github.io/series.html">series on testing</a> shiny applications. I’ll cover testing shiny module server functions using the <a href="https://testthat.r-lib.org/"><code>testhat</code> package</a> and shiny’s <a href="https://shiny.rstudio.com/reference/shiny/1.7.0/testserver"><code>testServer()</code> function</a>.</p>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
STATUS: Under Development
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; font-weight: bold; color: #696969;">
<p>This post is currently under development. Thank you for your patience!</p>
</div>
</div>
</div>
</div>
<section id="testing-shiny-modules" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testing-shiny-modules">Testing shiny modules</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/shiny.png" class="img-fluid" style="width:40.0%"></p>
</div></div><p>Shiny functions pose a couple of unique challenges for testing. First, we can’t execute shiny <code>server</code> functions in the console. Second, as shiny apps become more complex, it’s <a href="https://engineering-shiny.org/structuring-project.html#using-shiny-modules">highly</a> <a href="https://mastering-shiny.org/scaling-modules.html#module-motivation">recommended</a> to break up the code base into <a href="https://shiny.posit.co/r/articles/improve/modules/index.html">modules</a>. Modules have additional challenges due to their reactivity being split between interconnected UI and server functions.</p>
<p><code>shiny</code> doesn’t provide a direct, built-in way to test modules, but the <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/"><code>testServer()</code></a> function addresses these challenges by testing “<em>reactive interactions</em>” in module server functions. <code>testServer()</code> also works with <a href="https://testthat.r-lib.org/"><code>testthat</code></a>, which means we can structure these ‘reactive interaction’ tests just like other unit tests (for non-application functions).</p>
</section>
<section id="shiny-app-package" class="level2">
<h2 class="anchored" data-anchor-id="shiny-app-package">Shiny app-package</h2>
<p><code>testthat</code> is designed to work within an R package, so I’ve put together the <a href="https://github.com/mjfrigaard/mstsap"><code>mstsap</code></a>, (i.e., a <strong>M</strong>astering <strong>S</strong>hiny <strong>t</strong>est<strong>S</strong>erver <strong>a</strong>pp-<strong>p</strong>ackage) to demonstrate writing tests with <code>testServer()</code>. The functions, modules, and applications in <code>mstsap</code> come from the <a href="https://mastering-shiny.org/scaling-modules.html">Shiny Modules chapter</a> of Mastering Shiny. Specifically, sections <a href="https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs">19.3</a> through <a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules">19.3.4</a>. If you haven’t read this chapter–start there.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to get the mstsap package used in this post:</span></span>
<span id="cb1-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mjfrigaard/mstsap"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prompt =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mstsap)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="Why create an app-package?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why create an app-package?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>A shiny app-package is a shiny application that’s been developed as (or converted to) an R package. The benefits of storing shiny apps in R packages have been <a href="https://mastering-shiny.org/scaling-packaging.html">well</a> <a href="https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package">documented</a>, but I’ll summarize just a few that are specific to testing:</p>
<ol type="1">
<li><strong>Standardized folder structure</strong>:
<ol type="a">
<li>If unit tests are performed with <code>testthat</code>, minimal setup is required to perform tests.</li>
<li><code>usethis::use_testthat()</code> sets up test files in the tests/testthat/ folder (to test the code in the R/ folder)<br>
</li>
<li><em>Read more about using <code>testthat</code> with R packages <a href="https://r-pkgs.org/testing-basics.html">here.</a></em></li>
</ol></li>
<li><strong>Test extras</strong>:
<ol type="a">
<li>Test data can be placed in <code>tests/testthat/&lt;test dir&gt;/&lt;test_data.rds&gt;</code><br>
</li>
<li>The code used to create the test data should be placed in <code>make_&lt;test_data.rds&gt;</code><br>
</li>
<li>Additional testing functions can be stored in <code>tests/testthat/helpers.R</code><br>
</li>
<li><em>Read more about test helpers <a href="https://r-pkgs.org/testing-design.html#testthat-helper-files">here.</a></em></li>
</ol></li>
<li><strong>Development tools</strong>:
<ol type="a">
<li>If you’re using RStudio, tests can be run individually (<code>testthat::test_file()</code>) or collectively (<code>devtools::test()</code>), and code helpers and data are loaded using <code>devtools::load_all()</code><br>
</li>
<li>Tests created with <code>testthat</code> remain isolated during development<br>
</li>
<li><em>Read more about developing packages with RStudio in the <a href="https://r-pkgs.org/">R Packages text.</a></em></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</section>
<section id="modules" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="modules">Modules</h2>
<p>Shiny modules are <a href="https://mastering-shiny.org/scaling-modules.html">‘<em>a pair of UI and server functions</em>’</a> designed to compartmentalize input and output IDs into distinct namespaces (“<em>a namespace is to an ID as a directory is to a file</em>”).</p>
<div class="cell">
<pre><code>█─shinyApp 
├─ui = █─fluidPage 
│      └─█─mod_ui 
│        └─id = "X" 
├─server = `function(input, output, session)` 
└─█─mod_server 
  └─id = "X" </code></pre>
</div>
<p>In <a href="https://mjfrigaard.github.io/posts/test-shiny-p1/#unit-tests">a previous post</a>, I used the following definition for unit tests,</p>
<blockquote class="blockquote">
<p>“<em>A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work.</em>” - <a href="https://www.manning.com/books/the-art-of-unit-testing-second-edition">The Art of Unit Testing, 2nd edition</a></p>
</blockquote>
<p>Modules can also be broken into discrete ‘units of work’ with expected ‘end results.’ However, the ‘unit of work’ for a shiny module is usually accomplished using a combination of three functions: a module UI function, a module server function, and any helper/utility functions.</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="Shiny module refresher">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Shiny module refresher
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Module UI functions typically wrap the layout, input, and output functions in <code>tagList()</code>. Module server functions contain the ‘backend’ code that typically goes in a shiny <code>server</code> function. Both the UI and server module functions are linked by an <code>id</code> argument, which is created using <code>NS()</code> (namespace) in the UI function, and called in the server function with <code>moduleServer()</code>.</p>
<section id="module-ui-functions" class="level3">
<h3 class="anchored" data-anchor-id="module-ui-functions">Module UI functions</h3>
<p>Below is an example module UI function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">mod_fun_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">namespace =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_input"</span>)),</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">namespace =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_out"</span>))</span>
<span id="cb3-5">  )</span>
<span id="cb3-6">}</span></code></pre></div>
</div>
<ul>
<li><p><code>mod_fun_ui</code> creates a dedicated namespace for one <code>inputId</code> and one <code>outputId</code> with <code>shiny::NS()</code>:</p>
<div class="cell">
<pre><code>█─mod_fun_ui 
├─id 
└─█─tagList 
  ├─█─numericInput 
  │ └─inputId = █─NS 
  │             ├─namespace = id 
  │             └─id = "num_input" 
  └─█─uiOutput 
    └─outputId = █─NS 
                 ├─namespace = id 
                 └─id = "num_out" </code></pre>
</div></li>
</ul>
</section>
<section id="module-server-functions" class="level3">
<h3 class="anchored" data-anchor-id="module-server-functions">Module server functions</h3>
<p>The corresponding module server function is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mod_fun_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb5-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-3">            ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session</span>
<span id="cb5-4">          output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_input)</span>
<span id="cb5-5">      })</span>
<span id="cb5-6">}</span></code></pre></div>
</div>
<ul>
<li><p>The code to render the reactive <code>input$num_input</code> with <code>output$num_out</code> is contained in the nested call to <code>moduleServer()</code></p>
<div class="cell">
<pre><code>█─mod_fun_server 
├─id 
└─█─moduleServer 
  ├─id = id 
  ├─server = █─`function(input, output, session)` 
  │          ├─`ns &lt;- session` 
  │          ├─`output$num_out &lt;-` 
  │          └─█─renderUI 
  │            └─`input$num_input` 
  └─session = session </code></pre>
</div></li>
</ul>
</section>
<section id="using-modules" class="level3">
<h3 class="anchored" data-anchor-id="using-modules">Using modules</h3>
<p>Both module functions are combined in the <code>ui</code> and <code>server</code> arguments of <code>shinyApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb7-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb7-3">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_fun_ui</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod"</span>)</span>
<span id="cb7-4">        ),</span>
<span id="cb7-5">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) </span>
<span id="cb7-6">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_fun_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod"</span>)</span>
<span id="cb7-7">  )</span></code></pre></div>
</div>
<ul>
<li><p>The <code>id</code> arguments connect the UI and server functions to communicate between the UI and backend of the app:</p>
<div class="cell">
<pre><code>█─shinyApp 
├─ui = █─fluidPage 
│      └─█─mod_fun_ui 
│        └─id = "mod namespace" 
└─server = █─`function(input, output, session)` 
           └─█─mod_fun_server 
             └─id = "mod namespace" </code></pre>
</div></li>
</ul>
<p>I recommend creating test files when you create module files (i.e., with <code>usethis::use_r()</code> &amp; <code>usethis::use_test()</code>).</p>
</section>
</div>
</div>
</div>
<section id="modules-in-mstsap" class="level3">
<h3 class="anchored" data-anchor-id="modules-in-mstsap">Modules in <code>mstsap</code></h3>
<p><code>mstsap</code> contains three modules: <code>dataset</code>, <code>selectVar</code>, and <code>selectDataVar</code>. If you’re like more information on a module, click on the links in the numbered list.</p>
<section id="dataset-module" class="level4">
<h4 class="anchored" data-anchor-id="dataset-module">Dataset module</h4>
<ol type="1">
<li><a href="https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output"><code>datasetInput</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output"><code>datasetServer</code></a>: loads and returns data object from the <code>datasets</code> package (filtered by data frames or matrices)</li>
</ol>
<div id="fig-dataset" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dataset" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/dataset.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-dataset"></p>
<figcaption class="figure-caption">(a) <code>dataset</code> module</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;1: <code>dataset</code> module</figcaption>
</figure>
</div>
<ul>
<li><p>The objects from <code>datasets</code> are filtered in the UI module function with a <code>filter</code> argument that can be used to <em>“limit the options to built-in datasets that are either data frames (<code>filter = is.data.frame</code>) or matrices (<code>filter = is.matrix</code>)”</em>. The <code>names</code> are passed to the <code>choices</code> in the <code>selectInput()</code>:</p>
<div class="cell">
<details open="">
<summary>show/hide choices in datasetInput()</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb9-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(filter)) {</span>
<span id="cb9-3">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(names, get, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb9-4">    names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> names[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb9-5">  }</span></code></pre></div>
</details>
</div></li>
<li><p>The <code>datasets</code> object is returned with <code>get()</code> (wrapped in <code>reactive()</code>). See below:</p>
<div class="cell">
<details open="">
<summary>show/hide returned data from datasetServer()</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(</span>
<span id="cb10-2">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb10-3">    )</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="selectvar-module" class="level4">
<h4 class="anchored" data-anchor-id="selectvar-module">selectVar module</h4>
<ol start="2" type="1">
<li><a href="https://mastering-shiny.org/scaling-modules.html#case-study-selecting-a-numeric-variable"><code>selectVarInput</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#server-inputs"><code>selectVarServer</code></a>: displays a <code>selectInput()</code> that “<em>allows the user to select variables of specified type from a given reactive dataset.</em>”</li>
</ol>
<div id="fig-selectVar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectVar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectVar.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-selectVar"></p>
<figcaption class="figure-caption">(a) <code>selectVar</code> module</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;2: <code>selectVar</code> module</figcaption>
</figure>
</div>
<p>The <code>data</code> argument in <code>selectVarServer()</code> is the returned value from <code>datasetServer()</code>:</p>
<ul>
<li><p><code>data()</code> is used with the <code>filter</code> argument in the <code>find_vars()</code> function:</p>
<div class="cell">
<details>
<summary>show/hide find_vars()</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb11-2"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I've included the updated version with the 'stopifnot()' checks!</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data))</span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(filter))</span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb11-6">}</span></code></pre></div>
</details>
</div>
<ul>
<li>The filter argument can be used to return variables by class/type (using <code>is.*</code> functions like <code>is.numeric()</code> or <code>is.character()</code>)</li>
</ul></li>
<li><p>When <code>data()</code> changes, the output from <code>find_vars()</code> updates the choices in the variable <code>selectInput()</code> (i.e., <code>input$var</code>) (see below)</p></li>
</ul>
<div id="fig-selectVar_find_vars" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectVar_find_vars" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectVar_find_vars.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-selectVar_find_vars"></p>
<figcaption class="figure-caption">(a) <code>selectVar</code> and <code>find_vars()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;3: <code>selectVar</code> module and <code>find_vars()</code> function</figcaption>
</figure>
</div>
<ul>
<li><code>selectVarServer()</code> also returns the selected variable (<code>input$var</code>) as a reactive value (<code>var()</code>)</li>
</ul>
</section>
<section id="selectdatavar-module" class="level4">
<h4 class="anchored" data-anchor-id="selectdatavar-module">selectDataVar module</h4>
<ol start="3" type="1">
<li><a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><code>selectDataVarUI</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><code>selectDataVarServer</code></a>: The <code>selectDataVar</code> module is from the section titled, “<a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><em>Modules inside of modules</em></a>”, so here we see the <code>dataset</code> and <code>selectVar</code> modules placed <em>inside</em> the <code>selectDataVar</code> module (each with a new namespace (<code>NS()</code>)).</li>
</ol>
<div id="fig-selectDataVar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectDataVar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectDataVar.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-selectDataVar"></p>
<figcaption class="figure-caption">(a) <code>selectDataVar</code> module</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;4: <code>selectDataVar</code> module</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="Naming modules">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Naming modules
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.15em; color: #063E23;">
<p>When creating an app-packages, modules are stored in the <code>R/</code> folder as a single file, typically following a <a href="https://mastering-shiny.org/scaling-modules.html#naming-conventions">naming convention</a> that differentiates modules from the other package functions. The modules in this post use <a href="https://en.wikipedia.org/wiki/Camel_case">camelCase</a>, with suffix variations (i.e., <code>Input</code>/<code>Server</code> and <code>UI</code>/<code>Server</code>) for each functions. Other options come from the <a href="https://thinkr-open.github.io/golem/"><code>golem</code></a> and <a href="https://leprechaun.opifex.org/#/"><code>leprechaun</code></a> packages.</p>
<p><code>golem</code> modules are created with <a href="https://thinkr-open.github.io/golem/reference/add_module.html"><code>golem::add_module()</code></a></p>
</div>
<div class="cell">
<details>
<summary>expand to see golem::add_module(“inputs”)</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mod_inputs_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb12-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb12-4">  )</span>
<span id="cb12-5">}</span>
<span id="cb12-6">mod_inputs_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>( id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session){</span>
<span id="cb12-8">    ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb12-9"> </span>
<span id="cb12-10">  })</span>
<span id="cb12-11">}</span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## To be copied in the UI</span></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mod_inputs_ui("inputs_1")</span></span>
<span id="cb12-14">    </span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## To be copied in the server</span></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mod_inputs_server("inputs_1")</span></span></code></pre></div>
</details>
</div>
<div style="font-size: 1.15em; color: #063E23;">
<p><code>golem</code> modules the following naming convention:</p>
<ol type="1">
<li><p>All new module functions have a <code>mod_</code> prefix</p></li>
<li><p><code>golem</code> module functions are differentiated with either a <code>_ui</code> or <code>_server</code> suffix</p></li>
<li><p>New <code>golem</code> module files are named <code>R/mod_&lt;name&gt;.R</code></p></li>
</ol>
<p><code>leprechaun</code> modules are also created with a <a href="https://leprechaun.opifex.org/#/reference/add_module"><code>leprechaun::add_module()</code></a> function.</p>
</div>
<div class="cell">
<details>
<summary>expand to see leprechaun::add_module(“inputs”)</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">inputsUI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb13-2">    ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb13-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs"</span>)</span>
<span id="cb13-5">    )</span>
<span id="cb13-6">}</span>
<span id="cb13-7">inputs_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb13-9">                ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb13-10">                send_message <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_send_message</span>(session)</span>
<span id="cb13-11">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb13-12">        }</span>
<span id="cb13-13">    )</span>
<span id="cb13-14">}</span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI</span></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputsUI('id')</span></span>
<span id="cb13-17"></span>
<span id="cb13-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server</span></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputs_server('id')</span></span></code></pre></div>
</details>
</div>
<div style="font-size: 1.15em; color: #063E23;">
<p><code>leprechaun</code> modules have a slightly different naming convention:</p>
<ol type="1">
<li><p>All new UI module functions have a <code>UI</code> suffix</p></li>
<li><p>All new module server functions have a <code>_server</code> suffix</p></li>
<li><p><code>leprechaun</code> module functions <em>do not have a prefix</em></p></li>
<li><p>New <code>leprechaun</code> modules named <code>module_&lt;name&gt;.R</code></p></li>
</ol>
<p>Shiny app-packages often require multiple modules and utility functions, so uniform names will make it easier to manage (and test!) your code.</p>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="standalone-app-functions" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="standalone-app-functions">Standalone app functions</h3>
<p><code>mstsap</code> contains three <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">standalone functions</a> for running each set of module functions.</p>
<p>I’ve made a small change to each standalone app function–each app has a call to <code>reactiveValuesToList()</code> that displays in the UI.</p>
<div class="cell">
<details open="">
<summary>print reactive values</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb14-2"></span>
<span id="cb14-3">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb14-4">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb14-5">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb14-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb14-7">  })</span></code></pre></div>
</details>
</div>
<section id="datasetapp" class="level4">
<h4 class="anchored" data-anchor-id="datasetapp">datasetApp</h4>
<p><code>datasetApp()</code> contains a call to the <code>dataset</code> module, and includes a <code>tableOutput()</code> to render the selected data object:</p>
<div id="fig-datasetApp" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-datasetApp" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/datasetApp.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-datasetApp"></p>
<figcaption class="figure-caption">(a) <code>datasetApp</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;5: <code>datasetApp</code></figcaption>
</figure>
</div>
<p>When <code>datasetApp()</code> is run, the app displays the dataset object in the <code>tableOutput()</code>, and the <code>verbatimTextOutput()</code> renders the reactive values as a text:</p>
<div id="fig-datasetApp_run" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-datasetApp_run" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/datasetApp_run.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-datasetApp_run"></p>
<figcaption class="figure-caption">(a) <code>datasetApp</code> with reactive values</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;6: <code>datasetApp</code> with <code>reactiveValuesToList()</code></figcaption>
</figure>
</div>
<p>The output above shows what <code>NS()</code> does in the <code>dataset</code> module–it appends the module <code>id</code> argument to the <code>inputId</code> (which is why we see <code>dataset-dataset</code>).</p>
<ul>
<li><p><strong><code>dataset-</code>:</strong> the module id</p></li>
<li><p><strong><code>dataset-dataset</code></strong> the <code>inputId</code> from the <code>selectInput()</code></p></li>
</ul>
</section>
<section id="selectvarapp" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="selectvarapp">selectVarApp</h4>
<p><code>selectVarApp()</code> includes both <code>dataset</code> and <code>selectVar</code> modules, but instead of rendering the output in a table, the UI renders the variable output in a <code>verbatimTextOutput()</code>.</p>
<div id="fig-selectVarApp" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectVarApp" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectVarApp.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-selectVarApp"></p>
<figcaption class="figure-caption">(a) <code>selectVarApp</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;7: <code>selectVarApp</code></figcaption>
</figure>
</div>
<p>Note that <code>selectVarApp()</code> contains namespaces for two modules:</p>
<ol type="1">
<li><p><strong><code>"data"</code></strong>: the namespace for the <code>datasetnput()</code> and <code>datasetServer()</code> modules, inheriting the <code>filter</code> argument and creating the data object</p></li>
<li><p><strong><code>"var"</code></strong>: the <code>selectVar</code> modules are linked with the <code>"var"</code> id. <code>selectVarServer()</code> uses the <code>data</code> object created by <code>datasetServer()</code> (and also inherits the <code>filter</code> argument).</p></li>
</ol>
<p>These namespaced IDs are rendered below with <code>reactiveValuesToList()</code>:</p>
<div id="fig-selectVarApp_run" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectVarApp_run" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectVarApp_run.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-selectVarApp_run"></p>
<figcaption class="figure-caption">(a) <code>selectVarApp</code> with reactive values</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;8: <code>selectVarApp</code> with <code>reactiveValuesToList()</code></figcaption>
</figure>
</div>
<p>There’s a lot happening in <code>selectVarApp()</code>, so I’ve created the figure below to display the code for the modules with their displayed outputs:</p>
<div class="column-page-inset-right">
<div id="fig-selectVarApp_schema" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectVarApp_schema" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectVarApp_schema.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-selectVarApp_schema"></p>
<figcaption class="figure-caption">(a) <code>selectVarApp</code> schema</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;9: <code>dataset</code> and <code>selectVar</code> modules with rendered outputs</figcaption>
</figure>
</div>
</div>
<p>As we can see, the <code>data</code> output from the <code>dataset</code> module is used to generate the <code>vars()</code> reactive for the <code>verbatimTextOutput()</code> in <code>selectVarApp()</code>. Note that both <code>dataset</code> and <code>selectVar</code> modules don’t contain any output functions–these have been provided in the UI for both <code>datasetApp()</code> and <code>selectVarApp()</code>.</p>
</section>
<section id="selectdatavarapp" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="selectdatavarapp">selectDataVarApp</h4>
<p>The final app in <code>mstsap</code> is <code>selectDataVarApp()</code>. Here the inputs from <code>dataset</code> and <code>selectVar</code> have been moved into the <code>sidebarPanel()</code>, and the output is rendered in the <code>mainPanel()</code>.</p>
<div id="fig-selectDataVarApp" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectDataVarApp" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectDataVarApp.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-selectDataVarApp"></p>
<figcaption class="figure-caption">(a) <code>selectDataVarApp</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;10: <code>selectDataVarApp</code></figcaption>
</figure>
</div>
<p>The reactive values here show how the <a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules">‘Modules inside of modules’</a> work–by adding the additional call to <code>NS()</code> in the <code>datasetInput()</code> and <code>selectVarInput()</code> functions <em>within</em> <code>selectDataVarUI()</code> and <code>selectDataVarServer()</code>, an additional namespace is appended to the reactive values (<code>input$dataset</code> and <code>input$var</code>):</p>
<div id="fig-selectDataVarApp_run" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectDataVarApp_run" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectDataVarApp_run.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-selectDataVarApp_run"></p>
<figcaption class="figure-caption">(a) <code>selectDataVarApp</code> with reactive values</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;11: <code>selectDataVarApp</code> with <code>reactiveValuesToList()</code></figcaption>
</figure>
</div>
<p>Below is a figure that displays the contents of the <code>selectDataVar</code> modules (I’ve removed the <code>tagList()</code> and <code>moduleServer()</code> for simplicity), the <code>selectDataVarApp()</code>, and the rendered outputs:</p>
<div class="column-page-right">
<div id="fig-selectDataVarApp_schema" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-selectDataVarApp_schema" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectDataVarApp_schema.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-selectDataVarApp_schema"></p>
<figcaption class="figure-caption">(a) <code>selectDataVarApp</code> schema</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;12: <code>dataset</code> and <code>selectVar</code> modules inside <code>selectDataVar</code> module with rendered outputs</figcaption>
</figure>
</div>
</div>
</section>
</section>
</section>
<section id="testserver" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testserver">testServer()</h2>
<p>Module server functions can be tested the same way as a traditional shiny <code>server</code> function, as long as you provide the inputs and verify the correct outputs. Below I’ll cover some general advice on module server tests (and the arguments in <code>testServer()</code>).</p>
<section id="testing-module-server-functions" class="level3">
<h3 class="anchored" data-anchor-id="testing-module-server-functions">Testing module server functions</h3>
<p>Before writing tests, make sure you can answer the following:</p>
<ol type="1">
<li><strong><em>What is the overall purpose of the application?</em></strong>
<ul>
<li>This information is typically referred to as the ‘business logic’ of the application, and should be stored in a specifications or requirements document. If I can’t answer this question, I’m probably better off not writing test for code that is likely to undergo major changes.</li>
</ul></li>
<li><strong><em>How does this module fit within that overall purpose?</em></strong>
<ul>
<li>Specifically, how does this module help the application achieve the specifications or requirements? This could also be considered the ‘unit of work’ and ‘end result’ for the module.</li>
</ul></li>
<li><strong><em>What dependencies (i.e., utility functions, data, add-on packages) are required for the module to execute?</em></strong>
<ul>
<li>If the module depends on other functions, data, or packages to perform it’s expected behavior, those functions should either be included in the <code>testServer()</code> test, or have their own tests (or both).</li>
</ul></li>
</ol>
<section id="what-should-i-test" class="level4">
<h4 class="anchored" data-anchor-id="what-should-i-test">What should I test?</h4>
<p>The items below have been compiled from <a href="https://mastering-shiny.org/scaling-testing.html#basic-workflow">Mastering Shiny</a>, <a href="https://r-pkgs.org/testing-design.html#what-to-test">R Packages</a>, and <a href="https://engineering-shiny.org/build-yourself-safety-net.html#testing-your-app">Engineering Production-Grade Shiny Apps</a>:</p>
<ol type="1">
<li><strong><em>Do the inputs/outputs behave as expected?</em></strong>
<ul>
<li>These tests verify the module server function <code>inputId</code>s and <code>outputId</code>s are properly namespaced and accessible</li>
</ul></li>
<li><strong><em>Does the module contain the expected reactive values/objects?</em></strong>
<ul>
<li>Tests should verify it’s reactivity–module server functions will automatically recompute the outputs when it’s inputs change, so tests should verify changes to inputs produce the expected behaviors and outputs. This includes any returned values from the module (and any additional function arguments).</li>
</ul></li>
<li><strong><em>Are the calculations correct?</em></strong>
<ul>
<li>If the module server function performs calculations or data manipulations, the tests should verify the module produces the correct result (ideally for a variety of inputs and edge cases).</li>
</ul></li>
<li><strong><em>How are errors handled in the module?</em></strong>
<ul>
<li>What errors are displayed from the module? Tests should simulate scenarios that can test if the module: 1) returns errors that are informative, 2) fails silently (when appropriate), or 3) falls back to the correct default behavior.</li>
</ul></li>
</ol>
<p>The last piece of advice I’ve found helpful when writing tests comes from <a href="https://r-pkgs.org/testing-design.html#what-to-test">R Packages</a>,</p>
<blockquote class="blockquote">
<p><em>“focus your time on code that you’re not sure about, is fragile, or has complicated interdependencies”</em></p>
</blockquote>
<p>The quote isn’t in reference to testing modules or shiny application functions, but I’ve found it’s easy to fall into the trap of trying to test <em>everything</em> when a targeted approach is more efficient (and equally valid).</p>
<p>The first test I’ll perform is for <code>datasetServer()</code>, the module used to return a data object from the <code>datasets</code> package.</p>
</section>
</section>
<section id="testserver-arguments" class="level3">
<h3 class="anchored" data-anchor-id="testserver-arguments"><code>testServer()</code> arguments</h3>
<ul>
<li><p><code>app</code> can be a module server function (i.e., <code>datasetServer</code>), or any <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html"><code>shiny.appobj</code></a></p></li>
<li><p><code>expr</code> is where I’ll add the <code>testthat</code> expectations and other test code</p></li>
<li><p><code>args</code> is a <code>list()</code> I can use to include any module server function arguments</p></li>
</ul>
</section>
<section id="inputs" class="level3">
<h3 class="anchored" data-anchor-id="inputs">Inputs</h3>
<p>I created the test file with <code>usethis::use_test("datasetServer")</code> and the module server function is the first argument in <code>testServer()</code>.</p>
<p>I’ll start by testing if the initial input value (<code>input$dataset</code>) in <code>datasetServer()</code> is set to <code>NULL</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> datasetServer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb15-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">datasetServer: dataset$input is NULL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4">})</span></code></pre></div>
</div>
<ul>
<li><p>I’ll add a custom message with <code>cat()</code> and the <code>inputId</code> I’m testing, load, document, and install the package, then run the test with <code>testthat::test_file()</code>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">devtools::load_all()</span>
<span id="cb16-2">ℹ Loading mstsap</span>
<span id="cb16-3">devtools::document()</span>
<span id="cb16-4">ℹ Updating mstsap documentation</span>
<span id="cb16-5">ℹ Loading mstsap</span>
<span id="cb16-6"></span>
<span id="cb16-7">Restarting R session...</span>
<span id="cb16-8"></span>
<span id="cb16-9">library(mstsap)</span></code></pre></div>
<ul>
<li>And run the test with <code>testthat::test_file()</code>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb18-2">datasetServer: dataset$input is NULL </span></code></pre></div></li>
</ul>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Creating test messages with `testServer()`">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Creating test messages with <code>testServer()</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>The <code>testServer()</code> documentation has <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/">examples</a> of using <code>cat()</code> to create custom messages. I put a function for creating <code>testServer()</code> messages (<code>test_cmt()</code>) in the <a href="https://github.com/mjfrigaard/mstsap/blob/main/tests/testthat/helper.R"><code>helper.R</code></a> file (<a href="https://r-pkgs.org/testing-advanced.html">read more about test helpers here</a>).</p>
<p>It has two arguments (<code>test</code> and <code>msg</code>), and makes it easy to print messages to the console while I’m developing tests.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod_server_function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test contents"</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3">       mod_server_function<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> test contents </span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<section id="setting-test-inputs" class="level4">
<h4 class="anchored" data-anchor-id="setting-test-inputs">Setting test inputs</h4>
<p><code>testServer()</code> allows us to mimic changing application (or module) <code>inputId</code>s with <code>session$setInputs()</code> like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
</div>
<p>I’ll demonstrate with a test for <code>input$dataset</code> in <code>datasetServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faithful"</span>)</span>
<span id="cb21-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb21-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset,</span>
<span id="cb21-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faithful"</span>)</span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset$input"</span>)</span></code></pre></div>
</div>
<p>The results from <code>test_file()</code> are below:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb22-2">       datasetServer: dataset$input</span></code></pre></div>
</section>
</section>
<section id="returned-values" class="level3">
<h3 class="anchored" data-anchor-id="returned-values">Returned values</h3>
<p>Any returned values from module server functions can be accessed in <code>testServer()</code> with <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-return-values"><code>session$returned()</code></a>. I’ll verify <code>input$dataset</code> returns an object from <code>datasetServer()</code> by testing the class of <code>session$returned()</code>:</p>
<div class="cell">
<details open="">
<summary>show/hide test with session$returned()</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb23-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb23-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()),</span>
<span id="cb23-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class(session$returned())"</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WorldPhones"</span>)</span>
<span id="cb23-8">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb23-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()))</span>
<span id="cb23-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.matrix(session$returned())"</span>)</span></code></pre></div>
</details>
</div>
<p>Note that both methods above can be used to check the class of the returned object.</p>
<p>The updated results from <code>test_file()</code> are below:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb24-2">       datasetServer: class(session$returned()) </span>
<span id="cb24-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb24-4">       datasetServer: is.matrix(session$returned()) </span></code></pre></div>
<ul>
<li><p>I can also use the <code>typeof(datasets::mtcars)</code> for a direct comparison:</p>
<div class="cell">
<details open="">
<summary>show/hide test with session$returned()</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb25-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># app value...</span></span>
<span id="cb25-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()), </span>
<span id="cb25-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...compared to actual output</span></span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars)) </span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typeof(session$returned())"</span>)</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="module-server-arguments" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="module-server-arguments">Module server arguments</h3>
<p>If the module server function has additional arguments beyond <code>id</code>, then it has additional functionality to verify with unit tests. To test additional module server arguments, pass these to <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-additional-parameters"><code>testServer(args = list())</code>.</a> The <code>args</code> list should include named arguments from the module server function, i.e., <code>list(arg1 = "param1", arg2 = "param2")</code>.</p>
<p>For example, <code>selectVarServer()</code> has <code>data</code> and <code>filter</code> arguments:</p>
<ul>
<li><p><code>data</code> is the returned reactive object from <code>datasetServer()</code></p></li>
<li><p><code>filter</code> is the function passed to the <code>find_vars()</code> utility function</p></li>
</ul>
<div class="column-body-outset-right">
<div id="fig-dataset_selectVar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dataset_selectVar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/dataset_selectVar.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dataset_selectVar"></p>
<figcaption class="figure-caption">(a) <code>dataset()</code> -&gt; <code>selectVar()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;13: Object returned from <code>datasetServer()</code> and passed to <code>selectVarServer()</code></figcaption>
</figure>
</div>
</div>
<p>Below is a test for <code>selectVarServer()</code> using <code>args</code> to verify the reactive <code>data()</code> is <code>datasets::mtcars</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb26-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars,</span>
<span id="cb26-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb26-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb26-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb26-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb26-7">})</span></code></pre></div>
</div>
<div style="font-size: 1.05em; color: #A20025;">
<p><strong><em>But this fails with the following error:</em></strong></p>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb28-1">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb28-2">── Error (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ───</span>
<span id="cb28-3">Error in `(function (id, data, filter = is.numeric) </span>
<span id="cb28-4">{</span>
<span id="cb28-5">    stopifnot(shiny::is.reactive(data))</span>
<span id="cb28-6">    stopifnot(!shiny::is.reactive(filter))</span></code></pre></div>
<div style="font-size: 1.05em; color: #006CD9;">
<p><strong><em>What happened?</em></strong></p>
</div>
<p>I’ve included this example because it’s not in the <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#testing-shiny-modules"><code>testServer()</code> documentation</a>, and it’s common to pass values between modules (see <a href="https://engineering-shiny.org/structuring-project.html#a.-returning-values-from-the-module">here in Engineering Production-Grade Shiny Apps</a> and <a href="https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs">here in Mastering Shiny</a>)</p>
<section id="testing-module-communication" class="level4">
<h4 class="anchored" data-anchor-id="testing-module-communication">Testing module communication</h4>
<p>The error message above tells me the issue is originating from the <code>stopifnot()</code> calls in <code>selectVarServer()</code>.</p>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Updating selectVarServer() and find_vars()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>Both <code>selectVarServer()</code> and <code>find_vars()</code> are updated from their original versions to include <code>stopifnot()</code> checks for <code>is.reactive()</code>, <code>is.data.frame()</code> and <code>is.function()</code>:</p>
<ul>
<li><p><a href="https://mastering-shiny.org/scaling-modules.html#server-inputs">Original versions:</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb29-3">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">selectVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), {</span>
<span id="cb30-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), filter))</span>
<span id="cb30-5">    })</span>
<span id="cb30-6"></span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]])</span>
<span id="cb30-8">  })</span>
<span id="cb30-9">}</span></code></pre></div>
</div></li>
<li><p><a href="https://mastering-shiny.org/scaling-modules.html#server-inputs">Updated versions:</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">selectVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb31-2"></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb31-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(filter))</span>
<span id="cb31-5"></span>
<span id="cb31-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb31-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), {</span>
<span id="cb31-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session, </span>
<span id="cb31-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, </span>
<span id="cb31-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), filter)</span>
<span id="cb31-11">        )</span>
<span id="cb31-12">    })</span>
<span id="cb31-13"></span>
<span id="cb31-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]])</span>
<span id="cb31-15">  })</span>
<span id="cb31-16">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data))</span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(filter))</span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb32-5">}</span></code></pre></div>
</div></li>
</ul>
</div>
</div>
</div>
</div>
<p>I’ll stop a moment here to address what’s happening in each module:</p>
<ol type="1">
<li><p>The <code>datasetServer()</code> returns the results of <code>input$dataset</code> as a reactive (<code>data()</code>)</p></li>
<li><p><code>data()</code> enters <code>selectVarServer()</code> in the <code>data</code> argument</p></li>
<li><p><em>Inside</em> <code>selectVarServer()</code>, two <code>stopifnot()</code> functions evaluate the reactivity of <code>data</code> and <code>filter</code> with <code>shiny::is.reactive()</code></p></li>
</ol>
<p>In <code>datasetServer()</code>, the return object is <a href="https://github.com/mjfrigaard/mstsap/blob/f10e497df195cfa188afd031e7d082ed1466989d/R/datasetServer.R#L20">wrapped in the <code>reactive()</code> function</a>, so the items <code>args = list()</code> also need to be wrapped in <code>reactive()</code>.</p>
<p>I’ll re-write the test above to a more basic test using <code>is.reactive()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb33-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars), </span>
<span id="cb33-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb33-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb33-7">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb35-1">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb35-2">       selectVarServer: is.reactive(data()) </span>
<span id="cb35-3">── Failure (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ───</span>
<span id="cb35-4">is.reactive(data()) is not TRUE</span>
<span id="cb35-5"></span>
<span id="cb35-6">`actual`:   FALSE</span>
<span id="cb35-7">`expected`: TRUE </span></code></pre></div>
<div style="font-size: 1.05em; color: #A20025;">
<p><strong><em>Another failure???</em></strong></p>
</div>
<p>The results of this test might seem confusing given my advice to wrap the <code>args</code> list in <code>reactive()</code>, but some reading of the <code>x</code> argument in <code>is.reactive()</code> will clear up the error:</p>
<blockquote class="blockquote">
<p><em>For <code>is.reactive()</code>, an object to test. For <code>reactive()</code>, an expression.</em></p>
</blockquote>
<p>Removing the parentheses from <code>data()</code> will result in the proper test results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb36-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars), </span>
<span id="cb36-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb36-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb36-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb36-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb36-7">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb38-2">       selectVarServer: is.reactive(data()) </span></code></pre></div>
</section>
</section>
<section id="utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="utility-functions">Utility functions</h3>
<p>Now that I have a reactive <code>data()</code> input, I can explore how this value is used inside <code>selectVarServer()</code>. To update <code>input$var</code>, the <code>data()</code> input is passed to <code>find_vars()</code> (a function that uses a <code>filter</code> argument “<em>used to select which variables to list</em>”). See the example below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">mstsap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(</span>
<span id="cb39-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts, </span>
<span id="cb39-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.factor)</span>
<span id="cb39-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "feed"</span></span></code></pre></div>
</div>
<p>I’ll write an expectation that captures the behavior of <code>find_vars()</code> in <code>selectVarServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb40-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts),</span>
<span id="cb40-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb40-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb40-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), is.factor),</span>
<span id="cb40-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>)</span>
<span id="cb40-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"find_vars()"</span>)</span>
<span id="cb40-8">})</span></code></pre></div>
</div>
<p>The results are below:</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb41-2">       selectVarServer: find_vars()</span></code></pre></div>
<p>To verify that the returned object from <code>selectVarServer()</code> is the selected column, I’ll need to simulate the application behavior in the tests:</p>
<ul>
<li><p>Create a reactive <code>data()</code> input in <code>selectVarServer()</code>:</p>
<div class="cell">
<details open="">
<summary>setting args = list()</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb42-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts),</span>
<span id="cb42-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb42-4"></span>
<span id="cb42-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># include expectations below...</span></span>
<span id="cb42-6"></span>
<span id="cb42-7">  })</span></code></pre></div>
</details>
</div></li>
<li><p>Set the <code>input$var</code> and verify the <code>input$var</code>:</p>
<div class="cell">
<details open="">
<summary>verify input$var</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb43-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var,</span>
<span id="cb43-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$var"</span>)</span></code></pre></div>
</details>
</div></li>
<li><p>Set the <code>input$var</code> and verify the <code>session$returned()</code></p>
<div class="cell">
<details open="">
<summary>verify session$returned()</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>)</span>
<span id="cb44-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>(),</span>
<span id="cb44-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>]])</span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"session$returned()"</span>)</span></code></pre></div>
</details>
</div></li>
</ul>
<p>The results from these tests are below:</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb45-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb45-2">       selectVarServer: input$var </span>
<span id="cb45-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb45-4">       selectVarServer: session$returned() </span></code></pre></div>
</section>
<section id="module-outputs" class="level3">
<h3 class="anchored" data-anchor-id="module-outputs">Module outputs</h3>
<p>Rendered outputs can be accessed in <code>testServer()</code> just like inputs (i.e., with <code>output$outputId</code>). But the modules in <code>mstsap</code> don’t have outputs–these are included in the standalone app functions (<code>datasetApp()</code>, <code>selectVarApp()</code>, and <code>selectDaraVarApp()</code>).</p>
<p>Fortunately, app functions can also be passed to the <code>app</code> argument of <code>testServer()</code>. I’ll use <code>datasetApp()</code> to demonstrate.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/datasetApp.png" class="img-fluid figure-img" style="width:80.0%"></p>
</figure>
</div>
<p>Testing a standalone app function is similar to testing a module server function, but with a few minor differences. First, the output from the standalone app function is <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#shiny-app-objects">assigned to an object</a> (<code>ds_app</code>), then placed in the <code>app</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb46-2">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb46-3"></span>
<span id="cb46-4">  })</span></code></pre></div>
</div>
<p>To use <code>session$setInputs()</code> need to include the namespace for the <code>inputId</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/datasetApp_reactives.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
<p>The output from <code>reactiveValuesToList()</code> in <code>datasetApp()</code> shows me how to access the <code>inputId</code> in the <code>datasetServer()</code> module (i.e., <code>input$`dataset-dataset`</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb47-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb47-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb47-4"></span>
<span id="cb47-5">})</span></code></pre></div>
</div>
<section id="output-testing-strategy" class="level4">
<h4 class="anchored" data-anchor-id="output-testing-strategy">Output testing strategy</h4>
<p>Testing outputs with <code>testServer()</code> is different than testing outputs in regular unit tests, because shiny outputs are executed in the server, but then rendered in the UI. The <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#complex-outputs-plots-htmlwidgets"><code>testServer()</code> documentation</a> outlines a testing strategy for complex outputs:</p>
<blockquote class="blockquote">
<p>*The goal for your tests should be to ask “is the code that I wrote producing the plot I want?” There are two components to that question:</p>
<ol type="1">
<li><em>Does the plot generate without producing an error?</em></li>
<li><em>Is the plot visually correct?</em></li>
</ol>
<p><em><code>testServer</code> is great for assessing the first component here. By merely referencing <code>output$plot</code> in your test, you’ll confirm that the plot was generated without an error.</em></p>
</blockquote>
<p>If we replace <em>plot</em> with <em>table</em> in the advice above, the tests for <code>datasetApp()</code> should confirm <code>output$data</code> is generated without producing an error.</p>
<p>Instead of writing an expectation, I’ll use <code>cat()</code> to display the contents of <code>output$data</code> after setting the <code>`dataset-dataset`</code> input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb48-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb48-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$data:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb48-5">})</span></code></pre></div>
</div>
<p>The results from the test is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb50-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb50-2">    output$data:</span></code></pre></div>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb51-1"> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;table</span>  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">class</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table shiny-table table- spacing-s'</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">style</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width:auto;'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;thead&gt;</span> </span>
<span id="cb51-3">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tr&gt;</span> </span>
<span id="cb51-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;th</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">style</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text-align: right;'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> weight <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/th&gt;</span> </span>
<span id="cb51-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;th</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">style</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text-align: left;'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> feed <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/th&gt;</span>  </span>
<span id="cb51-6">     <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span> </span>
<span id="cb51-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/thead&gt;</span> </span>
<span id="cb51-8">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tbody&gt;</span></span>
<span id="cb51-9">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tr&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">align</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> 179.00 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td&gt;</span> horsebean <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span></span>
<span id="cb51-10">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tr&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">align</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> 160.00 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td&gt;</span> horsebean <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span></span>
<span id="cb51-11">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tr&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">align</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> 136.00 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td&gt;</span> horsebean <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span></span>
<span id="cb51-12">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tr&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">align</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> 227.00 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td&gt;</span> horsebean <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span></span>
<span id="cb51-13">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tr&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">align</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> 217.00 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td&gt;</span> horsebean <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span></span>
<span id="cb51-14">      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;tr&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">align</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span> 168.00 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;td&gt;</span> horsebean <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/td&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span></span>
<span id="cb51-15">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/tbody&gt;</span> </span>
<span id="cb51-16"> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/table&gt;</span> </span></code></pre></div>
<p>The output is the HTML used to render the table in the UI. This doesn’t add a passing test, but it confirms that the table is being generated from the <code>data()</code> reactive.</p>
<p>The tests for <code>datasetApp()</code> will confirm the <code>inputId</code>, and verify the <code>class</code> and <code>names</code> of the <code>data()</code> reactive (which will be passed to the <code>renderTable()</code> function):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb52-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb52-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb52-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`dataset-dataset`"</span>)</span>
<span id="cb52-5"></span>
<span id="cb52-6">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb52-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb52-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.data.frame(data())"</span>)</span>
<span id="cb52-9"></span>
<span id="cb52-10">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb52-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()),</span>
<span id="cb52-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts))</span>
<span id="cb52-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"names(data())"</span>)</span></code></pre></div>
</div>
<p>I can include a test for the <code>class</code> of <code>output$data</code>, but note that this is a character output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb53-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb53-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)</span>
<span id="cb53-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class(output$data)"</span>)</span></code></pre></div>
</div>
<p>The results from <code>test_file()</code> are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb55-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb55-2">       datasetApp: input$`dataset-dataset` </span>
<span id="cb55-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb55-4">       datasetApp: is.data.frame(data()) </span>
<span id="cb55-5">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb55-6">       datasetApp: names(data()) </span>
<span id="cb55-7">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb55-8">       datasetApp: class(output$data) </span></code></pre></div>
<p>The same method can be used to test the <code>selectVarApp()</code>, but note this app requires passing both <code>inputId</code>s to <code>session$setInputs()</code>:</p>
<div class="cell">
<details>
<summary>show/hide selectVarApp() tests</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">sv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarApp</span>()</span>
<span id="cb56-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> sv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb56-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb56-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb56-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm contents of output$out</span></span>
<span id="cb56-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$out:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-7">  </span>
<span id="cb56-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm var is reactive </span></span>
<span id="cb56-9">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(var))</span>
<span id="cb56-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm var input</span></span>
<span id="cb56-11">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb56-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb56-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>)</span>
<span id="cb56-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm data is reactive</span></span>
<span id="cb56-15">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb56-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm data() is a data.frame</span></span>
<span id="cb56-17">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb56-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb56-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm 'data' can be subsetted with 'var'</span></span>
<span id="cb56-20">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb56-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>]],</span>
<span id="cb56-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> airquality[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>]])</span>
<span id="cb56-23">})</span></code></pre></div>
</details>
</div>
</section>
<section id="testing-nested-modules" class="level4">
<h4 class="anchored" data-anchor-id="testing-nested-modules">Testing nested modules</h4>
<p>I highly recommend viewing the output of <code>reactiveValuesToList()</code> if your application has nested modules. It’s easy to lose track of ids if they span multiple layers.</p>
<p>We know <code>selectDataVarApp()</code> contains ‘modules inside other modules’, and these layers are reflected in the namespaces:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p3/selectDataVarApp_reactives.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
<p>To access the <code>inputId</code>s in the nested modules, we need to pass the full ‘appended’ namespace:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">dv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarApp</span>()</span>
<span id="cb57-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> dv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb57-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb57-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb57-5">})</span></code></pre></div>
</div>
<p>After setting the inputs, I can confirm the contents of <code>output$out</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">dv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarApp</span>()</span>
<span id="cb58-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> dv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb58-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb58-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb58-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$out:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb58-6">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb60-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb60-2">    output$out:</span>
<span id="cb60-3">   [1]  41  36  12  18  NA  28  23  19   8  NA   7  16  11  14  18</span>
<span id="cb60-4"> [16]  14  34   6  30  11   1  11   4  32  NA  NA  NA  23  45 115</span>
<span id="cb60-5"> [31]  37  NA  NA  NA  NA  NA  NA  29  NA  71  39  NA  NA  23  NA</span>
<span id="cb60-6"> [46]  NA  21  37  20  12  13  NA  NA  NA  NA  NA  NA  NA  NA  NA</span>
<span id="cb60-7"> [61]  NA 135  49  32  NA  64  40  77  97  97  85  NA  10  27  NA</span>
<span id="cb60-8"> [76]   7  48  35  61  79  63  16  NA  NA  80 108  20  52  82  50</span>
<span id="cb60-9"> [91]  64  59  39   9  16  78  35  66 122  89 110  NA  NA  44  28</span>
<span id="cb60-10">[106]  65  NA  22  59  23  31  44  21   9  NA  45 168  73  NA  76</span>
<span id="cb60-11">[121] 118  84  85  96  78  73  91  47  32  20  23  21  24  44  21</span>
<span id="cb60-12">[136]  28   9  13  46  18  13  24  16  13  23  36   7  14  30  NA</span>
<span id="cb60-13">[151]  14  18  20 </span></code></pre></div>
<p>After confirming <code>output$out</code>, I’ll test the inputs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb61-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb61-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>)</span>
<span id="cb61-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`var-var-var`"</span>)</span>
<span id="cb61-5"></span>
<span id="cb61-6">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb61-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb61-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb61-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`var-data-dataset`"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb63-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb63-2">       selectDataVarApp: input$`var-var-var` </span>
<span id="cb63-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb63-4">       selectDataVarApp: input$`var-data-dataset`</span></code></pre></div>
<p>I can also verify the contents of the reactive <code>var()</code> inside the test:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(var))</span>
<span id="cb64-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(var)"</span>)</span>
<span id="cb64-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">var:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb66-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb66-2">       selectDataVarApp: is.reactive(var) </span>
<span id="cb66-3"></span>
<span id="cb66-4">    var:</span>
<span id="cb66-5"> 41 36 12 18 NA 28 23 19 8 NA 7 16 11 14 18 14 34 6 30 11 1 11 4 32 NA NA NA 23 </span>
<span id="cb66-6">    45 115 37 NA NA NA NA NA NA 29 NA 71 39 NA NA 23 NA NA 21 37 20 12 13 NA NA NA</span>
<span id="cb66-7">    NA NA NA NA NA NA NA 135 49 32 NA 64 40 77 97 97 85 NA 10 27 NA 7 48 35 61 79 </span>
<span id="cb66-8">    63 16 NA NA 80 108 20 52 82 50 64 59 39 9 16 78 35 66 122 89 110 NA NA 44 28 </span>
<span id="cb66-9">    65 NA 22 59 23 31 44 21 9 NA 45 168 73 NA 76 118 84 85 96 78 73 91 47 32 20 23</span>
<span id="cb66-10">    21 24 44 21 28 9 13 46 18 13 24 16 13 23 36 7 14 30 NA 14 18 20 </span></code></pre></div>
</section>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has shown how shiny’s <code>testServer()</code> function allows you to isolate and test module server functions, which makes it easier to ensure that your <code>server</code> function behaves as expected (and locate and fix bugs).</p>
<p>I hope you have a better understanding of how you can use <code>testServer()</code> to test a modules inputs/outputs, reactivity, calculations, and errors.</p>
<p>In the next post I’ll cover performing integration tests with <code>shinytest2</code>!</p>


</section>

 ]]></description>
  <category>shiny</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/test-shiny-p3/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/test-shiny-p3/image.png" medium="image" type="image/png" height="192" width="144"/>
</item>
<item>
  <title>Debugging in RStudio</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/debugging/index.html</link>
  <description><![CDATA[ 




<p>In this post I’ll cover using the <code>browser()</code> function with RStudio’s debugger. RStudio’s debugging tools are built into the IDE, which provides a seamless transition between writing, running, and debugging code.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://mjfrigaard.github.io/posts/debugging/image.png" class="img-fluid" style="width:70.0%"></p>
</div></div><section id="debugging" class="level1 page-columns page-full">
<h1>Debugging</h1>
<p>Debuggers are a critical tool when you’re programming, and they have several benefits that make them a must-use for any R user. You’ll inevitably encounter an error or unexpected behavior while you’re programming. Using a debugger allows you to ‘step through’ your code line-by-line, which makes it easier to find the precise location of bugs and errors and the conditions under which they occur.</p>
<p>But debuggers aren’t only helpful in dealing with errors. The debugger can also be a great learning tool because it provides an interactive way to see how the code is being executed and the order in which functions are being called. For example, you might know that a function returns a particular object but can’t determine how that object was created. Debugging lets us get ‘under the hood’ of our code and see how it’s really working.</p>
<p>You’re probably doing some version of debugging already. If you’ve ever dropped a call to <code>print()</code> or <code>return()</code> at some well-placed intermediate point in a function to try and understand its behavior, then you know the challenge debugging tries to solve: <strong>We can’t see what happens inside the parentheses when code is executed.</strong> When you use <code>print()</code> or <code>return()</code> in this way, it’s an attempt to indirectly investigate how/if/where the code is performing its intended purpose.</p>
<p>In this post, I’ll cover using the <code>browser()</code> function and RStudio’s debugger while developing a series of small, modular functions for returning a table of ‘package data structures.’ The code for this post comes from <a href="https://github.com/mjfrigaard/dbap"><code>dbap</code></a> (‘debugging app-package’).</p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>I want to create a function that returns a table of ‘data structure’ columns that describe the available <code>data.frame</code> or <code>tibble</code> objects loaded with a package. Below is a small example of the desired return object from this function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 25%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 10%">
<col style="width: 7%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Dataset</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13</td>
<td style="text-align: left;">19066</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">datasets</td>
<td style="text-align: left;">mtcars</td>
<td style="text-align: left;">data.frame</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">32</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>This table shows the <code>storms</code> data from <code>dplyr</code> and the <code>mtcars</code> data from <code>datasets</code>. The columns include the <code>Package</code> the data came from, the dataset name (<code>Dataset</code>), the data <code>Title</code> from the documentation, the <code>Class</code> of the data object, the total number of <code>Columns</code> and <code>Rows</code>, and the number of columns by type (<code>Logical</code>, <code>Numeric</code>, <code>Character</code>, <code>Factor</code> and <code>List</code>).</p>
<p>One of the first steps for creating this function is to verify a package’s namespace is loaded. I’ve written the <code>check_pkg_ns()</code> to check this.</p>
<div class="cell">
<details open="">
<summary>check_pkg_ns()</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">check_pkg_ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(quiet)) {</span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with messages</span></span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(pkg)) {</span>
<span id="cb1-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb1-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loading package: "</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb1-7">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" not available"</span>))</span>
<span id="cb1-9">      }</span>
<span id="cb1-10">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package "</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" loaded</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb1-12">    }</span>
<span id="cb1-13">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without messages</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(pkg)) {</span>
<span id="cb1-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb1-17">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" not available"</span>))</span>
<span id="cb1-19">      }</span>
<span id="cb1-20">    }</span>
<span id="cb1-21">  }</span>
<span id="cb1-22">}</span></code></pre></div>
</details>
</div>
<p><code>check_pkg_ns()</code> checks if a packages’s namespace is loaded, and if not, loads it. This function assumes the package (<code>pkg</code>) has been installed with <code>install.packages()</code> (I’ve also written <a href="https://github.com/mjfrigaard/dbap/blob/main/R/check_pkg_inst.R"><code>check_pkg_inst()</code></a> to check if the package has been installed.)</p>
<section id="experiment" class="level3">
<h3 class="anchored" data-anchor-id="experiment">Experiment</h3>
<p>Before debugging, I’ll read the documentation and help files to find examples or use cases for ‘mini-experiments.’ These are designed to clarify any function arguments and learn how the code truly works. Experiments should produce predictable, definitive (preferably incompatible) outputs from each function.</p>
<section id="namespace-functions" class="level4">
<h4 class="anchored" data-anchor-id="namespace-functions">Namespace functions</h4>
<p>The help file contains the following helpful statement on <code>isNamespaceLoaded()</code>:</p>
<blockquote class="blockquote">
<p><em>“<code>isNamespaceLoaded(pkg)</code> is equivalent to but more efficient than <code>pkg %in% loadedNamespaces()</code>”</em></p>
</blockquote>
<p>First, I’ll check the loaded namespaces with <code>loadedNamespaces()</code>, then look for a package I know <em>isn’t</em> in the namespace with <code>isNamespaceLoaded()</code>. I’ll use the <code>fs</code> package because it isn’t loaded or attached to the <code>search()</code> list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what's in the namespace? </span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadedNamespaces</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1"> [1] "compiler"   "rsconnect"  "graphics"  </span>
<span id="cb3-2"> [4] "tools"      "rstudioapi" "utils"     </span>
<span id="cb3-3"> [7] "grDevices"  "stats"      "datasets"  </span>
<span id="cb3-4">[10] "methods"    "base"</span></code></pre></div>
<p>Check if <code>fs</code> is in the loaded namespace:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify fs is not loaded</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">[1] FALSE</span></code></pre></div>
<p>The help file tells me the following about <code>requireNamespace</code>:</p>
<blockquote class="blockquote">
<p><em>“<code>requireNamespace</code> is a wrapper for <code>loadNamespace</code> analogous to <code>require()</code> that returns a logical value.”</em></p>
</blockquote>
<p>…and…</p>
<blockquote class="blockquote">
<p><em>“<code>requireNamespace</code> returns <code>TRUE</code> if it succeeds or <code>FALSE</code>”</em></p>
</blockquote>
<p>I’ll load a package (<code>"fs"</code>) with <code>requireNamespace()</code> and verify it’s in the namespace with <code>isNamespaceLoaded()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add "fs" to the namespace</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">Loading required namespace: fs</span>
<span id="cb7-2">[1] TRUE</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify it's been added </span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">[1] TRUE</span></code></pre></div>
<p>Finally, I’ll unload the <code>"fs"</code> package from the namespace so it can be tested in the debugger.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove fs</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify fs has been unloaded</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">[1] FALSE</span></code></pre></div>
<p>The great thing about designing these mini experiments is that they can be quickly converted into <a href="https://testthat.r-lib.org/"><code>testthat</code> tests</a>. I’m now confident I can use the namespace functions to:</p>
<ol type="1">
<li>View loaded packages namespaces<br>
</li>
<li>Check for a specific package in the loaded namespaces<br>
</li>
<li>Require a package namespace is loaded<br>
</li>
<li>Remove a loaded package namespace</li>
</ol>
<p>These are the behaviors I want to confirm in <code>check_pkg_ns()</code> using the <code>browser()</code> function.</p>
</section>
</section>
</section>
<section id="browser" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="browser">browser()</h2>
<p>If I want to explore the behaviors of the namespace functions in <code>check_pkg_ns()</code>, I need to add <code>browser()</code> somewhere I can ‘step into’ this function and then proceed through line-by-line. In this case, the top of the function makes sense:</p>
<div id="fig-browser_fun" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-browser_fun" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browser_fun.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-browser_fun"></p>
<figcaption class="figure-caption">(a) <code>browser()</code> in <code>check_pkg_ns()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;1: <code>browser()</code> placement in <code>check_pkg_ns()</code></figcaption>
</figure>
</div>
<section id="debug-mode" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="debug-mode">Debug mode</h3>
<p>To enter debugging mode, I’ll need to run <code>check_pkg_ns()</code> or source <code>R/check_pkg_ns.R</code> with the package I used in my experiments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="column-page-inset-right">
<div id="fig-dbg-debug_mode" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-debug_mode" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-debug_mode.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-debug_mode"></p>
<figcaption class="figure-caption">(a) Debug mode</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;2: RStudio IDE in debug mode</figcaption>
</figure>
</div>
</div>
<p>The <code>browser()</code> function is one of the multiple methods for using RStudio debugging tools (see the <strong>TIP</strong> callout box below for more).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TIP: Other debugging methods
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.15em; color: #063E23;">
<p>In this post, I focused on using the <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/browser.html"><code>browser()</code></a> function to enter debug mode, but RStudio has several built-in tools that can help you debug your R code:</p>
<ul>
<li><p><strong>Debug function on error:</strong> You can set R to automatically enter the debugger when an error occurs by using <code>options(error = utils::recover)</code>. Then, when an error occurs, you’ll be given a menu of places to browse, the most recent (the location where the error occurred) first.</p></li>
<li><p><strong>Breakpoints:</strong> Breakpoints can be set in your R scripts to pause execution at a particular line of code. You can add breakpoints by clicking to the left of the line number in the script editor or by pressing Shift+F9 with your cursor on the desired line. Then, run your code. Execution will stop just before the line with the breakpoint, allowing you to inspect the current state of the environment.</p></li>
<li><p><strong><code>debug()</code>:</strong> You can use <code>debug(function_name)</code> to flag a function for “debug” mode. When you call the function, the debugger will open and stop at the first line of the function, where you can step through the function line by line, inspect the environment, and see what’s happening at each step.</p></li>
<li><p><strong><code>traceback()</code></strong>: When an error occurs, you can call <code>traceback()</code> to get a stack trace that shows you the sequence of calls that led up to the error.</p></li>
<li><p><strong>Code Diagnostics</strong>: RStudio provides real-time notifications about potential issues in your code, like syntax errors or unused variables. These are not technically part of the debugger, but diagnostics will help you avoid bugs before you run your code.</p></li>
</ul>
<p>You should read <a href="https://support.posit.co/hc/en-us/articles/205612627-Debugging-with-the-RStudio-IDE">this blog post</a> and <a href="https://adv-r.hadley.nz/debugging.html">this chapter</a> of Advanced R, 2nd Ed. for more information on the various debugging methods.</p>
</div>
</div>
</div>
</div>
</section>
<section id="console" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="console">Console</h3>
<p>When the <code>browser()</code> function is called, the <strong>Console</strong> enters the ‘reactive browser environment,’ tells me where the debugging function was called from, and changes the prompt to <code>Browse[1]&gt;</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">Called from: check_pkg_ns("fs")</span>
<span id="cb13-2">Browse[1]&gt; </span></code></pre></div>
<p>I can use the <strong>Console</strong> to inspect variables and ‘step through’ the function code.</p>
<div class="column-page-inset-right">
<div id="fig-console" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-console" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-console.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-console"></p>
<figcaption class="figure-caption">(a) Debug mode in <strong>Console</strong></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;3: Debug mode with <code>browser()</code> in Console</figcaption>
</figure>
</div>
</div>
<p>The debugger toolbar is also placed at the top of the <strong>Console</strong>:</p>
<div id="fig-browser_toolbar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-browser_toolbar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browser_toolbar.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-browser_toolbar"></p>
<figcaption class="figure-caption">(a) Debug toolbar <strong>Console</strong></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;4: Debug toolbar in Console</figcaption>
</figure>
</div>
<p>I can use the toolbar or enter the following commands in the <strong>Console</strong>:</p>
<ul>
<li><p><code>n</code> (next): execute the next step in the function</p></li>
<li><p><code>s</code> (step into): step into the function call on the current line</p></li>
<li><p><code>c</code> (continue): continue normal execution without stepping</p></li>
<li><p><code>f</code> (finish): execute the rest of the current loop or function</p></li>
<li><p><code>Q</code> (Quit): quit the debugger</p></li>
</ul>
<p>I’ll return to the <strong>Console</strong> in a bit (this is where most of the debugging is done), but let’s view the other changes to the IDE first.</p>
</section>
<section id="source" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="source">Source</h3>
<p>In the <strong>Source</strong> pane, we can see the line with <code>browser()</code> has been highlighted with an arrow:</p>
<div class="column-page-inset-right">
<div id="fig-source" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-source" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-source.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-source"></p>
<figcaption class="figure-caption">(a) Debug mode in <strong>Source</strong></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;5: Debug mode with <code>browser()</code> in Source</figcaption>
</figure>
</div>
</div>
<p>The <strong>Source</strong> pane will continually update and highlight my execution position (i.e., what’s going to be executed next) as I ‘step through’ the code.</p>
<p>*<em>After we’ve finished debugging, it’s important to remember to remove the <code>browser()</code> function so it isn’t triggered the next time it is executed.</em></p>
</section>
<section id="environment" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="environment">Environment</h3>
<p>The <em>(Environment)</em> pane is changed from the global environment to the environment of the function that’s currently being executed in the <strong>Console</strong>:</p>
<div class="column-page-inset-right">
<div id="fig-env" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-env" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-env.png" class="img-fluid figure-img" style="width:80.0%" data-ref-parent="fig-env"></p>
<figcaption class="figure-caption">(a) Debug mode in <strong>Environment</strong></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;6: Debug mode with <code>browser()</code> in Environment</figcaption>
</figure>
</div>
</div>
<p>In the case of <code>check_pkg_ns()</code>, I can see the <strong>Values</strong> section contains the <code>pkg</code> (<code>"fs"</code>) and <code>quiet</code> (<code>FALSE</code>) arguments.</p>
<section id="other-environments" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="other-environments">Other environments</h4>
<p>The drop-down list of environments above the <strong>Values</strong> is arranged in reverse hierarchical order: The <strong>Global Environment</strong> is listed under the drop-down list, but it’s above the <code>check_pkg_ns()</code> environment in the search path:</p>
<div class="column-page-inset-right">
<div id="fig-env" class="quarto-layout-panel">
<figure class="figure">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-env-list" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-env-list.png" class="img-fluid figure-img" data-ref-parent="fig-env"></p>
<figcaption class="figure-caption">(a) Items in <strong>Environment</strong> debug mode</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-env-list" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/search-path.png" title="Source: https://adv-r.hadley.nz/environments.html#search-path" class="img-fluid figure-img" data-ref-parent="fig-env"></p>
<figcaption class="figure-caption">(b) <a href="https://adv-r.hadley.nz/environments.html#search-path">Package environments and the search path</a></figcaption>
</figure>
</div>
</div>
</div>
<p></p><figcaption class="figure-caption">Figure&nbsp;7: Environments with debugger</figcaption><p></p>
</figure>
</div>
</div>
</section>
<section id="traceback" class="level4">
<h4 class="anchored" data-anchor-id="traceback">Traceback</h4>
<p>The traceback (or ‘call stack’) is the ‘stack’ of functions that have been run thus far:</p>
<div id="fig-traceback" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-traceback" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-traceback.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-traceback"></p>
<figcaption class="figure-caption">(a) Traceback in <strong>Environment</strong></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;8: Environment Traceback viewer</figcaption>
</figure>
</div>
<p>Clicking on an item in traceback will display the environment contents in the function’s code. Right now, it includes the call to <code>source("R/check_pkg_ns.R")</code>, and ‘Debug source’ call to <code>check_pkg_ns("fs")</code>.</p>
<p>If the <strong><em>Show internals</em></strong> option is selected, the internal functions are shown (slightly subdued in gray).</p>
<div id="fig-traceback-internals" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-traceback-internals" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-traceback-internals.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-traceback-internals"></p>
<figcaption class="figure-caption">(a) Traceback internals</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;9: Traceback internals</figcaption>
</figure>
</div>
</section>
</section>
<section id="arguments" class="level3">
<h3 class="anchored" data-anchor-id="arguments">Arguments</h3>
<p>The <code>pkg</code> argument can be printed to verify it’s contents.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">Browse[1]&gt; pkg</span>
<span id="cb14-2">[1] "fs"</span></code></pre></div>
<p>The debugger lets me view the state of a function’s values or variables at each execution step, which helps me understand any incorrect or unexpected values.</p>
<p>Based on the help files and my experiments, <code>check_pkg_ns()</code> should be looking through the namespace to see if a <code>pkg</code> is loaded; if it isn’t, that <code>pkg</code> is loaded in the namespace.</p>
<p>I can also check the code from the mini experiments inside the debugger <strong>Console</strong> to see if the <code>fs</code> namespace has been loaded:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">Browse[1]&gt; isNamespaceLoaded("fs")</span>
<span id="cb15-2">[1] FALSE</span></code></pre></div>
<p>At my current location in <code>check_pkg_ns()</code>, the <code>fs</code> package hasn’t been loaded.</p>
</section>
<section id="stepping-through" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="stepping-through">Stepping through</h3>
<p>I can begin ‘stepping through’ <code>check_pkg_ns()</code> by entering <strong><code>n</code></strong> in the <strong>Console</strong>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">Browse[1]&gt; n</span></code></pre></div>
<p>Notice after the entering <strong><code>n</code></strong> in the <strong>Console</strong>, the debugger tells me where the <code>browser()</code> function has paused execution (<code>debug at /path/to/function/file.R</code>), the line number (<code>#27</code>), and the <code>check_pkg_ns()</code> function is printed to console (I’ve omitted it here):</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">Browse[1]&gt; n</span>
<span id="cb17-2">debug at ~/projects/apps/dbap/R/check_pkg_ns.R#27:</span>
<span id="cb17-3"></span>
<span id="cb17-4">&lt;...check_pkg_ns() function...&gt;</span>
<span id="cb17-5"></span>
<span id="cb17-6">Browse[2]&gt;</span></code></pre></div>
<p>The prompt also changes from <code>Browse[1]&gt;</code> to <code>Browse[2]&gt;</code> to let me know I’m inside the <code>check_pkg_ns()</code> function.</p>
<p>I’ll use <strong><code>n</code></strong> (or Next) to continue following the path <code>pkg</code> takes through the function:</p>
<div class="column-page-inset-right">
<div id="fig-dbg-next-console" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-next-console" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-next-console.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-next-console"></p>
<figcaption class="figure-caption">(a) Use Console to step through function</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;10: Use <code>n</code> to step through <code>check_pkg_ns()</code></figcaption>
</figure>
</div>
</div>
<p>When I land on the line <em>after</em> the call to <code>requireNamespace()</code>, I can check to see if the <code>fs</code> namespace has been loaded with <code>isNamespaceLoaded("fs")</code></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">Browse[2]&gt; isNamespaceLoaded("fs")</span>
<span id="cb18-2">[1] TRUE</span></code></pre></div>
</section>
<section id="inspect-values" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="inspect-values">Inspect values</h3>
<p>Now that I’ve confirmed <code>check_pkg_ns()</code> works with <code>fs</code>, I should also confirm it works with a development package (i.e., not on CRAN). I can test this with the <a href="https://github.com/csgillespie/roxygen2Comment"><code>roxygen2Comment</code> package</a>–it contains an addin for pasting <code>roxygen2</code> comment blocks.</p>
<p>To quit debug mode, I can enter <strong><code>Q</code></strong> in the <strong>Console</strong> or click on the red square (<strong><em>Stop</em></strong>) icon in the toolbar.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1">Browse[2]&gt; Q</span></code></pre></div>
<p>I’ll confirm <code>roxygen2Comment</code> is not loaded with <code>isNamespaceLoaded()</code>, then change the <code>pkg</code> argument in <code>check_pkg_ns()</code> and re-run the function</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb20-1">isNamespaceLoaded("roxygen2Comment")</span>
<span id="cb20-2">[1] FALSE</span></code></pre></div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">&gt; check_pkg_ns("roxygen2Comment")</span>
<span id="cb21-2">Called from: check_pkg_ns("roxygen2Comment")</span>
<span id="cb21-3">Browse[1]&gt; </span></code></pre></div>
<p>This time, when I step through <code>check_pkg_ns()</code>, I notice <code>pkg</code> takes an alternative path:</p>
<div class="column-page-inset-right">
<div id="fig-dbg-next-console-02" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-next-console-02" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-next-console-02.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-next-console-02"></p>
<figcaption class="figure-caption">(a) Alternative path through function</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;11: Development package in <code>check_pkg_ns()</code></figcaption>
</figure>
</div>
</div>
<p>When the <strong>Source</strong> pane highlights the <code>stop()</code> function, I can check to confirm this package wasn’t loaded:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">Browse[2]&gt; isNamespaceLoaded("roxygen2Comment")</span>
<span id="cb22-2">[1] FALSE</span></code></pre></div>
<p>If I enter <strong><code>n</code></strong> one more time in the <strong>Console</strong>, I see the <code>stop()</code> error from the function is returned:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">Browse[2]&gt; n</span>
<span id="cb23-2">Error in check_pkg_ns("roxygen2Comment") : </span>
<span id="cb23-3">  roxygen2Comment not available</span></code></pre></div>
<p>I’ll perform one last check on <code>check_pkg_ns()</code>: what if I want to pass multiple packages to <code>pkg</code>? I’ll check this with <a href="https://fs.r-lib.org/"><code>fs</code></a> and <a href="https://klmr.me/box/index.html"><code>box</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First make sure these aren't loaded...</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>)</span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now combine into vector</span></span>
<span id="cb24-5">pkgs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>)</span>
<span id="cb24-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(pkgs)</span></code></pre></div>
</div>
<p>After entering debug mode, I want to proceed to the control flow and verify the <code>pkgs</code> variable:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">&gt; check_pkg_ns(pkgs)</span>
<span id="cb25-2">Called from: check_pkg_ns(pkgs)</span>
<span id="cb25-3">Browse[1]&gt; n</span>
<span id="cb25-4">Browse[2]&gt; pkgs</span>
<span id="cb25-5">[1] "fs"  "box"</span></code></pre></div>
<p>This confirms both packages are in the <code>pkg</code> variable. If I use <strong><code>n</code></strong> to proceed through to end of <code>check_pkg_ns()</code>, I see the final line returns the successful loading message twice:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb26-1">Browse[2]&gt; n</span>
<span id="cb26-2">Loading package: fs</span>
<span id="cb26-3">Loading package: box</span></code></pre></div>
</section>
<section id="browser-recap" class="level3">
<h3 class="anchored" data-anchor-id="browser-recap"><em>browser() recap</em></h3>
<p>Once execution is paused with <code>browser()</code>, using the <strong><code>n</code></strong> command in the <strong>Console</strong> (or in the debugging toolbar at the top-right of the pane) lets me step through the code line-by-line.</p>
<div id="fig-next_toolbar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-next_toolbar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-next_toolbar.png" class="img-fluid figure-img" style="width:75.0%" data-ref-parent="fig-next_toolbar"></p>
<figcaption class="figure-caption">(a) Step through/over</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;12: Step through/over code</figcaption>
</figure>
</div>
<p>This allows me to inspect the state of the variables at various points within a function.</p>
</section>
</section>
<section id="nested-functions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="nested-functions">Nested functions</h2>
<p>The <code>check_pkg_ns()</code> function is fairly basic in that it performs a single ‘unit of work’ (i.e., <em>check if add-on packages package have been loaded and attached; if not, load and attach them</em>). When functions become more complex, it’s more efficient to use nested functions–i.e., functions within other functions–which allow me to execute multiple commands simultaneously.</p>
<p>An example of this is the <code>pkg_data_results()</code> function below:</p>
<div class="cell">
<details open="">
<summary>pkg_data_results()</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)</span>
<span id="cb27-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 5 × 3</span></span>
<span id="cb27-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Package Item              Title              </span></span>
<span id="cb27-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt;              </span></span>
<span id="cb27-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dplyr   band_instruments  Band membership    </span></span>
<span id="cb27-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dplyr   band_instruments2 Band membership    </span></span>
<span id="cb27-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dplyr   band_members      Band membership    </span></span>
<span id="cb27-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dplyr   starwars          Starwars characters</span></span>
<span id="cb27-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dplyr   storms            Storm tracks data</span></span></code></pre></div>
</details>
</div>
<p><code>pkg_data_results()</code> returns a <code>data.frame</code> with three columns: <code>Package</code>, <code>Item</code>, and <code>Title</code>.</p>
<p>The output from <code>pkg_data_results()</code> comes from the <code>data(package = "pkg")</code> output:</p>
<div id="fig-next_toolbar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-data_output" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-data_output.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-next_toolbar"></p>
<figcaption class="figure-caption">(a) Output from <code>data(package = )</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;13: <code>data(package = "dplyr")</code></figcaption>
</figure>
</div>
<p>This output is normally opened in a separate window, but it’s created as a matrix.</p>
<div class="cell">
<details open="">
<summary>structure of data(package =)</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>))</span>
<span id="cb28-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 4</span></span>
<span id="cb28-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ title  : chr "Data sets"</span></span>
<span id="cb28-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ header : NULL</span></span>
<span id="cb28-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ results: chr [1:5, 1:4] "dplyr" "dplyr" "dplyr" "dplyr" ...</span></span>
<span id="cb28-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "dimnames")=List of 2</span></span>
<span id="cb28-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..$ : NULL</span></span>
<span id="cb28-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..$ : chr [1:4] "Package" "LibPath" "Item" "Title"</span></span>
<span id="cb28-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ footer : NULL</span></span>
<span id="cb28-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "class")= chr "packageIQR"</span></span></code></pre></div>
</details>
</div>
<p><code>pkg_data_results()</code> converts the matrix output into a <code>data.frame</code> three columns in (<code>Package</code>, <code>Title</code>, <code>Item</code>).</p>
<p>I’ve placed <code>browser()</code> at the top of <code>pkg_data_results()</code> and run it with the <a href="https://fivethirtyeight-r.netlify.app/"><code>fivethirtyeight</code> package</a>.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb29-1">pkg_data_results("fivethirtyeight")</span></code></pre></div>
<div id="fig-pkg_data_results_538" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-pkg_data_results_538" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-pkg_data_results_538.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-pkg_data_results_538"></p>
<figcaption class="figure-caption">(a) browser() in pkg_data_results(“fivethirtyeight”)</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;14: <code>browser()</code> in <code>pkg_data_results("fivethirtyeight")</code></figcaption>
</figure>
</div>
<section id="step-into" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="step-into">Step into</h3>
<p>When the debugger lands on <code>check_pkg_ns()</code>, I can follow the <code>fivethirtyeight</code> package through this function by ‘stepping into’ this function by entering <strong><code>s</code></strong> in the <strong>Console</strong> (or the toolbar icon):</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_toolbar.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption class="figure-caption">Step into a function</figcaption>
</figure>
</div>
</div></div><div id="fig-step_into_pkg_data_results" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-step_into_pkg_data_results" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_pkg_data_results.png" class="img-fluid figure-img" style="width:70.0%" data-ref-parent="fig-step_into_pkg_data_results"></p>
<figcaption class="figure-caption">(a) browser() in pkg_data_results(“fivethirtyeight”)</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;15: Step into in <code>pkg_data_results("fivethirtyeight")</code></figcaption>
</figure>
</div>
</section>
<section id="debugging-at-vs-in" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="debugging-at-vs-in">Debugging ‘at’ vs ‘in’</h3>
<p>In the <strong>Console</strong>, there are now <code>debugging in</code> and <code>debug at</code> locations:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">Browse[2]&gt; s</span>
<span id="cb30-2">debugging in: check_pkg_ns(pkg = pkg, quiet = TRUE)</span>
<span id="cb30-3">debug at /apps/dbap/R/check_pkg_ns.R#25: </span></code></pre></div>
<p>The <code>debug at</code> location is the the we location of the initial call to <code>browser()</code>, and <code>debugging in</code> is the function I <em>stepped into</em>.</p>
<p>The prompt has also changed from <code>Browse[2]&gt;</code> to <code>Browse[3]&gt;</code>:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb31-1">Browse[3]&gt;</span></code></pre></div>
<div class="column-page-inset-right">
<div id="fig-dbg-step_into_01" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-step_into_01" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_01.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-step_into_01"></p>
<figcaption class="figure-caption">(a) Use <code>s</code> to step into check_pkg_ns()</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;16: Use <code>s</code> to step through <code>check_pkg_ns()</code></figcaption>
</figure>
</div>
</div>
<p>The <code>R/check_pkg_ns.R</code> file will open with the highlighted function. I can proceed through <code>check_pkg_ns()</code> using <strong><code>n</code></strong> until I reach <code>requireNamespace()</code>:</p>
<div class="column-page-inset-right">
<div id="fig-dbg-step_into_02" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-step_into_02" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_02.png" class="img-fluid figure-img" style="width:70.0%" data-ref-parent="fig-dbg-step_into_02"></p>
<figcaption class="figure-caption">(a) Use <code>n</code> to step through <code>check_pkg_ns()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;17: Use <code>n</code> to step through <code>check_pkg_ns()</code></figcaption>
</figure>
</div>
</div>
<p>When I reach the final line in <code>check_pkg_ns()</code>, I can use either method below verify the <code>pkg</code> namespace is loaded:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">Browse[3]&gt; pkg %in% loadedNamespaces()</span>
<span id="cb32-2">[1] TRUE</span>
<span id="cb32-3">Browse[3]&gt; isNamespaceLoaded(pkg)</span>
<span id="cb32-4">[1] TRUE</span></code></pre></div>
<p>After the last line of <code>check_pkg_ns()</code> has been evaluated, the debugger will automatically return to the <code>pkg_data_results()</code> function. The <strong>Source</strong> pane will highlight the final step (and the prompt returns to <code>Browse[2]&gt;</code>):</p>
<div class="column-page-inset-right">
<div id="fig-dbg-step_into_03" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-step_into_03" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_03.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-step_into_03"></p>
<figcaption class="figure-caption">(a) Step into/through <code>check_pkg_ns()</code> from <code>pkg_data_results()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;18: Step into and through <code>check_pkg_ns()</code> from <code>pkg_data_results()</code></figcaption>
</figure>
</div>
</div>
<p>A final <strong><code>n</code></strong> command in the <strong>Console</strong> will return the output table:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">Browse[2]&gt; n</span>
<span id="cb33-2">### A tibble: 129 × 3</span>
<span id="cb33-3">##    Package         Item                Title</span>
<span id="cb33-4">##    &lt;chr&gt;           &lt;chr&gt;               &lt;chr&gt;</span>
<span id="cb33-5">##  1 fivethirtyeight US_births_1994_2003 Some People Are Too Superstitious To …</span>
<span id="cb33-6">##  2 fivethirtyeight US_births_2000_2014 Some People Are Too Superstitious To …</span>
<span id="cb33-7">##  3 fivethirtyeight ahca_polls          American Health Care Act Polls</span>
<span id="cb33-8">##  4 fivethirtyeight airline_safety      Should Travelers Avoid Flying Airline…</span>
<span id="cb33-9">##  5 fivethirtyeight antiquities_act     Trump Might Be The First President To…</span>
<span id="cb33-10">##  6 fivethirtyeight august_senate_polls How Much Trouble Is Ted Cruz Really  …</span>
<span id="cb33-11">##  7 fivethirtyeight avengers            Joining The Avengers Is As Deadly As</span>
<span id="cb33-12">##  8 fivethirtyeight bachelorette        Bachelorette / Bachelor</span>
<span id="cb33-13">##  9 fivethirtyeight bad_drivers         Dear Mona, Which State Has The Worst …</span>
<span id="cb33-14">## 10 fivethirtyeight bechdel             The Dollar-And-Cents Case Against Hol…</span>
<span id="cb33-15">## # ℹ 119 more rows</span>
<span id="cb33-16">## # ℹ Use `print(n = ...)` to see more rows</span></code></pre></div>
</section>
</section>
<section id="put-it-all-together" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="put-it-all-together">Put it all together</h2>
<p>The initial <code>pkg_data_str()</code> function for returning a table of ‘package data structures’ is below.</p>
<div class="cell">
<details>
<summary>expand to see initial pkg_data_str()</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">pkg_data_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb34-2"></span>
<span id="cb34-3">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span>
<span id="cb34-4"></span>
<span id="cb34-5">  ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb34-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]], </span>
<span id="cb34-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb34-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb34-9">  )</span>
<span id="cb34-10"></span>
<span id="cb34-11">  cols_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb34-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-13">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-15">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-17">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span></span>
<span id="cb34-21">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span></span>
<span id="cb34-25">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span></span>
<span id="cb34-29">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span></span>
<span id="cb34-33">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span></span>
<span id="cb34-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-38">  )</span>
<span id="cb34-39"></span>
<span id="cb34-40">  pkg_tbls_dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cols_tbl,</span>
<span id="cb34-41">    stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb34-42">  )</span>
<span id="cb34-43"></span>
<span id="cb34-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pkg_tbls_dfs)</span>
<span id="cb34-45">}</span></code></pre></div>
</details>
</div>
<p><code>pkg_data_str()</code> uses nested functions to create the following intermediate objects I can check while developing with <code>browser()</code> (the example below uses the <a href="https://forcats.tidyverse.org/"><code>forcats</code> package</a>)</p>
<section id="data-results" class="level3">
<h3 class="anchored" data-anchor-id="data-results">Data results</h3>
<p>The output from <code>pkg_data_results()</code> is stored in <code>data_results</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">Browse[2]&gt; data_results</span>
<span id="cb36-2"># A tibble: 1 × 3</span>
<span id="cb36-3">  Package Item    Title                                                           </span>
<span id="cb36-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                                                           </span>
<span id="cb36-5">1 forcats gss_cat A sample of categorical variables from the General Social su...</span></code></pre></div>
</section>
<section id="package-data-objects" class="level3">
<h3 class="anchored" data-anchor-id="package-data-objects">Package data objects</h3>
<p>After extracting the <code>Package</code>, <code>Title</code>, and <code>Type</code> columns from <code>pkg_data_results()</code>, I use <code>purrr:map2()</code> to iterate over each <code>Item</code> and <code>Package</code>, which builds a list of datasets (<code>ds_list</code>). The <code>.f</code> argument is a <a href="https://github.com/mjfrigaard/dbap/blob/main/R/pkg_data_object.R">nested <code>pkg_data_object()</code> function</a>, which calls <code>base::get()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb37-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]],</span>
<span id="cb37-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb37-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb37-5">)</span></code></pre></div>
</div>
<p>I’ll view the contents of the list with <code>str()</code></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">Browse[2]&gt; str(ds_list)</span>
<span id="cb38-2">List of 1</span>
<span id="cb38-3"> $ : tibble [21,483 × 9] (S3: tbl_df/tbl/data.frame)</span>
<span id="cb38-4">  ..$ year   : int [1:21483] 2000 2000 2000 2000 2000 2000 2000 2000 ...</span>
<span id="cb38-5">  ..$ marital: Factor w/ 6 levels "No answer","Never married",..: 2 4 ...</span>
<span id="cb38-6">  ..$ age    : int [1:21483] 26 48 67 39 25 25 36 44 44 47 ...</span>
<span id="cb38-7">  ..$ race   : Factor w/ 4 levels "Other","Black",..: 3 3 3 3 3 3 3 3 3 3 ...</span>
<span id="cb38-8">  ..$ rincome: Factor w/ 16 levels "No answer","Don't know",..: 8 8 16 16 ...</span>
<span id="cb38-9">  ..$ partyid: Factor w/ 10 levels "No answer","Don't know",..: 6 5 7 6  ...</span>
<span id="cb38-10">  ..$ relig  : Factor w/ 16 levels "No answer","Don't know",..: 15 15 15 ...</span>
<span id="cb38-11">  ..$ denom  : Factor w/ 30 levels "No answer","Don't know",..: 25 23 3 ...</span>
<span id="cb38-12">  ..$ tvhours: int [1:21483] 12 NA 2 4 1 NA 3 NA 0 3 ...</span></code></pre></div>
</section>
<section id="column-counts" class="level3">
<h3 class="anchored" data-anchor-id="column-counts">Column counts</h3>
<p>The <code>ds_list</code> created above is used to add the <code>Class</code>, <code>Columns</code>, and <code>Rows</code> columns to <code>data_results</code> using the <code>class()</code>, <code>ncol()</code>, <code>nrow()</code>. The column counts are added with the <a href="https://github.com/mjfrigaard/dbap/blob/main/R/col_type_count.R"><code>col_type_count()</code> function</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">  cols_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb39-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-5">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-7">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span></span>
<span id="cb39-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span></span>
<span id="cb39-15">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span></span>
<span id="cb39-19">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span></span>
<span id="cb39-23">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span></span>
<span id="cb39-27">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-28">  )</span></code></pre></div>
</div>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb40-1">Browse[2]&gt; cols_tbl</span>
<span id="cb40-2"># A tibble: 1 × 11</span>
<span id="cb40-3">  Package Item    Title          Class Columns Rows  Logical Numeric Character Factor  List</span>
<span id="cb40-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt;   &lt;int&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt;</span>
<span id="cb40-5">1 forcats gss_cat A sample of c… tbl_… 9 colu… 2148…       0       3         0      6     0</span></code></pre></div>
</section>
<section id="rectangular-objects" class="level3">
<h3 class="anchored" data-anchor-id="rectangular-objects">Rectangular objects</h3>
<p>Finally, <code>cols_tbl</code> is filtered to only those objects with a <code>class()</code> containing the string ‘<code>data.frame</code>’.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">pkg_tbls_dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> cols_tbl,</span>
<span id="cb41-2">                  stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>))</span></code></pre></div>
</div>
<p>This is exactly the same as the previous tibble because forcats has only one data object (<code>gss_cat</code>), and it’s a tibble:</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb42-1">Browse[2]&gt; pkg_tbls_dfs</span>
<span id="cb42-2"># A tibble: 1 × 11</span>
<span id="cb42-3">  Package Item    Title          Class Columns Rows  Logical Numeric Character Factor  List</span>
<span id="cb42-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt;   &lt;int&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt;</span>
<span id="cb42-5">1 forcats gss_cat A sample of c… tbl_… 9 colu… 2148…       0       3         0      6     0</span></code></pre></div>
<p>I’m explicitly returning <code>pkg_tbls_dfs</code> to view it in the debugger. When I’m confident it’s behaving as expected, I’ll remove this final object and ‘<a href="https://style.tidyverse.org/functions.html#return">rely on R to return the result of the last evaluated expression</a>.’</p>
</section>
<section id="error" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="error">Error!</h3>
<p>When I tried using the initial <code>pkg_data_str()</code> with a package that had zero data objects (<code>fs</code>), I get the following error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb44-1">Error in `dplyr::filter()` at dbap/R/pkg_data_str.R:78:2:</span>
<span id="cb44-2">ℹ In argument: `stringr::str_detect(Class, "data.frame")`.</span>
<span id="cb44-3">Caused by error in `vctrs::vec_size_common()`:</span>
<span id="cb44-4">! object 'Class' not found</span>
<span id="cb44-5">Run `rlang::last_trace()` to see where the error occurred.</span></code></pre></div>
<p>In the debugger, I was able to pinpoint the source of this error (and the underlying condition causing it to occur).</p>
<section id="replicate-the-error" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="replicate-the-error">Replicate the error</h4>
<p>The <code>browser()</code> beings at the top of <code>pkg_data_str()</code>, where I’ll step into <code>pkg_data_results()</code></p>
<div class="column-page-inset-right">
<div id="fig-dbg-all_together_01" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-all_together_01" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_01.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-all_together_01"></p>
<figcaption class="figure-caption">(a) <code>pkg_data_results()</code> from <code>pkg_data_str()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;19: Step into <code>pkg_data_results()</code> from <code>pkg_data_str()</code></figcaption>
</figure>
</div>
</div>
<p>When I’m inside <code>pkg_data_results()</code>, I’ll use <strong><code>n</code></strong> to verify the <code>fs</code> package namespace was loaded and the <code>tibble</code> was created:</p>
<div class="column-page-inset-right">
<div id="fig-dbg-all_together_02" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-all_together_02" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_02.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-all_together_02"></p>
<figcaption class="figure-caption">(a) Step through <code>pkg_data_results()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;20: Step through <code>pkg_data_results()</code> (from <code>pkg_data_str()</code>)</figcaption>
</figure>
</div>
</div>
<p>Back in <code>pkg_data_str()</code>, the output from <code>pkg_data_results()</code> is stored as <code>data_results</code>. I can check the contents of <code>data_results</code> in the <strong>Console</strong>.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb45-1">Browse[2]&gt; data_results</span>
<span id="cb45-2"># A tibble: 0 × 3</span>
<span id="cb45-3"># ℹ 3 variables: Package &lt;chr&gt;, Item &lt;chr&gt;, Title &lt;chr&gt;</span></code></pre></div>
<p>I see it’s empty. An empty <code>data_results</code> results in an empty list output from <code>purrr::map2()</code>:</p>
<div class="column-page-inset-right">
<div id="fig-dbg-all_together_03" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-all_together_03" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_03.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-all_together_03"></p>
<figcaption class="figure-caption">(a) Step out of <code>pkg_data_results()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;21: Step out of <code>pkg_data_results()</code> back into <code>pkg_data_str()</code></figcaption>
</figure>
</div>
</div>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb46-1">Browse[2]&gt; ds_list</span>
<span id="cb46-2">list()</span></code></pre></div>
<p>The empty <code>ds_list</code> results in <code>dplyr::mutate()</code> being unable to create the <code>Class</code> column in <code>cols_tbl</code>:</p>
<div class="column-page-inset-right">
<div id="fig-dbg-all_together_04" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-all_together_04" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_04.png" class="img-fluid figure-img" style="width:65.0%" data-ref-parent="fig-dbg-all_together_04"></p>
<figcaption class="figure-caption">(a) <code>dplyr::mutate()</code> call in <code>get_ds_strs()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;22: Create <code>Class</code> column in <code>get_ds_strs()</code></figcaption>
</figure>
</div>
</div>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb47-1">Browse[2]&gt; cols_tbl</span>
<span id="cb47-2"># A tibble: 0 × 3</span>
<span id="cb47-3"># ℹ 3 variables: Package &lt;chr&gt;, Item &lt;chr&gt;, Title &lt;chr&gt;</span></code></pre></div>
<p>Which triggers the error in <code>dplyr::filter()</code></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb48-1">Browse[2]&gt; n</span>
<span id="cb48-2">Error in `dplyr::filter()` at dbap/R/get_ds_str.R:60:2:</span>
<span id="cb48-3">ℹ In argument: `stringr::str_detect(Class, "data.frame")`.</span>
<span id="cb48-4">Caused by error in `vctrs::vec_size_common()`:</span>
<span id="cb48-5">! object 'Class' not found</span>
<span id="cb48-6">Run `rlang::last_trace()` to see where the error occurred.</span></code></pre></div>
<p>The full path for the <code>fs</code> package through the initial <code>get_ds_str()</code> is outlined in the figure below:</p>
<div class="column-page-inset-right">
<div id="fig-dbg-all_together_05" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-dbg-all_together_05" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_05.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-dbg-all_together_05"></p>
<figcaption class="figure-caption">(a) Error path in <code>get_ds_strs()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;23: Replicate the error from <code>get_ds_strs()</code></figcaption>
</figure>
</div>
</div>
</section>
</section>
<section id="solution" class="level3">
<h3 class="anchored" data-anchor-id="solution">Solution</h3>
<p>To fix this error, I had to make some changes to <em>both</em> <code>pkg_data_results()</code> <em>and</em> <code>pkg_data_str()</code>:</p>
<p>In <code>pkg_data_results()</code>, I added control flow to return a <code>tibble</code> of logical columns (all <code>NA</code>) if the package doesn’t have any data objects:</p>
<div class="cell">
<details>
<summary>Expand to view the updated pkg_data_results()</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">pkg_data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb49-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load packages</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb49-4"></span>
<span id="cb49-5">  results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb49-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb49-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Package =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>],</span>
<span id="cb49-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Item =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>],</span>
<span id="cb49-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>],</span>
<span id="cb49-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb49-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb49-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb49-13">    )</span>
<span id="cb49-14">  )</span>
<span id="cb49-15"></span>
<span id="cb49-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(results) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb49-17"></span>
<span id="cb49-18">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb49-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb49-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb49-21">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb49-22">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb49-23">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb49-24">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>,</span>
<span id="cb49-25">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rows"</span>,</span>
<span id="cb49-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numeric"</span>, </span>
<span id="cb49-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Character"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>, </span>
<span id="cb49-28">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span>))</span>
<span id="cb49-29">                ),</span>
<span id="cb49-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>))</span>
<span id="cb49-31"></span>
<span id="cb49-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb49-33"></span>
<span id="cb49-34"></span>
<span id="cb49-35">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb49-36"></span>
<span id="cb49-37">    results</span>
<span id="cb49-38"></span>
<span id="cb49-39">  }</span>
<span id="cb49-40"></span>
<span id="cb49-41">}</span></code></pre></div>
</details>
</div>
<p>In <code>pkg_data_str()</code>, I added two <code>if</code> statements:</p>
<ul>
<li><p>the first <code>if</code> statement identifies the logical <code>NA</code> columns (indicating the results from <code>data(package = pkg)</code> didn’t have any data objects)</p></li>
<li><p>the second <code>if</code> statement creates the <code>Class</code> column <em>first</em>, then filters the rows to only those containing a <code>data.frame</code> string pattern. If none of the data objects have the <code>data.frame</code> string pattern in their class, an empty <code>data_results</code> table is returned</p></li>
</ul>
<div class="cell">
<details>
<summary>Expand to view the updated pkg_data_str()</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">pkg_data_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb50-2">  </span>
<span id="cb50-3">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span>
<span id="cb50-4">  </span>
<span id="cb50-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]])) {</span>
<span id="cb50-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_results contains data objects</span></span>
<span id="cb50-7">    ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb50-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]], </span>
<span id="cb50-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb50-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb50-11">    )</span>
<span id="cb50-12"></span>
<span id="cb50-13">    class_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb50-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-15">        purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>()</span>
<span id="cb50-16">    )</span>
<span id="cb50-17"></span>
<span id="cb50-18">    df_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb50-19">      class_tbl,</span>
<span id="cb50-20">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb50-21">    )</span>
<span id="cb50-22"></span>
<span id="cb50-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df_tbl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb50-24">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_tbl does not contain 'data.frame' classes</span></span>
<span id="cb50-25">      data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb50-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb50-27">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb50-28">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb50-29">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb50-30">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb50-31">              <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb50-32">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb50-33">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>,</span>
<span id="cb50-34">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rows"</span>,</span>
<span id="cb50-35">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Character"</span>,</span>
<span id="cb50-36">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span></span>
<span id="cb50-37">              )</span>
<span id="cb50-38">            )</span>
<span id="cb50-39">          ),</span>
<span id="cb50-40">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb50-41">        )</span>
<span id="cb50-42">      )</span>
<span id="cb50-43"></span>
<span id="cb50-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb50-45">      </span>
<span id="cb50-46">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb50-47">      </span>
<span id="cb50-48">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_tbl contains 'data.frame' classes</span></span>
<span id="cb50-49">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(df_tbl,</span>
<span id="cb50-50">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-51">          purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-52">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-53">          purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-54">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-55">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-56">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-57">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-58">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-59">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-60">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-61">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-62">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-63">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-64">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-65">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-66">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-67">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-68">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>())</span>
<span id="cb50-69">      </span>
<span id="cb50-70">    }</span>
<span id="cb50-71">    </span>
<span id="cb50-72">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb50-73">    </span>
<span id="cb50-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_results does not contains data objects</span></span>
<span id="cb50-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb50-76">    </span>
<span id="cb50-77">  }</span>
<span id="cb50-78">  </span>
<span id="cb50-79">}</span></code></pre></div>
</details>
</div>
<p>Rather than go through the debugger process again, I’ll go through each of the the mini experiments I used to check the updated <code>pkg_data_results()</code> and <code>pkg_data_str()</code> functions:</p>
<ul>
<li><p>Check single package without any data objects (<code>box</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check single package with data objects, but none with classes that contain <code>data.frame</code> (<code>stringr</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check single package with multiple data objects (<code>dplyr</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb53-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 6%">
<col style="width: 13%">
<col style="width: 15%">
<col style="width: 18%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 5%">
<col style="width: 3%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: right;">Logical</th>
<th style="text-align: right;">Numeric</th>
<th style="text-align: right;">Character</th>
<th style="text-align: right;">Factor</th>
<th style="text-align: right;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments2</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_members</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">Starwars characters</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">14 columns</td>
<td style="text-align: left;">87 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">storms</td>
<td style="text-align: left;">Storm tracks data</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">19066 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check multiple packages with multiple data objects (<code>dplyr</code>, <code>forcats</code> and <code>lubridate</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forcats"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lubridate"</span>)))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 5%">
<col style="width: 10%">
<col style="width: 36%">
<col style="width: 13%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 3%">
<col style="width: 2%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: right;">Logical</th>
<th style="text-align: right;">Numeric</th>
<th style="text-align: right;">Character</th>
<th style="text-align: right;">Factor</th>
<th style="text-align: right;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">forcats</td>
<td style="text-align: left;">gss_cat</td>
<td style="text-align: left;">A sample of categorical variables from the General Social survey</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">9 columns</td>
<td style="text-align: left;">21483 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">lubridate</td>
<td style="text-align: left;">lakers</td>
<td style="text-align: left;">Lakers 2008-2009 basketball data set</td>
<td style="text-align: left;">data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">34624 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments2</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_members</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">Starwars characters</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">14 columns</td>
<td style="text-align: left;">87 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">storms</td>
<td style="text-align: left;">Storm tracks data</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">19066 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div></li>
</ul>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>RStudio’s debugger is a powerful tool that can save tons of time when you’re developing new functions, discovering how a function’s code is executed, or dealing with errors. When you’ve finished debugging, remember to remove the <code>browser()</code> call from your function.</p>
<p>The steps above should help get you started, and if you’d like to learn more, check out the <a href="https://adv-r.hadley.nz/debugging.html">debugging chapter of Advanced R</a>, and the documentation for <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/browser.html"><code>browser()</code></a>, <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/debug.html"><code>debug()</code>/<code>debugonce()</code>/<code>undebug()</code></a>, and <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/traceback.html"><code>traceback()</code></a> functions.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>debugging</category>
  <guid>https://mjfrigaard.github.io/posts/debugging/index.html</guid>
  <pubDate>Thu, 01 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/debugging/image.png" medium="image" type="image/png" height="168" width="144"/>
</item>
<item>
  <title>How do I test my (non-package) shiny application?</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/test-shiny-p2/index.html</link>
  <description><![CDATA[ 




<div class="cell">
<details open="">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(vdiffr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinytest2)</span></code></pre></div>
</details>
</div>
<p>This post is the second in a series on testing shiny applications. I’ll cover testing shiny module server functions using the <a href="https://testthat.r-lib.org/"><code>testhat</code> package</a> <em>outside</em> an R package. This application is stored in the <a href="https://github.com/mjfrigaard/noap"><code>noap</code></a> GitHub repo if you’d like to follow along.</p>
<section id="testing-module-server-functions" class="level2">
<h2 class="anchored" data-anchor-id="testing-module-server-functions">Testing module server functions</h2>
<div style="font-size: 1.10em;">
<p><em>…the ABCs of testing shiny server modules…</em></p>
</div>
<p>This post covers how <code>shiny::testServer()</code> works using the <a href="https://github.com/mjfrigaard/noap/blob/main/app.R">abcApp() shiny app.</a>. The code for <code>abcApp()</code> is an RStudio project (i.e., there is a <code>noap.Rproj</code> file in the parent folder), but it’s not part of an R package. Developing shiny applications as R packages is <a href="https://mastering-shiny.org/scaling-packaging.html">highly</a> <a href="https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package">recommended</a>, but it’s <em>possible</em> to begin writing unit tests before your application is a fully developed shiny app-package.</p>
<p>For more information regarding performing tests outside of the package environment, see <a href="https://github.com/r-lib/testthat/issues/659">this issue on GitHub</a>.</p>
<section id="abcapp" class="level3">
<h3 class="anchored" data-anchor-id="abcapp">abcApp()</h3>
<p>The <code>abcApp()</code> application has been written using <a href="https://shiny.posit.co/r/articles/improve/modules/">shiny modules</a> and a single <a href="https://github.com/mjfrigaard/noap/blob/main/utils.R">utility function</a>.</p>
<p><code>testthat</code> is designed to perform unit tests for R packages, but for the sake of simplicity,<code>abcApp()</code> has not been developed as part of a package. This will allow us to focus on the files involved in testing (and not all the other files that accompany R packages).</p>
<p>The standalone application function (<code>abcApp()</code>) is stored in <code>app.R</code>, the modules are contained in <code>modules.R</code>, and the single utility function is stored in <code>utils.R</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">├── README.md</span>
<span id="cb2-2">├── app.R</span>
<span id="cb2-3">├── app.Rproj</span>
<span id="cb2-4">├── modules.R</span>
<span id="cb2-5">├── tests</span>
<span id="cb2-6">└── utils.R</span>
<span id="cb2-7"></span>
<span id="cb2-8">2 directories, 5 files</span></code></pre></div>
<ul>
<li><p>The <code>tests</code> folder contains the following:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">tests</span>
<span id="cb3-2">├── testthat</span>
<span id="cb3-3">│   └── test-mod_abc_server.R</span>
<span id="cb3-4">└── testthat.R</span>
<span id="cb3-5"></span>
<span id="cb3-6">2 directories, 2 files</span></code></pre></div>
<ul>
<li><code>tests/</code> has a <code>testthat.R</code> file<br>
</li>
<li>New test files should be placed in <code>tests/testthat/</code> (see example <code>test-mod_abc_server.R</code> below):</li>
</ul></li>
</ul>
<section id="ui-module-function" class="level4">
<h4 class="anchored" data-anchor-id="ui-module-function">UI module function</h4>
<p>In this small example app, both ui and server modules are stored in the <code>modules.R</code> file.</p>
<ul>
<li><p>UI module:</p>
<div class="cell">
<details open="">
<summary>mod_abc_ui() (example ui module function)</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ui module</span></span>
<span id="cb4-2">mod_abc_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb4-3"></span>
<span id="cb4-4">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb4-5"></span>
<span id="cb4-6">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb4-7">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(</span>
<span id="cb4-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>),</span>
<span id="cb4-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h4</span>(</span>
<span id="cb4-10">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alphabet number"</span>)),</span>
<span id="cb4-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span></span>
<span id="cb4-12">    ),</span>
<span id="cb4-13">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(</span>
<span id="cb4-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"txt"</span>))</span>
<span id="cb4-15">  )</span>
<span id="cb4-16">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="server-module-function" class="level4">
<h4 class="anchored" data-anchor-id="server-module-function">Server module function</h4>
<p>The counterpart to <code>mod_abc_ui()</code> is <code>mod_abc_server()</code>:</p>
<ul>
<li><p>Server module:</p>
<div class="cell">
<details open="">
<summary>mod_abc_server() (example server module function)</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server module</span></span>
<span id="cb5-2">mod_abc_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb5-3"></span>
<span id="cb5-4">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reactive </span></span>
<span id="cb5-6">    letter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({ LETTERS[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num] })</span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># super script</span></span>
<span id="cb5-8">    sup_scrpt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({ </span>
<span id="cb5-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">num_super_script</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num)</span>
<span id="cb5-10">    })</span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output</span></span>
<span id="cb5-12">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb5-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The "</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), </span>
<span id="cb5-14">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" letter in the alphabet is: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>())</span>
<span id="cb5-15">    })</span>
<span id="cb5-16"></span>
<span id="cb5-17">  })</span>
<span id="cb5-18">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="module-utility-function" class="level4">
<h4 class="anchored" data-anchor-id="module-utility-function">Module utility function</h4>
<p>The <code>mod_abc_server()</code> function uses the <code>num_super_script()</code> function stored in <code>utils.R</code>:</p>
<ul>
<li><p>Utility function:</p>
<div class="cell">
<details open="">
<summary>num_super_script() (example utility function)</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># utility function</span></span>
<span id="cb6-2">num_super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-3">      num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x)</span>
<span id="cb6-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb6-5">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"st"</span></span>
<span id="cb6-6">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb6-7">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nd"</span></span>
<span id="cb6-8">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb6-9">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rd"</span></span>
<span id="cb6-10">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb6-11">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"th"</span></span>
<span id="cb6-12">      }</span>
<span id="cb6-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(super_script)</span>
<span id="cb6-14">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="standalone-app-function" class="level4">
<h4 class="anchored" data-anchor-id="standalone-app-function">Standalone app function</h4>
<ul>
<li><p>Standalone app functions include a call to <code>shiny::shinyApp()</code>:</p>
<div class="cell">
<details open="">
<summary>abcApp() (example app with modules)</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standalone shiny app function</span></span>
<span id="cb7-2">abcApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb7-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb7-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_abc_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb7-6">    ), </span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) { </span>
<span id="cb7-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_abc_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb7-9">    }</span>
<span id="cb7-10">  )</span>
<span id="cb7-11">}</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abcApp</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li><p>The call to <code>shiny::shinyApp()</code> is placed inside the <code>abcApp()</code> function</p></li>
<li><p>The <code>ui</code> argument is wrapped in <code>shiny::fluidPage()</code> and the ui module function (<code>mod_abc_ui()</code>) is placed inside</p></li>
<li><p>The <code>server</code> argument includes the standard <code>function(input, output, session)</code> and the module server companion function–<code>mod_abc_server()</code>–with a matching <code>id</code> arguments</p></li>
<li><p>The <code>abcApp()</code> function is stored in the <code>app.R</code> file</p></li>
</ul></li>
</ul>
<p>Because <code>abcApp()</code> is not part of a package, <code>shiny</code> and <code>testthat</code> are loaded and the modules and utility function are sourced in the top of the <code>app.R</code> file.</p>
<div class="cell">
<details open="">
<summary>source utils.R and modules.R in app.R</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># packages --------------------------------------------------------</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># utils ------------------------------------------------------------------</span></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils.R"</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modules ------------------------------------------------------------------</span></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modules.R"</span>)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="using-testserver" class="level3">
<h3 class="anchored" data-anchor-id="using-testserver">Using <code>testServer()</code></h3>
<p>In the <code>test-mod_abc_server.R</code> file, I’ll add <code>testServer()</code> and include the module server function as the first argument:</p>
<ul>
<li><p><code>app</code> is the module server function (<code>mod_abc_server</code>) or any <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html"><code>shiny.appobj</code></a></p>
<div class="cell">
<details open="">
<summary>app = shiny.appobj</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> mod_abc_server, {</span>
<span id="cb9-2"></span>
<span id="cb9-3">})</span></code></pre></div>
</details>
</div></li>
</ul>
<section id="testing-inputs" class="level4">
<h4 class="anchored" data-anchor-id="testing-inputs">Testing <code>input$</code>s</h4>
<ul>
<li><p>The first test I’ll add will check the initial value of <code>input$num</code></p>
<ul>
<li>I’ll also include a custom message with <code>cat()</code></li>
</ul>
<div class="cell">
<details open="">
<summary>test initial value with custom message</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 1: check initial value</span></span>
<span id="cb10-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 1 initial input$num = NULL: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-5">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb11-2">Test 1 initial input$num = NULL:  TRUE </span></code></pre></div>
<ul>
<li><p><code>testServer()</code> allows me to set new <code>input</code> values with <code>session$setInputs()</code></p>
<ul>
<li><p>Use <code>session$setInputs()</code> to set <code>input$num</code> to <code>3</code></p></li>
<li><p>Test 2 confirms <code>input$num</code> has changed</p></li>
<li><p>Add another custom message with <code>cat()</code></p></li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>setInputs() and test inputs</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set inputs</span></span>
<span id="cb12-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 2: check set inputs</span></span>
<span id="cb12-5">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 2 setInputs(num = 3):"</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-7">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb13-2"> Test 2 setInputs(num = 3): 3 </span></code></pre></div></li>
</ul>
</section>
<section id="testing-reactive-values" class="level4">
<h4 class="anchored" data-anchor-id="testing-reactive-values">Testing reactive values</h4>
<ul>
<li><p>The module’s reactive values are also available to in <code>testServer()</code></p>
<ul>
<li><p>Test 3 adds a test for <code>sup_scrpt()</code> (given the changed value of <code>input$num</code>)</p>
<ul>
<li>The <code>expected</code> value is what I’m expecting <code>num_super_script()</code> to return.</li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>Check sup_scrpt() reactive value with expect_equal()</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb14-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 3: check super script</span></span>
<span id="cb14-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rd"</span>)</span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 3 sup_scrpt(): = 'rd':"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-5">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb15-2"> Test 3 sup_scrpt(): = 'rd': rd  </span></code></pre></div>
<ul>
<li>For completeness I’ll add a test for <code>letter()</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Check letter() reactive value with expect_equal()</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb16-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 4: check letter</span></span>
<span id="cb16-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>)</span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 4 letter() = C:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-5">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb17-2"> Test 4 letter() = C: C </span></code></pre></div></li>
</ul>
</section>
<section id="testing-outputs" class="level4">
<h4 class="anchored" data-anchor-id="testing-outputs">Testing <code>output$</code>s</h4>
<ul>
<li><p>The module output values are also available as <code>output$&lt;value&gt;</code></p>
<ul>
<li>Test 5 will verify the <code>output$txt</code> (given the updated <code>input$num</code>)</li>
</ul>
<div class="cell">
<details open="">
<summary>Check module output values</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb18-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 5: check output</span></span>
<span id="cb18-3">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt,</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The 3rd letter in the alphabet is: C"</span>)</span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb18-6">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-7">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1"> FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb19-2"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span>
<span id="cb19-3"> [1] "The 3rd letter in the alphabet is: C" </span>
<span id="cb19-4"></span>
<span id="cb19-5">─- Failure (test-mod_abc_server.R:1:1): (code run outside of `test_that()`) ──</span>
<span id="cb19-6">output$txt (`actual`) not equal to "The 3rd letter in the alphabet is: C" (`expected`).</span>
<span id="cb19-7"></span>
<span id="cb19-8">`actual`:   "[1] \"The 3rd letter in the alphabet is: C\""</span>
<span id="cb19-9">`expected`: "The 3rd letter in the alphabet is: C"        </span>
<span id="cb19-10">Backtrace:</span>
<span id="cb19-11">  1. shiny::testServer(...)</span>
<span id="cb19-12">       at test-mod_abc_server.R:1:0</span>
<span id="cb19-13"> 22. testthat::expect_equal(object = output$txt, </span>
<span id="cb19-14">   expected = "The 3rd letter in the alphabet is: C")</span>
<span id="cb19-15">       at test-mod_abc_server.R:17:4</span>
<span id="cb19-16"></span>
<span id="cb19-17">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span></code></pre></div>
<ul>
<li><strong>What happened?</strong> I forgot to add the escape characters (<code>\"</code>) and line number (<code>[1]</code>) for the output
<ul>
<li>I’ll change the <code>expected</code> value and re-run the test:</li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>Check module output values (again)</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb20-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 5: check output</span></span>
<span id="cb20-3">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt,</span>
<span id="cb20-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The 3rd letter in the alphabet is: C"</span>)</span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-6">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-7">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb21-2"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span>
<span id="cb21-3"> [1] "The 3rd letter in the alphabet is: C" </span></code></pre></div>
<ul>
<li>Finally, I’ll run the tests with <code>test_dir()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_dir</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/app/tests/testthat/"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">✔ | F W S  OK | Context</span>
<span id="cb23-2">⠏ |         0 | mod_abc_server         </span>
<span id="cb23-3"></span>
<span id="cb23-4"> Test 1 initial input$num = NULL:  TRUE </span>
<span id="cb23-5"></span>
<span id="cb23-6"> Test 2 setInputs(num = 3): 3 </span>
<span id="cb23-7"></span>
<span id="cb23-8"> Test 3 sup_scrpt(): = 'rd': rd </span>
<span id="cb23-9"></span>
<span id="cb23-10"> Test 4 letter() = C: C </span>
<span id="cb23-11"></span>
<span id="cb23-12"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span>
<span id="cb23-13"> [1] "The 3rd letter in the alphabet is: C" </span>
<span id="cb23-14">✔ |         5 | mod_abc_server</span>
<span id="cb23-15">══ Results ════════════════════════════════════════════════════</span>
<span id="cb23-16">Duration: 0.2 s</span>
<span id="cb23-17"> [ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]</span>
<span id="cb23-18">🌈 Your tests are over the rainbow 🌈</span></code></pre></div></li>
</ul>
<p>The results show the tests passed! Now I am confident inputs, reactive values (<code>sup_scrpt()</code> &amp; <code>letter()</code>), outputs behave as expected.</p>
</section>
</section>
<section id="recap" class="level3">
<h3 class="anchored" data-anchor-id="recap">Recap</h3>
<p>The example above provides a workflow for using <code>testServer()</code> with <code>testthat</code> <em>outside</em> a package environment. The checklist below summarizes the steps required to test your application’s module server functions:</p>
<ol type="1">
<li><p>Create test files (in <code>tests/testthat/</code>)</p>
<ul class="task-list">
<li><input type="checkbox" checked="">All test files should have the <code>test-</code> prefix</li>
</ul></li>
<li><p>Verify inputs with <code>session$setInputs(inputId = &lt;value&gt;)</code></p>
<ul class="task-list">
<li><input type="checkbox" checked="">All <code>input$</code> values should initially be <code>NULL</code></li>
</ul></li>
<li><p>Test reactive values by referring to them as you would in the module server</p>
<ul class="task-list">
<li><input type="checkbox" checked="">Compare expected values after changing inputs with <code>session$setInputs()</code></li>
</ul></li>
<li><p>Test outputs using <code>output$&lt;value&gt;</code> to check changes to the inputs and reactives</p>
<ul class="task-list">
<li><input type="checkbox" checked="">Check output values with <code>output$txt</code></li>
</ul></li>
</ol>
<p>This concludes running tests on <code>abcApp()</code>. Ideally, shiny applications are developed as an R package (which I’ll cover in a future post), but now you know how to perform tests if this isn’t the case. The files for this demonstration are located <a href="https://github.com/mjfrigaard/noap">here.</a></p>
<p>For a more comprehensive review of testing, check out the chapters on testing in <a href="https://r-pkgs.org/testing-basics.html">R packages</a> and <a href="https://mastering-shiny.org/scaling-testing.html">Mastering Shiny</a>.</p>


</section>
</section>

 ]]></description>
  <category>shiny</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/test-shiny-p2/index.html</guid>
  <pubDate>Sun, 07 May 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/test-shiny-p2/image.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>How do I test shiny utility functions?</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/test-shiny-p1/index.html</link>
  <description><![CDATA[ 




<div class="cell">
<details open="">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lobstr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(covr)</span></code></pre></div>
</details>
</div>
<p>This post is the first in a series on testing shiny applications. I’ll cover developing and testing a set of utility functions for a shiny app-package using <a href="https://testthat.r-lib.org/"><code>testhat</code></a>. If you’d like to follow along, all the code I’ll be using is contained in the <a href="https://github.com/mjfrigaard/utap"><code>utap</code> R package on GitHub</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renv::install("mjfrigaard/utap")</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(utap)</span></code></pre></div>
</div>
<section id="shiny-app-packages" class="level2">
<h2 class="anchored" data-anchor-id="shiny-app-packages">Shiny app-packages</h2>
<p>Testing the code in shiny app-packages can be more complicated than testing the code in a typical R package, because app-packages contain two types of code:</p>
<ol type="1">
<li><p><strong>Application code</strong>: functions designed to run the application (i.e., the <code>ui</code> and <code>server</code> functions, modules, standalone app functions will a call to <code>shinyApp()</code>, etc.)</p></li>
<li><p><strong>Everything else</strong>: functions or code used for connecting to databases, uploading, importing, or manipulating data, building visualizations and/or tables, generating custom HTML layouts, etc. The non-application code and functions in app-packages are typically referred to as ‘<a href="https://engineering-shiny.org/build-app-golem.html?#submodules-and-utility-functions">utility</a>’ or ‘<a href="https://mastering-shiny.org/scaling-functions.html#file-organisation">helper</a>’ functions</p></li>
</ol>
<p>These two types of code require different types of tests. Utility functions are usually accompanied by unit tests similar to the tests you’d find in a <a href="https://r-pkgs.org/testing-basics.html">standard R package</a>, while application code is tested using the <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/testserver"><code>shiny::testServer()</code></a> function, or with the <a href="https://rstudio.github.io/shinytest2/"><code>shinytest2</code> package</a>.</p>
<p>This post will cover writing unit tests for a set of utility functions using <a href="https://testthat.r-lib.org/"><code>testthat</code></a> and <a href="https://covr.r-lib.org/"><code>covr</code></a>. Any tips or time-savers I’ve found will be in green callout boxes:</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TIP!
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<p>This is a tip!</p>
</div>
</div>
</div>
</div>
</section>
<section id="what-are-unit-tests" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-are-unit-tests">What are unit tests?</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/testthat.png" class="img-fluid" style="width:40.0%"></p>
</div></div><blockquote class="blockquote">
<p>“<em>A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work. If the assumptions on the end result turn out to be wrong, the unit test has failed. A unit test’s scope can span as little as a method or as much as multiple classes.</em>” - <a href="https://www.manning.com/books/the-art-of-unit-testing-second-edition">The Art of Unit Testing, 2nd edition</a></p>
</blockquote>
<p>I’ve found thinking of functions as ‘units of work’ and their desired behavior as an ‘end results’ provides a useful mental model during TDD. These terms also align nicely with the testing advice offered by <a href="https://r-pkgs.org/testing-design.html#sec-testing-design-principles"><code>testthat</code></a>:</p>
<blockquote class="blockquote">
<p><em>Strive to test each behaviour in one and only one test. Then if that behaviour later changes you only need to update a single test.</em></p>
</blockquote>
<p>In app-packages, the <code>testthat</code> package provides a comprehensive and flexible framework for performing unit tests.</p>
<section id="testthat" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="testthat">testthat</h3>
<p>Get started with <code>testthat</code> in your app-package by running <a href="https://usethis.r-lib.org/reference/use_testthat.html"><code>usethis::use_testthat()</code></a>. This function will create following files and folders:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">tests/</span>
<span id="cb3-2">  ├── testthat/</span>
<span id="cb3-3">  └── testthat.R</span></code></pre></div>
<p>To create new tests, run <code>usethis::use_test("utils_fun")</code> (with <code>"utils_fun"</code> being the name of the function you’d like to test).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_test</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils_fun"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">✔ Setting active project to '/projects/apps/utap'</span>
<span id="cb5-2">✔ Writing 'tests/testthat/test-utils_fun.R'</span>
<span id="cb5-3">• Modify 'tests/testthat/test-utils_fun.R'</span></code></pre></div>
<section id="test-files" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="test-files">Test files</h4>
<p>New test files are be created and opened from the <code>tests/testthat/</code> folder (with a <code>test-</code> prefix).</p>
<ul>
<li><p>The initial contents of a new test file contains the boilerplate code below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiplication works"</span>, {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb6-3">})</span></code></pre></div>
</div></li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<div id="fig-test-files" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/testthat-test-file.png" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption class="figure-caption">Figure&nbsp;1: testthat test file</figcaption>
</figure>
</div>
<p>Test files</p>
</div></div></section>
<section id="test-structure" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="test-structure">Test structure</h4>
<p><code>test_that()</code> sets the test “scope” or “execution environment”, and encapsulates the expectations.</p>
<ul>
<li><p>Note the use of curly brackets after the <code>code</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">desc =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb7-2"></span>
<span id="cb7-3">})</span></code></pre></div>
</div></li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<div id="fig-tests" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/testthat-tests.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption class="figure-caption">Figure&nbsp;2: tests</figcaption>
</figure>
</div>
<p><code>testthat</code> test</p>
</div></div></section>
<section id="expectations" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="expectations">Expectations</h4>
<p>Test expectations are the code that comes into direct contact with the <em>unit of work</em> and <em>end result</em> for each function. There are usually multiple expectations for any given function, so these are stored in <strong>tests</strong> (and the <code>desc</code> describes the test context for the set of expectations).</p>
<ul>
<li><p>All <code>testthat</code> expectations have an <code>expect_*</code> prefix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div></li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<div id="fig-expectations" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/testthat-expectation.png" class="img-fluid figure-img" style="width:40.0%"></p>
<figcaption class="figure-caption">Figure&nbsp;3: expectations</figcaption>
</figure>
</div>
<p><code>testthat</code> expectation</p>
</div></div></section>
<section id="unit-test-development-workflow" class="level4">
<h4 class="anchored" data-anchor-id="unit-test-development-workflow">Unit test development workflow</h4>
<p>I develop unit tests using the following workflow:</p>
<ol type="1">
<li><p><strong>Create the test file and R script</strong>: I’ll start by creating these files with <code>usethis::use_r()</code> and <code>usethis::use_test()</code>, even if I know the names of these files will likely change as I develop (see more below).</p></li>
<li><p><strong>Define test context</strong>: I use the test context (entered as a character string in the first argument of <code>testthat::test_that()</code>) to capture each “unit of work” for each function. I like to keep the test context short and sweet–the “unit of work” followed by “works” will suffice in most circumstances, unless there’s a need for more specific details.</p></li>
<li><p><strong>Write expectations:</strong> These are the third item in the workflow, but conceptually these comes first–these are the “end results” I want from each function (i.e., compute a value, download a file, create a column, etc.).</p></li>
</ol>
<p>Tests and expectations are grouped into test files based on their related objectives or goals, and should correspond to a similar <code>.R</code> file in the <code>R/</code> folder.</p>
<p>While this workflow is probably not <em>technically</em> considered <a href="https://en.wikipedia.org/wiki/Test-driven_development">test-driven development</a>, I <em>do</em> set up the tests before I start writing any code in the <code>R/</code> folder. This comes in handy if you’re having to remind yourself where you stopped developing on a given project–I’ll just run <code>devtools::test()</code> and the first failing test reminds me where to look.</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TIPS: Unit tests
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<p>The advice on unit tests below (in <strong>bold</strong>) comes from <a href="https://www.manning.com/books/effective-software-testing">Effective Software Testing, 2022</a>. I’ve included descriptions of how <code>testthat</code> satisfies each recommendation:</p>
<ol type="1">
<li><p><strong>Unit tests should be fast</strong>: the text recommends unit tests take a ‘<em>couple of milliseconds</em>’ to execute. <code>testthat</code> tests typically fall within this threshold (and provide time measurements to identify bottlenecks).</p></li>
<li><p><strong>Unit tests are easy to control</strong>: i.e., ‘<em>input values and the expected result value are easy to adapt or modify in the test</em>.’ <code>testthat</code> expectations give us ample access to 1) the <code>expected</code> result and 2) the <code>observed</code> result.</p></li>
<li><p><strong>Unit tests are easy to write</strong>: i.e., ‘<em>do not require a complicated setup or additional work</em>’. When used combination with <code>usethis</code>, <code>testthat</code> unit tests can be set up, created, written, and run with a few lines of code:</p>
<ol type="1">
<li><code>usethis::use_testthat()</code><br>
</li>
<li><code>usethis::use_test()</code><br>
</li>
<li><code>&lt; write test &gt;</code><br>
</li>
<li><code>testthat::test_file()</code>, <code>testthat::test_dir()</code>, or <code>devtools::test()</code></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="app-utility-functions" class="level2">
<h2 class="anchored" data-anchor-id="app-utility-functions">App utility functions</h2>
<p>The utility functions I’ll be developing are designed to populate the <code>choices</code> argument for <code>shiny::selectInput()</code>. For example, the <code>pull_numeric_cols()</code> function would ‘pull’ the column names from an input <code>data.frame</code> or <code>tibble</code> (the example below uses <code>palmerpenguins::penguins</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_numeric_cols</span>(palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins)</span></code></pre></div>
</div>
<div class="cell">
<pre><code>##      bill_length_mm       bill_depth_mm   flipper_length_mm 
##    "bill_length_mm"     "bill_depth_mm" "flipper_length_mm" 
##         body_mass_g                year 
##       "body_mass_g"              "year"</code></pre>
</div>
<p>The return values would be passed to an <code>updateSelectInput()</code> in the <code>server</code> to provide column names by <code>type</code> (i.e., numeric, binary, or categorical). These functions can be used to quickly group variables into groups for data visualizations. For example, binary variables can be mapped the color aesthetic (if using <code>ggplot2</code>), and custom functions can be created for other graph layers (i.e., facets).</p>
<p>The <strong>unit of work</strong> for each hypothetical <code>pull_[type]_cols()</code> function would be, “<em>ingest a <code>data.frame</code> or <code>tibble</code> and identify columns by <code>type</code></em>,” and their <strong>end result</strong> might be “<em>return a (named) vector of column names by <code>type</code>.</em>” In this case, <code>[type]</code> refers to the variable type (i.e., numeric, categorical, binary, etc.). See the hypothetical UI output example below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI code</span></span>
<span id="cb11-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X variable:"</span>,</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb11-6">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server code</span></span>
<span id="cb12-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb12-3">  num_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_numeric_cols</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>())</span>
<span id="cb12-4">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(session,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> num_vars,</span>
<span id="cb12-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> num_vars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb12-8">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-9">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(),</span>
<span id="cb12-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignoreNULL =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>In the example above, <code>pull_numeric_cols()</code> is passed a reactive dataset (<code>data()</code>), and the output is used to update the <code>selectInput()</code>.</p>
<div class="cell">
<div class="cell-output-display no-overflow-x">
<div class="form-group shiny-input-container">
<label class="control-label" id="num_cols-label" for="num_cols">X variable:</label>
<div>
<select id="num_cols"><option value="bill_length_mm" selected="">bill_length_mm</option>
<option value="bill_depth_mm">bill_depth_mm</option>
<option value="flipper_length_mm">flipper_length_mm</option>
<option value="body_mass_g">body_mass_g</option>
<option value="year">year</option></select>
<script type="application/json" data-for="num_cols" data-nonempty="">{"plugins":["selectize-plugin-a11y"]}</script>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="micro-iteration" class="level2">
<h2 class="anchored" data-anchor-id="micro-iteration">Micro-iteration</h2>
<p>In <a href="https://r-pkgs.org/testing-basics.html#run-tests">R packages</a>, micro-iteration is defined as, “<em>the interactive phase where you initiate and refine a function and its tests in tandem.</em>” If you’re using <a href="https://en.wikipedia.org/wiki/Test-driven_development?oldformat=true">TDD</a>, you’ll write the test first, then write the function to pass the test.</p>
<p>The first unit test I’ll create is for <code>select_column_class()</code>, a function designed to return columns according to their <code>class()</code>.</p>
<section id="function-names" class="level4">
<h4 class="anchored" data-anchor-id="function-names">Function names</h4>
<p>Coming up with names for functions can be challenging. I like to follow the <a href="https://style.tidyverse.org/syntax.html#object-names"><code>tidyverse</code> style guide</a> and use short verbs as a prefix (<code>make_</code>, <code>get_</code>, <code>check_</code> etc.). I also like to use names that give ‘future’ me hints as to their behavior (i.e., <code>select_column_class()</code> imports and has similar behavior to <code>dplyr::select()</code>, while <code>pull_[type]_cols()</code> is more like <code>dplyr::pull()</code>)</p>
</section>
<section id="create-test-file" class="level3">
<h3 class="anchored" data-anchor-id="create-test-file">Create test file</h3>
<p>I create the test file and function file in the <strong>Console</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_test</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_column_class"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">✔ Setting active project to '/projects/apps/utap'</span>
<span id="cb14-2">✔ Writing 'tests/testthat/test-select_column_class.R'</span>
<span id="cb14-3">• Modify 'tests/testthat/test-select_column_class.R'</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_column_class"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">• Modify 'R/select_column_class.R'</span></code></pre></div>
</section>
<section id="test-context" class="level3">
<h3 class="anchored" data-anchor-id="test-context">Test context</h3>
<p>The test context (entered as a character string in the first argument of <code>testthat::test_that()</code>) includes the “unit of work” for the function, followed by “works”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">desc =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_column_class() is.tibble/is.data.frame works"</span>, {</span>
<span id="cb17-2">  </span>
<span id="cb17-3">})</span></code></pre></div>
</div>
<p>Before I can start developing the <code>select_column_class()</code> function and it’s tests, I’ll need data. R comes with example data objects in the <code>datasets</code> package, but it’s nice to have control over the data being used in your unit tests. I’ll cover how to add test data available in your app-package.</p>
</section>
<section id="test-data" class="level3">
<h3 class="anchored" data-anchor-id="test-data">Test data</h3>
<p>Creating test data is covered in <a href="https://r-pkgs.org/testing-design.html#storing-test-data">R packages</a>, but I’ll summarize the key points:</p>
<ol type="1">
<li>Test data (and other objects) can either be created within a test, or as a persistent <a href="https://r-pkgs.org/testing-advanced.html#sec-testing-advanced-concrete-fixture">test fixture</a><br>
</li>
<li>Test data fixtures should be stored in <code>tests/testthat/fixtures/&lt;test_data.rds&gt;</code></li>
<li>The code used to create any test data fixtures should be stored in the same folder with a <code>make_</code> prefix (i.e., <code>tests/testthat/fixtures/&lt;make_test_data.R&gt;</code>)</li>
</ol>
<p>This is easier to picture with a demonstration: In the <code>tests/testthat/</code> folder, I’ll create a new <code>fixtures</code> folder, and add a <code>make_testdata_col_class.R</code> file.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">tests/testthat/</span>
<span id="cb18-2">        └── fixtures/</span>
<span id="cb18-3">                └── make_testdata_col_class.R</span></code></pre></div>
<p>In <code>make_testdata_col_class.R</code>, I’ll create <code>testdata_col_class</code> using the code below:</p>
<div class="cell">
<details>
<summary>test_data for test-select_column_class.R</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">testdata_col_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb19-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb19-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(1L, 2L, 3L),</span>
<span id="cb19-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbl_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span>),</span>
<span id="cb19-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item:1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item:2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item:3"</span>),</span>
<span id="cb19-6"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fct_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(</span>
<span id="cb19-7">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group 3"</span>),</span>
<span id="cb19-8">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb19-9">     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group 3"</span>)),</span>
<span id="cb19-10"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ord_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(</span>
<span id="cb19-11">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level 3"</span>),</span>
<span id="cb19-12">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level 3"</span>),</span>
<span id="cb19-13">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb19-14"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb19-15">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_vec =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb19-16">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbl_vec =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span>),</span>
<span id="cb19-17">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item:1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item:2"</span>)))</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">testdata_col_class</span>
<span id="cb20-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 × 7</span></span>
<span id="cb20-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   log_var int_var dbl_var chr_var fct_var ord_var list_var  </span></span>
<span id="cb20-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;lgl&gt;     &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;fct&gt;   &lt;ord&gt;   &lt;named li&gt;</span></span>
<span id="cb20-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 TRUE          1     1.1 item:1  group 1 level 1 &lt;lgl [2]&gt; </span></span>
<span id="cb20-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 FALSE         2     2.2 item:2  group 2 level 2 &lt;dbl [2]&gt; </span></span>
<span id="cb20-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 TRUE          3     3.3 item:3  group 3 level 3 &lt;chr [2]&gt;</span></span></code></pre></div>
</div>
<p>I’ll save <code>testdata_col_class</code> in <code>tests/testthat/fixtures/</code> as <code>testdata_col_class.rds</code>:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">tests/testthat/</span>
<span id="cb21-2">        └── fixtures/</span>
<span id="cb21-3">                ├── make_testdata_col_class.R</span>
<span id="cb21-4">                └── testdata_col_class.rds</span></code></pre></div>
<p>To load the data into my test, I’ll add the following to the top of the test context:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">desc =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_column_class() is.tibble/is.data.frame works"</span>, {</span>
<span id="cb22-2">  testdata_col_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"testdata_col_class.rds"</span>))</span>
<span id="cb22-3">  </span>
<span id="cb22-4">})</span></code></pre></div>
</div>
<p><code>testthat::test_path()</code> will load the data from the testing directory when I’m ready to run my test.</p>
</section>
<section id="expectations-1" class="level3">
<h3 class="anchored" data-anchor-id="expectations-1">Expectations</h3>
<p>In <code>expect_equal()</code>, I’ll verify the structure of the returned <code>object</code> is a <code>data.frame</code>/<code>tibble</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_column_class() is.tibble/is.data.frame works"</span>, {</span>
<span id="cb23-2">  testdata_col_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"testdata_col_class.rds"</span>))</span>
<span id="cb23-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check tibble</span></span>
<span id="cb23-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb23-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span></span>
<span id="cb23-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_column_class</span>(</span>
<span id="cb23-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> testdata_col_class,</span>
<span id="cb23-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"???"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-9">          tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_tibble</span>(),</span>
<span id="cb23-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-11">})</span></code></pre></div>
</div>
<p>Writing my expectations first forces me to make some decisions about what the arguments will be for the <code>select_column_class()</code> function (i.e., <code>df</code> and <code>class</code>).</p>
<p><code>select_column_class()</code> should return the columns according to their <code>class</code>, so I’ll tests to verify the class of the return columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check logical</span></span>
<span id="cb24-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb24-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span></span>
<span id="cb24-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_column_class</span>(</span>
<span id="cb24-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> testdata_col_class,</span>
<span id="cb24-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-7">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(is.logical) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(),</span>
<span id="cb24-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>I try to write these in a way that’s flexible (should the test data change in the future).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<strong>Expectation-Driven Development</strong>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Whether or not you decide to adopt Test-Driven Development, I strongly recommend writing test expectations while you’re developing functions. It’s a great opportunity to clarify a function’s intended behaviors, arguments, and error/warning messages.</p>
</div>
</div>
</div>
<p>After including tests for each class, I’ll include a test for the error message from <code>select_column_class()</code> with <code>testthat::expect_error()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test error type</span></span>
<span id="cb25-2">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_column_class() type error"</span>, {</span>
<span id="cb25-3">  testdata_col_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"testdata_col_class.rds"</span>))</span>
<span id="cb25-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test type error</span></span>
<span id="cb25-5">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_column_class</span>(</span>
<span id="cb25-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> testdata_col_class, </span>
<span id="cb25-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>)</span>
<span id="cb25-9">  )</span>
<span id="cb25-10">})</span></code></pre></div>
</div>
<p>When I’ve covered my intended ‘end results’ for <code>select_column_class()</code> (i.e., when it works and what happens when it doesn’t), I’ll write the function:</p>
<div class="cell">
<details>
<summary>select_column_class()</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">select_column_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, class) {</span>
<span id="cb26-2"></span>
<span id="cb26-3">  col_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, class) {</span>
<span id="cb26-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(class,</span>
<span id="cb26-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.logical)),</span>
<span id="cb26-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.integer)),</span>
<span id="cb26-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbl =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.double)),</span>
<span id="cb26-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.character)),</span>
<span id="cb26-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fct =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.factor)),</span>
<span id="cb26-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ord =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.ordered)),</span>
<span id="cb26-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.list))</span>
<span id="cb26-12">    )</span>
<span id="cb26-13">  }</span>
<span id="cb26-14"></span>
<span id="cb26-15">  cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(class)</span>
<span id="cb26-16">  cl_check <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%nin%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ord"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>)</span>
<span id="cb26-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(cl_check)) {</span>
<span id="cb26-18">    cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid `class` argument. Must be one of:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span></span>
<span id="cb26-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">          'log', 'int', 'dbl', 'chr', 'fct', 'ord', 'list'"</span>)</span>
<span id="cb26-20">  }</span>
<span id="cb26-21"></span>
<span id="cb26-22">  col_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> df)</span>
<span id="cb26-23"></span>
<span id="cb26-24">  df_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_cbind</span>(col_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df))</span>
<span id="cb26-25"></span>
<span id="cb26-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(df_cols) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df_cols) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb26-27">    df_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb26-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl_df"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>),</span>
<span id="cb26-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb26-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb26-31">    )</span>
<span id="cb26-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df_cols)</span>
<span id="cb26-33">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb26-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df_cols)</span>
<span id="cb26-35">  }</span>
<span id="cb26-36">}</span></code></pre></div>
</details>
</div>
<section id="recap-test-data" class="level4">
<h4 class="anchored" data-anchor-id="recap-test-data">Recap: test data</h4>
<p>Below is a summary of tips for adding data your tests.</p>
<div id="fig-unit_test_dep_data" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-unit_test_dep_data" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/unit_test_dep_data.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-unit_test_dep_data"></p>
<figcaption class="figure-caption">(a) Unit test fixtures</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;4: Unit test fixtures</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="mezzo-iteration" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="mezzo-iteration">Mezzo-iteration</h2>
<p>The <code>select_column_class()</code> will return a <code>tibble()</code> with the columns matching the <code>class</code> argument, but I’ll also need an argument that allows me to adjust the returned object to a named character vector.</p>
<p>That’s the job of <code>get_column_class()</code>–this is a wrapper around <code>select_column_class()</code> with an additional <code>return_tbl</code> argument that, if <code>FALSE</code>, returns the column names as a named vector.</p>
<section id="abstract-syntax-trees" class="level4">
<h4 class="anchored" data-anchor-id="abstract-syntax-trees">Abstract syntax trees</h4>
<p>While developing R functions, I’ve found the <code>ast()</code> function from the <a href="https://lobstr.r-lib.org/reference/ast.html"><code>lobstr</code> package</a> can be great for keeping track of nested function calls.</p>
<p>For example, <code>select_column_class()</code> has a nested <code>col_class()</code> function that isn’t tested directly. So how do I make sure I’m keeping track of these nested functions in case they throw an error? I’ll build an abstract function tree for the function in the <a href="https://github.com/mjfrigaard/utap/blob/main/vignettes/utap.Rmd">documentation</a>.</p>
<p>Below is the abstract syntax tree for <code>select_column_class()</code>:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>█─select_column_class 
└─█─col_class </code></pre>
</div>
</div>
<p>The tree above is simple–it only has two functions so far–but as packages grow these abstract displays become more important for tracking function calls (and tests!).</p>
</section>
<section id="combining-tests" class="level3">
<h3 class="anchored" data-anchor-id="combining-tests">Combining tests</h3>
<p><code>get_column_class()</code> calls <code>select_column_class()</code>, so I’ll place both unit tests in the <code>tests/testthat/test-column_classes.R</code> file, and create the corresponding <a href="https://github.com/mjfrigaard/utap/blob/main/R/column_classes.R"><code>R/column_classes.R</code> file</a></p>
<p>To capture these nested functions visually, I’ll include a function tree in a vignette or other source documentation.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>█─get_column_class 
└─█─select_column_class 
  └─█─col_class </code></pre>
</div>
</div>
<p>I’ve combined <code>select_column_class()</code> and <code>get_column_class()</code> into a single file because I know every <code>pull_[type]_cols()</code> function would use <code>get_column_class()</code>. The following function tree captures this relationship.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>█─get_column_class 
├─█─select_column_class 
│ └─█─col_class 
├─█─pull_binary_cols 
├─█─pull_facet_cols 
├─█─pull_cat_cols 
└─█─pull_numeric_cols </code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<strong>Function file names</strong>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In shiny app-packages, it’s common to combine related functions (i.e., function families) into a single <code>.R</code> file with a prefix.</p>
<p>For example, a standalone app function combines the code that would otherwise sit in <code>ui.R</code> and <code>server.R</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">myApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb30-2">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> </span>
<span id="cb30-3">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb30-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code from ui.R</span></span>
<span id="cb30-5">      ),</span>
<span id="cb30-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code from server.R</span></span>
<span id="cb30-7">    )</span>
<span id="cb30-8">}</span></code></pre></div>
</div>
<p>Other files that are automatically run with a standard shiny app (i.e., <code>global.R</code> or <code>helpers.R</code> files that used to load data, set themes/colors, etc.,) can be converted into functions and/or package files based on their purpose. For more information on organizing your <code>R/</code> folder, read <a href="https://r-pkgs.org/code.html#sec-code-organising">this section in R Packages</a>.</p>
<p>Also check out <code>golem::add_utils()</code> and <code>golem::add_fct()</code> for creating function files specific to shiny modules.</p>
</div>
</div>
</div>
<p>In the <code>test-column_classes.R</code> test file, I’ll need more data for testing, but rather than create test data files for each test, I’ll use test helpers to create the test data.</p>
</section>
<section id="test-helpers" class="level3">
<h3 class="anchored" data-anchor-id="test-helpers">Test helpers</h3>
<p>Test helpers are stored in <code>tests/testthat/helper.R</code> and usually contain functions or code that 1) is too long to repeat with each test, and 2) doesn’t take too much time or memory to run. Read more about test helpers <a href="https://r-pkgs.org/testing-advanced.html#sec-testing-advanced-fixture-helper">here.</a></p>
<p>I’ve created a <a href="https://github.com/mjfrigaard/utap/blob/main/tests/testthat/helper.R">set of test helpers</a> in <code>utap</code> for creating different kinds of test data (because I’ll be repeatedly defining columns with slightly different attributes).</p>
<p>For example, <code>col_maker()</code> can be used to create a <code>tibble</code> with columns based on the <code>col_type</code>, <code>size</code>, and <code>missing</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>, </span>
<span id="cb31-2">                       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ord"</span>),</span>
<span id="cb31-3">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb31-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb31-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 6 × 6</span></span>
<span id="cb31-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   log_var int_var dbl_var chr_var fct_var ord_var</span></span>
<span id="cb31-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;lgl&gt;     &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;fct&gt;   &lt;ord&gt;  </span></span>
<span id="cb31-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 TRUE          1     0.1 item:1  group 1 level 1</span></span>
<span id="cb31-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 FALSE       135     3   item:2  group 2 level 2</span></span>
<span id="cb31-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 NA          269    NA   item:3  group 3 level 3</span></span>
<span id="cb31-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 TRUE        403     0.1 &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   </span></span>
<span id="cb31-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 FALSE        NA     3   item:1  group 1 level 1</span></span>
<span id="cb31-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 NA            1    NA   item:1  group 2 level 2</span></span></code></pre></div>
</div>
<p>I can also create tibbles with custom columns using individual helper <code>_maker()</code> functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb32-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb32-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">int_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb32-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbl_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbl_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb32-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chr_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb32-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fct_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), </span>
<span id="cb32-7">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ord_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ord_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb32-8">)</span>
<span id="cb32-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 × 5</span></span>
<span id="cb32-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   log_var int_var dbl_var chr_var list_var    </span></span>
<span id="cb32-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;lgl&gt;     &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;named list&gt;</span></span>
<span id="cb32-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 TRUE          1     0.1 item: 1 &lt;fct [3]&gt;   </span></span>
<span id="cb32-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 FALSE         7     1   item: 2 &lt;ord [3]&gt;</span></span></code></pre></div>
</div>
<p>These helpers make it easier to iterate through the test expectations <em>and</em> function development, because <code>tibble</code>s like the one above can be developed <em>inside</em> each test.</p>
<ul>
<li><p>Below is an example for testing if <code>get_column_class()</code> will correctly identify the <code>logical</code> columns (for both return objects):</p>
<div class="cell">
<details>
<summary>using test helpers</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_column_class() logical"</span>, {</span>
<span id="cb33-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test logical class</span></span>
<span id="cb33-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb33-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_column_class</span>(</span>
<span id="cb33-5">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use test helper</span></span>
<span id="cb33-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_maker</span>(</span>
<span id="cb33-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>),</span>
<span id="cb33-8">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb33-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb33-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lvls =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb33-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(),</span>
<span id="cb33-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb33-15">  )</span>
<span id="cb33-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test logical names</span></span>
<span id="cb33-17">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb33-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_column_class</span>(</span>
<span id="cb33-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use test helper</span></span>
<span id="cb33-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_maker</span>(</span>
<span id="cb33-21">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>),</span>
<span id="cb33-22">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb33-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb33-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lvls =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb33-25">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>,</span>
<span id="cb33-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">return_tbl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb33-27">    ),</span>
<span id="cb33-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_var"</span>)</span>
<span id="cb33-29">  )</span>
<span id="cb33-30">})</span></code></pre></div>
</details>
</div></li>
</ul>
<p>When I’m confident with the <code>get_column_class()</code> function and it’s tests, I’ll save the test file and run <code>testthat::test_file()</code>.</p>
<div class="cell">
<details>
<summary>show/hide get_column_class()</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">get_column_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">return_tbl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb34-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(return_tbl)) {</span>
<span id="cb34-3">    col_types_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_column_class</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class)</span>
<span id="cb34-4">    nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(col_types_df)</span>
<span id="cb34-5">    col_types <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(nms)</span>
<span id="cb34-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb34-7">    col_types <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_column_class</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class)</span>
<span id="cb34-8">  }</span>
<span id="cb34-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(col_types)</span>
<span id="cb34-10">}</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-column_classes.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 23 ]</span></code></pre></div>
</section>
<section id="test-coverage" class="level3">
<h3 class="anchored" data-anchor-id="test-coverage">Test coverage</h3>
<p><em>How many tests should I write?</em></p>
<p>As function behavior grows in complexity, so does the number of expectations. In <code>testthat</code>, expectations are captured in tests, and code coverage measures the extent to which the tests in the <code>tests/testthat/</code> folder cover the possible execution paths of the functions in the <code>R/</code> folder (i.e.&nbsp;the package codebase).</p>
<p>Code test coverage is a way to confirm that the unit tests are robust enough to verify that your code behaves as expected. In R packages, code coverage is discussed in the <a href="https://r-pkgs.org/testing-design.html#sec-testing-design-coverage">testing chapter</a> using the <a href="https://covr.r-lib.org/"><code>covr</code> package</a>.</p>
</section>
<section id="check-coverage-interactively" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="check-coverage-interactively">Check coverage interactively</h3>
<p>During development, check the code coverage of a test file with <code>devtools::test_coverage_active_file()</code>, or, if this function is being temperamental, use the combination of functions below from <code>covr</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">covr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_coverage</span>(</span>
<span id="cb37-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_files =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R/column_classes.R"</span>, </span>
<span id="cb37-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test_files =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-column_classes.R"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-4">  covr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report</span>()</span></code></pre></div>
</div>
<p>Below is the output in the <strong>Viewer</strong> when <code>devtools::test_coverage_active_file()</code> is entered in the <strong>Console</strong>:</p>
<div class="column-body-outset-right">
<div id="fig-column_classes_covr" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-column_classes_covr" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/column_classes_covr.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-column_classes_covr"></p>
<figcaption class="figure-caption">(a) Test coverage using <code>devtools::test_coverage_active_file()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;5: Unit test coverage interactively</figcaption>
</figure>
</div>
</div>
<p>I can see from the output I don’t have test coverage for the <code>select_column_class()</code> behavior when the <code>class</code> argument doesn’t return any columns from <code>df</code>. The function is designed to return an empty <code>tibble</code> if this occurs:</p>
<div id="fig-column_classes_covr_incomplete" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-column_classes_covr_incomplete" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/column_classes_covr_incomplete.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-column_classes_covr_incomplete"></p>
<figcaption class="figure-caption">(a) Behavior not tested in <code>select_column_class()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;6: The area in red is the untested portion of <code>select_column_class()</code></figcaption>
</figure>
</div>
<p>To test this behavior, I’ll write two expectations:</p>
<ul>
<li><p>The first expectation (<code>expect_s3_class()</code>) checks the class of the return object from <code>select_column_class()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test class of empty tibble</span></span>
<span id="cb38-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(</span>
<span id="cb38-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_column_class</span>(</span>
<span id="cb38-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>),</span>
<span id="cb38-5">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb38-6">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb38-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>),</span>
<span id="cb38-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl_df"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>))</span></code></pre></div>
</div></li>
<li><p>The second expectation verifies there are zero columns in this return tibble:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test rows of empty tibble</span></span>
<span id="cb39-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb39-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_column_class</span>(</span>
<span id="cb39-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>),</span>
<span id="cb39-5">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb39-6">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb39-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>)),</span>
<span id="cb39-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> 0L)</span></code></pre></div>
</div></li>
</ul>
<p>After adding these tests to the <code>test-column_classes.R</code> test file, I’ll run <code>testthat::test_file()</code> and <code>devtools::test_coverage_active_file()</code> again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-column_classes.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 25 ]</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_coverage_active_file</span>()</span></code></pre></div>
</div>
<div class="column-body-outset-right">
<div id="fig-column_classes_covr_complete" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-column_classes_covr_complete" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/column_classes_covr_complete.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-column_classes_covr_complete"></p>
<figcaption class="figure-caption">(a) Test coverage using <code>devtools::test_coverage_active_file()</code></figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;7: Complete code coverage for <code>column_classes.R</code></figcaption>
</figure>
</div>
</div>
<p>100% is great, but uncommon. Striving for a high percentage of coverage is a good practice, it doesn’t guarantee that the function always behaves as expected. Unit tests might execute a line of code, but still not catch a bug due to the design of the test (it’s easy to have high coverage if the unit tests are shallow and don’t check for any potential <a href="https://en.wikipedia.org/wiki/Edge_case">edge cases</a>).</p>
<p>I’ll address code coverage again in the next section, but checking coverage regularly will help ensure function behaviors don’t go overlooked.</p>
</section>
</section>
<section id="macro-iteration" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="macro-iteration">Macro-iteration</h2>
<p>After developing the functions in <code>utap</code>, the files in the <code>R/</code> folder are organized into names <a href="https://r-pkgs.org/code.html#sec-code-organising">based on the</a> ‘<em>main function and its supporting helpers</em>’:</p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb43-1">R/</span>
<span id="cb43-2">├── column_classes.R</span>
<span id="cb43-3">├── pull_binary_cols.R</span>
<span id="cb43-4">├── pull_cat_cols.R</span>
<span id="cb43-5">├── pull_facet_cols.R</span>
<span id="cb43-6">├── pull_numeric_cols.R</span>
<span id="cb43-7">└── utils.R</span></code></pre></div>
<section id="test-file-organization" class="level3">
<h3 class="anchored" data-anchor-id="test-file-organization">Test file organization</h3>
<p>The <code>tests/testthat/</code> folder file names have identical names as the files in the <code>R/</code> folder.</p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb44-1">tests/testthat/</span>
<span id="cb44-2">        ├── test-column_classes.R</span>
<span id="cb44-3">        ├── test-pull_binary_cols.R</span>
<span id="cb44-4">        ├── test-pull_cat_cols.R</span>
<span id="cb44-5">        ├── test-pull_facet_cols.R</span>
<span id="cb44-6">        ├── test-pull_numeric_cols.R</span>
<span id="cb44-7">        └── test-utils.R</span></code></pre></div>
<section id="rutils.r" class="level4">
<h4 class="anchored" data-anchor-id="rutils.r"><code>R/utils.R</code></h4>
<p>It’s common for R packages to have a general <code>R/utils.R</code> file that defines the ‘utility’ functions. This practice isn’t discouraged in R Packages, but these files can become a catch-all for any functions that don’t have a clear home (read more <a href="https://rud.is/b/2018/04/08/dissecting-r-package-utility-belts/">here</a>).</p>
<p>I’ve only stored the <code>%nin%</code> operator in <code>R/utils.R</code>, and it’s test is shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%nin% works"</span>, {</span>
<span id="cb45-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_false</span>(</span>
<span id="cb45-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%nin%</span> LETTERS)</span>
<span id="cb45-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_false</span>(</span>
<span id="cb45-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%nin%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb45-6">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb45-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%nin%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb45-8">})</span></code></pre></div>
</div>
</section>
</section>
<section id="test-package" class="level3">
<h3 class="anchored" data-anchor-id="test-package">Test package</h3>
<p>When I’ve completed a set of test files, I can use <code>devtools::test()</code> to check if they’re passing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb47-1">ℹ Testing utap</span>
<span id="cb47-2">✔ | F W S  OK | Context</span>
<span id="cb47-3">✔ |        25 | column_classes                                                     </span>
<span id="cb47-4">✔ |        29 | pull_binary_cols                                                   </span>
<span id="cb47-5">✔ |         4 | pull_cat_cols                                                      </span>
<span id="cb47-6">✔ |        20 | pull_facet_cols                                                    </span>
<span id="cb47-7">✔ |         5 | pull_numeric_cols                                                  </span>
<span id="cb47-8">✔ |         3 | utils                                                              </span>
<span id="cb47-9"></span>
<span id="cb47-10">══ Results ═════════════════════════════════════════════════════════════════════</span>
<span id="cb47-11">Duration: 2.1 s</span>
<span id="cb47-12"></span>
<span id="cb47-13">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 86 ]</span>
<span id="cb47-14"></span>
<span id="cb47-15">🎯 Your tests hit the mark 🎯</span></code></pre></div>
<p>The output above shows all tests are passing (and some helpful words of encouragement). As you can see, the number of tests correspond to the number of functions in each test file.</p>
<p>For example, <code>pull_binary_cols()</code> and <code>pull_facet_cols()</code> required additional internal functions to define their use:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>█─pull_binary_cols 
├─█─check_binary_vec 
│ ├─█─check_log_binary 
│ ├─█─check_int_binary 
│ └─█─check_fct_binary 
└─█─make_binary_vec </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>█─pull_facet_cols 
├─█─check_facet_vec 
│ ├─█─check_chr_facet 
│ └─█─check_fct_facet 
└─█─make_facet_vec </code></pre>
</div>
</div>
<p>Wheras <code>pull_cat_cols()</code> and <code>pull_numeric_cols()</code> map onto existing classes:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>█─pull_cat_cols 
├─█─is.factor 
└─█─is.character </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>█─pull_numeric_cols 
├─█─is.integer 
└─█─is.double </code></pre>
</div>
</div>
</section>
<section id="check-coverage-on-buildinstall" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="check-coverage-on-buildinstall">Check coverage on build/install</h3>
<p>To check the code coverage for the utap package, I can run <code>devtools::test_coverage()</code> to view the output in the <strong>Viewer</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_coverage</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb53-1">ℹ Computing test coverage for utap</span></code></pre></div>
<div class="column-body-outset-right">
<div id="fig-utap_coverage" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div id="fig-utap_coverage" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/test-shiny-p1/utap_coverage.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-utap_coverage"></p>
<figcaption class="figure-caption">(a) Final test coverage for <code>utap</code> package</figcaption>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;8: <code>devtools::test_coverage()</code></figcaption>
</figure>
</div>
</div>
<p>Clicking on any of the <strong>Files</strong> will open the <strong>Source</strong> tab and give a summary like the one above from <code>devtools::test_coverage_active_file()</code>. I can also use <code>covr::package_coverage()</code> in the <strong>Console</strong> for simpler output:</p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb54-1">utap Coverage: 100.00%</span>
<span id="cb54-2">R/column_classes.R: 100.00%</span>
<span id="cb54-3">R/pull_binary_cols.R: 100.00%</span>
<span id="cb54-4">R/pull_cat_cols.R: 100.00%</span>
<span id="cb54-5">R/pull_facet_cols.R: 100.00%</span>
<span id="cb54-6">R/pull_numeric_cols.R: 100.00%</span>
<span id="cb54-7">R/utils.R: 100.00%</span></code></pre></div>
<section id="other-metrics" class="level4">
<h4 class="anchored" data-anchor-id="other-metrics">Other metrics</h4>
<p>Sometimes it’s interesting to view the relationship between function size and number of tests using the <a href="https://github.com/hrbrmstr/cloc"><code>cloc</code> package.</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cloc)</span></code></pre></div>
</div>
<p><code>cloc</code> stands for <em>Count Lines of Code</em>, and it’s a rough metric used to gauge code complexity. It’s simple, but apparently provides “<em>just as much predictive power as more elaborate constructs like cyclomatic complexity.</em>”<a href="https://www.oreilly.com/library/view/software-design-x-rays/9781680505795/">source</a></p>
<p>Below is a count of the lines of code in each file in the <code>R</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">cloc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cloc_by_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb57-1"># A tibble: 8 × 6</span>
<span id="cb57-2">  source filename                language   loc blank_lines comment_lines</span>
<span id="cb57-3">  &lt;chr&gt;  &lt;chr&gt;                   &lt;chr&gt;    &lt;int&gt;       &lt;int&gt;         &lt;int&gt;</span>
<span id="cb57-4">1 R      "R/pull_binary_cols.R"  R           53           2            57</span>
<span id="cb57-5">2 R      "R/pull_facet_cols.R"   R           42           2            73</span>
<span id="cb57-6">3 R      "R/column_classes.R"    R           41           6            65</span>
<span id="cb57-7">4 R      "R/pull_numeric_cols.R" R           19           1            24</span>
<span id="cb57-8">5 R      "R/pull_cat_cols.R"     R           13           0            19</span>
<span id="cb57-9">6 R      "R/utils.R"             R            3           0             7</span>
<span id="cb57-10">7 R      "R/utap-package.R"      R            2           0             7</span>
<span id="cb57-11">8 R      ""                      SUM        173          11           252</span></code></pre></div>
<p>This output also confirms the relationship between lines of code and tests.</p>
</section>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has been an introduction to unit testing utility functions in a shiny app-package. When I’m confident the utility functions are working, I’ll start adding them into modules (and testing with <code>testServer()</code> or <code>shinytest2</code>). Files names can change a lot throughout the course of developing a shiny app-package, so it’s helpful to adopt (or create) a naming convention.</p>
<p>If you’re using the <code>golem</code> framework to develop your shiny app-package, the <code>utils_</code> and <code>fct_</code> prefixes are used to define two different types of <a href="https://engineering-shiny.org/structuring-project.html#conventions-matter">utility/helper functions</a>:</p>
<ol type="1">
<li><p><code>utils_</code> files contain ‘<em>small helper functions</em> and’<em>top-level functions defining your user interface and your server function</em>’</p></li>
<li><p><code>fct_</code> files contain ‘<em>the business logic, which are potentially large functions</em>…<em>the backbone of the application and may not be specific to a given module</em>’.</p></li>
</ol>
<p>This particular file naming convention isn’t required, but as with most conventions, it’s better when someone else comes up with the standard (and I just have to adopt and implement it). And having and sticking to a naming convention is typically more important than the convention itself.</p>
<!--



````default
test-column_classes.R:
            │
            └── select_column_class()
                  │
                  └── get_column_class() 
````


````default
tree/
  │
  └── get_column_class()
        │     │
        │     └── select_column_class()
        │
        ├── pull_binary_cols()
        │
        ├── pull_facet_cols()
        │
        ├── pull_cat_cols()
        │
        └── pull_numeric_cols()
````


````default
tree/
  │
  └── get_column_class() # used in all pull_[type]_cols()
        │     │
        │     └── select_column_class()
        │
        ├── pull_binary_cols()
        │        │
        │        ├── check_binary_vec()
        │        │      │
        │        │      ├── check_log_binary()
        │        │      ├── check_int_binary()
        │        │      └── check_fct_binary()
        │        │
        │        └── make_binary_vec()
        │
        ├── pull_facet_cols() # custom definition
        │        │
        │        ├── check_facet_vec()
        │        │      │
        │        │      ├── check_chr_facet()
        │        │      └── check_fct_facet()
        │        │
        │        └── make_facet_vec()
        │
        ├── pull_cat_cols() # is.character & is.factor
        │
        └── pull_numeric_cols() # is.integer & is.double
````


-->


</section>

 ]]></description>
  <category>shiny</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/test-shiny-p1/index.html</guid>
  <pubDate>Mon, 01 May 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/test-shiny-p1/image.png" medium="image" type="image/png" height="192" width="144"/>
</item>
<item>
  <title>Writing modular code with box</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/box/index.html</link>
  <description><![CDATA[ 




<!--
https://mjfrigaard.github.io/posts/vanilla-shiny/

https://mjfrigaard.github.io/posts/my-pkg-app/

https://mjfrigaard.github.io/posts/my-golem-app/

https://mjfrigaard.github.io/posts/my-leprechaun-app/

https://mjfrigaard.github.io/posts/my-rhino-app/
-->
<section id="what-is-box" class="level2">
<h2 class="anchored" data-anchor-id="what-is-box">What is <code>box</code>?</h2>
<p><a href="https://klmr.me/box/index.html"><code>box</code></a> provides a precise and concise method for using add-on packages and functions. <code>box</code> also doesn’t require bundling your code into R packages to make it reusable. This post covers tackling some common workflow steps to demonstrate how <code>box</code> modules work.</p>
</section>
<section id="packages-functions-and-namespaces" class="level2">
<h2 class="anchored" data-anchor-id="packages-functions-and-namespaces">Packages, functions, and namespaces</h2>
<p>To understand the problem <code>box</code> solves, we’ll review the typical process for using add-on package functions in a standard R sesson and when developing R packages:</p>
<section id="r-sessions" class="level3">
<h3 class="anchored" data-anchor-id="r-sessions">R sessions</h3>
<ol type="1">
<li><p>Assume I want to use the <code>glue()</code> function from the <code>glue</code> package. The first step is to install it with <code>install.packages("glue")</code></p>
<ul>
<li><p>I’ll use the example from the <a href="https://glue.tidyverse.org/"><code>glue</code> package website</a>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glue"</span>)</span>
<span id="cb1-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb1-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The downloaded binary packages are in</span></span>
<span id="cb1-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  /var/folders/0x/x5wkbhmx0k74tncn9swz7xpr0000gn/T//RtmpAXeFDN/downloaded_packages</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul></li>
<li><p>To use the functions from <code>glue</code>, I’ll need to run <code>library(glue)</code> in the same R session.</p>
<ul>
<li><p>If I try to use a function from a package but it hasn’t been attached with <code>library</code> or <code>require</code>, I see the following:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb2-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error in glue("My name is {name}."): could not find function "glue"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>The error above can be confusing, because it doesn’t tell us if the package hasn’t been <em>installed</em>, or if the package hasn’t been <em>attached</em>.</p></li>
<li><p>However, after installing <code>glue</code>, I can get around using <code>library</code> by explicitly calling the function from the package namespace (i.e., <code>pkg::foo()</code>):</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span></span>
<span id="cb3-2">glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb3-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## My name is Fred.</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>While this method works, it doesn’t attach the package to the search list (which I check with <code>search()</code>)</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()</span>
<span id="cb4-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] ".GlobalEnv"        "package:stats"     "package:graphics" </span></span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "package:grDevices" "package:utils"     "package:datasets" </span></span>
<span id="cb4-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "package:methods"   "Autoloads"         "package:base"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><code>library()</code> attaches the <code>glue</code> package in the search list and makes the glue() function available to use (without the <code>package::</code> prefix)</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb5-2">base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()</span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] ".GlobalEnv"        "package:glue"      "package:stats"    </span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [4] "package:graphics"  "package:grDevices" "package:utils"    </span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [7] "package:datasets"  "package:methods"   "Autoloads"        </span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [10] "package:base"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>Unfortunately, <code>library()</code> also attaches <strong>all</strong> the objects from the <code>glue</code> package to the <code>search()</code> list, even though I’m only using a single function.</p></li>
</ul></li>
</ol>
<p>Read more about namespaces in <a href="https://adv-r.hadley.nz/environments.html#namespaces">Advanced R</a> and <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace-motivation">R packages</a>.</p>
</section>
<section id="r-packages" class="level3">
<h3 class="anchored" data-anchor-id="r-packages">R packages</h3>
<p>If I want to make the code I write using <code>glue</code> reusable, I can bundle it into an R package. Including <code>glue</code> as an add-on package (i.e., packages not loaded automatically with R) is done with the <code>NAMESPACE</code> file (created and edited via <code>roxygen2</code> tags), and by listing these packages under <code>Imports</code> in the <code>DESCRIPTION</code> file.</p>
<section id="in-r-files" class="level4">
<h4 class="anchored" data-anchor-id="in-r-files">In <code>R/</code> files:</h4>
<p>All <code>.R</code> files in R packages are placed in the <code>R/</code> folder. If these files use add-on packages (i.e., <code>library()</code> or <code>package::fun()</code>), I include the <code>@import</code> or <code>@importFrom</code> tag. If I’d like to include and make <code>my_name()</code> available to users, I use the <code>@export</code> tag:</p>
<ul>
<li><p>I’ve converted the use of <code>glue()</code> into a small function below:</p>
<ul>
<li><p><code>my_name()</code> is saved as <code>R/my_name.R</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-2">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb6-3">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb6-4">}</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_name</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span>)</span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## My name is Fred.</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>Below is a default <code>roxygen2</code> skeleton:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Introduce yourself </span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x a name </span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return An glued introduction to R</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export my_name</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_name("Fred")</span></span>
<span id="cb7-10">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb7-11">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb7-12">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb7-13">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul></li>
</ul>
<p>As we can see, the default <code>roxygen2</code> skeleton doesn’t include <code>@import</code> or <code>@importFrom</code>. The general advice is to prefer <code>@importFrom</code> over <code>@import</code>, because <strong><code>@import</code> imports the entire package namespace</strong> (only use this in ‘<em>very special situations</em>’ such as ‘<em>heavy use</em>’ of a package functions).</p>
<ul>
<li><p>Below is an example of using <code>@importFrom</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Introduce yourself </span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x a name </span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return An glued introduction to R</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export my_name</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_name("Fred")</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom glue glue</span></span>
<span id="cb8-12">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb8-13">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb8-14">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb8-15">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
<section id="namespace" class="level4">
<h4 class="anchored" data-anchor-id="namespace">NAMESPACE</h4>
<p>While developing my R package, I’ll run <code>devtools::load_all()</code> and <code>devtools::document()</code> frequently, and each time the imported functions are available in the current session and the tags are converted into <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-NAMESPACE-file"><strong>directives</strong></a> in the <code>NAMESPACE</code> file</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb9-1">import(package)</span>
<span id="cb9-2">importFrom(package,function) </span></code></pre></div>
</section>
<section id="description" class="level4">
<h4 class="anchored" data-anchor-id="description">DESCRIPTION</h4>
<p>A package <code>DESCRIPTION</code> file is managed completely independent of it’s <code>NAMESPACE</code> file. This can be confusing during package development, because it’s easy to assume some kind of connection between the <code>roxygen2</code> tags, the <code>NAMESPACE</code> file, and the <code>DESCRIPTION</code> file:</p>
<ul>
<li><p>However, this is not the case:</p>
<ul>
<li><p>To include <code>glue</code> in the <code>DESCRIPTION</code> under <code>Imports</code>, I also need to use <code>usethis::use_package("glue")</code></p></li>
<li><p>As noted in <a href="https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports">R packages</a>, “<em>The <code>Imports</code> field</em> [in the <code>DESCRIPTION</code> file] <em>makes sure that the packages listed there are installed when your package is installed.</em>” The <code>DESCRIPTION</code> file does not make functions available to the package developer (or the user).</p></li>
</ul></li>
</ul>
<p>The recommended practices for add-on packages are 1) use the namespace-qualified calls in the <code>R/</code> scripts (i.e., <code>package::function()</code> with an accompanying <code>@importFrom package function</code> tag), and 2) list these packages in the <code>DESCRIPTION</code> file under <code>Imports</code> or <code>Suggests</code> to make sure a package is installed whenever your package is installed (i.e., with <code>usethis::use_package("package")</code>)</p>
<p>The table below shows the connection between <code>roxygen2</code> tags, the resulting <code>NAMESPACE</code> entry, and what should be listed in the <code>DESCRIPTION</code> (this is also covered in <a href="https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports-r-code">R packages</a>)</p>
<p><br></p>
<div style="font-size: 0.70em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Refresher on <code>roxygen2</code>, <code>NAMESPACE</code> &amp; <code>DESCRPTION</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 0.90em; color: #696969;">

<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
roxygen2 tag
</th>
<th style="text-align:left;">
NAMESPACE directive
</th>
<th style="text-align:right;">
DESCRIPTION
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="importFrom">@importFrom</span>
</td>
<td style="text-align:left;">
importFrom() : import selected object from another namespace
</td>
<td style="text-align:right;">
Consider listing under ‘Suggests’
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="import">@import</span>
</td>
<td style="text-align:left;">
import(): import all objects from another package’s namespace
</td>
<td style="text-align:right;">
List under ‘Imports’
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="export">@export</span>
</td>
<td style="text-align:left;">
export() : export the function, method, generic, or class so it’s available outside of the package (in the namespace)
</td>
<td style="text-align:right;">
Nothing to list
</td>
</tr>
</tbody>

</table>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
</section>
</section>
<section id="how-box-is-different" class="level2">
<h2 class="anchored" data-anchor-id="how-box-is-different">How <code>box</code> is different</h2>
<p><code>box</code> doesn’t require installing or attaching add-on packages. Instead, it uses modules to make package functions available. I’ll demonstrate with a simplified example using the <a href="https://glue.tidyverse.org/"><code>glue()</code> package</a>. Assume I have a project folder <code>pkg/</code>,</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb10-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> pkg.Rproj</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> directory, 1 file</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li><p>Projects in RStudio have a hidden folder, <code>.Rproj.user/</code>:</p>
<ul>
<li><p>The the following contents are automatically created with a new <code>.Rproj</code> file:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details>
<summary>contents of .Rproj</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb11-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .Rproj.user</span>
<span id="cb11-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      ├── 8CC5F70E</span>
<span id="cb11-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── bibliography-index</span>
<span id="cb11-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── ctx</span>
<span id="cb11-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── explorer-cache</span>
<span id="cb11-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── presentation</span>
<span id="cb11-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── profiles-cache</span>
<span id="cb11-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── sources</span>
<span id="cb11-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      │      └── session-16ca0811</span>
<span id="cb11-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      │          └── lock_file</span>
<span id="cb11-12">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── tutorial</span>
<span id="cb11-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      └── viewer-cache</span>
<span id="cb11-14">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      └── shared</span>
<span id="cb11-15">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>          └── notebooks</span>
<span id="cb11-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>              └── patch-chunk-names</span>
<span id="cb11-17">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> pkg.Rproj</span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">14</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div></li>
<li><p>None of these contents deal with installing or loading packages, but I’ve included it here for full transparency</p></li>
</ul></li>
</ul>
<section id="create-a-box-module" class="level3">
<h3 class="anchored" data-anchor-id="create-a-box-module">Create a box module</h3>
<p>I’ll put the modules in a <code>box/fun.R</code> file, which I’ll create from the command-line:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> box </span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> box/fun.R</span></code></pre></div>
</details>
</div>
</div>
<p>Now my <code>pkg</code> folder looks like this:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb13-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> box</span>
<span id="cb13-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>    └── fun.R</span>
<span id="cb13-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pkg.Rproj</span>
<span id="cb13-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> use.R</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>pkg/box/fun.R</code> I’ll add the following:</p>
<ol type="1">
<li><p>a brief comment with the path to the module</p></li>
<li><p>the <code>@export</code> tag from <code>roxygen2</code></p></li>
<li><p>a call to <code>box::use(glue[glue])</code></p></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/fun.R</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb14-3">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb14-4">  glue[glue]</span>
<span id="cb14-5">  )</span></code></pre></div>
</details>
</div>
</div>
<p>In the parent folder, create another file named <code>use.R</code>.</p>
<p>In <code>use.R</code>, use the <code>fun</code> module by calling <code>box::use(box/fun)</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fun)</span></code></pre></div>
</details>
</div>
</div>
<p>View <code>fun</code> by printing it to the console:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print</span></span>
<span id="cb16-2">fun</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>module: <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/fun</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>This confirms the module has been created.</p>
</section>
<section id="using-modules" class="level3">
<h3 class="anchored" data-anchor-id="using-modules">Using modules</h3>
<p>The <code>glue</code> function is available from <code>fun</code> using the <code>$</code> (like a column in a <code>data.frame</code> or <code>tibble</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use </span></span>
<span id="cb18-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span></span>
<span id="cb18-3">fun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is a box {x}.'</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> is a box module.</span></code></pre></div>
</details>
</div>
</div>
<p><code>box</code> modules are combinations of named folders and files, but unlike R packages, these folders and files can be <em>nested</em>. The <code>folder/file</code> structure is used for separating modules, the same way we might separate files in a project (i.e., <code>project/data/file.csv</code> and <code>project/code/analysis.R</code>)</p>
<ul>
<li><p><code>box</code> makes the function and package namespacing <strong>explicit</strong> by using <code>box::use(package[fun])</code></p></li>
<li><p><code>box</code> also simplifies using module by calling the same function when building/using modules <code>box::use(folder/file)</code>:</p></li>
</ul>
<div style="font-size: 1.0em;">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CREATE MODULE</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/fun.R</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb20-4">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb20-5">  glue[glue]</span>
<span id="cb20-6">  )</span></code></pre></div>
</div>
<div style="font-size: 1.0em;">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># USE MODULE</span></span>
<span id="cb21-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fun)</span></code></pre></div>
</div>
<p>Below is a slightly more involved example:</p>
</section>
</section>
<section id="module-workflow" class="level2">
<h2 class="anchored" data-anchor-id="module-workflow">Module workflow</h2>
<p>Below I’m going to create a module that imports, wrangles, and visualizes data from the <a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins package.</a> (<strong>which is installed, but not loaded</strong>).</p>
<section id="boximport" class="level3">
<h3 class="anchored" data-anchor-id="boximport"><code>box/import</code></h3>
<p>This workflow starts with an <code>import</code> module in a <code>pengbox</code> project. The code below is stored in <code>pengbox/box/import.R</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>import module</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/import.R</span></span>
<span id="cb22-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb22-3">  readr[read_csv],</span>
<span id="cb22-4">)</span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb22-6">get_raw_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb22-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb22-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(raw_csv_url)</span>
<span id="cb22-9">}</span></code></pre></div>
</details>
</div>
</div>
<p>In a the master <code>pengbox/run.R</code> file, I’ll use <code>import</code> like so:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb23-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_raw_csv</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.75em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 × 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb24-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb24-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb24-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb24-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb24-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb24-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb24-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb24-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb24-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb24-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb24-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb24-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb24-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb24-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb24-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb24-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll re-write this module in <code>box/import.R</code> using an alias for <code>readr</code>s <code>read_csv()</code> function (<code>rcsv</code>) and include the <code>readr::cols()</code> function to remove the lengthy message.</p>
<p>This code is stored in the <code>box/import.R</code> file:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>import module with alias</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/import.R</span></span>
<span id="cb25-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb25-3">  readr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rcsv =</span> read_csv, cols]</span>
<span id="cb25-4">)</span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb25-6">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb25-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb25-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use alias for read_csv()</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rcsv</span>(raw_csv_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols</span>())</span>
<span id="cb25-10">}</span></code></pre></div>
</details>
</div>
</div>
<p>Using import with the new module is more concise:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb26-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb26-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raw</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.75em;">
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 × 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb27-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb27-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb27-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb27-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb27-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb27-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb27-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb27-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb27-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb27-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb27-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb27-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb27-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb27-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb27-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb27-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="boxprep" class="level3">
<h3 class="anchored" data-anchor-id="boxprep"><code>box/prep</code></h3>
<p>After importing the raw penguins data, I’ll write a module for wrangling the data (that also imports the <code>import</code> module).</p>
<p>This module takes the following steps:</p>
<ul>
<li>Reset the <code>box.path</code><br>
</li>
<li>Import the <code>box/import</code> module<br>
</li>
<li>Load all the functions from <code>dplyr</code> using <code>[...]</code><br>
</li>
<li>Load aliases for <code>stringr::str_extract()</code> and <code>janitor::clean_names()</code><br>
</li>
<li>Compose <code>prep()</code> with the wrangling steps</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>prep module with import</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/prep.R</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb28-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import alias import module</span></span>
<span id="cb28-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle packages, functions, and aliases</span></span>
<span id="cb28-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb28-11">  dplyr[...],</span>
<span id="cb28-12">  stringr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str_ext =</span> str_extract],</span>
<span id="cb28-13">  janitor[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fix_cols =</span> clean_names]</span>
<span id="cb28-14">)</span>
<span id="cb28-15"></span>
<span id="cb28-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb28-17">prep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb28-18">  raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raw</span>()</span>
<span id="cb28-19">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fix_cols</span>(raw)</span>
<span id="cb28-20">  vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(clean_cols, </span>
<span id="cb28-21">    species, </span>
<span id="cb28-22">    island, </span>
<span id="cb28-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> culmen_length_mm,</span>
<span id="cb28-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mm =</span> culmen_depth_mm,</span>
<span id="cb28-25">    flipper_length_mm,</span>
<span id="cb28-26">    body_mass_g,</span>
<span id="cb28-27">    sex)</span>
<span id="cb28-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(vars, </span>
<span id="cb28-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_ext</span>(species, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([[:alpha:]]+)"</span>),</span>
<span id="cb28-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex))</span>
<span id="cb28-31">}</span></code></pre></div>
</details>
</div>
</div>
<p>We can now the <code>prep</code> module to access the import module for the wrangled dataset.</p>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prepare</span></span>
<span id="cb29-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>prep)</span>
<span id="cb29-3">peng_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> prep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>()</span>
<span id="cb29-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(peng_clean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tibble</span> [344 × 7] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> species          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb30-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> island           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> ...</span>
<span id="cb30-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_length_mm   : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...</span>
<span id="cb30-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_depth_mm    : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...</span>
<span id="cb30-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> flipper_length_mm: num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 190 ...</span>
<span id="cb30-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> body_mass_g      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb30-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sex              : Factor w/ 2 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span>: 2 1 1 NA 1 2 1 2 NA NA ...</span></code></pre></div>
</div>
</div>
<p>These data look like they’re ready for graphing! Time to write another module…</p>
</section>
<section id="boxplot" class="level3">
<h3 class="anchored" data-anchor-id="boxplot"><code>box/plot</code></h3>
<p>I will build my visualization with <code>ggplot2</code> (in the <code>box/plot.R</code> module) and <code>dplyr::filter()</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>plot module with prep</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pengbox/plot.R</span></span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb31-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import prep module</span></span>
<span id="cb31-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>prep)</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import ggplot2</span></span>
<span id="cb31-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb31-11">  dplyr[filter],</span>
<span id="cb31-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ggplot2 =</span> ggplot2[ggplot, aes, geom_point, </span>
<span id="cb31-13">                    facet_wrap, labs, theme_minimal])</span>
<span id="cb31-14"></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb31-16">scatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb31-17">  prepped <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> prep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>()</span>
<span id="cb31-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove missing sex</span></span>
<span id="cb31-19">  filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prepped, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) </span>
<span id="cb31-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot filtered data</span></span>
<span id="cb31-21">  plotted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> filtered, </span>
<span id="cb31-22">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb31-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm,</span>
<span id="cb31-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g,</span>
<span id="cb31-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> sex</span>
<span id="cb31-26">    )</span>
<span id="cb31-27">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-28">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb31-29">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> island)</span>
<span id="cb31-30">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-31">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sex) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-32">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body Mass (g)"</span>, </span>
<span id="cb31-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper vs. Body Mass"</span>, </span>
<span id="cb31-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-35">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb31-36">  plotted</span>
<span id="cb31-37">}</span></code></pre></div>
</details>
</div>
</div>
<p>Check our scatter plot with <code>plot$scatter()</code></p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot</span></span>
<span id="cb32-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>plot)</span>
<span id="cb32-3">plot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>()</span></code></pre></div>
</details>
</div>
</div>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://mjfrigaard.github.io/posts/box/scatter.png" class="img-fluid" style="width:100.0%"></p>
</div>
</div>
<p>And there you have it! A complete pipeline using <code>box</code> modules! And the total project size (files and folders) is much smaller than building an R package:</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/</span></span>
<span id="cb33-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> box</span>
<span id="cb33-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── import.R</span>
<span id="cb33-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── plot.R</span>
<span id="cb33-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── prep.R</span>
<span id="cb33-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> penguins.Rproj</span>
<span id="cb33-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> run.R</span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 5 files</span></code></pre></div>
</details>
</div>
</div>
<p>Below are the various ways to include packages and functions in <code>box</code> modules:</p>
<div style="font-size: 0.70em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Options for creating <code>box</code> modules:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 0.90em; color: #696969;">

<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
Inside box::use()
</th>
<th style="text-align:left;">
Action
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
box::use( pkg )
</td>
<td style="text-align:left;">
imports ‘pkg’, does not attach any function names
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( p = pkg )
</td>
<td style="text-align:left;">
imports ‘pkg’ with alias (‘p’), does not attach any function names
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( pkg = pkg[foo, bar] )
</td>
<td style="text-align:left;">
imports ‘pkg’ and attaches the function names ‘pkg::foo()’ and ‘pkg::bar()’
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( pkg[my_foo = foo, …] )
</td>
<td style="text-align:left;">
imports ‘pkg’ with alias for ‘foo’ (‘my_foo’) and attaches all exported function names
</td>
</tr>
</tbody>

</table>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="nesting-modules" class="level2">
<h2 class="anchored" data-anchor-id="nesting-modules">Nesting modules</h2>
<p>The same workflow could be re-written as nested modules, with folders separating logical steps in an analysis workflow (or application). Consider the folder structure below:</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/</span></span>
<span id="cb34-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> box</span>
<span id="cb34-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── graph</span>
<span id="cb34-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       ├── wrangle</span>
<span id="cb34-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   ├── clean</span>
<span id="cb34-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   │   ├── import</span>
<span id="cb34-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   │   │   └── raw.R</span>
<span id="cb34-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   │   └── cols.R</span>
<span id="cb34-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   └── vars.R</span>
<span id="cb34-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       └── scatter.R</span>
<span id="cb34-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> penguins.Rproj</span>
<span id="cb34-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> run.R</span>
<span id="cb34-13"></span>
<span id="cb34-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> directories, 6 files</span></code></pre></div>
</details>
</div>
</div>
<section id="import" class="level3">
<h3 class="anchored" data-anchor-id="import"><code>import</code></h3>
<p>With this structure, the <code>raw</code> module is in the <code>import</code> folder:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/box/graph/wrangle/clean/import</span></span>
<span id="cb35-2">                                    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> raw.R</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> directory, 1 file</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li><p>The <code>raw</code> module–the first step–is nested in the <code>box/graph/wrangle/clean/import/raw.R</code> file</p>
<ul>
<li>The <code>raw</code> module imports the raw <code>.csv</code> data with an aliass for <code>readr</code>’s <code>read_csv()</code></li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>raw module</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/clean/import/raw.R</span></span>
<span id="cb36-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb36-3">  readr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rcsv =</span> read_csv, cols]</span>
<span id="cb36-4">)</span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb36-6">csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb36-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb36-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use alias for read_csv()</span></span>
<span id="cb36-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rcsv</span>(raw_csv_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols</span>())</span>
<span id="cb36-10">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<section id="raw" class="level4">
<h4 class="anchored" data-anchor-id="raw"><code>raw</code></h4>
<ul>
<li><p>In <code>run.R</code>, I run <code>box/graph/wrangle/clean/import/raw</code> to import the <code>raw</code> module</p>
<ul>
<li>The <code>csv()</code> function imports the raw data</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in use.R</span></span>
<span id="cb37-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw)</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details>
<summary>raw module output</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb38-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 × 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb38-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb38-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb38-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb38-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb38-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb38-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb38-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb38-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb38-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb38-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb38-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb38-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb38-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb38-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb38-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb38-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="clean" class="level3">
<h3 class="anchored" data-anchor-id="clean"><code>clean</code></h3>
<p>The <code>clean</code> folder contains the <code>cols</code> module and the <code>snakes()</code> function</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/graph/wrangle/</span></span>
<span id="cb39-2">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> clean</span>
<span id="cb39-3">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import</span></span>
<span id="cb39-4">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   │   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#└── raw.R</span></span>
<span id="cb39-5">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── cols.R</span>
<span id="cb39-6">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> vars.R</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<section id="snakes" class="level4">
<h4 class="anchored" data-anchor-id="snakes"><code>snakes</code></h4>
<ul>
<li><p>The <code>box/graph/wrangle/clean/cols</code> module standardizes the column names</p>
<ul>
<li><code>cols</code> calls the <code>snakes()</code> function, which converts all the column names to <code>lower_snake_case</code> with an alias for <code>janitor::clean_names()</code>, then it imports <code>select</code> from <code>dplyr</code> to subset the columns</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>cols module</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/clean/cols.R</span></span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb40-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use import raw module</span></span>
<span id="cb40-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw)</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># columns</span></span>
<span id="cb40-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb40-11">  dplyr[select],</span>
<span id="cb40-12">  janitor[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fix_cols =</span> clean_names]</span>
<span id="cb40-13">)</span>
<span id="cb40-14"></span>
<span id="cb40-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb40-16">snakes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb40-17">  raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb40-18">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fix_cols</span>(raw)</span>
<span id="cb40-19">  vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(clean_cols, </span>
<span id="cb40-20">    species, </span>
<span id="cb40-21">    island, </span>
<span id="cb40-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> culmen_length_mm,</span>
<span id="cb40-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mm =</span> culmen_depth_mm,</span>
<span id="cb40-24">    flipper_length_mm,</span>
<span id="cb40-25">    body_mass_g,</span>
<span id="cb40-26">    sex)</span>
<span id="cb40-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(vars)</span>
<span id="cb40-28">}</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li>Back in <code>run.R</code>, we call the <code>cols</code> module to convert the columns names with <code>snakes()</code>:</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean columns</span></span>
<span id="cb41-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cols)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(cols<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snakes</span>())</span></code></pre></div>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>cols module output</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb42-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"island"</span>            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_length_mm"</span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_depth_mm"</span>                  </span>
<span id="cb42-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[5]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flipper_length_mm"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span> </span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="wrangle" class="level3">
<h3 class="anchored" data-anchor-id="wrangle"><code>wrangle</code></h3>
<ul>
<li>Now that I have standardized columns and the subset of the variables to plot, I can call the <code>vars</code> module to wrangle the plot variables</li>
</ul>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/graph/wrangle/</span></span>
<span id="cb43-2">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#clean</span></span>
<span id="cb43-3">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#├── #import</span></span>
<span id="cb43-4">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #└── raw.R</span></span>
<span id="cb43-5">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#└── cols.R</span></span>
<span id="cb43-6">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> vars.R</span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<section id="vars" class="level4">
<h4 class="anchored" data-anchor-id="vars"><code>vars</code></h4>
<ul>
<li><p><code>vars</code> is nested in the <code>wrangle</code> folder, and imports the <code>raw</code> and <code>cols</code> modules</p>
<ul>
<li>The <code>vars</code> module imports <code>mutate</code> and <code>filter</code> from <code>dplyr</code> and an alias for <code>stringr::str_extract()</code></li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>vars module</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/vars.R</span></span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb44-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use clean names module</span></span>
<span id="cb44-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cols)</span>
<span id="cb44-8"></span>
<span id="cb44-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle packages/functions</span></span>
<span id="cb44-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(dplyr[mutate, filter],</span>
<span id="cb44-11">  stringr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str_ext =</span> str_extract])</span>
<span id="cb44-12"></span>
<span id="cb44-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb44-14">scatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb44-15">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cols<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snakes</span>()</span>
<span id="cb44-16">  plot_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> clean_cols <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_ext</span>(species, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([[:alpha:]]+)"</span>),</span>
<span id="cb44-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(species),</span>
<span id="cb44-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">island =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(island),</span>
<span id="cb44-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex)</span>
<span id="cb44-22">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove missing sex</span></span>
<span id="cb44-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex))</span>
<span id="cb44-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plot_vars)</span>
<span id="cb44-26">}</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>run.R</code>, we check the structure of the output from <code>vars$scatter()</code></p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in run.R</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle variables </span></span>
<span id="cb45-3">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>vars)</span>
<span id="cb45-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(vars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>())</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>vars module output</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb46-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tibble</span> [333 × 7] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>                                                     </span>
<span id="cb46-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> species          : Factor w/ 3 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span>,..: 1 1 1 1 1 1 1 1 1 1 ...</span>
<span id="cb46-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> island           : Factor w/ 3 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Biscoe"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dream"</span>,..: 3 3 3 3 3 3 3 3 3 3 ...</span>
<span id="cb46-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_length_mm   : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 36.7 39.3 38.9 39.2 41.1 38.6 34.6 ...</span>
<span id="cb46-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_depth_mm    : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 19.3 20.6 17.8 19.6 17.6 21.2 21.1 ...</span>
<span id="cb46-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> flipper_length_mm: num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 193 190 181 195 182 191 198 ...</span>
<span id="cb46-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> body_mass_g      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 3450 3650 ...</span>
<span id="cb46-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sex              : Factor w/ 2 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span>: 2 1 1 1 2 1 2 1 2 2 ...</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="graph" class="level3">
<h3 class="anchored" data-anchor-id="graph"><code>graph</code></h3>
<p>Finally, we get to the <code>graph</code> module. This module import all preceding modules.</p>
<div style="font-size: 1.10em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb47-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/</span></span>
<span id="cb47-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> graph</span>
<span id="cb47-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#wrangle</span></span>
<span id="cb47-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#├── #clean</span></span>
<span id="cb47-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #├── #import</span></span>
<span id="cb47-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #│   #└── raw.R</span></span>
<span id="cb47-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #└── cols.R</span></span>
<span id="cb47-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#└── vars.R</span></span>
<span id="cb47-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> scatter.R</span>
<span id="cb47-10"></span>
<span id="cb47-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5</span> directories, 4 files</span></code></pre></div>
</div>
</div>
<section id="scatter" class="level4">
<h4 class="anchored" data-anchor-id="scatter"><code>scatter</code></h4>
<ul>
<li><p>The <code>scatter</code> module imports the <code>vars</code> module with the data that’s been imported, cleaned, and wrangled.</p>
<ul>
<li>The <code>ggp2()</code> function includes the <code>ggplot2</code> functions to build a scatter plot.</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>scatter module</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/scatter.R</span></span>
<span id="cb48-2"></span>
<span id="cb48-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb48-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb48-5"></span>
<span id="cb48-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import plot vars module</span></span>
<span id="cb48-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>vars)</span>
<span id="cb48-8"></span>
<span id="cb48-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import ggplot2</span></span>
<span id="cb48-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb48-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ggplot2 =</span> ggplot2[ggplot, aes, geom_point, </span>
<span id="cb48-12">                    facet_wrap, labs, theme_minimal]</span>
<span id="cb48-13">)</span>
<span id="cb48-14"></span>
<span id="cb48-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb48-16">ggp2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb48-17">  scatter_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>()</span>
<span id="cb48-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot prepped data</span></span>
<span id="cb48-19">  ggp2_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> scatter_vars, </span>
<span id="cb48-20">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb48-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm,</span>
<span id="cb48-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb48-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> island</span>
<span id="cb48-24">    )</span>
<span id="cb48-25">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-26">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb48-27">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)</span>
<span id="cb48-28">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-29">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> island) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-30">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb48-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, </span>
<span id="cb48-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill length (mm)"</span>, </span>
<span id="cb48-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>,</span>
<span id="cb48-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>,</span>
<span id="cb48-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper vs. Bill Length"</span>, </span>
<span id="cb48-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span></span>
<span id="cb48-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-38">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb48-39">  ggp2_plot</span>
<span id="cb48-40">}</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>run.R</code>, the final module call produces the plot.</p>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># graph</span></span>
<span id="cb49-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>scatter)</span>
<span id="cb49-3">scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggp2</span>()</span></code></pre></div>
</div>
</div></li>
</ul>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://mjfrigaard.github.io/posts/box/nested-scatter.png" class="img-fluid" style="width:100.0%"></p>
</div>
</div>
</section>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this post I’ve covered how the <code>box</code> package uses modules to separate your analysis and workflow into small, <em>modular</em> scripts. Nesting modules also adds a flexibility R packages do not have (because everything has to be contained in the <code>R/</code> folder).</p>
<p>Both versions of the projects created in this example ended up with very few lines of code, and didn’t require a creating a <code>NAMESPACE</code> or <code>DESCRIPTION</code> file.</p>
<p>View the final <a href="https://github.com/mjfrigaard/penguins">project here.</a></p>
<!--

-->


</section>

 ]]></description>
  <category>packages</category>
  <category>code</category>
  <guid>https://mjfrigaard.github.io/posts/box/index.html</guid>
  <pubDate>Fri, 21 Apr 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/box/image.png" medium="image" type="image/png" height="139" width="120"/>
</item>
<item>
  <title>purrr updates (v1.0.0)</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/purrr1.0/index.html</link>
  <description><![CDATA[ 




<!--
https://mjfrigaard.github.io/posts/vanilla-shiny/

https://mjfrigaard.github.io/posts/my-pkg-app/

https://mjfrigaard.github.io/posts/my-golem-app/

https://mjfrigaard.github.io/posts/my-leprechaun-app/

https://mjfrigaard.github.io/posts/my-rhino-app/
-->
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_github("tidyverse/purrr", </span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                   force = TRUE, quiet = TRUE)</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sloop)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(snakecase)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(waldo)</span></code></pre></div>
</details>
</div>
</div>
<p>This post is going to cover the recent updates to the <a href="https://purrr.tidyverse.org/"><code>purrr</code> package</a>. The release of <a href="https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/">version 1.0.0</a> (and dev version <a href="https://github.com/tidyverse/purrr/blob/main/NEWS.md#purrr-101">v1.0.1</a>) had some breaking changes, which I will cover below. But first, I’ll dive into some attributes of R’s functions and objects that make <code>purrr</code> particularly useful, and I’ll work through iteration problems I’ve encountered (and solved with <code>purrr</code>).</p>
<section id="refresher-functions-and-objects" class="level1">
<h1><strong>Refresher</strong>: functions and objects</h1>
<p>If you’re like me, you’ve never been a big fan of <code>for</code> loops. They’re an important concept to grasp, but if you’ve ever had to debug what’s happening in multiple nested <code>for</code> loops, you’ve probably found yourself asking if there’s a better way to iterate.</p>
<p>In a functional programming language like R, it’s nice when to have functions perform a lot of the work I’d have to write into a <code>for</code> loop.</p>
<section id="generic-functions-s3-objects" class="level2">
<h2 class="anchored" data-anchor-id="generic-functions-s3-objects">Generic functions &amp; S3 objects</h2>
<p>R’s syntax avoids explicit iteration by allowing certain <em>generic</em> functions to be used across different types (or objects). For example, the base <code>plot()</code> and <code>summary()</code> functions are S3 generic function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(plot)</span>
<span id="cb2-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"      "generic"</span></span>
<span id="cb2-3">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(summary)</span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"      "generic"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Which means <code>plot()</code> can be applied to S3 objects, like time-series (<code>ts</code>) and rectangular datasets (<code>data.frame</code>):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">otype</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb3-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "ts"</span></span>
<span id="cb3-5">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">otype</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "data.frame"</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb4-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   576.0   578.1   579.1   579.0   579.9   581.9</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb4-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      weight             feed   </span></span>
<span id="cb4-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Min.   :108.0   casein   :12  </span></span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1st Qu.:204.5   horsebean:10  </span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Median :258.0   linseed  :12  </span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Mean   :261.3   meatmeal :11  </span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3rd Qu.:323.5   soybean  :14  </span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Max.   :423.0   sunflower:12</span></span></code></pre></div>
</details>
</div>
<div>
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span></code></pre></div>
</details>
<div class="cell quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/purrr1.0/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Time-series plot</figcaption>
</figure>
</div>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/purrr1.0/index_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid figure-img" width="672"></p>
<figcaption class="figure-caption">Scatter Plot</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
<p><code>summary()</code> is a particularly versatile function, because it can be used on <code>data.frame</code>s, a single column in a <code>data.frame</code>, model outputs, and more.</p>
<div style="font-size: 0.90em; color: #696969;">
<p><em>Click <strong>Code</strong> below to view an example using <code>summary()</code></em></p>
</div>
<div style="font-size: 0.90em;">
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get summary of columns ----------------------------------------------------</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hp)</span>
<span id="cb6-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    52.0    96.5   123.0   146.7   180.0   335.0</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg)</span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   10.40   15.43   19.20   20.09   22.80   33.90</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store model output  -------------------------------------------------------</span></span>
<span id="cb6-10">lm_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> hp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb6-11">lm_mod</span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Call:</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## lm(formula = mpg ~ hp, data = mtcars)</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Coefficients:</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept)           hp  </span></span>
<span id="cb6-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    30.09886     -0.06823</span></span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get summary of model output -----------------------------------------------</span></span>
<span id="cb6-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_mod)</span>
<span id="cb6-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Call:</span></span>
<span id="cb6-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## lm(formula = mpg ~ hp, data = mtcars)</span></span>
<span id="cb6-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Residuals:</span></span>
<span id="cb6-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     Min      1Q  Median      3Q     Max </span></span>
<span id="cb6-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## -5.7121 -2.1122 -0.8854  1.5819  8.2360 </span></span>
<span id="cb6-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Coefficients:</span></span>
<span id="cb6-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##             Estimate Std. Error t value Pr(&gt;|t|)    </span></span>
<span id="cb6-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept) 30.09886    1.63392  18.421  &lt; 2e-16 ***</span></span>
<span id="cb6-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## hp          -0.06823    0.01012  -6.742 1.79e-07 ***</span></span>
<span id="cb6-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ---</span></span>
<span id="cb6-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</span></span>
<span id="cb6-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Residual standard error: 3.863 on 30 degrees of freedom</span></span>
<span id="cb6-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Multiple R-squared:  0.6024, Adjusted R-squared:  0.5892 </span></span>
<span id="cb6-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## F-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07</span></span>
<span id="cb6-40"></span>
<span id="cb6-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the output from one S3 generic to another S3 generic -----------------</span></span>
<span id="cb6-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_mod))</span>
<span id="cb6-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                Estimate Std. Error   t value     Pr(&gt;|t|)</span></span>
<span id="cb6-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept) 30.09886054  1.6339210 18.421246 6.642736e-18</span></span>
<span id="cb6-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## hp          -0.06822828  0.0101193 -6.742389 1.787835e-07</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="fp-oop" class="level2">
<h2 class="anchored" data-anchor-id="fp-oop">FP + OOP</h2>
<blockquote class="blockquote">
<p><em>Functional programming is complementary to object-oriented programming, which has been the dominant programming paradigm for the last several decades.</em> - Advanced R, 2nd edition</p>
</blockquote>
<p><code>plot()</code> and <code>summary()</code> are parametric polymorphic (generic) functions, which means they have slightly different behaviors based on the objects passed into them.</p>
<p>As I can see, generic functions are flexible and efficient because of not having to re-define a new function for each input object–outputs from generic functions will automatically change (in part) depending on the structure of the object provided to them.</p>
<p>The relationship between functions and objects is what makes <code>purrr</code> (and other tools for iteration) extremely helpful for solving iteration problems we commonly encounter when working with data. Similar to generic functions, these functions allow us to express iterative behavior using a complete and consistent set of tools.</p>
</section>
<section id="iteration-problems" class="level2">
<h2 class="anchored" data-anchor-id="iteration-problems">Iteration problems</h2>
<p>In programming, iteration refers to defining an input and applying an operation over every part of it. Some examples of problems that iteration can solve include:</p>
<ol type="1">
<li><p>You have a list of objects and you’d like to apply a function (or a series of functions) over the elements in the list</p></li>
<li><p>You have a folder full of files you’d like to rename or copy to a new directory</p></li>
<li><p>You’d like to download a collection of files from separate URLS</p></li>
<li><p>You have several years of data, and each year is contained in separate file. You’d like to read these data into R, combine them into a single dataset</p></li>
<li><p>You have a non-rectangular (i.e., list) of datasets you’d like to split into individual <code>data.frame</code>s, then export these into separate file paths.</p></li>
</ol>
<p>These are all problems I’ve personally encountered that required a variety of iteration tools to tackle. I’ll start with the first example because the principles remain the same (regardless of the size/scope of the problem):</p>
</section>
</section>
<section id="the-for-loop" class="level1">
<h1><strong>The <code>for</code> loop</strong></h1>
<p><code>for</code> loops are ubiquitous in programming, and (for the most part) they describe the types of problems they’re solving:</p>
<blockquote class="blockquote">
<p>“<em>for each <code>item</code> in <code>object</code>, do <code>operation</code></em>”</p>
</blockquote>
<p>I have a list (<code>my_list</code>), with items in various cases:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">my_list</span>
<span id="cb7-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb7-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "SpaCE"    "pOsitiOn" "sOcIetY"  "sTufF"    "hAnd"    </span></span>
<span id="cb7-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb7-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "we tRIEd To RePLaCe THe cOiN BUT faILED."       </span></span>
<span id="cb7-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "He WrOTE HIS LaSt noVel ThErE aT ThE inn."      </span></span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "a whIfF oF It WIlL cURe ThE mOst sTubbOrn cold."</span></span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "B" "t" "N" "o" "w" "h" "Z" "u" "E" "m"</span></span></code></pre></div>
</details>
</div>
</div>
<p>If I try to use the <code>tolower()</code> on <code>my_list</code>, it returns a vector.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span>
<span id="cb8-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  chr [1:3] "c(\"space\", \"position\", \"society\", \"stuff\", \"hand\")" ...</span></span></code></pre></div>
</details>
</div>
</div>
<p>How can I apply the <code>tolower()</code> function to each item in <code>my_list</code>, and return the original object type? I’ll use <code>my_list</code> and <code>tolower()</code> to demonstrate how I was taught to write <code>for</code> loops:</p>
<ul>
<li><p><strong>First</strong>: define the sequence, ‘<em>for <code>[item]</code> in <code>[items in object]</code></em>’</p>
<ul>
<li>In this case, <code>x</code> is the abstracted <code>[item]</code> taking on the values returned by <code>seq_along(my_list)</code> (the <code>[items in object]</code>)</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)</span>
<span id="cb9-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1 2 3</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take single value of 'x'</span></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use this to get 'items in object'</span></span>
<span id="cb9-7">my_list[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]]</span>
<span id="cb9-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "SpaCE"    "pOsitiOn" "sOcIetY"  "sTufF"    "hAnd"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><strong>Second</strong>: write the operations the for loop will perform per iteration (i.e.&nbsp;the first iteration is <code>x</code> = <code>tolower(my_list[[1]])</code>; the second iteration is <code>x</code> = <code>tolower(my_list[[2]])</code>; etc.)</p>
<ul>
<li>Test this with a few values if you like</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb10-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "we tried to replace the coin but failed."       </span></span>
<span id="cb10-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "he wrote his last novel there at the inn."      </span></span>
<span id="cb10-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "a whiff of it will cure the most stubborn cold."</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><strong>Third</strong>: define an (optional) object to capture the results of the loop (<code>lc_list</code>), and make sure it’s the correct size</p>
<ul>
<li>Two methods for creating empty lists</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb11-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[2]]</span></span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[3]]</span></span>
<span id="cb11-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb11-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb11-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[2]]</span></span>
<span id="cb11-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[3]]</span></span>
<span id="cb11-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<p>Finally, we put it all together in a <code>for</code> loop</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define capture object</span></span>
<span id="cb12-2">lc_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write sequence</span></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)) {        </span>
<span id="cb12-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write operations/capture in object</span></span>
<span id="cb12-6">  lc_list[[x]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list[[x]])</span>
<span id="cb12-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean up container</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(lc_list) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentences"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"letters"</span>)</span>
<span id="cb12-9">}</span>
<span id="cb12-10">lc_list</span>
<span id="cb12-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "space"    "position" "society"  "stuff"    "hand"    </span></span>
<span id="cb12-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb12-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "we tried to replace the coin but failed."       </span></span>
<span id="cb12-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "he wrote his last novel there at the inn."      </span></span>
<span id="cb12-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "a whiff of it will cure the most stubborn cold."</span></span>
<span id="cb12-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb12-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb12-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "b" "t" "n" "o" "w" "h" "z" "u" "e" "m"</span></span></code></pre></div>
</details>
</div>
</div>
<p>This was a simple example, but it demonstrates the basic components in a <code>for</code> loop:</p>
<ol type="1">
<li>The sequence to index
<ul>
<li><code>for (x in seq_along(my_list))</code><br>
</li>
</ul></li>
<li>The operations to iterate
<ul>
<li><code>tolower(my_list[[x]])</code><br>
</li>
</ul></li>
<li>The object to capture the results
<ul>
<li><code>lc_list &lt;- vector(mode = "list", length = 3)</code> and<br>
</li>
<li><code>lc_list[[x]]</code></li>
</ul></li>
</ol>
</section>
<section id="base-r" class="level1">
<h1><strong>Base R</strong></h1>
<p>base R has the <code>_apply</code> family of functions (<code>apply()</code>, <code>lapply()</code>, <code>sapply()</code>, <code>vapply()</code>, etc.) that remove a lot of the ‘book keeping’ code we had to write in the <code>for</code> loop.</p>
<section id="lapply" class="level2">
<h2 class="anchored" data-anchor-id="lapply"><code>lapply()</code></h2>
<p>Sticking with the <code>my_list</code> and <code>tolower()</code> example, the <code>apply</code> function I want is <code>lapply()</code> (pronounced ‘l-apply’), and the <code>l</code> stands for list.</p>
<p><code>lapply()</code> has only two required arguments:</p>
<ul>
<li><p><code>X</code> the object we want to iterate over</p></li>
<li><p><code>FUN</code> being the function we want iterated</p></li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb13-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb13-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "space"    "position" "society"  "stuff"    "hand"    </span></span>
<span id="cb13-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb13-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb13-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "we tried to replace the coin but failed."       </span></span>
<span id="cb13-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "he wrote his last novel there at the inn."      </span></span>
<span id="cb13-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "a whiff of it will cure the most stubborn cold."</span></span>
<span id="cb13-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb13-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb13-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "b" "t" "n" "o" "w" "h" "z" "u" "e" "m"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="sapply" class="level2">
<h2 class="anchored" data-anchor-id="sapply"><code>sapply()</code></h2>
<p><code>sapply()</code> attempts to simplify the result depending on the <code>X</code> argument. If <code>X</code> is a list containing vectors where every element has the same length (and it’s greater than 1), then <code>sapply()</code> returns a matrix:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb14-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 1</span></span>
<span id="cb14-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ words: chr [1:5] "SpaCE" "pOsitiOn" "sOcIetY" "sTufF" ...</span></span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb14-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      words     </span></span>
<span id="cb14-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1,] "space"   </span></span>
<span id="cb14-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2,] "position"</span></span>
<span id="cb14-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3,] "society" </span></span>
<span id="cb14-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4,] "stuff"   </span></span>
<span id="cb14-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5,] "hand"</span></span></code></pre></div>
</details>
</div>
</div>
<p>If a vector is passed to <code>X</code> where every element is length 1, then a vector is returned:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb15-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  chr [1:5] "SpaCE" "pOsitiOn" "sOcIetY" "sTufF" "hAnd"</span></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower) </span>
<span id="cb15-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      SpaCE   pOsitiOn    sOcIetY      sTufF       hAnd </span></span>
<span id="cb15-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    "space" "position"  "society"    "stuff"     "hand"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Finally, if <code>X</code> is a list where elements have a length greater than 1, then a list is returned (making it identical to <code>lapply()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower), </span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb16-4">)</span>
<span id="cb16-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ✔ No differences</span></span></code></pre></div>
</details>
</div>
</div>
<p>This is because <code>sapply</code> is a wrapper around <code>lapply</code>, but has <code>simplify</code> and <code>USE.NAMES</code> set to <code>FALSE</code> (see what happens below when I change them to <code>TRUE</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb17-2">  </span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower), </span>
<span id="cb17-4">  </span>
<span id="cb17-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower, </span>
<span id="cb17-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">USE.NAMES =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb17-7">  </span>
<span id="cb17-8">  )</span>
<span id="cb17-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `old` is a list</span></span>
<span id="cb17-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `new` is a character vector ('space', 'position', 'society', 'stuff', 'hand')</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="anonmymous-functions" class="level2">
<h2 class="anchored" data-anchor-id="anonmymous-functions">Anonmymous functions</h2>
<p>The <code>FUN</code> argument can also take anonymous (undefined) functions. For example, if I wanted to access the second elements in <code>my_list</code>, I could pass an anonymous function the <code>FUN</code> (with the index):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb18-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb18-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "pOsitiOn"</span></span>
<span id="cb18-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb18-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb18-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "He WrOTE HIS LaSt noVel ThErE aT ThE inn."</span></span>
<span id="cb18-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb18-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb18-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "t"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="vapply" class="level2">
<h2 class="anchored" data-anchor-id="vapply"><code>vapply()</code></h2>
<p>Finally <code>vapply()</code> is unique in that it always simplifies the returned output. If we repeat the example above, we see the returned value is character vector:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, </span>
<span id="cb19-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]], </span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb19-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                       words </span></span>
<span id="cb19-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                  "pOsitiOn" </span></span>
<span id="cb19-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                   sentences </span></span>
<span id="cb19-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "He WrOTE HIS LaSt noVel ThErE aT ThE inn." </span></span>
<span id="cb19-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                     letters </span></span>
<span id="cb19-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                         "t"</span></span></code></pre></div>
</details>
</div>
</div>
<p>The <code>apply</code> functions get us much further than writing <code>for</code> loops because we can 1) iterate over vectors and lists, 2) control the output objects, and 3) <strong>write less code.</strong> Unlike generic functions, <code>apply</code> functions are designed to work with specific object types, and return values depending on these objects.</p>
<p>One downside of apply functions is they don’t play well with <code>data.frame</code>s or <code>tibble</code>s. However, we can control their return values (and manually supply these to <code>tibble::tibble()</code> or <code>data.frame()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb20-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb20-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sentences =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-6">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-7">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb20-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">letters =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-9">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-10">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
</details>
</div>
</div>
<p>Another downside of the <code>apply</code> functions is they’re not very uniform. Each function has slight variations in their arguments and rules for return values. This is where <code>purrr</code> comes in…</p>
</section>
</section>
<section id="purrr" class="level1">
<h1><strong><code>purrr</code></strong></h1>
<p>If you’re new to <code>purrr</code>, a great way to start using it’s functions is with a recipe covered in <a href="https://posit.co/resources/videos/happy-r-users-purrr-tutorial/">Charlotte Wickham’s tutorial</a></p>
<ol type="1">
<li><p>Do it for one element</p></li>
<li><p>Turn it into a recipe</p></li>
<li><p>Use <code>purrr::map()</code> to do it for all elements</p></li>
</ol>
<p>I’ll work through these three steps below using <code>my_list</code> and <code>tolower()</code></p>
<section id="do-it-for-one-element" class="level2">
<h2 class="anchored" data-anchor-id="do-it-for-one-element">1. Do it for one element</h2>
<p>The goal with the first step is to get a minimal working example with a single element from the object I want to iterate over (with the function I want to iterate with).</p>
<p>For this example, I need to subset <code>my_list</code> for a single element at position <code>[[1]]</code>, <code>[[2]]</code>, or <code>[[3]]</code> (or using one of the vector names).</p>
<p>I’ll then pass this element to <code>tolower()</code> and make sure it’s the desired behavior:</p>
<div style="font-size: 0.90em;">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset an element from the list</span></span>
<span id="cb21-2">? <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_list[[?]]</span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply a function to extracted element</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(?)</span></code></pre></div>
</div>
<ul>
<li><p><code>? &lt;- my_list[[?]]</code> = subset element from the list (<code>my_list</code>)</p></li>
<li><p><code>tolower(?)</code> = apply operation (i.e., function) to extracted element.</p></li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">my_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_list[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'words'</span>]]</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_words)</span>
<span id="cb22-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "space"    "position" "society"  "stuff"    "hand"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that I have a working example for one element, in the next step I’ll abstract these parts into the function arguments.</p>
</section>
<section id="turn-it-into-a-recipe" class="level2">
<h2 class="anchored" data-anchor-id="turn-it-into-a-recipe">2. Turn it into a recipe</h2>
<p>A standard <code>purrr</code> recipe defines <code>.x</code> (the object) and <code>.f</code> (the function), followed by any additional function arguments.</p>
<ul>
<li><p><code>.x</code> = a list or atomic vector</p></li>
<li><p><code>.f</code> = the function we want to apply over every element in <code>.x</code></p></li>
</ul>
<div style="font-size: .90em;">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">.x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> my_list, .f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> tolower</span></code></pre></div>
</div>
</section>
<section id="map-it-across-all-elements" class="level2">
<h2 class="anchored" data-anchor-id="map-it-across-all-elements">3. <code>map()</code> it across all elements</h2>
<p>In <code>purrr::map()</code>, the <code>.x</code> argument is the object (list or atomic vector) I want to iterate over, and <code>.f</code> is the function (i.e., operation) I want applied to every element of <code>.x</code></p>
<p>If I want to convert the case of every element in <code>my_list</code> to lowercase with <code>tolower()</code> I would use the following standard <code>purrr::map()</code> format:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower)</span>
<span id="cb24-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb24-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "space"    "position" "society"  "stuff"    "hand"    </span></span>
<span id="cb24-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb24-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb24-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "we tried to replace the coin but failed."       </span></span>
<span id="cb24-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "he wrote his last novel there at the inn."      </span></span>
<span id="cb24-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "a whiff of it will cure the most stubborn cold."</span></span>
<span id="cb24-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb24-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb24-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "b" "t" "n" "o" "w" "h" "z" "u" "e" "m"</span></span></code></pre></div>
</details>
</div>
</div>
<p>And there you have it! <code>map()</code> is the core function and workhorse of the <code>purrr</code> package. It’s important to note that <code>purrr::map()</code> always returns a list, regardless of the object supplied to <code>.x</code>.</p>
</section>
</section>
<section id="version-1.0.0-updates" class="level1">
<h1><strong>Version 1.0.0 updates</strong></h1>
<p>Now I’ll cover some of the updates in <code>purrr</code> 1.0.0. I’ll be using <code>mixed_list</code>, a list with five different types of vectors.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">mixed_list</span>
<span id="cb25-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $booleans</span></span>
<span id="cb25-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1]  TRUE FALSE  TRUE FALSE</span></span>
<span id="cb25-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $integers</span></span>
<span id="cb25-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 5 7 8 6 3</span></span>
<span id="cb25-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $doubles</span></span>
<span id="cb25-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 2.912 3.179 2.825 2.941 3.228</span></span>
<span id="cb25-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $strings</span></span>
<span id="cb25-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "supply" "after"  "round"  "stand"  "manage"</span></span>
<span id="cb25-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $dates</span></span>
<span id="cb25-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "2023-06-28" "2023-05-19" "2023-03-30"</span></span></code></pre></div>
</details>
</div>
</div>
<section id="map-updates" class="level2">
<h2 class="anchored" data-anchor-id="map-updates"><code>map()</code> updates</h2>
<p>As noted above, by default <code>purrr::map()</code> returns a list. If I’d like to return a vector, I can use one of the <code>map_</code> variations (there’s one for each vector type).</p>
<ul>
<li><p>By mapping the <code>is.&lt;type&gt;()</code> functions the elements in <code>mixed_list</code>, I can test which elements in <code>mixed_list</code> return <code>TRUE</code>:</p>
<ul>
<li><code>map_lgl()</code>: returns a logical vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
    TRUE    FALSE    FALSE    FALSE    FALSE </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_int()</code>: returns an integer vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
       0        1        0        0        0 </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_dbl()</code>: returns a double vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
       0        0        1        0        1 </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_chr()</code>: returns a character vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Automatic coercion from logical to character was deprecated in purrr 1.0.0.
ℹ Please use an explicit call to `as.character()` within `map_chr()` instead.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
 "FALSE"  "FALSE"  "FALSE"   "TRUE"  "FALSE" </code></pre>
</div>
</div>
</div></li>
</ul>
<p>When we test for characters in <code>mixed_list</code>, we see the following warning:</p>
<div style="font-size: 0.90em;">
<blockquote class="blockquote">
<p><code>Warning: Automatic coercion from logical to character was deprecated in purrr</code> <code>1.0.0. Please use an explicit call to as.character() within map_chr() instead</code></p>
</blockquote>
</div>
<p>As we can see from the output above, the logical return values from <code>is.character()</code> are coerced to characters (this behavior is now deprecated).</p>
<section id="map_vec" class="level3">
<h3 class="anchored" data-anchor-id="map_vec"><code>map_vec()</code></h3>
<p><br></p>
<p>However, the previous <code>purrr::map_raw()</code> function has been replaced with <code>purrr::map_vec()</code>, which “<em>simplifies to the common type of the output.</em>” I’ll demonstrate below with the characters in <code>mixed_list</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x))</span>
<span id="cb35-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## booleans integers  doubles  strings    dates </span></span>
<span id="cb35-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    FALSE    FALSE    FALSE     TRUE    FALSE</span></span></code></pre></div>
</details>
</div>
</div>
<p>Notice the difference in output? The results are the same as above, but output is not commented (<code>##</code>). The same is true when I test the dates in <code>mixed_list</code> using <code>lubridate::is.Date()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(\(x) lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>(x))</span>
<span id="cb36-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## booleans integers  doubles  strings    dates </span></span>
<span id="cb36-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    FALSE    FALSE    FALSE    FALSE     TRUE</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="anonymous-functions" class="level2">
<h2 class="anchored" data-anchor-id="anonymous-functions">Anonymous functions</h2>
<p>R introduced the shorthand anonymous function syntax in version <a href="https://cran.r-project.org/doc/manuals/r-devel/NEWS.html">4.1.0</a>:</p>
<blockquote class="blockquote">
<p>“<em><code>\(x) x + 1</code> is parsed as <code>function(x) x + 1</code>.</em>”</p>
</blockquote>
<p>Below is a comparison of an anonymous (unnamed) function and the updated shorthand syntax:</p>
<ul>
<li><p>Standard anonymous function</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pIrAtES Ship"</span>)</span>
<span id="cb37-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "pirates ship"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>The updated anonymous syntax is below:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pIrAtES Ship"</span>)</span>
<span id="cb38-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "pirates ship"</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<p>Writing the code above using an anonymous function would look like this:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))</span>
<span id="cb39-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb39-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "space"    "position" "society"  "stuff"    "hand"    </span></span>
<span id="cb39-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb39-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb39-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "we tried to replace the coin but failed."       </span></span>
<span id="cb39-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "he wrote his last novel there at the inn."      </span></span>
<span id="cb39-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "a whiff of it will cure the most stubborn cold."</span></span>
<span id="cb39-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb39-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb39-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "b" "t" "n" "o" "w" "h" "z" "u" "e" "m"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Anonymous functions make it <em>easier to understand which arguments belong to which function and will tend to yield better error messages.</em></p>
<p>I’ll confirm the outputs from both methods are identical using <code>waldo::compare()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb40-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower), </span>
<span id="cb40-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x)))</span>
<span id="cb40-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ✔ No differences</span></span></code></pre></div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The formula (<code>~ .x + 1</code>)
</div>
</div>
<div class="callout-body-container callout-body">
<p><br></p>
<div style="font-size: 1.10em;">
<p>Prior to <code>purrr</code> v1.0.0, I could also use the formula syntax, but now it’s “<em>only recommended if you require backward compatibility with older versions of R.</em>” I’ll cover the formula syntax briefly because you’re likely to encounter it.</p>
</div>
<div style="font-size: 1.10em;">
<p>The formula syntax is typically used with pipes, so the contents of <code>purrr::map()</code> become the right-hand side of the formula, with the function we want to iterate (<code>&lt;FUNCTION&gt;</code>) and a placeholder (<code>.x</code>) in the appropriate argument.</p>
</div>
<div style="font-size: 1.20em;">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>OBJECT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> purrr::map<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>FUNCTION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<div style="font-size: 1.10em;">
<p>For the example above, <code>my_list</code> is ‘piped’ to <code>purrr::map()</code>, where the formula maps the <code>tolower()</code> function (using the <code>.x</code> placeholder).</p>
</div>
<div style="font-size: 1.00em;">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># written as normal expression</span></span>
<span id="cb42-2"> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x))</span></code></pre></div>
</div>
<div style="font-size: 1.10em;">
<p>Jenny Bryan offers a great description on <a href="https://jennybc.github.io/purrr-tutorial/ls03_map-function-syntax.html#anonymous_function,_formula">her <code>purrr</code> tutorial</a>,</p>
<blockquote class="blockquote">
<p>“<em>[formula syntax] should start with the <code>~</code> symbol and then look like a typical top-level expression, as you might write in a script. Use <code>.x</code> to refer to the input, i.e.&nbsp;an individual element of the primary vector or list.</em>”</p>
</blockquote>
<p>I can double-check to see that the output from two variations are identical using <code>waldo::compare()</code>.</p>
</div>
<div style="font-size: 1.00em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb43-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x)), </span>
<span id="cb43-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x)))</span>
<span id="cb43-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ✔ No differences</span></span></code></pre></div>
</details>
</div>
</div>
</div>
</div>
<!--
# map for `data.frame` and `tibble`s

::: {style="font-size: 0.90em;"}

::: {.cell}

```{.r .cell-code}
swdata <- dplyr::select(dplyr::starwars, !where(is.list))
purrr::map_df(.x = swdata, .f = tolower)
## # A tibble: 87 × 11
##    name     height mass  hair_color skin_color eye_color birth_year sex   gender
##    <chr>    <chr>  <chr> <chr>      <chr>      <chr>     <chr>      <chr> <chr> 
##  1 luke sk… 172    77    blond      fair       blue      19         male  mascu…
##  2 c-3po    167    75    <NA>       gold       yellow    112        none  mascu…
##  3 r2-d2    96     32    <NA>       white, bl… red       33         none  mascu…
##  4 darth v… 202    136   none       white      yellow    41.9       male  mascu…
##  5 leia or… 150    49    brown      light      brown     19         fema… femin…
##  6 owen la… 178    120   brown, gr… light      blue      52         male  mascu…
##  7 beru wh… 165    75    brown      light      blue      47         fema… femin…
##  8 r5-d4    97     32    <NA>       white, red red       <NA>       none  mascu…
##  9 biggs d… 183    84    black      light      brown     24         male  mascu…
## 10 obi-wan… 182    77    auburn, w… fair       blue-gray 57         male  mascu…
## # ℹ 77 more rows
## # ℹ 2 more variables: homeworld <chr>, species <chr>
```
:::

:::
-->
</section>
</section>
<section id="worked-examples" class="level1">
<h1>Worked Examples</h1>
<p>In this section, I’ll be working through some of the uses I’ve for <code>purrr</code>’s functions. I’ve tried to choose tasks that are common across <em>most</em> projects so my code can be easily copied and adapted.</p>
<section id="downloading-files" class="level2">
<h2 class="anchored" data-anchor-id="downloading-files">Downloading files</h2>
<blockquote class="blockquote">
<p><em>You’d like to download a collection of files from separate URLS</em></p>
</blockquote>
<p>I have a collection of 30 .csv files from <a href="https://github.com/oreillymedia/doing_data_science">Doing Data Science</a> by Cathy O’Neil and Rachel Schutt (O’Reilly Media) in a <a href="https://github.com/mjfrigaard/dds-data">GitHub repo</a>. Let’s assume I want to download one week of these files into my RStudio session (without downloading the repo).</p>
<p>I’ll navigate to the raw url for the first data file (<code>nyt1.csv</code>), then paste this into a character vector:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">nyt_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Knowing that all of the files on GitHub with have a similar sheme and domain, I can use <code>nyt_url</code> to generate urls for each of the 7 files.</p>
<ol type="1">
<li>First I get the folder of the files on GitHub with <code>fs::path_dir()</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file urls </span></span>
<span id="cb45-2">nyt_dir_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_dir</span>(nyt_url)</span>
<span id="cb45-3">nyt_dir_url</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main"</code></pre>
</div>
</div>
</div>
<ol start="2" type="1">
<li>I create a vector with the 7 file names</li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file names for 7th through 13th</span></span>
<span id="cb47-2">nyt_file_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nyt"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>)</span>
<span id="cb47-3">nyt_file_nms</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "nyt7.csv"  "nyt8.csv"  "nyt9.csv"  "nyt10.csv" "nyt11.csv" "nyt12.csv"
[7] "nyt13.csv"</code></pre>
</div>
</div>
</div>
<ol start="3" type="1">
<li>I combine the directory portion of the url with file name in <code>nyt_file_urls</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine</span></span>
<span id="cb49-2">nyt_file_urls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(nyt_dir_url, nyt_file_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb49-3">nyt_file_urls</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt7.csv" 
[2] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt8.csv" 
[3] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt9.csv" 
[4] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt10.csv"
[5] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt11.csv"
[6] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt12.csv"
[7] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt13.csv"</code></pre>
</div>
</div>
</div>
<p>I’ll need another vector of destination file names on my local machine, which I can do by combining the file names (<code>nyt_file_nms</code>) with the local destination folder (<code>dds-nyt</code>).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">nyt_local_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, nyt_file_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb51-2">nyt_local_pths</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "dds-nyt/nyt7.csv"  "dds-nyt/nyt8.csv"  "dds-nyt/nyt9.csv" 
[4] "dds-nyt/nyt10.csv" "dds-nyt/nyt11.csv" "dds-nyt/nyt12.csv"
[7] "dds-nyt/nyt13.csv"</code></pre>
</div>
</div>
</div>
<p>After creating the destination folder, I’ll use the <code>download.file()</code> function to test downloading a single <code>.csv</code> files into my local folder (<code>dds-nyt/</code>). <code>download.file()</code> has a progress bar which tells me if the file downloaded successfully.</p>
<div style="font-size: 0.90em;">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb53-2">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>)</span>
<span id="cb53-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> nyt_file_urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> nyt_local_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb54-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">trying</span> URL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv'</span></span>
<span id="cb54-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Content</span> type <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text/plain; charset=utf-8'</span> length 4920381 bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4.7</span> MB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb54-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==================================================</span></span>
<span id="cb54-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">downloaded</span> 4.7 MB</span></code></pre></div>
</div>
<p><code>download.file()</code> takes two inputs (<code>url</code> and <code>destfile</code>), which changes the recipe a bit, because I need a <code>purrr</code> function with the following:</p>
<ol type="1">
<li><p><code>.x</code> the input vector of existing url paths</p></li>
<li><p><code>.y</code> the output vector of destination file paths</p></li>
<li><p>Additional arguments passed from <code>download.file()</code> (like <code>quiet = TRUE</code>)</p></li>
</ol>
<p>In this case, I don’t need <code>purrr</code> to return value–I just need the <code>purrr</code> function to iterate over the items and write them to the new location.</p>
<p><code>walk()</code> is ideal for this circumstance:</p>
<blockquote class="blockquote">
<p>“<em><code>walk()</code> returns the input <code>.x</code> (invisibly)</em>” and “<em>The return value of <code>.f()</code> is ignored</em>”</p>
</blockquote>
<p><strong><em>What do ‘return <code>.x</code> invisibly’ and ‘the side-effect of <code>.f</code>’ mean?</em></strong></p>
<section id="return-invisibly" class="level3">
<h3 class="anchored" data-anchor-id="return-invisibly">Return invisibly</h3>
<p>The previous <code>purrr</code> functions I covered varied in the kinds of values they returned (lists vs.&nbsp;vectors), but for some operations I won’t need a return value. If I’m ever curious about whether I should be using <code>map()</code> or <code>walk()</code>, I’ll ask myself, <em>“would it make sense to assign the output from this function to an object?</em>”</p>
<p>If the answer is no, then I probably need to be thinking <code>walk()</code> instead of <code>map()</code></p>
</section>
<section id="side-effects" class="level3">
<h3 class="anchored" data-anchor-id="side-effects">Side-effects</h3>
<p>In the help documentation <code>walk()</code>’s description states, “<em>calls .f for its side-effect</em>”, which can be generally interpreted as, “<em>there’s nothing to assign the output from that function to.</em>”</p>
</section>
<section id="purrr-progress-bars" class="level3">
<h3 class="anchored" data-anchor-id="purrr-progress-bars"><code>purrr</code> progress bars</h3>
<p>I’ll use <code>walk2()</code> below and add <code>.progress = TRUE</code> to view the <code>purrr</code> progress bar (and <code>quiet = TRUE</code> to silence the <code>download.file()</code> progress bar).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> nyt_file_urls, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> nyt_local_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span>  download.file, </span>
<span id="cb55-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p><br></p>
<div class="cell" data-layout-align="center" data-fig.dpi="320" data-fig.asp="0.618">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/purrr1.0/purrr-progress.gif" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>I can confirm the download using <code>fs::dir_tree()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>)</span>
<span id="cb56-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb56-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt10.csv</span></span>
<span id="cb56-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt11.csv</span></span>
<span id="cb56-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt12.csv</span></span>
<span id="cb56-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt13.csv</span></span>
<span id="cb56-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt7.csv</span></span>
<span id="cb56-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt8.csv</span></span>
<span id="cb56-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="copying-a-directory-of-files" class="level2">
<h2 class="anchored" data-anchor-id="copying-a-directory-of-files">Copying a directory of files</h2>
<blockquote class="blockquote">
<p><em>You have a folder of files you’d like to rename or copy to a new directory</em></p>
</blockquote>
<p>The collection of 7 .csv files from <a href="https://github.com/oreillymedia/doing_data_science">Doing Data Science</a> by Cathy O’Neil and Rachel Schutt (O’Reilly Media) are now in the <code>dds-nyt/</code> folder.</p>
<p>As with any project, I don’t want to alter the raw data, so I’m going to copy these files into <code>dds-nyt-raw/</code> and <code>dds-nyt-processed/</code>. I also want the processed file names to have a date stamp prefix.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">file_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>)</span>
<span id="cb57-2">file_pths</span>
<span id="cb57-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/nyt10.csv" "dds-nyt/nyt11.csv" "dds-nyt/nyt12.csv"</span></span>
<span id="cb57-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/nyt13.csv" "dds-nyt/nyt7.csv"  "dds-nyt/nyt8.csv" </span></span>
<span id="cb57-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "dds-nyt/nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>I’ll start with the raw data folder. I need to create a vector of the new raw file paths and names: <code>raw_file_pths</code> (the raw data paths will have the original file names)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb58-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>,</span>
<span id="cb58-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>,</span>
<span id="cb58-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb58-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/raw/nyt10.csv"</span></span>
<span id="cb58-6"></span>
<span id="cb58-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write the recipe</span></span>
<span id="cb58-8">file_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(x, </span>
<span id="cb58-9">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>, </span>
<span id="cb58-10">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span>
<span id="cb58-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/raw/nyt10.csv" "dds-nyt/raw/nyt11.csv" "dds-nyt/raw/nyt12.csv"</span></span>
<span id="cb58-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/raw/nyt13.csv" "dds-nyt/raw/nyt7.csv"  "dds-nyt/raw/nyt8.csv"</span></span>
<span id="cb58-13"></span>
<span id="cb58-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map it across all</span></span>
<span id="cb58-15">raw_file_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> file_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-16">                  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(x, </span>
<span id="cb58-17">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>, </span>
<span id="cb58-18">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>Before copying the files, I need to create the destination folder for the raw data (<code>dds-nyt/raw</code>). Then, I’ll make sure I can copy the first element from <code>file_pths</code> into the path in the first element of <code>raw_file_pths</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>)</span>
<span id="cb59-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb59-3">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_copy</span>(</span>
<span id="cb59-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb59-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_path =</span> raw_file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb59-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb59-7">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>)</span>
<span id="cb59-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/raw</span></span>
<span id="cb59-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── nyt10.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>I can see this is working, so I can use <code>purrr::walk2()</code> to move all the files from <code>dds-nyt/</code> to <code>dds-nyt/raw/</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> file_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> raw_file_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_copy, </span>
<span id="cb60-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb60-3">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>)</span>
<span id="cb60-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/raw</span></span>
<span id="cb60-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt10.csv</span></span>
<span id="cb60-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt11.csv</span></span>
<span id="cb60-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt12.csv</span></span>
<span id="cb60-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt13.csv</span></span>
<span id="cb60-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt7.csv</span></span>
<span id="cb60-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt8.csv</span></span>
<span id="cb60-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that I’ve copied the files into their respective folders, I’ll need to remove the files from their original location in the parent <code>dds-nyt</code> folder.</p>
<p>Fortunately, I have a vector of these files in <code>file_pths</code>, and I can test removal with <code>fs::file_delete()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_delete</span>(file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
</div>
</div>
<p>Great! Now that I know this will work, I’ll use <code>walk()</code> because I want <code>.x</code> returned invisibly and the side-effect of <code>.f</code>.</p>
<p>But I’ve also deleted the first element in <code>file_pths</code>, so when <code>fs::file_delete()</code> goes looking for that file, it will find nothing and returned an error.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb62-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> in <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span>:</span>
<span id="cb62-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ℹ</span> In index: 1.</span>
<span id="cb62-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Caused</span> by error:</span>
<span id="cb62-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[ENOENT]</span> Failed to remove <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dds-nyt/nyt10.csv'</span>: no such file or directory</span></code></pre></div>
</details>
</div>
</div>
<p>I can protect against this by supplying the output from <code>list.files()</code> directly to <code>purrr::walk2()</code>, but include a <code>pattern</code> so it only matches the <code>.csv</code> files.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(</span>
<span id="cb63-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list CURRENT files </span></span>
<span id="cb63-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(</span>
<span id="cb63-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>,</span>
<span id="cb63-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>,</span>
<span id="cb63-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb63-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map function</span></span>
<span id="cb63-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_delete)</span></code></pre></div>
</details>
</div>
</div>
<p>And confirm the new folder contents and structure</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb64-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb64-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── raw</span></span>
<span id="cb64-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt10.csv</span></span>
<span id="cb64-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt11.csv</span></span>
<span id="cb64-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt12.csv</span></span>
<span id="cb64-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt13.csv</span></span>
<span id="cb64-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt7.csv</span></span>
<span id="cb64-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt8.csv</span></span>
<span id="cb64-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="import-multiple-datasets" class="level2">
<h2 class="anchored" data-anchor-id="import-multiple-datasets">Import multiple datasets</h2>
<blockquote class="blockquote">
<p><em>You have several days of data, and each day is contained in separate file. You’d like to read these data into R, and combine them into a single dataset</em></p>
</blockquote>
<p>Now that I have separate raw and processed folders, I can import the NYT data into R. Below I’ve imported a single file from the <code>raw</code> data folder to examine it’s contents:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">nyt1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> raw_file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb65-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, </span>
<span id="cb65-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb65-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nyt1)</span>
<span id="cb65-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## spc_tbl_ [452,766 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb65-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb65-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb65-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb65-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb65-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb65-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "spec")=</span></span>
<span id="cb65-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. cols(</span></span>
<span id="cb65-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Age = col_double(),</span></span>
<span id="cb65-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Gender = col_double(),</span></span>
<span id="cb65-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Impressions = col_double(),</span></span>
<span id="cb65-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Clicks = col_double(),</span></span>
<span id="cb65-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Signed_In = col_double(),</span></span>
<span id="cb65-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   .delim = ","</span></span>
<span id="cb65-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. )</span></span>
<span id="cb65-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>Each <code>nyt</code> file contains daily ads shown and clicks recorded on the New York Times home page. The rows represent users, and the variables are: <code>Age</code>, <code>Gender</code> (0 = female, 1 = male), <code>Impressions</code> (number impressions), <code>Clicks</code> (number clicks), and a binary indicator for signed in or not <code>Signed_in</code>.</p>
<p>I’ll add some hypothetical wrangling steps to make this example more realistic.</p>
<ol type="1">
<li><p>Create <code>age_group</code>, an ordered factor which contains six levels of Age (“&lt;18”, “18-24”, “25-34”, “35-44”, “45-54”, “55-64”, and “65+”)</p></li>
<li><p>Create <code>ctr_rate</code> or click-through rate, calculated as the number of clicks / the number of impressions. Round it to 3 digits.</p></li>
<li><p>Create <code>female</code>, a factor version of <code>Gender</code>, where when <code>Gender</code> = <code>0</code>, then <code>female</code> = <code>"yes"</code>, and when <code>Gender</code> = <code>1</code>, then <code>female</code> = <code>"no"</code></p></li>
<li><p>Create <code>signed_in</code>, a factor variable with levels <code>"no"</code> and <code>"yes"</code> from the <code>Signed_In</code> = <code>0</code> and <code>1</code></p></li>
</ol>
<p>I’ve bundled all of these steps into a function (<code>nyt_data_processing()</code>) that I can pass each dataset through:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">nyt_data_processing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(nyt_csv) {</span>
<span id="cb66-2">  orig_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Impressions"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clicks"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Signed_In"</span>)</span>
<span id="cb66-3">  nyt_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt_csv)</span>
<span id="cb66-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> orig_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> nyt_nms))) {</span>
<span id="cb66-5">    cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"these data don't have the correct columns!"</span>)</span>
<span id="cb66-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb66-7">    nyt_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nyt_csv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-8">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb66-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create age_group variable</span></span>
<span id="cb66-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-11">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;18"</span>,</span>
<span id="cb66-12">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"18-24"</span>,</span>
<span id="cb66-13">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"25-34"</span>,</span>
<span id="cb66-14">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"35-44"</span>,</span>
<span id="cb66-15">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"45-54"</span>,</span>
<span id="cb66-16">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"55-64"</span>,</span>
<span id="cb66-17">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"65+"</span></span>
<span id="cb66-18">        ),</span>
<span id="cb66-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor age_group (ordered)</span></span>
<span id="cb66-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(age_group,</span>
<span id="cb66-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb66-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;18"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"18-24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"25-34"</span>,</span>
<span id="cb66-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"35-44"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"45-54"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"55-64"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"65+"</span></span>
<span id="cb66-24">          ),</span>
<span id="cb66-25">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb66-26">        ),</span>
<span id="cb66-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create CTR variable</span></span>
<span id="cb66-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ctr_rate =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Clicks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Impressions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb66-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create new Female variable</span></span>
<span id="cb66-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-31">          Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>,</span>
<span id="cb66-32">          Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>,</span>
<span id="cb66-33">          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb66-34">        ),</span>
<span id="cb66-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor female (un-ordered)</span></span>
<span id="cb66-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(female,</span>
<span id="cb66-37">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>)</span>
<span id="cb66-38">        ),</span>
<span id="cb66-39">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Signed_In =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-40">          Signed_In <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, </span>
<span id="cb66-41">          Signed_In <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, </span>
<span id="cb66-42">          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>),</span>
<span id="cb66-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor Signed_In (un-ordered) </span></span>
<span id="cb66-44">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Signed_In =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(Signed_In, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-45">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format columns</span></span>
<span id="cb66-46">      janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span>
<span id="cb66-47">  }</span>
<span id="cb66-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(nyt_proc)</span>
<span id="cb66-49">}</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll do some quick checks to make sure it only works with the raw data columns:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">nyt1_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nyt_data_processing</span>(nyt1)</span>
<span id="cb67-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nyt1_proc)</span>
<span id="cb67-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## spc_tbl_ [452,766 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb67-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb67-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb67-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb67-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb67-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ signed_in  : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 1 2 ...</span></span>
<span id="cb67-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 6 1 2 4 3 3 4 4 1 2 ...</span></span>
<span id="cb67-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ ctr_rate   : num [1:452766] 0 0.143 0 0 0 0 0 0 0.111 0 ...</span></span>
<span id="cb67-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ female     : Factor w/ 2 levels "no","yes": 1 2 2 1 1 1 2 2 2 1 ...</span></span>
<span id="cb67-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "spec")=</span></span>
<span id="cb67-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. cols(</span></span>
<span id="cb67-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Age = col_double(),</span></span>
<span id="cb67-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Gender = col_double(),</span></span>
<span id="cb67-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Impressions = col_double(),</span></span>
<span id="cb67-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Clicks = col_double(),</span></span>
<span id="cb67-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Signed_In = col_double(),</span></span>
<span id="cb67-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   .delim = ","</span></span>
<span id="cb67-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. )</span></span>
<span id="cb67-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>I’ll run <code>nyt_data_processing()</code> against a processed data file (<code>nyt1_proc</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nyt_data_processing</span>(nyt1_proc)</span>
<span id="cb68-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error in `nyt_data_processing()`:</span></span>
<span id="cb68-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ! these data don't have the correct columns!</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now I’m ready to write the import step. First I’ll store the raw file paths in <code>raw_data_pths</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">raw_data_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p>We’ll test <code>purrr::map()</code> and <code>vroom::vroom()</code> to import the <code>.csv</code> files in <code>raw_data_pths</code> into a list. I also add <code>utils::head()</code> and <code>dplyr::glimpse()</code> to limit the output.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb70-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb70-4">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb70-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-6">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-7">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb70-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb70-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ : spc_tbl_ [452,766 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb70-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb70-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb70-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb70-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb70-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb70-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb70-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb70-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb70-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb70-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb70-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb70-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb70-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb70-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb70-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb70-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ : spc_tbl_ [478,066 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb70-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb70-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb70-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb70-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb70-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:478066] 1 1 1 1 1 0 1 1 1 1 ...</span></span>
<span id="cb70-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb70-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb70-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb70-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb70-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb70-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb70-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb70-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb70-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb70-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>This returns a list, but you may have noticed I don’t have a great way for keeping track of the data files in the list–this is where <code>purrr::set_names()</code> comes in handy.</p>
<p><code>purrr::set_names()</code> works a lot like <code>names()</code>, but <code>purrr::set_names()</code> will automatically set the names of <code>x</code> to <code>as.character(x)</code> if no names are provided to <code>nm</code>. See below:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>()</span>
<span id="cb71-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   dds-nyt/raw/nyt10.csv   dds-nyt/raw/nyt11.csv   dds-nyt/raw/nyt12.csv </span></span>
<span id="cb71-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "dds-nyt/raw/nyt10.csv" "dds-nyt/raw/nyt11.csv" "dds-nyt/raw/nyt12.csv" </span></span>
<span id="cb71-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   dds-nyt/raw/nyt13.csv    dds-nyt/raw/nyt7.csv    dds-nyt/raw/nyt8.csv </span></span>
<span id="cb71-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "dds-nyt/raw/nyt13.csv"  "dds-nyt/raw/nyt7.csv"  "dds-nyt/raw/nyt8.csv" </span></span>
<span id="cb71-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    dds-nyt/raw/nyt9.csv </span></span>
<span id="cb71-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  "dds-nyt/raw/nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now the imported file will have their file path and name associated with the dataset:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb72-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import  </span></span>
<span id="cb72-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb72-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb72-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-8">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-9">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb72-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb72-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt10.csv: spc_tbl_ [452,766 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb72-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb72-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb72-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb72-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb72-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb72-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb72-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb72-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb72-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb72-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb72-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb72-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb72-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb72-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb72-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb72-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt11.csv: spc_tbl_ [478,066 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb72-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb72-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb72-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb72-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb72-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:478066] 1 1 1 1 1 0 1 1 1 1 ...</span></span>
<span id="cb72-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb72-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb72-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb72-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb72-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb72-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb72-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb72-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb72-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb72-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>To add the wrangling function, I can pipe in another call to <code>purrr::map()</code>, and add <code>nyt_data_processing()</code>.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb73-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb73-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb73-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb73-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb73-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-10">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-11">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb73-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb73-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt10.csv: spc_tbl_ [452,766 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb73-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb73-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb73-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb73-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb73-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ signed_in  : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 1 2 ...</span></span>
<span id="cb73-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 6 1 2 4 3 3 4 4 1 2 ...</span></span>
<span id="cb73-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ ctr_rate   : num [1:452766] 0 0.143 0 0 0 0 0 0 0.111 0 ...</span></span>
<span id="cb73-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ female     : Factor w/ 2 levels "no","yes": 1 2 2 1 1 1 2 2 2 1 ...</span></span>
<span id="cb73-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb73-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb73-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb73-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb73-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb73-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb73-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb73-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb73-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb73-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb73-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt11.csv: spc_tbl_ [478,066 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb73-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb73-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb73-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb73-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb73-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ signed_in  : Factor w/ 2 levels "no","yes": 2 2 2 2 2 1 2 2 2 2 ...</span></span>
<span id="cb73-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 3 5 3 2 2 1 6 4 4 4 ...</span></span>
<span id="cb73-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ ctr_rate   : num [1:478066] 0 0 0 0 0 0.333 0.2 0 0 0 ...</span></span>
<span id="cb73-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ female     : Factor w/ 2 levels "no","yes": 1 2 1 1 2 2 2 2 1 2 ...</span></span>
<span id="cb73-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb73-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb73-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb73-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb73-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb73-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb73-47"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb73-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb73-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb73-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<section id="list_rbind" class="level3">
<h3 class="anchored" data-anchor-id="list_rbind"><code>list_rbind()</code></h3>
<p>For the final step, I’ll bind all the data into a <code>data.frame</code> with the updated <code>purrr::list_rbind()</code> function (set <code>names_to = "id"</code>).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb74-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb74-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb74-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb74-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb74-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bind</span></span>
<span id="cb74-11">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-12">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb74-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 3,488,345</span></span>
<span id="cb74-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 9</span></span>
<span id="cb74-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id          &lt;chr&gt; "dds-nyt/raw/nyt10.csv", "dds-nyt/raw/nyt10.csv", "dds-nyt…</span></span>
<span id="cb74-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age         &lt;dbl&gt; 59, 0, 19, 44, 30, 33, 41, 41, 0, 23, 28, 34, 0, 17, 33, 6…</span></span>
<span id="cb74-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender      &lt;dbl&gt; 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0…</span></span>
<span id="cb74-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions &lt;dbl&gt; 4, 7, 5, 5, 4, 3, 1, 3, 9, 1, 4, 4, 7, 3, 7, 6, 6, 2, 7, 2…</span></span>
<span id="cb74-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks      &lt;dbl&gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…</span></span>
<span id="cb74-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in   &lt;fct&gt; yes, no, yes, yes, yes, yes, yes, yes, no, yes, yes, yes, …</span></span>
<span id="cb74-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group   &lt;ord&gt; 55-64, &lt;18, 18-24, 35-44, 25-34, 25-34, 35-44, 35-44, &lt;18,…</span></span>
<span id="cb74-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate    &lt;dbl&gt; 0.000, 0.143, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.…</span></span>
<span id="cb74-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female      &lt;fct&gt; no, yes, yes, no, no, no, yes, yes, yes, no, no, no, yes, …</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that we have a complete recipe, I store the result in <code>nyt_data_proc</code>. I can also confirm all files were imported and wrangled by checking the <code>count()</code> of <code>id</code>.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">nyt_data_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb75-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb75-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb75-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb75-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb75-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bind</span></span>
<span id="cb75-11">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) </span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(id)</span>
<span id="cb76-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 × 2</span></span>
<span id="cb76-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   id                         n</span></span>
<span id="cb76-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;                  &lt;int&gt;</span></span>
<span id="cb76-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dds-nyt/raw/nyt10.csv 452766</span></span>
<span id="cb76-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dds-nyt/raw/nyt11.csv 478066</span></span>
<span id="cb76-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dds-nyt/raw/nyt12.csv 396308</span></span>
<span id="cb76-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dds-nyt/raw/nyt13.csv 786044</span></span>
<span id="cb76-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dds-nyt/raw/nyt7.csv  452493</span></span>
<span id="cb76-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 dds-nyt/raw/nyt8.csv  463196</span></span>
<span id="cb76-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 dds-nyt/raw/nyt9.csv  459472</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="export-multiple-datasets" class="level2">
<h2 class="anchored" data-anchor-id="export-multiple-datasets">Export multiple datasets</h2>
<blockquote class="blockquote">
<p><em>You have a dataset you’d like to split into individual <code>data.frame</code>s, then export these into separate file paths</em></p>
</blockquote>
<p>I have a processed dataset with seven data files (<code>nyt_data_proc</code>), and I want to export these into seven processed data files in a <code>dds-nyt/processed/</code> folder.</p>
<p>Creating a vector of processed data file paths is a little more involved because I wanted to add a date prefix to the exported files, and because I want to add this path as a variable <em>in the <code>nyt_data_proc</code> dataset</em>.</p>
<p>Below I create a new <code>file_nm</code> and <code>proc_file_pth</code> column to <code>nyt_data_proc</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file names </span></span>
<span id="cb77-2">nyt_data_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> nyt_data_proc,</span>
<span id="cb77-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_nm =</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(id)),</span>
<span id="cb77-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">proc_file_pth =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>, </span>
<span id="cb77-5">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>()), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, </span>
<span id="cb77-6">                        file_nm))</span>
<span id="cb77-7">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(proc_file_pth)</span>
<span id="cb77-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 × 2</span></span>
<span id="cb77-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   proc_file_pth                           n</span></span>
<span id="cb77-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;                               &lt;int&gt;</span></span>
<span id="cb77-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dds-nyt/processed/2023-07-08-nyt10 452766</span></span>
<span id="cb77-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dds-nyt/processed/2023-07-08-nyt11 478066</span></span>
<span id="cb77-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dds-nyt/processed/2023-07-08-nyt12 396308</span></span>
<span id="cb77-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dds-nyt/processed/2023-07-08-nyt13 786044</span></span>
<span id="cb77-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dds-nyt/processed/2023-07-08-nyt7  452493</span></span>
<span id="cb77-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 dds-nyt/processed/2023-07-08-nyt8  463196</span></span>
<span id="cb77-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 dds-nyt/processed/2023-07-08-nyt9  459472</span></span></code></pre></div>
</details>
</div>
</div>
<p>Note that I don’t include the file extension in <code>proc_file_pth</code>, because I might want to use different file types when I’m exporting.</p>
<p>I’ll cover two methods for exporting datasets from a list.</p>
<p>In this first method, I’ll use the <code>base::split()</code> function to split <code>nyt_data_proc</code> by the <code>proc_file_pth</code> variable into a list of data frames. I’ll also use <code>utils::head()</code>, <code>purrr::walk()</code>, and <code>dplyr::glimpse()</code> to view the output.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> nyt_data_proc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb78-2">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb78-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> glimpse)</span>
<span id="cb78-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 452,766</span></span>
<span id="cb78-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt10.csv", "dds-nyt/raw/nyt10.csv", "dds-n…</span></span>
<span id="cb78-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 59, 0, 19, 44, 30, 33, 41, 41, 0, 23, 28, 34, 0, 17, 33,…</span></span>
<span id="cb78-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,…</span></span>
<span id="cb78-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 4, 7, 5, 5, 4, 3, 1, 3, 9, 1, 4, 4, 7, 3, 7, 6, 6, 2, 7,…</span></span>
<span id="cb78-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…</span></span>
<span id="cb78-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, no, yes, yes, yes, yes, yes, yes, no, yes, yes, yes…</span></span>
<span id="cb78-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 55-64, &lt;18, 18-24, 35-44, 25-34, 25-34, 35-44, 35-44, &lt;1…</span></span>
<span id="cb78-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.000, 0.143, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, …</span></span>
<span id="cb78-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; no, yes, yes, no, no, no, yes, yes, yes, no, no, no, yes…</span></span>
<span id="cb78-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt10", "nyt10", "nyt10", "nyt10", "nyt10", "nyt10", "n…</span></span>
<span id="cb78-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-07-08-nyt10", "dds-nyt/processed…</span></span>
<span id="cb78-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 478,066</span></span>
<span id="cb78-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt11.csv", "dds-nyt/raw/nyt11.csv", "dds-n…</span></span>
<span id="cb78-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 28, 51, 29, 20, 19, 0, 58, 42, 35, 44, 62, 20, 0, 0, 43,…</span></span>
<span id="cb78-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…</span></span>
<span id="cb78-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 8, 5, 2, 4, 5, 3, 5, 6, 8, 4, 6, 4, 5, 4, 4, 5, 3, 2, 5,…</span></span>
<span id="cb78-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,…</span></span>
<span id="cb78-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, yes, yes, yes, yes, no, yes, yes, yes, yes, yes, ye…</span></span>
<span id="cb78-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 25-34, 45-54, 25-34, 18-24, 18-24, &lt;18, 55-64, 35-44, 35…</span></span>
<span id="cb78-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.000, 0.000, 0.000, 0.000, 0.000, 0.333, 0.200, 0.000, …</span></span>
<span id="cb78-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; no, yes, no, no, yes, yes, yes, yes, no, yes, yes, yes, …</span></span>
<span id="cb78-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt11", "nyt11", "nyt11", "nyt11", "nyt11", "nyt11", "n…</span></span>
<span id="cb78-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-07-08-nyt11", "dds-nyt/processed…</span></span>
<span id="cb78-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 396,308</span></span>
<span id="cb78-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt12.csv", "dds-nyt/raw/nyt12.csv", "dds-n…</span></span>
<span id="cb78-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 29, 0, 27, 0, 69, 0, 0, 39, 53, 27, 0, 13, 26, 63, 79, 0…</span></span>
<span id="cb78-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,…</span></span>
<span id="cb78-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 4, 1, 2, 5, 9, 1, 6, 4, 7, 3, 1, 1, 2, 5, 6, 7, 3, 1, 5,…</span></span>
<span id="cb78-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,…</span></span>
<span id="cb78-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, no, yes, no, yes, no, no, yes, yes, yes, no, yes, y…</span></span>
<span id="cb78-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 25-34, &lt;18, 25-34, &lt;18, 65+, &lt;18, &lt;18, 35-44, 45-54, 25-…</span></span>
<span id="cb78-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.250, 0.000, 0.000, 0.200, 0.111, 0.000, 0.000, 0.000, …</span></span>
<span id="cb78-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; yes, yes, yes, yes, no, yes, yes, no, yes, no, yes, no, …</span></span>
<span id="cb78-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt12", "nyt12", "nyt12", "nyt12", "nyt12", "nyt12", "n…</span></span>
<span id="cb78-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-07-08-nyt12", "dds-nyt/processed…</span></span></code></pre></div>
</details>
</div>
</div>
<p>I can see this is returning a list of data frames as expected, so now I need to pass this list into <code>purrr::walk2()</code> so I can iterate <code>vroom::vroom_write()</code> over the processed data paths in <code>proc_file_pth</code>.</p>
<ol type="1">
<li>First I create the processed data folder (<code>dds-nyt/processed/</code>)</li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>)</span></code></pre></div>
</details>
</div>
</div>
<ol start="2" type="1">
<li>Second, I create the <code>.x</code> argument, which is the split list of <code>nyt_data_proc</code> by <code>proc_file_pth</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split nyt_data_proc (.x)</span></span>
<span id="cb80-2">by_proc_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb80-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth)</span></code></pre></div>
</details>
</div>
</div>
<ol start="3" type="1">
<li>Third, I get the unique processed data paths in the <code>proc_file_pth</code> column and store it as a vector for the <code>.y</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get unique processed paths in nyt_data_proc (.y) with .csv extension</span></span>
<span id="cb81-2">proc_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>)</span>
<span id="cb81-3">proc_pths</span>
<span id="cb81-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/processed/2023-07-08-nyt10.csv"</span></span>
<span id="cb81-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "dds-nyt/processed/2023-07-08-nyt11.csv"</span></span>
<span id="cb81-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "dds-nyt/processed/2023-07-08-nyt12.csv"</span></span>
<span id="cb81-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/processed/2023-07-08-nyt13.csv"</span></span>
<span id="cb81-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5] "dds-nyt/processed/2023-07-08-nyt7.csv" </span></span>
<span id="cb81-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [6] "dds-nyt/processed/2023-07-08-nyt8.csv" </span></span>
<span id="cb81-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "dds-nyt/processed/2023-07-08-nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now I can perform <code>purrr::walk2()</code> on <code>by_proc_pths</code> using <code>proc_pths</code> and <code>vroom::vroom_write()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate with .f</span></span>
<span id="cb82-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> by_proc_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> proc_pths, </span>
<span id="cb82-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom_write, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)</span>
<span id="cb82-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or as an anonymous function </span></span></code></pre></div>
</details>
</div>
</div>
<p>Or I could write this as an an anonymous function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb83-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb83-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> proc_pths, </span>
<span id="cb83-4">    \(x, y)</span>
<span id="cb83-5">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb83-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> y,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll want to perform a sanity check on this output with the first exported item in <code>dds-nyt/processed</code> and check it against the <code>nyt1_proc</code> data to evaluate the differences.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">nyt1_proc_check_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> proc_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the first file</span></span>
<span id="cb84-2">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll check the differences with <code>diffobj::diffStr()</code>. Click on Code below to view the differences:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb85-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc),</span>
<span id="cb85-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_01), </span>
<span id="cb85-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_diffs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb85-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     old           | new                 </span></span>
<span id="cb85-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "age"         - "id"            [1] </span></span>
<span id="cb85-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "gender"      - "age"           [2] </span></span>
<span id="cb85-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "impressions" - "gender"        [3] </span></span>
<span id="cb85-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "clicks"      - "impressions"   [4] </span></span>
<span id="cb85-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5] "signed_in"   - "clicks"        [5] </span></span>
<span id="cb85-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [6] "age_group"   - "signed_in"     [6] </span></span>
<span id="cb85-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "ctr_rate"    - "age_group"     [7] </span></span>
<span id="cb85-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [8] "female"      - "ctr_rate"      [8] </span></span>
<span id="cb85-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "female"        [9] </span></span>
<span id="cb85-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "file_nm"       [10]</span></span>
<span id="cb85-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "proc_file_pth" [11]</span></span></code></pre></div>
</details>
</div>
</div>
<p>These are differences I’d expect, given the two data frames will have <em>slightly</em> different columns (<code>id</code>, <code>file_nm</code>, and <code>proc_file_pth</code>)</p>
<section id="group_walk" class="level3">
<h3 class="anchored" data-anchor-id="group_walk"><code>group_walk()</code></h3>
<p>Another option involves the <code>group_walk()</code> function from <code>dplyr</code> (<strong>WARNING:</strong> this is experimental). But I need to remove the processed folder so I’m not confusing myself:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed"</span>, </span>
<span id="cb86-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb86-3">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>),</span>
<span id="cb86-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_delete)</span>
<span id="cb86-5">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb86-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb86-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── processed</span></span>
<span id="cb86-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── raw</span></span>
<span id="cb86-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt10.csv</span></span>
<span id="cb86-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt11.csv</span></span>
<span id="cb86-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt12.csv</span></span>
<span id="cb86-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt13.csv</span></span>
<span id="cb86-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt7.csv</span></span>
<span id="cb86-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt8.csv</span></span>
<span id="cb86-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>The <a href="https://dplyr.tidyverse.org/reference/group_map.html">help file on <code>group_walk()</code></a> gives an example with <code>purrr</code>’s formula syntax (which I’ve adapted below):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb87-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>   </span>
<span id="cb87-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_walk</span>( <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .x, </span>
<span id="cb87-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(.y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>),</span>
<span id="cb87-5">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>I’ve also re-written this as an anonymous function (which is more stable, since the formula syntax is no longer recommended).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now re-create</span></span>
<span id="cb88-2">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>)</span>
<span id="cb88-3">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb88-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>   </span>
<span id="cb88-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_walk</span>(\(x, y) </span>
<span id="cb88-6">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(</span>
<span id="cb88-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb88-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>),</span>
<span id="cb88-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb88-10">    )</span>
<span id="cb88-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check</span></span>
<span id="cb88-12">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv$"</span>)</span>
<span id="cb88-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/processed/</span></span>
<span id="cb88-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-07-08-nyt10.csv</span></span>
<span id="cb88-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-07-08-nyt11.csv</span></span>
<span id="cb88-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-07-08-nyt12.csv</span></span>
<span id="cb88-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-07-08-nyt13.csv</span></span>
<span id="cb88-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-07-08-nyt7.csv</span></span>
<span id="cb88-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-07-08-nyt8.csv</span></span>
<span id="cb88-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── 2023-07-08-nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>Once again, I’ll import the first file in the new processed data folder and check it against the columns <code>nyt1_proc_check_01</code> data to evaluate the differences.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now re-check</span></span>
<span id="cb89-2">nyt1_proc_check_02 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> proc_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the first file</span></span>
<span id="cb89-3">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb90-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_01),</span>
<span id="cb90-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_02), </span>
<span id="cb90-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_diffs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb90-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `old[8:11]`: "ctr_rate" "female" "file_nm" "proc_file_pth"</span></span>
<span id="cb90-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `new[8:10]`: "ctr_rate" "female" "file_nm"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
</section>
<section id="recap-purrr-and-iteration" class="level1">
<h1>Recap: <code>purrr</code> and iteration</h1>
<p>In this post I’ve covered iteration and some of the new additions to the <code>purrr</code> version 1.0. These include:</p>
<ol type="1">
<li><p><code>purrr::map_vec()</code> (replaces <code>map_raw()</code>)</p></li>
<li><p>Progress bars</p></li>
<li><p><code>purrr::list_rbind()</code> (replaces <code>map_dfr()</code>)</p></li>
<li><p>The experimental <code>dplyr::group_walk()</code> function</p></li>
</ol>
<p>For more information, check out the following:</p>
<ul>
<li><p><a href="https://purrr.tidyverse.org/"><code>purrr</code> package website</a></p></li>
<li><p><a href="https://r4ds.hadley.nz/iteration.html">Iteration chapter in R for data science</a></p></li>
<li><p><a href="https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/"><code>purrr</code> version 1.0 blog post</a> and <a href="https://www.youtube.com/watch?v=EGAs7zuRutY">video from Posit</a></p></li>
</ul>
<div style="font-size: 1.10em;">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
REACP: <code>purrr</code> syntax variations
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em;">
<p><strong>Standard</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define .x and .f</span></span>
<span id="cb91-2">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower)</span></code></pre></div>
</div>
<div style="font-size: 1.25em;">
<p><strong>Anonymous function</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># anonymous shorthand notation</span></span>
<span id="cb92-2">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))</span></code></pre></div>
</div>
<div style="font-size: 1.25em;">
<p><strong>Formula (deprecated)</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># written as normal expression</span></span>
<span id="cb93-2">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x))</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>iteration</category>
  <category>code</category>
  <guid>https://mjfrigaard.github.io/posts/purrr1.0/index.html</guid>
  <pubDate>Wed, 05 Apr 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/purrr1.0/image.png" medium="image" type="image/png" height="139" width="120"/>
</item>
<item>
  <title>Creating shiny app-packages</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/duap/index.html</link>
  <description><![CDATA[ 




<p>In this post, I’ll be using <a href="https://devtools.r-lib.org/"><code>devtools</code></a> and <a href="https://usethis.r-lib.org/"><code>usethis</code></a> to develop <a href="https://github.com/mjfrigaard/duap"><code>duap</code></a>, an R package that <em>contains</em> a shiny application (i.e., <em><code>devtools</code>/<code>usethis</code> app-package</em>).</p>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; font-weight: bold; color: #696969;">
<p><em>This is a long post because I cover many of the steps used to build R packages. If you’d prefer to more information on developing R packages, I suggest starting with <a href="https://r-pkgs.org/whole-game.html">the whole game section</a>.</em></p>
</div>
</div>
</div>
</div>
<p>The R package development workflow is well documented in <a href="https://r-pkgs.org/whole-game.html">R Packages</a> and <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">Mastering Shiny</a>. I’ve written this post because I frequently encountered R developers who were comfortable with shiny application development, but had never developed an R package.</p>
<p>This post walks through converting an existing shiny application into an app-package <em>in detail</em> because R package development differs from creating a standalone shiny application. My hope is that by reading this will prevent you from having to rebuild your application entirely from scratch.</p>
<p>I’ve organized the app-package development process into three areas: <strong>Start</strong>, <strong>Build</strong>, and <strong>Use</strong>.</p>
<ul>
<li><p><strong>Start</strong> covers the steps required to begin building a shiny app withing a package framework (from the console and IDE).</p></li>
<li><p><strong>Build</strong> covers the development process, which includes writing and storing code, data, external resources (i.e., data), documentation, and testing.</p></li>
<li><p><strong>Use</strong> shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE).</p></li>
</ul>
<p>The GitHub repo with the code for <code>duap</code> is located <a href="https://github.com/mjfrigaard/duap">here</a> if you’d like to follow along.</p>
<section id="duap" class="level1">
<h1><code>duap</code></h1>
<p>Building a shiny app as a package is <a href="https://mastering-shiny.org/scaling-packaging.html?q=highly%20recommend#scaling-packaging">highly recommended</a>. Both the <a href="https://thinkr-open.github.io/golem/"><code>golem</code></a> and <a href="https://leprechaun.opifex.org/#/"><code>leprechaun</code></a> frameworks convert your shiny application into an R package, and while this might seem like overkill, when you consider the additional development tools accessible to R packages, I think you’ll see why the advice makes sense.</p>
</section>
<section id="start" class="level1">
<h1>Start</h1>
<p>To create a shiny app package, I install <a href="https://devtools.r-lib.org/"><code>devtools</code></a> (which also installs <a href="https://usethis.r-lib.org/"><code>usethis</code></a>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devtools"</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(devtools)</span></code></pre></div>
</div>
<section id="from-console" class="level2">
<h2 class="anchored" data-anchor-id="from-console">From Console</h2>
<p>If I am creating a package from the console, the function for building a new package is <code>usethis::create_package()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_package</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duap"</span>)</span></code></pre></div>
</div>
<p>A new RStudio session will open (and the name of the project–i.e., the name of the <code>.Rproj</code> file–will be identical to the package name).</p>
</section>
<section id="from-project-wizard" class="level2">
<h2 class="anchored" data-anchor-id="from-project-wizard">From Project Wizard</h2>
<p>If I am using RStudio’s <strong>New Project Wizard</strong> to create a new shiny app package, I’d see the following defaults:</p>
<div id="fig-rpkg-setup" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/rpkg-setup.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;1: Default <code>usethis::create_package</code> project setup</figcaption>
</figure>
</div>
<p>The new package built from the console will have the following folder and files:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">duap/</span>
<span id="cb3-2">  ├── DESCRIPTION</span>
<span id="cb3-3">  ├── NAMESPACE</span>
<span id="cb3-4">  ├── R/</span>
<span id="cb3-5">  └── duap.Rproj</span>
<span id="cb3-6">  </span>
<span id="cb3-7">1 directory, 3 files</span></code></pre></div>
<p>Packages built from the <strong>New Project Wizard</strong> will have a few additional folders and files:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">duap/</span>
<span id="cb4-2">  ├── DESCRIPTION</span>
<span id="cb4-3">  ├── NAMESPACE</span>
<span id="cb4-4">  ├── R/</span>
<span id="cb4-5">  │   └── hello.R</span>
<span id="cb4-6">  ├── man/</span>
<span id="cb4-7">  │   └── hello.Rd</span>
<span id="cb4-8">  ├── myRPkg.Rproj</span>
<span id="cb4-9">  └── renv/</span>
<span id="cb4-10">      ├── activate.R</span>
<span id="cb4-11">      ├── sandbox/</span>
<span id="cb4-12">      │   └── R-4.2</span>
<span id="cb4-13">      └── settings.dcf</span>
<span id="cb4-14"></span>
<span id="cb4-15">4 directories, 7 files</span></code></pre></div>
<p>These additional files are:</p>
<ul>
<li><code>hello.R</code> in the <code>R/</code> folder<br>
</li>
<li><code>hello.Rd</code> in the <code>man/</code> folder<br>
</li>
<li>a <code>renv/</code> folder for package management</li>
</ul>
<p><code>R/hello.R</code> and <code>man/hello.Rd</code> are boilerplate files and can be deleted, but both package setups have a <code>DESCRIPTION</code>, <code>NAMESPACE</code>, <code>R/</code> folder, and <code>.Rproj</code> file. These four items can be thought of as the ‘minimal package’ setup required to access RStudio’s <strong>Build</strong> tools.</p>
</section>
</section>
<section id="build" class="level1">
<h1>Build</h1>
<p>I’ll work through a ’minimum viable product (MVP) using the app code in the <a href="https://github.com/mjfrigaard/shiny-app-setups/tree/main/vanilla-shiny"><code>vanilla-shiny</code></a> repo.</p>
<section id="metadata-files" class="level2">
<h2 class="anchored" data-anchor-id="metadata-files">Metadata files</h2>
<p>R packages have two metadata files: <code>DESCRIPTION</code> and <code>NAMESPACE</code>. Neither of these files have extensions, and both contain vital information for your package to function properly.</p>
<p>We’ll manually edit the <code>DESCRIPTION</code> file, but the <code>NAMESPACE</code> file is automatically generated during the development process.</p>
<section id="description" class="level3">
<h3 class="anchored" data-anchor-id="description">DESCRIPTION</h3>
<p>The <code>DESCRIPTION</code> file plays an important role in R packages–that’s why creating this file is the first step when <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">converting an existing app</a> (and when creating a <a href="https://thinkr-open.github.io/golem/articles/a_start.html#fill-the-description">new <code>golem</code> apps</a>).</p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>DESCRIPTION</code> files
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/desc.png" style="width:15.0%;height:15.0%" class="figure-img"></p>
</figure>
</div>
<p><em>‘RStudio and <code>devtools</code> consider any directory containing <code>DESCRIPTION</code> to be a package’</em> - <a href="https://r-pkgs.org/description.html#the-description-file">R Packages</a></p>
</div>
</div>
</div>
</div>
<p>The initial <code>DESCRIPTION</code> file in <code>duap</code> is below:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">Package: duap</span>
<span id="cb5-2">Title: What the Package Does (One Line, Title Case)</span>
<span id="cb5-3">Version: 0.0.0.9000</span>
<span id="cb5-4">Authors@R: </span>
<span id="cb5-5">    person("First", "Last", , "first.last@example.com", </span>
<span id="cb5-6">    role = c("aut", "cre"),</span>
<span id="cb5-7">    comment = c(ORCID = "YOUR-ORCID-ID"))</span>
<span id="cb5-8">Description: What the package does (one paragraph).</span>
<span id="cb5-9">License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a</span>
<span id="cb5-10">    license</span>
<span id="cb5-11">Encoding: UTF-8</span>
<span id="cb5-12">Roxygen: list(markdown = TRUE)</span>
<span id="cb5-13">RoxygenNote: 7.2.3</span></code></pre></div>
<p>The package name is automatically added, but the remaining fields need to be completed (consult <a href="https://r-pkgs.org/description.html#the-description-file">R packages</a> for more information on filling out the <code>DESCRIPTION</code> file).</p>
<p>The <code>DESCRIPTION</code> file in the <code>duap</code> prompts the RStudio IDE to activate the <strong>Build</strong> tools pane (see below):</p>
<div id="fig-rpkg-ide" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/rpkg-ide.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;2: Package <strong>Build</strong> tools</figcaption>
</figure>
</div>
</section>
</section>
<section id="application-code" class="level2">
<h2 class="anchored" data-anchor-id="application-code">Application code</h2>
<p>The contents of the <code>app.R</code> and <code>utils.R</code> need to be moved into the <code>R/</code> folder. When developing R packages, new <code>.R</code> files are created with <code>usethis::use_r()</code>.</p>
<section id="use_r" class="level3">
<h3 class="anchored" data-anchor-id="use_r">use_r()</h3>
<p>I’m going to create <code>duap</code> using <a href="https://mastering-shiny.org/scaling-modules.html#module-motivation">modules</a> to separate the app into the following digestible mental ‘chunks’:</p>
<ul>
<li><p>The app collects the inputs in the <code>shiny::sidebarPanel()</code></p></li>
<li><p>These values are then used to create a plot in the <code>shiny::mainPanel()</code></p></li>
</ul>
<p>Based on this layout, I’ll create one module to collect and return the user-inputs (<code>mod_var_input</code>), and another module to display the plot (<code>mod_display_plot</code>).</p>
<p>I’ll create these files using <a href="https://usethis.r-lib.org/reference/use_r.html"><code>usethis::use_r()</code></a> below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod_var_input"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">✔ Setting active project to '/Users/mjfrigaard/projects/duap'</span>
<span id="cb7-2">• Modify 'R/mod_var_input.R'</span>
<span id="cb7-3">• Call `use_test()` to create a matching test file</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod_display_plot"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">• Modify 'R/mod_display_plot.R'</span>
<span id="cb9-2">• Call `use_test()` to create a matching test file</span></code></pre></div>
<p>The display module also relies on a utility function (<code>plot_points()</code>), so I need to create a script for the utility function, which I put in a file with a name similar to the module it belongs to (i.e., <code>utils_display_plot</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils_display_plot"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">• Modify 'R/utils_display_plot.R'</span>
<span id="cb11-2">• Call `use_test()` to create a matching test file</span></code></pre></div>
<p>Finally, I’ll place the modules into basic ui and server arguments in a call to <code>shiny::shinyApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moviesApp"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">• Modify 'R/moviesApp.R'</span>
<span id="cb13-2">• Call `use_test()` to create a matching test file</span></code></pre></div>
<p>Modules consist of two functions; one in the UI (with a <code>_ui</code> suffix), and another in the server (with a <code>_server</code> suffix), but it’s common practice to combine them in a single file.</p>
<p>Below is the <code>mod_var_input</code> module:</p>
<ul>
<li><p>The ui function is stored in <code>mod_var_input_ui</code>:</p>
<div style="font-size: 0.80em; ; color: #696969;">
<p><em>Click on Code to view the UI function in <code>R/mod_var_input/R</code></em></p>
</div>
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mod_var_input_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb14-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb14-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb14-4">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb14-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb14-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y-axis:"</span>,</span>
<span id="cb14-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb14-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_rating"</span>,</span>
<span id="cb14-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB number of votes"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_num_votes"</span>,</span>
<span id="cb14-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Critics Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"critics_score"</span>,</span>
<span id="cb14-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audience Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_score"</span>,</span>
<span id="cb14-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Runtime"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runtime"</span></span>
<span id="cb14-13">      ),</span>
<span id="cb14-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_score"</span></span>
<span id="cb14-15">    ),</span>
<span id="cb14-16">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb14-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>),</span>
<span id="cb14-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X-axis:"</span>,</span>
<span id="cb14-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb14-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_rating"</span>,</span>
<span id="cb14-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB number of votes"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_num_votes"</span>,</span>
<span id="cb14-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Critics Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"critics_score"</span>,</span>
<span id="cb14-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audience Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_score"</span>,</span>
<span id="cb14-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Runtime"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runtime"</span></span>
<span id="cb14-25">      ),</span>
<span id="cb14-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_rating"</span></span>
<span id="cb14-27">    ),</span>
<span id="cb14-28">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb14-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>),</span>
<span id="cb14-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Color by:"</span>,</span>
<span id="cb14-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb14-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title Type"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title_type"</span>,</span>
<span id="cb14-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Genre"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre"</span>,</span>
<span id="cb14-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MPAA Rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpaa_rating"</span>,</span>
<span id="cb14-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Critics Rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"critics_rating"</span>,</span>
<span id="cb14-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audience Rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_rating"</span></span>
<span id="cb14-37">      ),</span>
<span id="cb14-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpaa_rating"</span></span>
<span id="cb14-39">    ),</span>
<span id="cb14-40">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sliderInput</span>(</span>
<span id="cb14-41">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>),</span>
<span id="cb14-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alpha:"</span>,</span>
<span id="cb14-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb14-44">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb14-45">    ),</span>
<span id="cb14-46">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sliderInput</span>(</span>
<span id="cb14-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>),</span>
<span id="cb14-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Size:"</span>,</span>
<span id="cb14-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb14-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-51">    ),</span>
<span id="cb14-52">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(</span>
<span id="cb14-53">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot_title"</span>),</span>
<span id="cb14-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plot title"</span>,</span>
<span id="cb14-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">placeholder =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter plot title"</span></span>
<span id="cb14-56">    )</span>
<span id="cb14-57">  )</span>
<span id="cb14-58">}</span></code></pre></div>
</details>
</div></li>
<li><p>The server function is stored in <code>mod_var_input_server</code>:</p>
<div style="font-size: 0.80em; ; color: #696969;">
<p><em>Click on Code to view the server function in <code>R/mod_var_input/R</code></em></p>
</div>
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">mod_var_input_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb15-2"></span>
<span id="cb15-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(</span>
<span id="cb15-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb15-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-7">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb15-8">        }),</span>
<span id="cb15-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-10">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb15-11">        }),</span>
<span id="cb15-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-13">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z</span>
<span id="cb15-14">        }),</span>
<span id="cb15-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-16">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>alpha</span>
<span id="cb15-17">        }),</span>
<span id="cb15-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-19">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>size</span>
<span id="cb15-20">        }),</span>
<span id="cb15-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot_title"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-22">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plot_title</span>
<span id="cb15-23">        })</span>
<span id="cb15-24">      )</span>
<span id="cb15-25">    )</span>
<span id="cb15-26">  })</span>
<span id="cb15-27">}</span></code></pre></div>
</details>
</div>
<ul>
<li>View the display module <a href="https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/mod_display_plot.R">here.</a></li>
</ul></li>
</ul>
</section>
<section id="standalone-app-function" class="level3">
<h3 class="anchored" data-anchor-id="standalone-app-function">Standalone app function</h3>
<p>After I’ve written the modules and utility functions, I need to add these into a <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">standalone app function</a> <code>moviesApp()</code> (stored in <code>R/moviesApp.R</code>).</p>
<ul>
<li><p>This file contains a call to <code>shiny::shinyApp()</code> and includes the module functions (in their relative positions)</p>
<ul>
<li>Note the <code>id</code>s in each module function pair must match to create the shared namespace.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">moviesApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb16-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># call to shinyApp()</span></span>
<span id="cb16-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb16-4"></span>
<span id="cb16-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI ----</span></span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb16-7">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb16-8">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb16-9">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI input module ----</span></span>
<span id="cb16-10">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_var_input_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vars"</span>)</span>
<span id="cb16-11">        ),</span>
<span id="cb16-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI display module ----</span></span>
<span id="cb16-13">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb16-14">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_display_plot_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span>)</span>
<span id="cb16-15">        )</span>
<span id="cb16-16">      )</span>
<span id="cb16-17">    ),</span>
<span id="cb16-18"></span>
<span id="cb16-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb16-20">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server input module (capturing inputs) ----</span></span>
<span id="cb16-21">      selected_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_var_input_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vars"</span>)</span>
<span id="cb16-22">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server display module (rendering outputs) ----</span></span>
<span id="cb16-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_display_plot_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span>, </span>
<span id="cb16-24">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var_inputs =</span> selected_vars)</span>
<span id="cb16-25">    }</span>
<span id="cb16-26">  )</span>
<span id="cb16-27">}</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="roxygen2" class="level3">
<h3 class="anchored" data-anchor-id="roxygen2">roxygen2</h3>
<p>When I’m confident my code works (and the app renders), I want to make sure these functions are properly documented by describing each function with <a href="https://roxygen2.r-lib.org/"><code>roxygen2</code></a> tags. To quickly insert a <code>roxygen2</code> skeleton, use the RStudio IDE (or the keyboard shortcut: <code>Option</code> + <code>Shift</code> + <code>Command</code> + <code>R</code>)</p>
<p>The standard <code>roxygen2</code> skeleton tags include <code>@param</code>, <code>@return</code>, <code>@export</code>, and <code>@examples</code></p>
<ul>
<li><p><code>@param</code> lists the existing arguments (or variables) for the function</p></li>
<li><p><code>@return</code> should be a description of the object/side-effect/thing the function produces (and any warnings or errors if used incorrectly)</p></li>
</ul>
<p>The following <a href="https://roxygen2.r-lib.org/"><code>roxygen2</code></a> tags will be used to update the <code>NAMESPACE</code> file (which you should never edit manually!)</p>
<ul>
<li><p><code>@export</code> will make the function available to other people when they use your package</p></li>
<li><p><code>@importFrom</code> vs.&nbsp;<code>@import</code></p>
<ul>
<li>it’s always a good idea to be explicit about the external functions and packages you’re using, so most of the time you should use <code>@importFrom</code> (there’s even a handy helper <code>usethis::use_import_from("package", "function")</code>)<br>
</li>
<li><code>@import</code> should only be used when <a href="https://r-pkgs.org/dependencies-in-practice.html#in-code-below-r">“<em>you make such heavy use of so many functions from another package that you want to import its entire namespace. This should be relatively rare.</em>”</a></li>
</ul></li>
</ul>
<p><code>roxygen2</code> imports and exports are covered in more depth <a href="https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports">in R packages.</a>.</p>
<p>You can see the full code for <code>point_plot()</code> below (or follow <a href="https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/">this link</a> to view all the modules in the <code>R/</code> folder):</p>
<div style="font-size: 0.80em; ; color: #696969;">
<p><em>Click on Code to view</em></p>
</div>
<div class="cell">
<details>
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Plot points (shiny)</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param df input dataset (tibble or data.frame)</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x_var x variable</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param y_var y variable</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param col_var color variable</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param alpha_var alpha value</span></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param size_var size value</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return plot object</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export point_plot</span></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom ggplot2 ggplot aes geom_point</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' require(duap)</span></span>
<span id="cb17-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' movies &lt;- duap::movies</span></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' point_plot(df = movies,</span></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   x_var = "critics_score",</span></span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   y_var = "imdb_rating",</span></span>
<span id="cb17-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   col_var = "critics_rating",</span></span>
<span id="cb17-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   alpha_var = 1/3,</span></span>
<span id="cb17-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   size_var = 2)</span></span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' }</span></span>
<span id="cb17-25">point_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, x_var, y_var, col_var, alpha_var, size_var) {</span>
<span id="cb17-26">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df,</span>
<span id="cb17-27">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .data[[x_var]],</span>
<span id="cb17-28">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .data[[y_var]],</span>
<span id="cb17-29">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> .data[[col_var]])) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-30">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha_var, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size_var)</span>
<span id="cb17-31"></span>
<span id="cb17-32">}</span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip: <code>roxygen2</code> skeleton
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; font-weight: bold; color: #696969;">
<p><em>As well as generating <code>.Rd</code> files, <code>roxygen</code> will also create a <code>NAMESPACE</code> for you, and will manage the <code>Collate</code> field in <code>DESCRIPTION</code></em></p>
<div id="fig-roxygen2-tags" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/ide-roxygen-skeleton.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;3: Standard <code>roxygen2</code> skeleton</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="test-drive" class="level2">
<h2 class="anchored" data-anchor-id="test-drive">Test drive</h2>
<div style="font-size: 1.10em; font-weight: bold;">
<blockquote class="blockquote">
<p>“The <code>load_all()</code> function is arguably the most important part of the devtools workflow.” - <a href="https://r-pkgs.org/workflow101.html#sec-workflow101-load-all">R Packages, 2ed</a></p>
</blockquote>
</div>
<p>You’ll use the <code>devtools::load_all()</code> function frequently while you’re developing your app-package. <code>load_all()</code> simulates how your functions will work when someone else uses your package. This removes the need to define them in the global workspace. It also gives you access to the functions from any add-on packages you’ve imported into your <code>NAMESPACE</code> (i.e., you won’t need to run <code>library()</code>).</p>
<p>I highly recommend using the keyboard shortcuts:</p>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="`devtools::load_all()` keyboard shortcuts">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>devtools::load_all()</code> keyboard shortcuts
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em; font-weight: bold;">
<ul>
<li><p>macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p></li>
<li><p>Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p></li>
</ul>
</div>
</div>
</div>
<p>The full benefits of using <code>load_all()</code> are covered in <a href="https://r-pkgs.org/workflow101.html#benefits-of-load_all">R packages.</a></p>
<section id="load_all" class="level3">
<h3 class="anchored" data-anchor-id="load_all">load_all()</h3>
<p>After documenting everything with <code>roxygen2</code>, I want to make sure none of the functions are in my <strong>Environment</strong> (remove with <code>rm()</code> if necessary) and load the functions with <a href="https://r-pkgs.org/whole-game.html#sec-whole-game-load-all"><code>devtools::load_all()</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1">ℹ Loading duap</span></code></pre></div>
</section>
</section>
<section id="namespace-help-pages" class="level2">
<h2 class="anchored" data-anchor-id="namespace-help-pages">NAMESPACE &amp; Help pages</h2>
<p><code>devtools::document()</code> processes the <code>roxygen2</code> tags to generate the <code>NAMESPACE</code> and the <code>.Rd</code> files in the <code>man/</code> folder. The <code>.Rd</code> files are used to access the help files (i.e., <code>package::function()</code> can be accessed with <code>??function</code>).</p>
<p>Managing your package <a href="https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-NAMESPACE-workflow">NAMESPACE file</a> is not something you do directly: it’s handled with the <code>roxygen2</code> tags we covered above. The keyboard shortcuts for <code>devtools::document()</code> are below:</p>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="`devtools::document()` keyboard shortcuts">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>devtools::document()</code> keyboard shortcuts
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em; font-weight: bold;">
<ul>
<li><p>macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd></p></li>
<li><p>Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd></p></li>
</ul>
</div>
</div>
</div>
<section id="document" class="level3">
<h3 class="anchored" data-anchor-id="document">document()</h3>
<p>Run <code>devtools::document()</code> when you’ve written a new function with <code>roxygen2</code> tags or included a package in the <code>DESCRIPTION</code> file under <code>Imports:</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">document</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">ℹ Updating duap documentation</span>
<span id="cb21-2">First time using roxygen2. Upgrading automatically...</span>
<span id="cb21-3">Setting `RoxygenNote` to "7.2.3"</span>
<span id="cb21-4">ℹ Loading duap</span>
<span id="cb21-5">Writing NAMESPACE</span>
<span id="cb21-6">Writing mod_plot_ui.Rd</span>
<span id="cb21-7">Writing mod_plot_server.Rd</span>
<span id="cb21-8">Writing point_plot.Rd</span>
<span id="cb21-9">Writing mod_var_input_ui.Rd</span>
<span id="cb21-10">Writing mod_var_input_server.Rd</span>
<span id="cb21-11">Writing moviesApp.Rd</span></code></pre></div>
<section id="namespace-description" class="level4">
<h4 class="anchored" data-anchor-id="namespace-description"><strong><em>NAMESPACE != DESCRIPTION</em></strong></h4>
<p>It’s important to understand that <code>devtools::document()</code> will use the <code>roxygen2</code> tags to create the <code>man/*.Rd</code> files and update the <code>NAMESPACE</code>, but <strong><code>devtools::document()</code> does not update the <code>Imports:</code> section in the <code>DESCRIPTION</code>.</strong></p>
<p>To add packages dependencies to the <code>DESCRIPTION</code>, you’ll need to use the <a href="https://usethis.r-lib.org/reference/use_package.html"><code>usethis::use_package()</code> function</a>. Read more on this topic in <a href="https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports">Confusion about <code>Imports</code></a>.</p>
<p>The table below shows the connection between <code>roxygen2</code> tags, the resulting <code>NAMESPACE</code> entry, and what should be listed in the <code>DESCRIPTION</code>.</p>
<div style="font-size: 0.80em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>roxygen2</code>, <code>NAMESPACE</code> &amp; <code>DESCRPTION</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">

<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
roxygen2 tag
</th>
<th style="text-align:left;">
NAMESPACE directive
</th>
<th style="text-align:right;">
Added in DESCRIPTION
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="importFrom">@importFrom</span>
</td>
<td style="text-align:left;">
importFrom() : import selected object from another NAMESPACE
</td>
<td style="text-align:right;">
Nothing
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="import">@import</span>
</td>
<td style="text-align:left;">
import(): import all objects from another package’s NAMESPACE.
</td>
<td style="text-align:right;">
Imports:
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="export">@export</span>
</td>
<td style="text-align:left;">
export() : export the function, method, generic, or class so it’s available outside of the package (in the NAMESPACE)
</td>
<td style="text-align:right;">
Nothing
</td>
</tr>
</tbody>

</table>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="checking-installation" class="level2">
<h2 class="anchored" data-anchor-id="checking-installation">Checking installation</h2>
<p>After loading and documenting the <code>duap</code> package, I want to make sure I can install the package into my library with <a href="https://r-pkgs.org/whole-game.html#install"><code>devtools::install()</code></a>. The keyboard shortcut for <code>devtools::install()</code> is below:</p>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="`devtools::document()` keyboard shortcuts">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>devtools::document()</code> keyboard shortcuts
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em; font-weight: bold;">
<ul>
<li><p>macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></p></li>
<li><p>Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></p></li>
</ul>
</div>
</div>
</div>
<section id="install" class="level3">
<h3 class="anchored" data-anchor-id="install">install()</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">── R CMD build ────────────────────────────────────────────────────────────────</span>
<span id="cb23-2">✔  checking for file ‘/Users/mjfrigaard/projects/duap/DESCRIPTION’ ...</span>
<span id="cb23-3">─  preparing ‘duap’: (1.8s)</span>
<span id="cb23-4">✔  checking DESCRIPTION meta-information</span>
<span id="cb23-5">─  checking for LF line-endings in source and make files and shell scripts (520ms)</span>
<span id="cb23-6">─  checking for empty or unneeded directories</span>
<span id="cb23-7">   Omitted ‘LazyData’ from DESCRIPTION</span>
<span id="cb23-8">─  building ‘duap_0.1.0.tar.gz’</span>
<span id="cb23-9">   </span>
<span id="cb23-10">Running /Library/Frameworks/R.framework/Resources/bin/R CMD INSTALL </span>
<span id="cb23-11">  --install-tests </span>
<span id="cb23-12">* installing to library ...</span>
<span id="cb23-13">* installing *source* package ‘duap’ ...</span>
<span id="cb23-14">** using staged installation ...</span>
<span id="cb23-15">** R</span>
<span id="cb23-16">** byte-compile and prepare package for lazy loading</span>
<span id="cb23-17">** help</span>
<span id="cb23-18">*** installing help indices</span>
<span id="cb23-19">** building package indices</span>
<span id="cb23-20">** testing if installed package can be loaded from temporary location</span>
<span id="cb23-21">** testing if installed package can be loaded from final location</span>
<span id="cb23-22">** testing if installed package keeps a record of temporary installation path</span>
<span id="cb23-23">* DONE (duap)</span></code></pre></div>
<p>Restart your R session and ensure you have a clean workspace:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">   Restarting R session...</span>
<span id="cb24-2"></span>
<span id="cb24-3">* Project '~/projects/duap' loaded. [renv 0.16.0]</span></code></pre></div>
<p>Then load your package with <code>library()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(duap)</span></code></pre></div>
</div>
<p>You can also use <strong>Install</strong> icon in the <strong>Build</strong> pane, which installs the package, restarts the R session, and loads the package all with one click!</p>
<div id="fig-build-install" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/build-install.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;4: <strong>Build</strong> install package</figcaption>
</figure>
</div>
<div id="fig-build-restart" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/build-restart.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;5: <strong>Build</strong> restart and load</figcaption>
</figure>
</div>
<section id="recap-the-r-folder" class="level4">
<h4 class="anchored" data-anchor-id="recap-the-r-folder"><strong>Recap: the <code>R/</code> folder</strong></h4>
<p>The sequence I’ve demonstrated above (create <code>.R</code> file, write function, document with <code>roxygen2</code>, load, document, install) is the ‘minimal version’ of the <a href="https://r-pkgs.org/whole-game.html">full development workflow</a>.</p>
<p>Once a ‘beta’ version of the app is deployed, you will want to come back to the app to refactor, write tests, and make sure all the items in <code>devtools::check()</code> pass.</p>
<p>Storing the application’s code in the <code>R/</code> folder and (using RStudio’s build tools) keeps files organized, well documented, and self-contained:</p>
<ul>
<li><p>All the code is stored in the <code>R/</code> folder</p></li>
<li><p>I’ve separated my code into smaller pieces (modules) that can be tested independently (more on this later)</p></li>
<li><p>My dependencies are being managed by <code>roxygen2</code> and <code>devtools::document()</code>, which will update the <code>NAMESPACE</code> with any functions tagged with <code>@importFrom</code> (or <code>@import</code>)</p>
<ul>
<li>I can also access functions I’ve written <em>outside</em> by adding <code>@export</code></li>
</ul></li>
</ul>
<div id="fig-pkg-man" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/pkg-man.png" class="img-fluid figure-img" style="width:70.0%"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;6: Function documentation in <code>man/</code> folder</figcaption>
</figure>
</div>
<p>Now that I have the R version/package management being tracked and stored with <code>renv/</code> &amp; <code>renv.lock</code>, function documentation in the <code>.Rd</code> files, the <code>DESCRIPTION</code> and <code>NAMESPACE</code>, I can move onto adding and using <strong>data</strong> in a shiny app package.</p>
</section>
</section>
</section>
<section id="additional-package-files" class="level2">
<h2 class="anchored" data-anchor-id="additional-package-files">Additional package files</h2>
<p>Most app-packages will require files beyond the <code>.R</code> files in the <code>R/</code> folder. Apps will often use data files when they’re deployed, which we’ll cover next.</p>
<section id="use_data_raw" class="level3">
<h3 class="anchored" data-anchor-id="use_data_raw">use_data_raw()</h3>
<p><a href="https://usethis.r-lib.org/reference/use_data.html"><code>usethis::use_data()</code> or <code>usethis::use_data_raw()</code></a> make it simple to add data to the application package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data_raw</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"movies"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb27-1">✔ Creating 'data-raw/'</span>
<span id="cb27-2">✔ Writing 'data-raw/movies.R'</span>
<span id="cb27-3">• Modify 'data-raw/movies.R'</span>
<span id="cb27-4">• Finish the data preparation script in 'data-raw/movies.R'</span>
<span id="cb27-5">• Use `usethis::use_data()` to add prepared data to package</span></code></pre></div>
<p>In the <code>data-raw/movies.R</code> script, I want to import the <code>movies.RData</code> file, but where should I import it from? It depends. In R packages, data is stored in either <a href="https://r-pkgs.org/data.html"><code>data/</code> or <code>data-raw/</code></a>. To access a copy of the <code>movies</code> dataset in <code>duap</code> (i.e., with <code>duap::movies</code>), I can place the <code>movies.RData</code> file in <code>data-raw/</code> and import it by adding the following to <code>data-raw/movies.R</code>:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb28-1">## code to prepare `movies` dataset goes here</span>
<span id="cb28-2">load("data-raw/movies.RData")</span>
<span id="cb28-3">usethis::use_data(movies, overwrite = TRUE)</span></code></pre></div>
<p>Note <code>data-raw/movies.R</code> includes a call to <code>usethis::use_data()</code>, and when it’s executed, I can see a <code>data/</code> folder is created and <code>movies</code> is saved as <code>movies.rda</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-raw/movies.RData"</span>)</span>
<span id="cb29-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data</span>(movies, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">✔ Adding 'R' to Depends field in DESCRIPTION</span>
<span id="cb30-2">✔ Creating 'data/'</span>
<span id="cb30-3">✔ Saving 'movies' to 'data/movies.rda'</span>
<span id="cb30-4">• Document your data (see 'https://r-pkgs.org/data.html')</span></code></pre></div>
</section>
</section>
<section id="installed-package-files" class="level2">
<h2 class="anchored" data-anchor-id="installed-package-files">Installed package files</h2>
<p>The <code>inst/</code> folder plays a special role when developing R packages:</p>
<div style="font-size: 1.10em; font-weight: bold;">
<blockquote class="blockquote">
<p>“<em>When a package is installed, everything in <code>inst/</code> is copied into the top-level directory of the installed package</em>” - <a href="https://r-pkgs.org/misc.html#sec-misc-inst">R Packages, 2ed</a></p>
</blockquote>
</div>
<p>Consider the example folder and files below: <code>file.txt</code>, <code>CITATION</code>, and <code>extdata/my_data.csv</code>:</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<section id="source-development-form" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<h5 class="anchored" data-anchor-id="source-development-form">Source (development) form</h5>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb31-1">inst/</span>
<span id="cb31-2">  ├── file.txt</span>
<span id="cb31-3">  ├── CITATION</span>
<span id="cb31-4">  └── extdata/</span>
<span id="cb31-5">        └── my_data.csv</span></code></pre></div>
</section>
<section id="binary-installed-form" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<h5 class="anchored" data-anchor-id="binary-installed-form">Binary (installed) form</h5>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">file.txt</span>
<span id="cb32-2">CITATION</span>
<span id="cb32-3">extdata/</span>
<span id="cb32-4">  └── my_data.csv</span></code></pre></div>
</section>
</div>
</div>
<p>The neat thing about the <code>inst/</code> folder is that after we’ve loaded and installed our package, we can access the files in <code>inst/extdata/</code> with the <a href="https://pkgload.r-lib.org/reference/system.file.html"><code>system.file()</code> function</a>:</p>
<p>If I want to test functions in <code>duap</code> using <code>movies.RData</code> (or another dataset), those should be placed in <code>inst/extdata/</code></p>
<section id="inst" class="level3">
<h3 class="anchored" data-anchor-id="inst">inst/</h3>
<p>A great way to understand what files are available in <code>inst/</code> when your package is to pass <code>system.file()</code> to <code>fs::dir_tree()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrap this in a folder tree</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duap"</span>))</span></code></pre></div>
</div>
<div class="cell">
<details>
<summary>expand to see inst/ folder contents</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/path/to/installed/package/duap</span></span>
<span id="cb34-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> DESCRIPTION</span>
<span id="cb34-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> INDEX</span>
<span id="cb34-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> LICENSE</span>
<span id="cb34-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> Meta</span>
<span id="cb34-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── Rd.rds</span>
<span id="cb34-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── data.rds</span>
<span id="cb34-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── features.rds</span>
<span id="cb34-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── hsearch.rds</span>
<span id="cb34-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── links.rds</span>
<span id="cb34-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── nsInfo.rds</span>
<span id="cb34-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── package.rds</span>
<span id="cb34-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> NAMESPACE</span>
<span id="cb34-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> R</span>
<span id="cb34-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── duap</span>
<span id="cb34-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── duap.rdb</span>
<span id="cb34-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── duap.rdx</span>
<span id="cb34-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> data</span>
<span id="cb34-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── Rdata.rdb</span>
<span id="cb34-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── Rdata.rds</span>
<span id="cb34-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── Rdata.rdx</span>
<span id="cb34-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> extdata</span>
<span id="cb34-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── movies.RData</span>
<span id="cb34-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> help</span>
<span id="cb34-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── AnIndex</span>
<span id="cb34-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── aliases.rds</span>
<span id="cb34-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── duap.rdb</span>
<span id="cb34-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── duap.rdx</span>
<span id="cb34-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── figures</span>
<span id="cb34-30"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── paths.rds</span>
<span id="cb34-31"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> html</span>
<span id="cb34-32">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> 00Index.html</span>
<span id="cb34-33">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> R.css</span></code></pre></div>
</details>
</div>
<p>The <code>system.file()</code> function will show me the path to the locally installed version of the package (hence the <code>/path/to/installed/package/</code> at the beginning of the path).</p>
<p>The <code>inst/exdata/</code> folder comes in handy for adding example data, but it’s also useful for application development (more on that later).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="The `inst/` folder">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The <code>inst/</code> folder
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>Take a look at the <code>inst/extdata/</code> folder <a href="https://github.com/tidyverse/readr/blob/5ac729aa9a70fef297a634d2332ff8ff1af874fb/R/example.R"><code>readr::readr_example()</code></a> function to understand more about how this works.</p>
</div>
</div>
</div>
<section id="recap-data-and-installed-files" class="level4">
<h4 class="anchored" data-anchor-id="recap-data-and-installed-files"><strong>Recap: data and installed files</strong></h4>
<p>R Packages have a consistent and standardized way of storing data, and have designated locations for internal and external data.</p>
<div id="fig-pkg-data" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/pkg-data.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;7: Package data folders</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="documentation" class="level2">
<h2 class="anchored" data-anchor-id="documentation">Documentation</h2>
<p>Function documentation is handled with the <code>R/</code> folder and <code>roxygen2</code> comments/tags, but <code>duap</code> needs a <code>README</code> file, and a place for long-form documentation. Fortuntely, <a href="https://rmarkdown.rstudio.com/">RMarkdown</a> handles each of these well:</p>
<section id="use_readme_rmd" class="level3">
<h3 class="anchored" data-anchor-id="use_readme_rmd">use_readme_rmd()</h3>
<p>I can create a <code>README</code> file using <a href="https://usethis.r-lib.org/reference/use_readme_rmd.html"><code>usethis::use_readme_md()</code></a> or <a href="https://usethis.r-lib.org/reference/use_readme_rmd.html"><code>usethis::use_readme_rmd()</code></a></p>
<ul>
<li><p>I prefer the <code>.Rmd</code> file because it comes with executable code chunks.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_readme_rmd</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">✔ Setting active project to '/Users/mjfrigaard/projects/duap'</span>
<span id="cb36-2">✔ Writing 'README.Rmd'</span>
<span id="cb36-3">✔ Adding '^README\\.Rmd$' to '.Rbuildignore'</span>
<span id="cb36-4">• Modify 'README.Rmd'</span>
<span id="cb36-5">• Update 'README.Rmd' to include installation instructions.</span>
<span id="cb36-6">✔ Writing '.git/hooks/pre-commit'</span></code></pre></div>
<ul>
<li>When I knit <code>README.Rmd</code>, it automatically generates the <code>README.md</code> for the package.</li>
</ul></li>
</ul>
</section>
<section id="use_vignette" class="level3">
<h3 class="anchored" data-anchor-id="use_vignette">use_vignette()</h3>
<p>For long-form documentation I can use <a href="https://r-pkgs.org/vignettes.html#introduction">vignettes.</a></p>
<ul>
<li><p>Vignettes can be created with <a href="https://usethis.r-lib.org/reference/use_vignette.html"><code>usethis::use_vignette()</code></a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_vignette</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duap"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">✔ Adding 'knitr' to Suggests field in DESCRIPTION</span>
<span id="cb38-2">✔ Setting VignetteBuilder field in DESCRIPTION to 'knitr'</span>
<span id="cb38-3">✔ Adding 'inst/doc' to '.gitignore'</span>
<span id="cb38-4">✔ Creating 'vignettes/'</span>
<span id="cb38-5">✔ Adding '*.html', '*.R' to 'vignettes/.gitignore'</span>
<span id="cb38-6">✔ Adding 'rmarkdown' to Suggests field in DESCRIPTION</span>
<span id="cb38-7">✔ Writing 'vignettes/duap.Rmd'</span>
<span id="cb38-8">• Modify 'vignettes/duap.Rmd'</span></code></pre></div></li>
</ul>
<p>Vignettes are also written in RMarkdown and rendered whenever the package is built/installed.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb39-1">duap/</span>
<span id="cb39-2">    └── vignettes/</span>
<span id="cb39-3">            └── duap.Rmd</span>
<span id="cb39-4"></span>
<span id="cb39-5">1 directory, 1 file</span></code></pre></div>
<p>By combining <code>rmarkdown</code> and <code>knitr</code>, R packages have a documentation framework that has the added benefit of being somewhat fool-proof: vignettes have to successfully render for the package to be installed.</p>
<div id="fig-build-vignettes" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/install-vignettes.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;8: Package vignettes</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Vignette figures
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<p>Images in vignettes are kept in <code>man/figures/</code></p>
<pre>duap/
  ├── vignettes/
  │       └── duap.Rmd
  └── man/
      └── figures/
          └── duap-img-1.png
</pre>
</div>
</div>
</div>
</div>
<section id="recap-documentation" class="level4">
<h4 class="anchored" data-anchor-id="recap-documentation"><strong>Recap: documentation</strong></h4>
<p>The vignettes folder will long-form documentation about how the application works, use cases, and features (and <code>roxygen2</code> will document each function).</p>
<div id="fig-pkg-docs" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/pkg-docs.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;9: Documentation in <code>README</code> and <code>vignettes/</code></figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="tests" class="level2">
<h2 class="anchored" data-anchor-id="tests">Tests</h2>
<p>Testing is an important part of any package, and apps tend to require additional tests (especially when they’re moving from ‘development’ into ‘production’ environments).</p>
<section id="use_testthat" class="level3">
<h3 class="anchored" data-anchor-id="use_testthat">use_testthat()</h3>
<p>To apply the testing framework provided by the <a href="https://testthat.r-lib.org/"><code>testthat</code> package.</a> package, I’ll use <code>usethis::use_testthat()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_testthat</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">✔ Adding 'testthat' to Suggests field in DESCRIPTION</span>
<span id="cb41-2">✔ Setting Config/testthat/edition field in DESCRIPTION to '3'</span>
<span id="cb41-3">✔ Creating 'tests/testthat/'</span>
<span id="cb41-4">✔ Writing 'tests/testthat.R'</span>
<span id="cb41-5">• Call `use_test()` to initialize a basic test file and open it for editing.</span></code></pre></div>
<p>This creates a new <code>tests/</code> folder, with a <code>testthat/</code> sub-folder and script.</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb42-1">duap/</span>
<span id="cb42-2">    └── tests/</span>
<span id="cb42-3">          ├── testthat/</span>
<span id="cb42-4">          └── testthat.R</span>
<span id="cb42-5">        </span>
<span id="cb42-6">2 directories, 1 file</span></code></pre></div>
<section id="writing-tests" class="level4">
<h4 class="anchored" data-anchor-id="writing-tests">Writing tests</h4>
<p><a href="https://testthat.r-lib.org/"><code>testthat</code></a> is designed for unit tests (i.e., testing each functional ‘unit’ in the code), but for shiny apps, we need to think beyond standard unit testing. We need to confirm the functions work and return predictable results, but we also need to make sure they play well with each other (integration tests), and that the application can be deployed (system tests).</p>
</section>
<section id="recap-testing" class="level4">
<h4 class="anchored" data-anchor-id="recap-testing"><strong>Recap: testing</strong></h4>
<p>Testing is well described in the <a href="https://shiny.rstudio.com/articles/testing-overview.html">shiny documentation</a> and in <a href="https://mastering-shiny.org/scaling-testing.html">Mastering Shiny</a>. Generally speaking, unit tests are performed with <a href="https://testthat.r-lib.org/"><code>testthat</code></a>, and module testing can be done with <a href="https://shiny.rstudio.com/reference/shiny/1.7.0/testserver"><code>shiny::testServer()</code></a>. To test the full application (or a specific behavior) use the <a href="https://rstudio.github.io/shinytest2/"><code>shinytest2</code></a> package.</p>
<div id="fig-pkg-tests" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/pkg-tests.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;10: Testing framework from <code>testthat</code></figcaption>
</figure>
</div>
</section>
</section>
</section>
</section>
<section id="use" class="level1">
<h1>Use</h1>
<p>Using an app built as a package is similar to using any R function we’ve loaded from a package. After successfully loading, documenting, and installing the package, I can run the app by loading the <code>duap</code> (with <code>library(duap)</code>) and <code>moviesApp()</code>:</p>
<div id="fig-duap-inst-app" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/duap-app.png" style="width:100.0%;height:100.0%" class="figure-img"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;11: <code>duap::moviesApp()</code></figcaption>
</figure>
</div>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>I’ve skipped over some important development steps covered in <a href="https://r-pkgs.org/">R packages</a> (license, using Git/GitHub, code coverage, NEWS, etc.), and you should bookmark this text as you start developing shiny app-packages. Hopefully this post has demonstrated that by building shiny apps as R packages, a suite of developer tools are available in the RStudio IDE (and the application files and folders have a uniform structure).</p>
<p><code>duap</code> is a substantial improvement over a vanilla shiny application–the app-package holds the code, data, documentation, <em>and</em> includes explicit information on the dependencies and requirements (in the <code>DESCRIPTION</code> and <code>NAMESPACE</code>).</p>


</section>
</section>

 ]]></description>
  <category>shiny</category>
  <category>usethis</category>
  <category>devtools</category>
  <category>packages</category>
  <guid>https://mjfrigaard.github.io/posts/duap/index.html</guid>
  <pubDate>Fri, 10 Mar 2023 08:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/duap/image.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title></title>
  <link>https://mjfrigaard.github.io/posts/how-to-quarto/index.html</link>
  <description><![CDATA[ 



<section id="what-is-quarto" class="level1 page-columns page-full">
<h1>What is <code>quarto</code>?</h1>
<p><code>quarto</code> combines metadata, markup syntax, and executable code to create reproducible reports, slide decks, websites, dashboards, etc.</p>
<section id="using-quarto" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-quarto">Using <code>quarto</code></h2>
<p>I was an early adopter of R Markdown because I immediately fell in love with how I had a single location for my thoughts, code, output tables and figures, and that I could quickly change the output format. R markdown has helped me create reports, blogs, slide decks, and dashboards–all without having to leave the comfort of the IDE.</p>
<p>Then <a href="https://quarto.org/">Posit releases <code>quarto</code></a>, a new ‘open-source scientific and technical publishing system,’ and I’ll admit it–I was equally excited and hesitant. Should I take the time to learn a new tool, especially when I already know how amazing R Markdown is?</p>
<p>The fact that you’re reading this on a <code>quarto</code> blog tells you the answer: <strong>learning <code>quarto</code> is worth your time.</strong></p>
<p><code>quarto</code> and R markdown documents both share a similar structure: both start with a YAML header, use markdown formatted text, and include executable code chunks. The output is a wide range of beautifully rendered target documents (which includes <code>.html</code>, <code>.pdf</code>, <code>.docx</code>, and more!)</p>
<p>In this post I’ll cover some of my initial impressions, similarities to R Markdown, and some <code>quarto</code> projects I’ve created.</p>
<div class="column-screen-inset quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/input-quarto.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/rendered-quarto.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>I’ve described each section below and included figures to connect what is written to the rendered output.</p>
<section id="yaml-header" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="yaml-header"><code>YAML</code> header</h3>

<div class="no-row-height column-margin column-container"><div class="">
<div style="font-size: 0.95em; color: #1e83c8;">
<p><em><code>YAML</code> is a human friendly data serialization standard for all programming languages, so it’s ideal for storing metadata</em></p>
</div>
</div></div><div style="font-size: 0.70em;">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How to build a blog with quarto"</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Martin Frigaard"</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-23"</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categories</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> analysis</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image.png"</span></span></code></pre></div>
</div>
<div id="fig-yaml-render" class="quarto-figure quarto-figure-center column-body-outset anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/quarto-01.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;1: <code>YAML</code> output</figcaption>
</figure>
</div>
<p>Below is the YAML header used for an example <code>.Qmd</code> blog post. As you can see, many of the same arguments from R Markdown documents are used (<code>title:</code>, <code>author:</code>, <code>date:</code>), and we still provide <code>key: "value"</code> pairs. A few specific keys are included if you’re writing a blog post:</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/site.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption class="figure-caption"><code>image:</code> rendered on landing page</figcaption>
</figure>
</div>
</div></div><ul>
<li><code>categories:</code> creates tags for blog post topics<br>
</li>
<li><code>image:</code> the thumbnail image rendered on the main page</li>
</ul>
</section>
</section>
<section id="markdown" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="markdown">Markdown</h2>
<p>The example blog post includes a level 2 header (<code>##</code>), formatted text, and text with a figure reference (<em>below the code chunk</em>).</p>
<div id="fig-markdown-render" class="quarto-figure quarto-figure-center column-body-outset anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/quarto-02.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;2: <code>markdown</code> output</figcaption>
</figure>
</div>
<p><code>quarto</code> figure cross-referencing:</p>
<ol type="1">
<li>The <code>#| label: &lt;NAME&gt;</code> value is used to build an index for the plot<br>
</li>
<li>In the markdown text, the figure is referenced with <code>@&lt;NAME&gt;</code><br>
</li>
<li>In the rendered text, the figure is given a name and number (<strong>Figure 1</strong>).</li>
</ol>
<p><code>quarto</code>’s method for cross-referencing is seamless, and appears to be much easier than the <a href="https://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.html">R Markdown method</a>, which takes a few extra steps to setup.</p>
<p>Unlike R Markdown, the tab-completion will also save me from confusing <code>fig-height</code> and <code>fig-width</code> with <code>out-height</code> and <code>out-width</code> (which can take percentages as a character string, like <code>"80%"</code>).</p>
</section>
<section id="code-chunks" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="code-chunks">Code chunks</h2>
<p><code>quarto</code> chunks have the same components as <code>.Rmd</code> code chunks, but with a slightly different structure:</p>
<ul>
<li><code>knitr</code> options (i.e., <code>eval=TRUE</code>) are included in the curly brackets of the top fence:</li>
</ul>
<div style="font-size: 0.70em;">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">```{r eval=TRUE}</span>
<span id="cb2-2">library(rmarkdown)</span>
<span id="cb2-3">```</span></code></pre></div>
</div>
<p>In <code>quarto</code>, all options are included in the between the fences.</p>
<div style="font-size: 0.70em;">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">```{r}</span>
<span id="cb3-2">#| eval: true</span>
<span id="cb3-3">```</span></code></pre></div>
</div>
<p>You might have noticed the case of <code>TRUE</code>/<code>FALSE</code> have changed, but I’ve found the tab-completion comes to the rescue before I can make a mistake:</p>
<div id="fig-tab-completion" class="quarto-layout-panel">
<figure class="figure">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-eval" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/eval-tab-comp.png" class="img-fluid figure-img" data-ref-parent="fig-tab-completion"></p>
<figcaption class="figure-caption">(a) options tab completion</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 50.0%;justify-content: center;">
<div id="fig-tf" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/tf-tab-comp.png" class="img-fluid figure-img" data-ref-parent="fig-tab-completion"></p>
<figcaption class="figure-caption">(b) TRUE/FALSE tab-completion</figcaption>
</figure>
</div>
</div>
</div>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: Tab-completion</figcaption><p></p>
</figure>
</div>
<p>Many of the same options exist, with some great additions.</p>
<ol type="1">
<li><code>code-fold:</code> it’s nice have this option at each chunk in a single argument (in R Markdown selectively folding/showing code chunks is <a href="https://bookdown.org/yihui/rmarkdown-cookbook/fold-show.html">more involved</a>)<br>
</li>
<li><code>fig-cap:</code> and <code>fig-cap-location:</code> we can place a figure caption (<code>fig-cap:</code>, text string) in one of three locations in the document: <code>top</code>, <code>bottom</code>, or <code>margin</code></li>
</ol>
<div id="fig-code-render" class="quarto-figure quarto-figure-center column-body-outset anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/quarto-03.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;4: <code>Code</code> output</figcaption>
</figure>
</div>
<p>We can also use the label to reference (like we did in Figure&nbsp;1)</p>
</section>
<section id="quick-deployment-publishing" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="quick-deployment-publishing">Quick deployment &amp; publishing</h2>
<p>Maybe the greatest thing about <code>quarto</code> is that <strong>it just works, right out of the box</strong>. I love working in the IDE, but I was able to open this document in Sublime Text, run the <code>quarto preview</code> command, and bam:</p>
<div id="fig-st3-preview" class="quarto-figure quarto-figure-center column-body-outset anchored">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/how-to-quarto/st3-quarto.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
<figcaption class="figure-caption">Figure&nbsp;5: Sublime text with <code>quarto preview</code></figcaption>
</figure>
</div>
<p>If you’re publishing a blog using GitHub pages, deployment is also fairly quick. In a Terminal (outside of the IDE). After we’ve added all the files (and included a <code>.nojekyll</code> file), we want to confirm the changes have been committed to the <a href="https://quarto.org/docs/publishing/github-pages.html#publish-command">current working branch</a></p>
<div style="font-size: 0.70em;">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> .nojekyll</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"new .nojekyll"</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> status</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">On</span> branch main</span>
<span id="cb4-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> branch is up to date with <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'origin/main'</span>.</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nothing</span> to commit, working tree clean</span></code></pre></div>
</div>
<p>Now we create a <code>gh-pages</code> <code>orphan</code> branch, reset, then commit and push the empty <code>gh-pages</code> branch.</p>
<div style="font-size: 0.70em;">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> checkout <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--orphan</span> gh-pages</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Switched</span> to a new branch <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gh-pages'</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> reset <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--hard</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--allow-empty</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initialising gh-pages branch"</span></span></code></pre></div>
</div>
<div style="font-size: 0.70em;">
<pre><code>[gh-pages (root-commit) 8bd928d] Initialising gh-pages branch
git push origin gh-pages
Enumerating objects: 2, done.
Counting objects: 100% (2/2), done.
Writing objects: 100% (2/2), 181 bytes | 181.00 KiB/s, done.
Total 2 (delta 0), reused 0 (delta 0), pack-reused 0
remote: 
remote: Create a pull request for 'gh-pages' on GitHub by visiting:
remote:      https://github.com/mjfrigaard/mjfrigaard.github.io/pull/new/gh-pages
remote: 
To github.com:mjfrigaard/mjfrigaard.github.io.git
 * [new branch]      gh-pages -&gt; gh-pages</code></pre>
</div>
<p><a href="https://quarto.org/docs/publishing/github-pages.html#publishing">Publish from Terminal</a> using <code>quarto publish gh-pages</code></p>
<div style="font-size: 0.70em;">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> publish gh-pages</span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Update site at https://mjfrigaard.github.io/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Y/n</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">›</span> </span></code></pre></div>
</div>
<p>Enter <code>y</code>, <code>Yes</code>, or <code>Y</code></p>
<div style="font-size: 0.70em;">
<pre><code>Yes
From github.com:mjfrigaard/mjfrigaard.github.io
 * branch            gh-pages   -&gt; FETCH_HEAD
Rendering for publish:

[1/4] posts/welcome/index.qmd
[2/4] posts/how-to-quarto/index.qmd
[3/4] index.qmd
[4/4] about.qmd

branch 'gh-pages' set up to track 'origin/gh-pages'.
HEAD is now at 4c6a0cd Built site for gh-pages
Preparing worktree (resetting branch 'gh-pages'; was at 4c6a0cd)
[gh-pages 21e966c] Built site for gh-pages
 6 files changed, 17 insertions(+), 22 deletions(-)
origin  git@github.com:mjfrigaard/mjfrigaard.github.io.git (fetch)
origin  git@github.com:mjfrigaard/mjfrigaard.github.io.git (push)
To github.com:mjfrigaard/mjfrigaard.github.io.git
   4c6a0cd..21e966c  HEAD -&gt; gh-pages</code></pre>
</div>
</section>
<section id="some-quarto-projects" class="level2">
<h2 class="anchored" data-anchor-id="some-quarto-projects">Some <code>quarto</code> projects</h2>
<ul>
<li><strong>Slides:</strong> I use <code>quarto</code> to create my presentation for ODSC west, and it’s a great comparison a slight variation of the same talk I gave at ODSC east (written in R Markdown)
<ul>
<li><a href="https://mjfrigaard.github.io/odsc-west-ggplot2-2022/">ODSC West (quarto website)</a>
<ul>
<li><a href="https://mjfrigaard.github.io/odsc-west-ggplot2-2022/slides/slides.html#/title-slide">Slides</a><br>
</li>
</ul></li>
<li><a href="https://mjfrigaard.github.io/odsc-east-ggplot2-2022/">ODSC East (R markdown website)</a>
<ul>
<li><a href="https://mjfrigaard.github.io/odsc-east-ggplot2-2022/ggplot2-slides-01.html#1">Slides part 1</a><br>
</li>
<li><a href="https://mjfrigaard.github.io/odsc-east-ggplot2-2022/ggplot2-slides-02.html#1">Slides part 2</a>
<hr></li>
</ul></li>
</ul></li>
<li><strong>Book:</strong> The <code>ggplot2</code> graph gallery is also availabe as <a href="https://mjfrigaard.github.io/fm-ggp2/">a <code>quarto</code> book</a> (with slightly more details and graphs)</li>
</ul>
<p>Each project is managed using a <code>_quarto.yml</code> configuration file (the ODSC west website/slides is listed below):</p>
<div style="font-size: 0.70em;">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> website</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">output-dir</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> docs</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ODSC-ggplot2-west"</span></span>
<span id="cb9-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> index.qmd</span></span>
<span id="cb9-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Home</span></span>
<span id="cb9-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> about.qmd</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> About</span></span>
<span id="cb9-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">right</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> slides/slides.qmd</span></span>
<span id="cb9-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Slides</span></span>
<span id="cb9-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> github</span></span>
<span id="cb9-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/mjfrigaard/odsc-west-ggplot2-2022</span></span>
<span id="cb9-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> twitter</span></span>
<span id="cb9-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://twitter.com/mjfrigaard</span></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dark</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cyborg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> styles.scss</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">light</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">minty</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> styles-dark.scss</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">css</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> styles.css</span></span>
<span id="cb9-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<p>As you can see, the <code>_quarto.yml</code> defines the type of the project (<code>type:</code>, <code>project:</code>), sets the location of the output files (<code>output-dir:</code>), outlines the sections of the website (<code>title:</code>, <code>navbar:</code>), and sets some of the target document format options (<code>theme:</code>, <code>css:</code>, <code>toc:</code>).</p>
</section>
<section id="in-closing" class="level2">
<h2 class="anchored" data-anchor-id="in-closing">In closing</h2>
<p>I’m still learning <code>quarto</code>, so I’m just scrathing the surface of it’s abilities. However, I was able to spin up this website following the documentation in about an hour, so I’m definitely going to stick with it (early wins are important!)</p>


</section>
</section>

 ]]></description>
  <guid>https://mjfrigaard.github.io/posts/how-to-quarto/index.html</guid>
  <pubDate>Sun, 09 Jul 2023 01:21:58 GMT</pubDate>
</item>
</channel>
</rss>
