<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>@mjfrigaard</title>
<link>https://mjfrigaard.github.io/</link>
<atom:link href="https://mjfrigaard.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Martin Frigaard&#39;s personal website</description>
<image>
<url>https://mjfrigaard.github.io/profile.png</url>
<title>@mjfrigaard</title>
<link>https://mjfrigaard.github.io/</link>
</image>
<generator>quarto-1.6.37</generator>
<lastBuildDate>Mon, 02 Jun 2025 07:00:00 GMT</lastBuildDate>
<item>
  <title>Shiny Reports</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/shiny-reports/</link>
  <description><![CDATA[ 





<div class="cell" data-layout-align="center">
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">ALERT!</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>This post is currently under development–thank you for your patience.</p>
</div>
</div>
</div>
</div>
</div>
<p>This post covers parameterized reports in Shiny applications (via R Markdown and/or Quarto). Downloadable reports are a great feature to include in your application, and I’ve put together some tips I’ve learned by adding this feature to multiple applications.</p>
<section id="shrapports" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="shrapports">shrapports</h2>
<p>To help demonstrate a variety of report options, I’ve written the <a href="https://github.com/mjfrigaard/shrapports"><code>shrapports</code> R package</a>, which contains a Shiny application with a variety of plot outputs.</p>
<section id="package-structure" class="level3">
<h3 class="anchored" data-anchor-id="package-structure">Package structure</h3>
<p>I’ve displayed the R folder for <code>shrapports</code> below. The package includes three modules, UI and server functions, a handful of utility functions, and a standalone app function.</p>
<div class="sourceCode" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode default code-annotation-code code-with-copy code-annotated"><code class="sourceCode default"><span id="annotated-cell-1-1">shrapports/</span>
<span id="annotated-cell-1-2">R/</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-3" class="code-annotation-target">├── app_server.R</span>
<span id="annotated-cell-1-4">├── app_ui.R</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-5" class="code-annotation-target">├── get_tt_data.R</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-6" class="code-annotation-target">├── inspect_plot.R</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4">4</button><span id="annotated-cell-1-7" class="code-annotation-target">├── launch_app.R</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="5">5</button><span id="annotated-cell-1-8" class="code-annotation-target">├── logr_msg.R</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="6">6</button><span id="annotated-cell-1-9" class="code-annotation-target">├── mod_report.R</span>
<span id="annotated-cell-1-10">├── mod_table.R</span>
<span id="annotated-cell-1-11">├── mod_var_input.R</span>
<span id="annotated-cell-1-12">└── mod_viz.R</span>
<span id="annotated-cell-1-13"></span>
<span id="annotated-cell-1-14">1 directory, 10 files</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="3,4" data-code-annotation="1">App functions</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="5" data-code-annotation="2">Data utility function<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="6" data-code-annotation="3">Plot utility function<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="7" data-code-annotation="4">Standalone app function</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="8" data-code-annotation="5">Logging function</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="9,10,11,12" data-code-annotation="6">Shiny modules</span>
</dd>
</dl>
<p>Below is an abstract syntax tree<sup>1</sup> of the application’s functions:</p>
<div class="cell" data-layout-align="center">
<pre><code>█─launch_app 
├─█─app_ui 
│ ├─█─mod_var_input_ui 
│ ├─█─mod_viz_ui 
│ └─█─mod_table_ui 
└─█─app_server 
  ├─█─mod_var_input_server 
  │ └─█─get_tt_data 
  ├─█─mod_viz_server 
  │ └─█─inspect_plot 
  └─█─mod_table_server </code></pre>
</div>
</section>
<section id="tidytuesday-data" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="tidytuesday-data">TidyTuesday data</h3>
<p>The <code>get_tt_data()</code> function can be used to access the data from teh <a href="https://github.com/rfordatascience/tidytuesday">TidyTuesday</a> project.<sup>2</sup></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">pkgs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ttmeta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesdayR"</span>)</span>
<span id="cb2-2">pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_install</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkgs)</span></code></pre></div>
</div>
<p>A demo of the <code>get_tt_data()</code> function is below:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><em>The <code>ttd</code> lists are named according to the number of datasets they include.</em></p>
</div></div><div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">ttd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_tt_data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix Titles"</span>)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<details class="code-fold">
<summary>show/hide ttd structure</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(ttd)</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of 1</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  $ netflix_titles.csv: spc_tbl_ [7,787 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ show_id     : chr [1:7787] "s1" "s2" "s3" "s4" ...</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ type        : chr [1:7787] "TV Show" "Movie" "Movie" "Movie" ...</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ title       : chr [1:7787] "3%" "7:19" "23:59" "9" ...</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ director    : chr [1:7787] NA "Jorge Michel Grau" "Gilbert Chan" "Shane Acker" ...</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ cast        : chr [1:7787] "João Miguel, Bianca Comparato, Michel Gomes, Rodolfo Valente, Vaneza Oliveira, Rafael Lozano, Viviane Porto, Me"| __truncated__ "Demián Bichir, Héctor Bonilla, Oscar Serrano, Azalia Ortiz, Octavio Michel, Carmen Beato" "Tedd Chan, Stella Chung, Henley Hii, Lawrence Koh, Tommy Kuan, Josh Lai, Mark Lee, Susan Leong, Benjamin Lim" "Elijah Wood, John C. Reilly, Jennifer Connelly, Christopher Plummer, Crispin Glover, Martin Landau, Fred Tatasc"| __truncated__ ...</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ country     : chr [1:7787] "Brazil" "Mexico" "Singapore" "United States" ...</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ date_added  : chr [1:7787] "August 14, 2020" "December 23, 2016" "December 20, 2018" "November 16, 2017" ...</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ release_year: num [1:7787] 2020 2016 2011 2009 2008 ...</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ rating      : chr [1:7787] "TV-MA" "TV-MA" "R" "PG-13" ...</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ duration    : chr [1:7787] "4 Seasons" "93 min" "78 min" "80 min" ...</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ listed_in   : chr [1:7787] "International TV Shows, TV Dramas, TV Sci-Fi &amp; Fantasy" "Dramas, International Movies" "Horror Movies, International Movies" "Action &amp; Adventure, Independent Movies, Sci-Fi &amp; Fantasy" ...</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ description : chr [1:7787] "In a future where the elite inhabit an island paradise far from the crowded slums, you get one chance to join t"| __truncated__ "After a devastating earthquake hits Mexico City, trapped survivors from all walks of life wait to be rescued wh"| __truncated__ "When an army recruit is found dead, his fellow soldiers are forced to confront a terrifying secret that's haunt"| __truncated__ "In a postapocalyptic world, rag-doll robots hide in fear from dangerous machines out to exterminate them, until"| __truncated__ ...</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "spec")=</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. cols(</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   show_id = col_character(),</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   type = col_character(),</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   title = col_character(),</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   director = col_character(),</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   cast = col_character(),</span></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   country = col_character(),</span></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   date_added = col_character(),</span></span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   release_year = col_double(),</span></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   rating = col_character(),</span></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   duration = col_character(),</span></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   listed_in = col_character(),</span></span>
<span id="cb4-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   description = col_character()</span></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. )</span></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb4-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  - attr(*, "clean_title")= chr "netflix_titles"</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ttd2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_tt_data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Space Launches"</span>)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<details class="code-fold">
<summary>show/hide ttd2 structure</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(ttd2)</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of 2</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  $ agencies.csv: spc_tbl_ [74 × 19] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ agency            : chr [1:74] "RVSN" "UNKS" "NASA" "USAF" ...</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ count             : num [1:74] 1528 904 469 388 258 ...</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ ucode             : chr [1:74] "RVSN" "GUKOS" "NASA" "USAF" ...</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ state_code        : chr [1:74] "SU" "SU" "US" "US" ...</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ type              : chr [1:74] "O/LA" "O/LA" "O/LA/LV/PL/S" "O/LA/S" ...</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ class             : chr [1:74] "D" "D" "C" "D" ...</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ tstart            : chr [1:74] "1960" "1986 Apr 24" "1958 Oct  1" "1947 Sep 18" ...</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ tstop             : chr [1:74] "1991 Dec" "1991" "-" "-" ...</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ short_name        : chr [1:74] "RVSN" "UNKS" "NASA" "USAF" ...</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ name              : chr [1:74] "Rakentiye Voiska Strategicheskogo Naznacheniye" "Upravleniye Nachalnika Kosmicheskikh Sredstv" "National Aeronautics and Space Administration" "United States Air Force" ...</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ location          : chr [1:74] "Mosvka?" "Moskva" "Washington, D.C." "Washington, DC-Pentagon" ...</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ longitude         : chr [1:74] "-" "-" "-" "-" ...</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ latitude          : chr [1:74] "-" "-" "-" "-" ...</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ error             : chr [1:74] "-" "-" "-" "-" ...</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ parent            : chr [1:74] "-" "MO" "-" "-" ...</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ short_english_name: chr [1:74] "-" "-" "-" "-" ...</span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ english_name      : chr [1:74] "Strategic Rocket Forces" "-" "-" "-" ...</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ unicode_name      : chr [1:74] "Ракетные войска стратегического назначения" "Управление начальника космических средств МО СССР" "National Aeronautics and Space Administration" "United States Air Force" ...</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ agency_type       : chr [1:74] "state" "state" "state" "state" ...</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "spec")=</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. cols(</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   agency = col_character(),</span></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   count = col_double(),</span></span>
<span id="cb6-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   ucode = col_character(),</span></span>
<span id="cb6-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   state_code = col_character(),</span></span>
<span id="cb6-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   type = col_character(),</span></span>
<span id="cb6-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   class = col_character(),</span></span>
<span id="cb6-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   tstart = col_character(),</span></span>
<span id="cb6-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   tstop = col_character(),</span></span>
<span id="cb6-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   short_name = col_character(),</span></span>
<span id="cb6-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   name = col_character(),</span></span>
<span id="cb6-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   location = col_character(),</span></span>
<span id="cb6-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   longitude = col_character(),</span></span>
<span id="cb6-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   latitude = col_character(),</span></span>
<span id="cb6-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   error = col_character(),</span></span>
<span id="cb6-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   parent = col_character(),</span></span>
<span id="cb6-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   short_english_name = col_character(),</span></span>
<span id="cb6-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   english_name = col_character(),</span></span>
<span id="cb6-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   unicode_name = col_character(),</span></span>
<span id="cb6-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   agency_type = col_character()</span></span>
<span id="cb6-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. )</span></span>
<span id="cb6-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb6-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  $ launches.csv: spc_tbl_ [5,726 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb6-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ tag        : chr [1:5726] "1967-065" "1967-080" "1967-096" "1968-042" ...</span></span>
<span id="cb6-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ JD         : num [1:5726] 2439671 2439726 2439775 2440000 2440153 ...</span></span>
<span id="cb6-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ launch_date: Date[1:5726], format:  ...</span></span>
<span id="cb6-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ launch_year: num [1:5726] 1967 1967 1967 1968 1968 ...</span></span>
<span id="cb6-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ type       : chr [1:5726] "Thor Burner 2" "Thor Burner 2" "Thor Burner 2" "Thor Burner 2" ...</span></span>
<span id="cb6-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ variant    : chr [1:5726] NA NA NA NA ...</span></span>
<span id="cb6-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ mission    : chr [1:5726] "Secor Type II S/N 10" "DAPP 3419" "DAPP 4417" "DAPP 5420" ...</span></span>
<span id="cb6-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ agency     : chr [1:5726] "US" "US" "US" "US" ...</span></span>
<span id="cb6-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ state_code : chr [1:5726] "US" "US" "US" "US" ...</span></span>
<span id="cb6-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ category   : chr [1:5726] "O" "O" "O" "O" ...</span></span>
<span id="cb6-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ agency_type: chr [1:5726] "state" "state" "state" "state" ...</span></span>
<span id="cb6-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "spec")=</span></span>
<span id="cb6-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. cols(</span></span>
<span id="cb6-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   tag = col_character(),</span></span>
<span id="cb6-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   JD = col_double(),</span></span>
<span id="cb6-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   launch_date = col_date(format = ""),</span></span>
<span id="cb6-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   launch_year = col_double(),</span></span>
<span id="cb6-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   type = col_character(),</span></span>
<span id="cb6-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   variant = col_character(),</span></span>
<span id="cb6-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   mission = col_character(),</span></span>
<span id="cb6-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   agency = col_character(),</span></span>
<span id="cb6-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   state_code = col_character(),</span></span>
<span id="cb6-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   category = col_character(),</span></span>
<span id="cb6-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   agency_type = col_character()</span></span>
<span id="cb6-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. )</span></span>
<span id="cb6-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb6-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  - attr(*, "clean_title")= chr "space_launches"</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">ttd3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_tt_data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moore’s Law"</span>)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<details class="code-fold">
<summary>show/hide ttd3 structure</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(ttd3)</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of 3</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  $ cpu.csv: spc_tbl_ [176 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ processor           : chr [1:176] "MP944 (20-bit, 6-chip)" "Intel 4004 (4-bit, 16-pin)" "Intel 8008 (8-bit, 18-pin)" "NEC μCOM-4 (4-bit)" ...</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ transistor_count    : num [1:176] NA 2250 3500 2500 2800 ...</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ date_of_introduction: num [1:176] 1970 1971 1972 1973 1973 ...</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ designer            : chr [1:176] "Garrett AiResearch" "Intel" "Intel" "NEC" ...</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ process             : num [1:176] NA 10000 10000 7500 6000 10000 6000 6000 8000 8000 ...</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ area                : num [1:176] NA 12 14 NA 32 12 16 20 11 21 ...</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "spec")=</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. cols(</span></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   processor = col_character(),</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   transistor_count = col_double(),</span></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   date_of_introduction = col_double(),</span></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   designer = col_character(),</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   process = col_double(),</span></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   area = col_double()</span></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. )</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  $ gpu.csv: spc_tbl_ [112 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb8-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ processor           : chr [1:112] "µPD7220 GDC" "ARTC HD63484" "YM7101 VDP" "Tom &amp; Jerry" ...</span></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ transistor_count    : num [1:112] 40000 60000 100000 750000 1000000 1000000 1000000 2600000 1200000 1000000 ...</span></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ date_of_introduction: num [1:112] 1982 1984 1988 1993 1994 ...</span></span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ designer_s          : chr [1:112] "NEC" "Hitachi" "Sega" "Flare" ...</span></span>
<span id="cb8-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ manufacturer_s      : chr [1:112] "NEC" "Hitachi" "Yamaha" "IBM" ...</span></span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ process             : num [1:112] 5000 NA NA NA 500 500 500 350 350 500 ...</span></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ area                : num [1:112] NA NA NA NA NA NA 90 81 NA NA ...</span></span>
<span id="cb8-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ ref                 : chr [1:112] "[107]" "[108]" "[109]" "[109]" ...</span></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "spec")=</span></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. cols(</span></span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   processor = col_character(),</span></span>
<span id="cb8-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   transistor_count = col_double(),</span></span>
<span id="cb8-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   date_of_introduction = col_double(),</span></span>
<span id="cb8-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   designer_s = col_character(),</span></span>
<span id="cb8-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   manufacturer_s = col_character(),</span></span>
<span id="cb8-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   process = col_double(),</span></span>
<span id="cb8-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   area = col_double(),</span></span>
<span id="cb8-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   ref = col_character()</span></span>
<span id="cb8-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. )</span></span>
<span id="cb8-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  $ ram.csv: spc_tbl_ [47 × 10] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb8-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ chip_name           : chr [1:47] "N/A" "N/A" "?" "SP95" ...</span></span>
<span id="cb8-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ capacity_bits       : num [1:47] 1 1 8 16 16 NA 256 64 144 256 ...</span></span>
<span id="cb8-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ bit_units           : chr [1:47] "Bits" "Bits" "Bits" "Bits" ...</span></span>
<span id="cb8-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ ram_type            : chr [1:47] "SRAM (cell)" "DRAM (cell)" "SRAM (bipolar)" "SRAM (bipolar)" ...</span></span>
<span id="cb8-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ transistor_count    : num [1:47] 6 1 48 80 96 ...</span></span>
<span id="cb8-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ date_of_introduction: num [1:47] 1963 1965 1965 1965 1966 ...</span></span>
<span id="cb8-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ manufacturer_s      : chr [1:47] "Fairchild" "Toshiba" "SDS, Signetics" "IBM" ...</span></span>
<span id="cb8-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ process             : num [1:47] NA NA NA NA NA NA NA NA NA 12000 ...</span></span>
<span id="cb8-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ area                : num [1:47] NA NA NA NA NA NA NA NA NA NA ...</span></span>
<span id="cb8-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..$ ref                 : chr [1:47] "[162]" "[163][164]" "[162]" "[165]" ...</span></span>
<span id="cb8-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "spec")=</span></span>
<span id="cb8-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. cols(</span></span>
<span id="cb8-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   chip_name = col_character(),</span></span>
<span id="cb8-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   capacity_bits = col_double(),</span></span>
<span id="cb8-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   bit_units = col_character(),</span></span>
<span id="cb8-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   ram_type = col_character(),</span></span>
<span id="cb8-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   transistor_count = col_double(),</span></span>
<span id="cb8-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   date_of_introduction = col_double(),</span></span>
<span id="cb8-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   manufacturer_s = col_character(),</span></span>
<span id="cb8-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   process = col_double(),</span></span>
<span id="cb8-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   area = col_double(),</span></span>
<span id="cb8-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. ..   ref = col_character()</span></span>
<span id="cb8-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   .. .. )</span></span>
<span id="cb8-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb8-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  - attr(*, "clean_title")= chr "moores_law"</span></span></code></pre></div>
</details>
</div>
</section>
<section id="inspect-plots" class="level3">
<h3 class="anchored" data-anchor-id="inspect-plots">Inspect plots</h3>
<p>The <a href="https://github.com/alastairrushworth/inspectdf/tree/master"><code>inspectdf</code> package</a> provides “<em>collection of utilities for columnwise summary, comparison and visualisation of data frames.</em>” I’ve written a wrapper function (<code>inspect_plot()</code>) for handling the ttd lists.</p>
<p><code>inspect_plot()</code> combines the <code>inspectdf::inspect_*()</code> + <code>inspectdf::show_plot()</code> functions and returns the corresponding plot.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inspect_plot</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ttd =</span> ttd, </span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span></span>
<span id="cb9-4">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd_cat-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd_cat-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
</div>
<p>Below is an example of the <code>inspect_imb()</code> + <code>show_plot()</code> functions on <code>ttd2</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inspect_plot</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ttd =</span> ttd2, </span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imb"</span></span>
<span id="cb10-4">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd2_imb-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd2_imb-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
</div>
<p>Below is an example of the <code>inspect_types()</code> + <code>show_plot()</code> functions on <code>ttd3</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inspect_plot</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ttd =</span> ttd3, </span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"types"</span></span>
<span id="cb11-4">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd3_types-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd3_types-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd3_types-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd3_types-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd3_types-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd3_types-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
</div>
<p>If <code>inspect_plot()</code> is passed without any arguments, all plots are returned:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inspect_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ttd =</span> ttd)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd_all-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd_all-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd_all-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd_all-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd_all-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd_all-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd_all-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd_all-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd_all-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd_all-5.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/inspect_plot_ttd_all-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://mjfrigaard.github.io/posts/shiny-reports/index_files/figure-html/inspect_plot_ttd_all-6.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:85.0%"></a></p>
</figure>
</div>
</div>
</div>
<p>In the sections below, we’ll cover how to reliably pass the contents of each module into a downloadable report.</p>
</section>
<section id="modules" class="level3">
<h3 class="anchored" data-anchor-id="modules">Modules</h3>
<p>There are three modules in the application: mod_var_input collects the dataset title, mod_viz displays the graphs, mod_table displays a table of the data used in the graph(s).</p>
</section>
</section>
<section id="report-templates" class="level2">
<h2 class="anchored" data-anchor-id="report-templates">Report templates</h2>
<p>We’ll store the report templates in the <code>inst/</code> folder. Anything in <code>inst/</code> automatically included and accessible from an installed application with <code>system.file()</code>, so it’s a great place for template files.</p>
<section id="templates" class="level3">
<h3 class="anchored" data-anchor-id="templates">Templates</h3>
<p>The templates are accessed with the <code>get_template_path()</code> function.</p>
<p>The <code>get_template_path()</code> function returns the installed location of our templates:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">└── inst</span>
<span id="cb13-2">    └── rmarkdown</span>
<span id="cb13-3">        └── report_template.Rmd</span></code></pre></div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(</span>
<span id="cb14-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># response from function</span></span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_template_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rmarkdown'</span>), </span>
<span id="cb14-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># response from system.file()</span></span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rmarkdown"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"report_template.Rmd"</span>, </span>
<span id="cb14-6">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrapports"</span>))</span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  [1] TRUE</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">└── inst</span>
<span id="cb15-2">    └── quarto</span>
<span id="cb15-3">        └── report_template.qmd</span></code></pre></div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(</span>
<span id="cb16-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># response from function</span></span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_template_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quarto'</span>), </span>
<span id="cb16-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># response from system.file()</span></span>
<span id="cb16-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"report_template.qmd"</span>, </span>
<span id="cb16-6">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrapports"</span>))</span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  [1] TRUE</span></span></code></pre></div>
</div>
</section>
<section id="fallback-templates" class="level3">
<h3 class="anchored" data-anchor-id="fallback-templates">Fallback templates</h3>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">rmd_temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_fallback_template</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rmarkdown"</span>)</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(rmd_temp)</span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  [1] "file4f125a69628c.Rmd"</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">qmd_temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_fallback_template</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto"</span>)</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(qmd_temp)</span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  [1] "file4f1227ef5f57.qmd"</span></span></code></pre></div>
</div>
</section>
</section>
<section id="download-handler" class="level2">
<h2 class="anchored" data-anchor-id="download-handler">Download handler</h2>
<section id="filename" class="level3">
<h3 class="anchored" data-anchor-id="filename">filename</h3>
</section>
<section id="content" class="level3">
<h3 class="anchored" data-anchor-id="content">content</h3>
</section>
<section id="render_report" class="level3">
<h3 class="anchored" data-anchor-id="render_report">render_report()</h3>
<p>The <code>render_report()</code> utility function controls the template used when the download button is clicked:</p>
<div class="cell" data-layout-align="center">
<pre><code>█─mod_report_server 
├─█─render_report 
│ ├─█─get_template_path 
│ ├─█─create_fallback_template 
│ │ ├─█─create_fallback_rmd_template 
│ │ └─█─create_fallback_qmd_template 
│ ├─█─render_rmarkdown_report 
│ └─█─render_quarto_report 
└─█─create_error_report </code></pre>
</div>
</section>
</section>
<section id="reactives-and-params" class="level2">
<h2 class="anchored" data-anchor-id="reactives-and-params">Reactives and params</h2>
<section id="r-markdown-params" class="level3">
<h3 class="anchored" data-anchor-id="r-markdown-params">R Markdown params</h3>
</section>
<section id="quarto-params" class="level3">
<h3 class="anchored" data-anchor-id="quarto-params">Quarto params</h3>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Compliments of the <a href="https://lobstr.r-lib.org/reference/ast.html"><code>lobstr::ast()</code></a> function.↩︎</p></li>
<li id="fn2"><p><code>get_tt_data()</code> joins the metadata from <a href="https://r4ds.github.io/ttmeta/"><code>ttmeta</code></a> with functions from <a href="https://dslc-io.github.io/tidytuesdayR/"><code>tidytuesdayR</code></a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Quarto</category>
  <category>Shiny</category>
  <category>RMarkdown</category>
  <guid>https://mjfrigaard.github.io/posts/shiny-reports/</guid>
  <pubDate>Mon, 02 Jun 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Positron</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/positron-v1/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><a href="img/image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/image.png" class="img-fluid" style="width:70.0%"></a></p>
</div></div><p>I’ve been trying out Posit’s new Positron IDE for a few weeks, so I put together a post covering my initial impressions of developing Shiny apps and R packages.</p>
<section id="why-switch" class="level2">
<h2 class="anchored" data-anchor-id="why-switch">Why switch?</h2>
<p>I use RStudio daily for R development and have no complaints about the IDE’s capabilities. However, I’ve recently started using VS Code for Python and JavaScript. When I heard about Positron, I wondered if it would offer enough overlapping features to allow me to use a single IDE for all three languages.</p>
<p>Positron was covered <a href="https://youtu.be/8uRcB34Hhsw?si=kVUQOjxNfaZjavLe">at posit::conf(2024)</a>, and the <a href="https://positron.posit.co/start.html#is-positron-for-me">Getting Started</a> article on the new website lists reasons you might (or might not) want to switch IDEs. I’ve summarized them below:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50,50]">
<div class="quarto-layout-row quarto-layout-valign-top">
<section id="switch" class="level3 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h3 class="anchored" data-anchor-id="switch">Switch</h3>
<ul class="task-list">
<li><p><label><input type="checkbox">You use VS Code or JupyterLab for data science but want more features.</label></p></li>
<li><p><label><input type="checkbox" checked="">You want more customization in RStudio.</label></p></li>
<li><p><label><input type="checkbox" checked="">You program in languages other than R/Python.</label></p></li>
</ul>
</section>
<section id="dont-switch" class="level3 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h3 class="anchored" data-anchor-id="dont-switch">Don’t switch</h3>
<ul class="task-list">
<li><p><label><input type="checkbox">You need reliable and fully functioning software (Positron is still a work-in-progress, so some features may not be stable or polished).</label></p></li>
<li><p><label><input type="checkbox">You need all RStudio’s features (i.e., inline output for Quarto and R Markdown, Sweave, Add-In support, profiling, etc.). Not all these features are implemented in Positron.</label></p></li>
</ul>
</section>
</div>
</div>
<!-- https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/ -->
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">Download and Install Positron</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>Positron now has <a href="https://positron.posit.co">a website</a> with much of the information below (without the screenshots).</p>
<p>Positron can be downloaded from it’s <a href="https://github.com/posit-dev/positron">GitHub repository</a>. I’m running it on my MacBook (2019, 2.6 GHz 6-Core Intel Core i7, macOS Sonoma Version 14.5), so this involved downloading the .dmg file from the <a href="https://github.com/posit-dev/positron/releases">releases page</a> and installing it like I would any new application.<sup>1</sup></p>
</div>
</div>
</div>
</div>
</section>
<section id="ide-layout" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ide-layout">IDE Layout</h2>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">NOTE</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>Throughout this post, I’ll make the assumption the reader hasn’t spent much time in VS Code (if you have, Positron will be easier to navigate and use).</p>
</div>
</div>
</div>
</div>
<!-- https://open-vsx.org/extension/grrrck/positron-plus-1-e -->
<p>At first glance, Positron looks like VS Code, but with the four panes we’re used to seeing in RStudio. The default layout includes a <span style="color: #990000; font-weight: bold;">Welcome</span> pane with options for opening files and folders above the <span style="color: #990000; font-weight: bold;">Panel</span>, which displays the current version of R running:</p>
<div class="column-page-inset-right">
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50,50]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/positron_welcome.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Welcome page"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/positron_welcome.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Welcome page"></a></p>
</figure>
</div>
<figcaption>Welcome page</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/positron_console.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Console"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/positron_console.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Console"></a></p>
</figure>
</div>
<figcaption>Console</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p>The <span style="color: #990000; font-weight: bold;">Panel</span> is similar to the <strong>Console</strong> in RStudio but also includes tabs for Terminal, Problems, Output, etc.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50,50]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/positron_panel.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Positron’s panel (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/positron_panel.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Positron’s panel (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Positron’s panel (click to enlarge)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/rstudio_console.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="RStudio’s console (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/rstudio_console.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="RStudio’s console (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>RStudio’s console (click to enlarge)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The <span style="color: #990000; font-weight: bold;">Session</span> and <span style="color: #990000; font-weight: bold;">Variables</span><sup>2</sup> panes are open and initially empty, but we can see this where our <span style="color: #990000; font-weight: bold;">Plots</span> will be displayed.</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="img/positron_session_vars.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-6" title="Session and Variables (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/positron_session_vars.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:80.0%" alt="Session and Variables (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Session and Variables (click to enlarge)</figcaption>
</figure>
</div>
</div>
<section id="layout-options" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="layout-options">Layout options</h3>
<p>To customize Positron’s panes, we can use the layout presets icon (in the upper-right corner of the IDE).</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="img/layout_presets.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Layout presets icon"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/layout_presets.png" class="img-fluid quarto-figure quarto-figure-left figure-img" style="width:70.0%" alt="Layout presets icon"></a></p>
</figure>
</div>
<figcaption>Layout presets icon</figcaption>
</figure>
</div>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/customize_layout.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Layout outptions (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/customize_layout.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" alt="Layout outptions (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Layout outptions (click to enlarge)</figcaption>
</figure>
</div>
<p>Or we can position each pane manually via <strong>View</strong> &gt; <strong>Appearance</strong> &gt; <strong>Panel Position</strong> …</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/view_appearance_options.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="Positron’s view options (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/view_appearance_options.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" alt="Positron’s view options (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Positron’s view options (click to enlarge)</figcaption>
</figure>
</div>
<p>We’ll continue using the default ‘<em>Stacked Layout</em>’ configuration in this post, but I recommend exploring the other options to find a customization that fits your needs.</p>
</section>
<section id="r-python-versions" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="r-python-versions">R &amp; Python versions</h3>
<p>I had R (<span style="color: #990000; font-weight: bold;">R 4.4.1</span>) and Python (3.11.5) previously installed, and Positron quickly located both R and Python versions (and displays them in multiple places in the IDE):</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="img/r-version.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-10" title="R versions (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/r-version.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:90.0%" alt="R versions (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>R versions (click to enlarge)</figcaption>
</figure>
</div>
</div>
<p>For more information on detecting Python and R versions, see the <a href="https://positron.posit.co/interpreters.html">Interpreter Selection</a> section of the documentation.</p>
</section>
<section id="r-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="r-dependencies">R Dependencies</h3>
<p>Positron’s documentation recommends installing the following packages:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pak</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"usethis"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cli"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crayon"</span>, </span>
<span id="cb1-2">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlang"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"roxygen2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pkgload"</span>))</span></code></pre></div>
</div>
</section>
<section id="files-folders-and-projects" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="files-folders-and-projects">Files, Folders and Projects</h3>
<p>I use the <span style="color: #990000; font-weight: bold;">folder icon</span> in the upper right corner of the IDE to locate and open project folders. Still, Positron has multiple options for opening project folders from the <span style="color: #990000; font-weight: bold;">welcome page</span> and with the <span style="color: #990000; font-weight: bold;">explorer</span> sidebar menu item:</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="img/open_folder.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-11" title="Open folder (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/open_folder.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:90.0%" alt="Open folder (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Open folder (click to enlarge)</figcaption>
</figure>
</div>
</div>
<p>I’ll be using my <a href="https://github.com/mjfrigaard/sap"><code>sap</code></a> repository because it contains the following:</p>
<ol type="1">
<li>Version control<br>
</li>
<li>An R project (i.e., with an&nbsp;<code>.Rproj</code>&nbsp;file)<br>
</li>
<li>A Shiny app<br>
</li>
<li>An R package<sup>4</sup></li>
</ol>
</section>
<section id="activity-bar" class="level3">
<h3 class="anchored" data-anchor-id="activity-bar">Activity bar</h3>
<p>One of Positron’s major distinguishing factors is its activity bar. This sidebar lets us open and edit files, perform searches, access source control (like Git), and find/install extensions.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/positron-wireframe.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12" title="Positron Layout (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/positron-wireframe.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Positron Layout (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Positron Layout (click to enlarge)</figcaption>
</figure>
</div>
<p>I’ll briefly cover a few of Positron’s sidebar menu items in the sections below.</p>
<section id="explorer" class="level4">
<h4 class="anchored" data-anchor-id="explorer">Explorer</h4>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[-2, 8, 90]">
<div class="quarto-layout-row">
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 2.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 8.0%;justify-content: center;">
<p><a href="img/explorer.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/explorer.png" class="img-fluid"></a></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 90.0%;justify-content: flex-start;">
<p>As noted above, the <span style="color: #990000; font-weight: bold;">Explorer</span> menu item can open project files and folders.</p>
</div>
</div>
</div>
<p>This closely resembles the <strong>Files</strong> pane in RStudio.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50,50]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/files.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14" title="Shiny app files (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/files.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Shiny app files (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Shiny app files (click to enlarge)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/rs_files.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="RStudio Files Pane (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/rs_files.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="RStudio Files Pane (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>RStudio Files Pane (click to enlarge)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Clicking on files in the <span style="color: #990000; font-weight: bold;">Explorer</span> will open them in the <span style="color: #990000; font-weight: bold;">Editor</span>. After opening files, the cursor location will also display additional information on hover (i.e., version control information):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/editor_hover_info.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="Hover information in Editor (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/editor_hover_info.png" class="img-fluid figure-img" alt="Hover information in Editor (click to enlarge)"></a></p>
<figcaption>Hover information in Editor (click to enlarge)</figcaption>
</figure>
</div>
</section>
<section id="search" class="level4">
<h4 class="anchored" data-anchor-id="search">Search</h4>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[-2, 8, 90]">
<div class="quarto-layout-row">
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 2.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 8.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-right">
<figure class="figure">
<p><a href="img/search.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/search.png" class="img-fluid quarto-figure quarto-figure-right figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 90.0%;justify-content: flex-start;">
<p>The&nbsp;<span style="color: #990000; font-weight: bold;">Search</span> menu item allows us to find and replace across all files.</p>
</div>
</div>
</div>
<p>Similar to the <strong>Find in Files</strong> (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd>) window in RStudio.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50,50]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/search_replace.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18" title="Search and replace (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/search_replace.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Search and replace (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Search and replace (click to enlarge)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/rs_find_in_files.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19" title="RStudio ‘Find in Files’ (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/rs_find_in_files.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="RStudio ‘Find in Files’ (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>RStudio ‘Find in Files’ (click to enlarge)</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="source-control" class="level4">
<h4 class="anchored" data-anchor-id="source-control">Source Control</h4>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[-2, 8, 90]">
<div class="quarto-layout-row">
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 2.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 8.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-right">
<figure class="figure">
<p><a href="img/source_control.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/source_control.png" class="img-fluid quarto-figure quarto-figure-right figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 90.0%;justify-content: flex-start;">
<p>The&nbsp;<span style="color: #990000; font-weight: bold;">Source Control</span>&nbsp;menu can open local Git folders and clone repositories.</p>
</div>
</div>
</div>
<p>When in a Git repo, it displays Git commits, branches, remotes, stashes, tags, work trees, and contributors (similar to the&nbsp;<strong>Git pane</strong>&nbsp;in RStudio).</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[40,60]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 40.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/initial_source_control.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21" title="Source control menu (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/initial_source_control.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Source control menu (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Source control menu (click to enlarge)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 60.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/rs_git_pane.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22" title="RStudio Git Pane (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/rs_git_pane.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="RStudio Git Pane (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>RStudio Git Pane (click to enlarge)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>In RStudio, I still use the Terminal for ~90% of my interactions with Git, but Positron also comes with a <span style="color: #990000; font-weight: bold;">Source Control</span> menu.<sup>5</sup></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/source_control_branch.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23" title="Checking out Git branch with Source Control (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/source_control_branch.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Checking out Git branch with Source Control (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Checking out Git branch with <span style="color: #990000; font-weight: bold;">Source Control</span> (click to enlarge)</figcaption>
</figure>
</div>
</section>
<section id="extensions" class="level4">
<h4 class="anchored" data-anchor-id="extensions">Extensions</h4>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[-2, 8, 90]">
<div class="quarto-layout-row">
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 2.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 8.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-right">
<figure class="figure">
<p><a href="img/extensions.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/extensions.png" class="img-fluid quarto-figure quarto-figure-right figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 90.0%;justify-content: flex-start;">
<p>We can install Positron extensions from the <strong>Extensions</strong> menu item.</p>
</div>
</div>
</div>
<p>Positron’s extensions are somewhat similar to RStudio Addins but with a few key differences:</p>
<ol type="1">
<li><p>Positron extensions enhance the IDE’s capabilities by interacting with the VS Code API. They can range from language support (e.g., R, Python) to tools and features for general coding tasks (debugging, version control, syntax highlighting, code snippets, etc.)</p></li>
<li><p><a href="https://rstudio.github.io/rstudio-extensions/rstudio_addins.html">RStudio Addins</a> are custom tools and features to extend IDE’s functionality, focusing on R-specific tasks (package development, customizing visualizations, R markdown document generation, etc.)</p></li>
</ol>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50,50]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/posit_publisher_ext.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25" title="Positron Extensions via Positron +1e (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/posit_publisher_ext.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Positron Extensions via Positron +1e (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Positron Extensions via Positron +1e (click to enlarge)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/rs_addins.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26" title="RStudio Addins (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/rs_addins.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="RStudio Addins (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>RStudio Addins (click to enlarge)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>At a minimum, be sure to install the <a href="https://open-vsx.org/extension/posit/publisher">Posit Publisher extension</a>. I’ve also installed <a href="https://open-vsx.org/extension/grrrck/positron-plus-1-e">Positron +1e</a>, a collection of extensions curated by Garrick Aden-Buie<sup>6</sup> for ‘<em>git-backed data science and dev work shared primarily on GitHub</em>’.</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">Positron Extensions</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>Extensions can be installed from <a href="https://marketplace.visualstudio.com/">VS Code Marketplace</a> or the <a href="https://open-vsx.org/">Open VXS Registry</a>. VS Code Marketplace is maintained by Microsoft, ensuring high-quality and secure extensions, whereas the Open VXS Registry is an open-source alternative for those looking to avoid vendor lock-in.<sup>7</sup> Most extensions on Open VXS Registry are identical to those found on the VS Code marketplace, but with a focus on open-source principles.</p>
<p>For more Positron extensions, I recommend checking out <a href="https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/#my-extensions">this post</a> from Andrew Heiss<sup>8</sup> and <a href="https://www.linkedin.com/posts/veerlevanleemput_positron-r-rstats-activity-7221481394013642752-60Pg?utm_source=share&amp;utm_medium=member_desktop">this LinkedIn post</a> from Veerle van Leemput.<sup>9</sup></p>
</div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="shiny-apps" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="shiny-apps">Shiny Apps</h2>
<p>I’ve checked out a branch of <code>sap</code> that’s in the early stages of development, so it’s a Shiny app (and not an R package yet).<sup>10</sup> The image below highlights some of the IDE’s features after opening the <span style="color: #990000; font-weight: bold;">app.R file</span>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/shiny_app_files.png" class="lightbox" data-gallery="quarto-lightbox-gallery-27" title="Open app.R file (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/shiny_app_files.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" alt="Open app.R file (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Open <code>app.R</code> file (click to enlarge)</figcaption>
</figure>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Positron displays the <span style="color: #990000; font-weight: bold;">current folder</span> (or project) in a familiar location, and the active <span style="color: #990000; font-weight: bold;">Git branch</span> and <span style="color: #990000; font-weight: bold;">Quarto version</span> are conveniently placed in the footer.</p>
</div></div><p>As we can see from the image above, Positron displays much of the same information as the RStudio IDE but with a VS Code<em>ish</em>&nbsp;layout. The most notable change I had to adapt to was the new location of the&nbsp;<span style="color: #990000; font-weight: bold;">project files</span>&nbsp;in the file <span style="color: #990000; font-weight: bold;">Explorer</span>.</p>
<section id="running-applications" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="running-applications">Running Applications</h3>
<p>Positron detects that I’m developing a Shiny application and places a <span style="color: #990000; font-weight: bold;">Run Shiny App</span> icon at the top of the <code>app.R</code> file. Clicking the <span style="color: #990000; font-weight: bold;">Run Shiny App</span> button launches our application in the <span style="color: #990000; font-weight: bold;">Viewer</span> pane.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/shiny_runs_in_terminal.png" class="lightbox" data-gallery="quarto-lightbox-gallery-28" title="Terminal runs the Shiny app (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/shiny_runs_in_terminal.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Terminal runs the Shiny app (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Terminal runs the Shiny app (click to enlarge)</figcaption>
</figure>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/shiny_terminal.png" class="lightbox" data-gallery="quarto-lightbox-gallery-29"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/shiny_terminal.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:50.0%"></a></p>
</figure>
</div>
<p>Unlike RStudio, Positron runs Shiny applications from the <span style="color: #990000; font-weight: bold;">Terminal</span> with a dedicated Shiny process when the <span style="color: #990000; font-weight: bold;">Run Shiny App</span> button is clicked.</p>
</div></div><p>In the <span style="color: #990000; font-weight: bold;">Terminal</span>, a message tells us that&nbsp;<code>autoreload</code>&nbsp;has been turned on (which means we can make live updates to our application):</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="img/app_refresh.gif" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-30" title="Live updates to Shiny app"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/app_refresh.gif" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" alt="Live updates to Shiny app"></a></p>
</figure>
</div>
<figcaption>Live updates to Shiny app</figcaption>
</figure>
</div>
</div>
<p>We’re also told that the application runs with the ‘minified’ JavaScript file (<code>shiny.min.js</code>), which results in using&nbsp;<code>--devmode</code>. Both of these options are covered in the <a href="https://shiny.posit.co/r/reference/shiny/0.13.1/shiny-options.html">Shiny documentation</a>.</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">Run Shiny App Terminal Commands</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>I’ve broken down the Shiny terminal commands below:</p>
<p>The first commands specifies the <code>Rscript</code> interpreter, the scripting front-end for R. <code>Rscript</code> allows the execution of R scripts directly from the command line.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rscript interpreter </span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$/usr/local/bin/Rscript</span> </span></code></pre></div>
<p>The next command is the path to an R script that comes with your Positron installation for running Shiny applications.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># runShinyApp.R Positron Shiny extension  </span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$/Users/username/.positron/extensions/posit.shiny-1.0.0-universal/rscripts/runShinyApp.R</span> </span></code></pre></div>
<p>You can view the contents of <code>runShinyApp.R</code> by passing the path into another Terminal window preceded by <code>cat</code>.</p>
<p>The final Terminal command is the path to the <code>moviesApp</code> Shiny application’s main <code>app.R</code> script (with two additional arguments):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># moviesApp app.R file</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/Users/username/projects/apps/R/moviesApp/app.R</span> 51146 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--devmode</span> </span></code></pre></div>
<ul>
<li><p><code>51146</code> specifies the port on which the Shiny application will run.</p></li>
<li><p><code>--devmode</code> enables development mode for the Shiny application.<sup>11</sup></p></li>
</ul>
</div>
</div>
</div>
</div>
</section>
<section id="stopping-applications" class="level3">
<h3 class="anchored" data-anchor-id="stopping-applications">Stopping Applications</h3>
<p>We can stop the application like we would any other <span style="color: #990000; font-weight: bold;">Terminal</span> process:</p>
<div class="columns">
<div class="column" style="width:40%;">

</div><div class="column" style="width:20%;">
<p><span style="font-size: 1.20em; font-weight: bold;"><kbd>Ctrl</kbd> + <kbd>C</kbd></span></p>
</div><div class="column" style="width:40%;">

</div>
</div>
<p>After stopping the application, you can clear the <span style="color: #990000; font-weight: bold;">Viewer</span> by clicking on the&nbsp;<span style="color: #990000; font-weight: bold;">Clear the current URL</span>&nbsp;icon in the upper-right corner.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/clear_current_url.png" class="lightbox" data-gallery="quarto-lightbox-gallery-31" title="Clear viewer (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/clear_current_url.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Clear viewer (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Clear viewer (click to enlarge)</figcaption>
</figure>
</div>
<p>These changes make application development much more seamless, and now the <code>app.R</code> file also includes icon for editing our Shiny UI with the <a href="https://rstudio.github.io/shinyuieditor/"><code>shinyuieditor</code> package</a> (provided it’s installed).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/run_shiny_app_options.png" class="lightbox" data-gallery="quarto-lightbox-gallery-32" title="Run Shiny App Options"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/run_shiny_app_options.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" alt="Run Shiny App Options"></a></p>
</figure>
</div>
<figcaption>Run Shiny App Options</figcaption>
</figure>
</div>
</section>
</section>
<section id="package-development" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="package-development">Package Development</h2>
<p>Transitioning from developing R packages in RStudio to Positron has been pretty smooth. For example, I wanted to change the&nbsp;<a href="https://mjfrigaard.github.io/shiny-app-pkgs/launch.html#shiny.launch.browser"><code>display_type()</code></a>&nbsp;function to check if the application runs in RStudio before setting the&nbsp;<code>shiny.launch.browser</code>&nbsp;option.<sup>12</sup></p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">Positron tab-completion</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>Positron also comes with IntelliSense for R functions. Place your cursor inside the parentheses and use <kbd>^</kbd>+<kbd>SPACE</kbd> or <kbd>tab</kbd>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/fun_intel.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-33" title="Positron function IntelliSense"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/fun_intel.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Positron function IntelliSense"></a></p>
</figure>
</div>
<figcaption>Positron function IntelliSense</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<section id="loading-documenting" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="loading-documenting">Loading &amp; Documenting</h3>
<p>After making changes to <code>R/display_type.R</code>, I can use the same keyboard shortcuts from <code>devtools</code> to load and document the package:</p>
<p><br></p>
<div class="columns">
<div class="column" style="width:10%;">

</div><div class="column" style="width:80%;">
<p><span style="font-size: 1.05em; font-weight: bold;"><kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> = <code>devtools::load_all()</code></span></p>
</div><div class="column" style="width:10%;">

</div>
</div>
<div class="columns">
<div class="column" style="width:10%;">

</div><div class="column" style="width:80%;">
<p><span style="font-size: 1.05em; font-weight: bold;"><kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd> = <code>devtools::document()</code></span></p>
</div><div class="column" style="width:10%;">

</div>
</div>
<p><br></p>
<p>Under the hood, Positron calls <a href="https://r-pkgs.org/code.html#sec-code-load-all"><code>devtools::load_all()</code></a> and <a href="https://r-pkgs.org/man.html"><code>devtools::document()</code></a>, but instead of launching a <strong>Build</strong> pane, Positron displays the messages from in the <span style="color: #990000; font-weight: bold;">Console</span>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/devtools_document.png" class="lightbox" data-gallery="quarto-lightbox-gallery-34" title="Document R/display_type.R (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/devtools_document.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" alt="Document R/display_type.R (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Document R/display_type.R (click to enlarge)</figcaption>
</figure>
</div>
<p>The <span style="color: #990000; font-weight: bold;">display_type.Rd</span> in the <span style="color: #990000; font-weight: bold;">Console</span> is a hyperlink we can use to preview our updated help file.</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="img/preview_rd_file.gif" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-35" title="Preview help file for R/display_type.R (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/preview_rd_file.gif" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" alt="Preview help file for R/display_type.R (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Preview help file for R/display_type.R (click to enlarge)</figcaption>
</figure>
</div>
</div>
</section>
<section id="installing" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="installing">Installing</h3>
<p>Positron uses the same keyboard shortcut as RStudio for installing packages, but the underlying process differs slightly. Instead of calling <a href="https://devtools.r-lib.org/reference/install.html"><code>devtools::install()</code></a> in the <em>Build</em> pane, Positron launches the <span style="color: #990000; font-weight: bold;">Terminal</span> and runs <code>pak::local_install(upgrade = FALSE)</code>:</p>
<p><br></p>
<div class="columns">
<div class="column" style="width:1%;">

</div><div class="column" style="width:98%;">
<p><span style="font-size: 1.05em; font-weight: bold;"><kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd> = <code>pak::local_install(upgrade = FALSE)</code></span></p>
</div><div class="column" style="width:1%;">

</div>
</div>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/terminal_install.png" class="lightbox" data-gallery="quarto-lightbox-gallery-36" title="The new package install Terminal commands are bookended with an asterick (*) and a message (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/terminal_install.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="The new package install Terminal commands are bookended with an asterick (*) and a message (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>The new package install Terminal commands are bookended with an asterick (<code>*</code>) and a message (click to enlarge)</figcaption>
</figure>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/install_r_pkg_task.png" class="lightbox" data-gallery="quarto-lightbox-gallery-37"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/install_r_pkg_task.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></a></p>
</figure>
</div>
<p>The <span style="color: #990000; font-weight: bold;">Terminal</span> pane displays a dedicated Install R package task when a package is installed.</p>
</div></div><p><a href="https://pak.r-lib.org/reference/local_install.html"><code>local_install(upgrade = FALSE)</code></a> updates the package with the minimum work needed, upgrading dependencies only if the package or one of its dependencies requires a higher version. It prefers binary packages to source packages, even if the binaries are older.</p>
<p><code>local_install()</code>&nbsp;also seems to takes a bit longer to run than&nbsp;<code>devtools::install()</code>, but the end result is the same (i.e., the package is installed, the R session restarts, and the package is loaded with&nbsp;<code>library()</code>&nbsp;in the&nbsp;<span style="color: #990000; font-weight: bold;">Console</span>).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">IntelliSense</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p><br></p>
<p>In the <span style="color: #990000; font-weight: bold;">Console</span>, Positron’s tab completion and IntelliSense displays a large preview each function’s help file:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/launch_app_intel.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-38" title="Preview of help file with IntelliSense"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/launch_app_intel.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Preview of help file with IntelliSense"></a></p>
</figure>
</div>
<figcaption>Preview of help file with IntelliSense</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="testing" class="level3">
<h3 class="anchored" data-anchor-id="testing">Testing</h3>
<p>Positron comes with a variety of options for testing code. We can use the standard keyboard shortcut to call&nbsp;<code>devtools::test()</code>. This will open a&nbsp;<span style="color: #990000; font-weight: bold;">Terminal</span>&nbsp;task with the test results:<sup>13</sup></p>
<p><br></p>
<div class="columns">
<div class="column" style="width:10%;">

</div><div class="column" style="width:80%;">
<p><span style="font-size: 1.05em; font-weight: bold;"><kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd> = <code>devtools::test()</code></span></p>
</div><div class="column" style="width:10%;">

</div>
</div>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/run_devtools_test.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-39" title="Running devtools::test() (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/run_devtools_test.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Running devtools::test() (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Running <code>devtools::test()</code> (click to enlarge)</figcaption>
</figure>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[8, 92]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 8.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="img/testing.png" class="lightbox" data-gallery="quarto-lightbox-gallery-40"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/testing.png" class="img-fluid quarto-figure quarto-figure-left figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 92.0%;justify-content: flex-start;">
<p>Positron also has a dedicated <span style="color: #990000; font-weight: bold;">testing</span> sidebar menu item that allows us to select or filter the test files in the&nbsp;<code>tests/testthat/</code>&nbsp;folder.</p>
</div>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/test_files.png" class="lightbox" data-gallery="quarto-lightbox-gallery-41" title="Test files in tests/testthat/ (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/test_files.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" alt="Test files in tests/testthat/ (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Test files in <code>tests/testthat/</code> (click to enlarge)</figcaption>
</figure>
</div>
<p>The <span style="color: #990000; font-weight: bold;">testing</span> sidebar menu also displays the contents of each test file. If you’re using <code>testthat</code>’s behavior-driven development functions (<code>describe</code> and <code>it</code>), the descriptions are organized hierarchically under <span style="color: #990000; font-weight: bold;">TESTING</span>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/bdd_funs_display.png" class="lightbox" data-gallery="quarto-lightbox-gallery-42" title="BDD test descriptions (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/bdd_funs_display.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="BDD test descriptions (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>BDD test descriptions (click to enlarge)</figcaption>
</figure>
</div>
<p>If <code>test_that()</code> is used, the function being tested is displayed each time an <code>expect_*</code> function is called:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/test_that_funs_display.png" class="lightbox" data-gallery="quarto-lightbox-gallery-43" title="test_that() test descriptions (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/test_that_funs_display.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" alt="test_that() test descriptions (click to enlarge)"></a></p>
</figure>
</div>
<figcaption><code>test_that()</code> test descriptions (click to enlarge)</figcaption>
</figure>
</div>
</section>
<section id="running-tests" class="level3">
<h3 class="anchored" data-anchor-id="running-tests">Running tests</h3>
<p>The <img src="https://mjfrigaard.github.io/posts/positron-v1/img/run_tests_icon.png" class="img-fluid" width="80"> icon under the <span style="color: #990000; font-weight: bold;">TESTING</span> sidebar menu item can also be used to run all the tests in the <code>testthat</code> folder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/running_tests_icon.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-44" title="Running tests with icon (click to enlarge)"><img src="https://mjfrigaard.github.io/posts/positron-v1/img/running_tests_icon.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Running tests with icon (click to enlarge)"></a></p>
</figure>
</div>
<figcaption>Running tests with icon (click to enlarge)</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">Package Development Keyboard Shortcuts</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>Two additional shortcuts I recommend adding are: <br><br> <kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>T</kbd> = <code>devtools::test_active_file()</code> <br><br> <kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd> = <code>devtools::test_coverage_active_file()</code> <br><br></p>
<p>Check out Andrew Heiss’ <a href="https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/">Positron post</a> for more information on changing keyboard shortcuts</p>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>Positron brings a refined experience for RStudio users, blending powerful tools in a streamlined layout that promotes an efficient workflow. Here’s a recap of the features we’ve explored:</p>
<ul>
<li><p><strong>IDE Layout</strong>: Positron’s design ensures smooth navigation. It focuses on customizable panels that allow developers to arrange code editors, data viewers, and debugging consoles based on their workflow.</p></li>
<li><p><strong>Support for R &amp; Python</strong>: The IDE accommodates multiple versions of R and Python, offering a consistent environment for both languages. Integrated version control helps manage and switch between environments seamlessly, making it ideal for teams working on cross-language projects.</p></li>
<li><p><strong>Shiny App Development</strong>: Positron provides robust tools for developers to build, test, and deploy Shiny applications. The IDE simplifies UI-building with live previews and reactive programming support, enabling users to refine interactive components.</p></li>
<li><p><strong>Package Development</strong>: Positron includes a comprehensive suite for R package development, with features that streamline code documentation, testing, and version management. These tools make it easier to follow best practices, ensuring well-organized, maintainable packages.</p></li>
</ul>
<p>Positron can enhance productivity for R and Python users, making it a strong choice for data science and development.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m using version <a href="https://github.com/posit-dev/positron/releases/tag/2024.07.0-107">2024.07.0-107</a>↩︎</p></li>
<li id="fn2"><p>The <strong>Variables</strong> pane is similar to the <strong>Environments</strong> pane in RStudio.↩︎</p></li>
<li id="fn3"><p>These packages are described in the <a href="https://positron.posit.co/start.html#r-prerequisites">R prerequisites section</a>.↩︎</p></li>
<li id="fn4"><p><a href="https://github.com/mjfrigaard/sap"><code>sap</code></a> is the Shiny app-package I used to demonstrate development in my <a href="https://mjfrigaard.github.io/shiny-app-pkgs/">Shiny-App-Packages</a> book.↩︎</p></li>
<li id="fn5"><p>I’m using a branch from <a href="https://github.com/mjfrigaard/sap/"><code>sap</code></a>, which is a collection of Shiny apps/R packages.↩︎</p></li>
<li id="fn6"><p>Read more on <a href="https://www.garrickadenbuie.com/">Garrick’s blog</a>↩︎</p></li>
<li id="fn7"><p>The Open VXS Registry is manages by the <a href="https://www.eclipse.org/">Eclipse Foundation</a>.↩︎</p></li>
<li id="fn8"><p>Read more on <a href="https://www.andrewheiss.com/blog/">Andrew’s blog</a>↩︎</p></li>
<li id="fn9"><p>Read more on <a href="https://hypebright.nl/index.php/home/blog/">Veerle’s blog</a>↩︎</p></li>
<li id="fn10"><p>I’m demoing the <a href="https://github.com/mjfrigaard/moviesApp/tree/02.1_shiny-app"><code>02.1_shiny-app</code></a>, which is a boilerplate Shiny app project with the Old Faithful Geyser data.↩︎</p></li>
<li id="fn11"><p>Read more about Shiny development mode <a href="https://shiny.posit.co/r/reference/shiny/latest/devmode.html">here.</a>↩︎</p></li>
<li id="fn12"><p>This is covered in the <a href="https://github.com/mjfrigaard/sap/tree/08_launch-app"><code>08_launch-app</code></a> branch of <code>moviesApp</code>, which is covered in the <a href="https://mjfrigaard.github.io/shiny-app-pkgs/launch.html">Launch</a> chapter of Shiny-App-Packages.↩︎</p></li>
<li id="fn13"><p>I’m demonstrating with the <a href="https://github.com/mjfrigaard/sap/tree/12.3_tests-snapshots"><code>12.3_tests-snapshots</code></a> branch of <code>sap</code>, which is covered in the <a href="https://mjfrigaard.github.io/shiny-app-pkgs/test_tools.html">Test Tools</a> chapter of Shiny-App-Packages.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Packages</category>
  <category>Positron</category>
  <category>Shiny</category>
  <guid>https://mjfrigaard.github.io/posts/positron-v1/</guid>
  <pubDate>Mon, 14 Oct 2024 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/positron-v1/img/image.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Python Apps</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/py-apps/</link>
  <description><![CDATA[ 





<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.10em;">Note</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.05em; color: #282b2d;">
<p>This is the second post on working in VS Code with Python. I’ll cover developing and publishing Python applications using Bokeh, Streamlit, and Dash.</p>
</div>
</div>
</div>
</div>
<p>I’ve been building quite a few Python applications with VS Code lately and thought I’d write some observations on <a href="https://docs.bokeh.org/en/latest/">Bokeh</a>, <a href="https://docs.streamlit.io/">Streamlit</a>, and <a href="https://dash.plotly.com/">Dash</a>. I’ll cover managing dependencies, a few key differences between Python and R, and running the applications in VS Code.</p>
<section id="virtual-environments" class="level2">
<h2 class="anchored" data-anchor-id="virtual-environments">Virtual environments</h2>
<p>Python virtual environments are designed to manage project-specific dependencies and ensure that the correct versions of packages are used in a given project. Similar to the <a href="https://rstudio.github.io/renv/articles/renv.html"><code>renv</code> package</a> in R, Python comes with a a <a href="https://docs.python.org/3/library/venv.html"><code>venv</code> command</a> for creating a virtual environment.<sup>1</sup> It’s common practice to name the virtual environment something like <code>myenv</code> or <code>.venv</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span></code></pre></div>
<p><code>venv</code> works by creating a directory with a copy of the Python interpreter and the necessary executables to use it. After creating the virtual environment folder, we can activate it using the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># windows</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># myenv\Scripts\activate</span></span></code></pre></div>
<p>If you’re using VS Code, this activate the following prompt to set your workspace folder:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/venv_vs_code.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Workspace folder"><img src="https://mjfrigaard.github.io/posts/py-apps/img/venv_vs_code.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" alt="Workspace folder"></a></p>
</figure>
</div>
<figcaption>Workspace folder</figcaption>
</figure>
</div>
<p>Click <strong>Yes</strong>, then make sure all the dependencies listed in the <code>requirements.txt</code> file are installed in the virtual environment using <a href="https://pypi.org/project/pip/"><code>pip</code></a>, the package installer for Python.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div>
<p>As you’re developing, new dependencies can be recorded in <code>requirements.txt</code> using <code>pip freeze</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span></code></pre></div>
<p>The .<code>venv/</code> directory will store the Python version and packages used in the Python project:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.venv/</span></span>
<span id="cb5-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──lib/</span></span>
<span id="cb5-3">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> python3.9/</span>
<span id="cb5-4">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> site-packages/</span></code></pre></div>
<p>Packages installed into <code>.venv/lib/python3.9/site-packages</code> do not affect the global Python installation or other virtual environments. This isolation helps prevent version conflicts and makes dependency management easier.</p>
<section id="git-history" class="level3">
<h3 class="anchored" data-anchor-id="git-history">Git history</h3>
<p>The virtual environment will store all the dependencies for a project, so it’s a good practice to remove it from any Git repositories. You can do this with the following commands in the terminal:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".venv/"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> .gitignore</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .gitignore</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add .venv to .gitignore"</span></span></code></pre></div>
<p>You can also remove the <code>.venv</code> directory from the latest commit:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> rm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cached</span> .venv</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Remove .venv directory"</span></span></code></pre></div>
<div class="callout callout-style-simple callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">Using <code>venv</code></span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p><code>venv</code> allows us to manage dependencies more effectively, ensuring a clean and isolated environment for each Python app project.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a virtual environment</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># activate the virtual environment on macOS/Linux</span></span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate  </span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install necessary packages</span></span>
<span id="cb8-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install dash streamlit bokeh</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save your current environment's packages</span></span>
<span id="cb8-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the packages in a new environment</span></span>
<span id="cb8-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># deactivate the virtual environment when done</span></span>
<span id="cb8-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deactivate</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<p><a href="https://docs.bokeh.org/en/latest/">Bokeh</a>, <a href="https://docs.streamlit.io/">Streamlit</a>, and <a href="https://dash.plotly.com/">Dash</a> are three popular libraries for creating interactive Python applications, particularly for visualizations and dashboards. Below we’ll explore building an application in each framework using the <a href="https://allisonhorst.github.io/palmerpenguins/"><code>palmerpenuins</code> data</a>. For uniformity, each app will include a scatter plot comparing the numeric variables and a table output.</p>
</section>
</section>
<section id="bokeh" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="bokeh">Bokeh</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="img/bokeh.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://mjfrigaard.github.io/posts/py-apps/img/bokeh.png" class="img-fluid" style="width:40.0%"></a></p>
</div></div><p><a href="https://docs.bokeh.org/en/latest/">Bokeh</a> is a library in Python specifically designed for creating interactive and visually appealing interactive graphs and charts. Bokeh can also create static HTML files without a server, similar to RMarkdown’s HTML output.</p>
<section id="importing-libraries" class="level3">
<h3 class="anchored" data-anchor-id="importing-libraries">Importing Libraries</h3>
<p>Create a <code>main.py</code> script and install the following libraries using <code>pip</code>. <code>pandas</code> is for data manipulation, <code>bokeh</code> will be used for the interactive visualizations, and the <code>palmerpenguins</code> package will load the <code>penguins</code> dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bokeh.layouts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> column, row</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bokeh.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnDataSource, DataTable, TableColumn, NumberFormatter, Select</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bokeh.plotting <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> figure, curdoc</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> palmerpenguins <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_penguins</span></code></pre></div>
</div>
<p>in R, we might use <code>dplyr</code> for data manipulation and <code>ggplot2</code> for visualizations. For interactive visualizations, we might use <code>plotly</code>.</p>
<div class="callout callout-style-simple callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;"><strong>Python vs.&nbsp;R</strong>: Key Differences When Importing Libraries</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p><br></p>
<p><strong>Library Import Syntax</strong></p>
<p>Python emphasizes explicit control over imports and namespaces:</p>
<ul>
<li>Python uses the <code>import</code> statement
<ul>
<li><code>import package_name</code></li>
</ul></li>
<li>Aliases are often used to shorten package names
<ul>
<li><code>import package_name as alias</code></li>
</ul></li>
<li>Python uses <code>from</code> to import specific functions or classes
<ul>
<li><code>from package_name import specific_function</code></li>
</ul></li>
</ul>
<p>R uses the <code>library()</code> or <code>require()</code> function to import packages. R loads the entire package into the namespace by default. If you have functions with the same name in different packages, you can specify the package explicitly with <code>package::function()</code>.</p>
</div>
</div>
</div>
</div>
</section>
<section id="loading-data" class="level3">
<h3 class="anchored" data-anchor-id="loading-data">Loading Data</h3>
<p>The <code>penguins</code> dataset is loaded into a <code>pandas</code> DataFrame using <code>load_penguins()</code> and the missing data is removed with <code>df.dropna()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_penguins()</span>
<span id="cb10-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.dropna()</span></code></pre></div>
</div>
<p>A <code>ColumnDataSource</code> is created from the <code>DataFrame</code>, which is used by Bokeh for efficient data handling (this intermediate step doesn’t really have an R equivalent).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnDataSource(df)</span></code></pre></div>
</div>
<p>A list of numeric columns is defined to use in the scatter plot drop-downs. If we were doing this in R, we could use <code>colnames()</code> or <code>dplyr::select()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">numeric_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_length_mm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_depth_mm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flipper_length_mm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body_mass_g'</span>]</span></code></pre></div>
</div>
</section>
<section id="app-inputs" class="level3">
<h3 class="anchored" data-anchor-id="app-inputs">App Inputs</h3>
<p>Two drop-down <code>Select()</code> widgets can be created for selecting x and y axes variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">x_select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Select(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Axis"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_length_mm"</span>, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>numeric_columns)</span>
<span id="cb13-2">y_select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Select(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Axis"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_depth_mm"</span>, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>numeric_columns)</span></code></pre></div>
</div>
<p>If this was a Shiny app, we would use <code>selectInput()</code>.</p>
</section>
<section id="scatter-plot" class="level3">
<h3 class="anchored" data-anchor-id="scatter-plot">Scatter Plot</h3>
<p>We can initialize a scatter plot with the default axis labels and data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">scatter_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> figure(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scatter Plot"</span>,</span>
<span id="cb14-2">                      x_axis_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bill Length (mm)'</span>,</span>
<span id="cb14-3">                      y_axis_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bill Depth (mm)'</span>)</span>
<span id="cb14-4">scatter_plot.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_length_mm'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_depth_mm'</span>, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<p>In <code>ggplot2</code>, this would look like:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide ggplot2 equivalent code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
</details>
</div>
</section>
<section id="interactivity" class="level3">
<h3 class="anchored" data-anchor-id="interactivity">Interactivity</h3>
<p>Below we define <code>update_plot()</code>, a function for updating the scatter plot when a new variable is selected for the x or y axis. It changes axis labels and re-renders the plot with new data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_plot(attr, old, new):</span>
<span id="cb16-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_select.value</span>
<span id="cb16-3">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_select.value</span>
<span id="cb16-4">    scatter_plot.xaxis.axis_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).title()</span>
<span id="cb16-5">    scatter_plot.yaxis.axis_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).title()</span>
<span id="cb16-6">    scatter_plot.renderers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clear existing renderers</span></span>
<span id="cb16-7">    scatter_plot.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-8"></span>
<span id="cb16-9">x_select.on_change(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, update_plot)</span>
<span id="cb16-10">y_select.on_change(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, update_plot)</span></code></pre></div>
</div>
<p>In <code>shiny</code>, you would use <code>observeEvent()</code> or <code>reactive()</code> to update plots dynamically.</p>
</section>
<section id="table-display" class="level3">
<h3 class="anchored" data-anchor-id="table-display">Table Display</h3>
<p>The code below defines <code>columns</code> and their formatters for the data table to be displayed. <code>DataTable()</code> creates <code>data_table</code>, a <a href="https://docs.bokeh.org/en/latest/docs/reference/models/widgets/tables.html#bokeh.models.DataTable">DataTable</a> widget that displays the data. This is similar to using <code>DT::datatable(df)</code> in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb17-2">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>),</span>
<span id="cb17-3">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"island"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>),</span>
<span id="cb17-4">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_length_mm"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Length (mm)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0"</span>)),</span>
<span id="cb17-5">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_depth_mm"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Depth (mm)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0"</span>)),</span>
<span id="cb17-6">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flipper_length_mm"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)),</span>
<span id="cb17-7">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body Mass (g)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)),</span>
<span id="cb17-8">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>),</span>
<span id="cb17-9">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>))</span>
<span id="cb17-10">]</span>
<span id="cb17-11"></span>
<span id="cb17-12">data_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataTable(source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span></code></pre></div>
</div>
</section>
<section id="layout" class="level3">
<h3 class="anchored" data-anchor-id="layout">Layout</h3>
<p>The <code>layout</code> is defined using <code>column</code> and <code>row</code> and added to the current document for rendering. In <code>shiny</code>, you would use <code>fluidPage()</code>, <code>sidebarLayout()</code>, <code>mainPanel()</code>, etc., to arrange UI components.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> column(row(x_select, y_select), scatter_plot, data_table)</span>
<span id="cb18-2">curdoc().add_root(layout)</span></code></pre></div>
</div>
</section>
<section id="run-the-app" class="level3">
<h3 class="anchored" data-anchor-id="run-the-app">Run the App</h3>
<p>To run this code, save <code>main.py</code> and use the <code>bokeh serve</code> command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">bokeh serve <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>show main.py</span></code></pre></div>
</div>
<p>In R, you would run a <code>shiny</code> app using <code>shinyApp(ui, server)</code> and the <code>runApp()</code> function.</p>
<p>The full code in <code>main.py</code> is available below:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide main.py</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bokeh.layouts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> column, row</span>
<span id="cb20-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bokeh.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnDataSource, DataTable, TableColumn, NumberFormatter, Select</span>
<span id="cb20-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bokeh.plotting <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> figure, curdoc</span>
<span id="cb20-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> palmerpenguins <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_penguins</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the penguins dataset</span></span>
<span id="cb20-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_penguins()</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drop missing data </span></span>
<span id="cb20-11">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.dropna()</span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create ColumnDataSource</span></span>
<span id="cb20-14">source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnDataSource(df)</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric columns</span></span>
<span id="cb20-17">numeric_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_length_mm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_depth_mm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flipper_length_mm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body_mass_g'</span>]</span>
<span id="cb20-18"></span>
<span id="cb20-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create select widgets for x and y axis</span></span>
<span id="cb20-20">x_select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Select(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Axis"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_length_mm"</span>, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>numeric_columns)</span>
<span id="cb20-21">y_select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Select(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Axis"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_depth_mm"</span>, options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>numeric_columns)</span>
<span id="cb20-22"></span>
<span id="cb20-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scatter plot comparing selected variables</span></span>
<span id="cb20-24">scatter_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> figure(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scatter Plot"</span>,</span>
<span id="cb20-25">                      x_axis_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bill Length (mm)'</span>,</span>
<span id="cb20-26">                      y_axis_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bill Depth (mm)'</span>)</span>
<span id="cb20-27"></span>
<span id="cb20-28">scatter_plot.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_length_mm'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_depth_mm'</span>, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-29"></span>
<span id="cb20-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_plot(attr, old, new):</span>
<span id="cb20-31">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_select.value</span>
<span id="cb20-32">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_select.value</span>
<span id="cb20-33">    scatter_plot.xaxis.axis_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).title()</span>
<span id="cb20-34">    scatter_plot.yaxis.axis_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).title()</span>
<span id="cb20-35">    scatter_plot.renderers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear existing renderers</span></span>
<span id="cb20-36">    scatter_plot.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-37"></span>
<span id="cb20-38">x_select.on_change(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, update_plot)</span>
<span id="cb20-39">y_select.on_change(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, update_plot)</span>
<span id="cb20-40"></span>
<span id="cb20-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define columns </span></span>
<span id="cb20-42">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb20-43">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>),</span>
<span id="cb20-44">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"island"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>),</span>
<span id="cb20-45">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_length_mm"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Length (mm)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0"</span>)),</span>
<span id="cb20-46">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_depth_mm"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Depth (mm)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0"</span>)),</span>
<span id="cb20-47">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flipper_length_mm"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)),</span>
<span id="cb20-48">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body Mass (g)"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)),</span>
<span id="cb20-49">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>),</span>
<span id="cb20-50">    TableColumn(field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, formatter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NumberFormatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>))</span>
<span id="cb20-51">]</span>
<span id="cb20-52"></span>
<span id="cb20-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create DataTable</span></span>
<span id="cb20-54">data_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataTable(source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb20-55"></span>
<span id="cb20-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layout</span></span>
<span id="cb20-57">layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> column(row(x_select, y_select), scatter_plot, data_table)</span>
<span id="cb20-58"></span>
<span id="cb20-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add layout to curdoc</span></span>
<span id="cb20-60">curdoc().add_root(layout)</span></code></pre></div>
</details>
</div>

<p>After running the <code>bokeh serve</code> command, the terminal will display the local URL we can use to view our app:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Starting</span> Bokeh server version 3.4.2 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">running</span> on Tornado 6.4<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb21-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">User</span> authentication hooks NOT provided <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">default</span> user enabled<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb21-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Bokeh</span> app running at: http://localhost:5006/main</span>
<span id="cb21-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Starting</span> Bokeh server with process id: 88167</span>
<span id="cb21-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WebSocket</span> connection opened</span>
<span id="cb21-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ServerConnection</span> created</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/bokeh_penguins_app.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Bokeh Python App"><img src="https://mjfrigaard.github.io/posts/py-apps/img/bokeh_penguins_app.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Bokeh Python App"></a></p>
</figure>
</div>
<figcaption>Bokeh Python App</figcaption>
</figure>
</div>
<p>As we can see, the layout is simple, and it gets the job done quickly with a modest amount of code. Bokeh is not really designed for full-fledged applications, but it <em>is</em> capable of creating detailed and interactive plots and tables.</p>
</section>
</section>
<section id="streamlit" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="streamlit">Streamlit</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="img/streamlit.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://mjfrigaard.github.io/posts/py-apps/img/streamlit.png" class="img-fluid" style="width:40.0%"></a></p>
</div></div><p><a href="https://docs.streamlit.io/">Streamlit</a> is another library for creating web applications for data analysis and visualization. It’s known for its simplicity and generally requires less code to build functional applications.</p>
<section id="importing-libraries-1" class="level3">
<h3 class="anchored" data-anchor-id="importing-libraries-1">Importing Libraries</h3>
<p>After creating and activating a Python virtual environment with <code>venv</code>, ensure you have <code>streamlit</code>, <code>palmerpenguins</code>, and the other necessary libraries installed using <code>pip</code>. Create an <code>app.py</code> file and import the following libraries:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> streamlit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb22-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb22-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb22-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> palmerpenguins <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_penguins</span></code></pre></div>
</div>
</section>
<section id="loading-data-1" class="level3">
<h3 class="anchored" data-anchor-id="loading-data-1">Loading Data</h3>
<p>Load the <code>penguins</code> data as a <code>pandas</code> <code>DataFrame</code> using the <code>load_penguins()</code> function from the <code>palmerpenguins</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the dataset</span></span>
<span id="cb23-2">penguins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_penguins()</span></code></pre></div>
</div>
</section>
<section id="app-inputs-1" class="level3">
<h3 class="anchored" data-anchor-id="app-inputs-1">App Inputs</h3>
<p>The code below creates a streamlit application that includes a scatter plot with a dropdown menu for selecting the X-axis and Y-axis variables among the numeric columns (minus <code>year</code>). The scatter plot differentiates the species by color.</p>
<ul>
<li><p><code>st.title</code> sets the title of the app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">st.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Palmer Penguins Dashboard'</span>)</span></code></pre></div>
</div></li>
<li><p><code>st.write</code> displays text and the datase.t<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"### Scatter Plot"</span>)</span></code></pre></div>
</div></li>
<li><p><code>st.selectbox</code> creates dropdown menus for selecting variables for the scatter plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">x_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.selectbox(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis variable'</span>, numeric_columns)</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="scatter-plot-1" class="level3">
<h3 class="anchored" data-anchor-id="scatter-plot-1">Scatter Plot</h3>
<p>The scatter plot is created using <code>seaborn</code>, a visualization library built on top of <code>matplotlib</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x_axis <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> y_axis:</span>
<span id="cb27-2">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb27-3">    sns.scatterplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>penguins, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_axis, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_axis, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb27-4">    st.pyplot(fig)</span></code></pre></div>
</div>
</section>
<section id="table-display-1" class="level3">
<h3 class="anchored" data-anchor-id="table-display-1">Table Display</h3>
<p>The <code>st.dataframe</code> method displays the dataset in a table format within the <code>streamlit</code> app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">st.dataframe(penguins)</span></code></pre></div>
</div>
<div class="callout callout-style-simple callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;"><strong>Python vs.&nbsp;R</strong>: Key Syntax Differences</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p><br></p>
<p><strong>Assignment Operators</strong></p>
<ul>
<li>Python uses <code>=</code> for assignment.<br>
</li>
<li>R typically uses <code>&lt;-</code> for assignment, although <code>=</code> can also be used.</li>
</ul>
<p><strong>Function Calls</strong></p>
<ul>
<li>Python calls <code>st.selectbox()</code> where <code>st</code> is an alias for <code>streamlit</code>.<br>
</li>
<li>R can call <code>selectInput()</code> after loading the <code>shiny</code> library, although <code>shiny::selectInput()</code> can be used (if <code>shiny</code> is installed).</li>
</ul>
<p><strong>Data Structures</strong></p>
<ul>
<li>In Python, the data is read into a <code>pandas DataFrame</code>.<br>
</li>
<li>In R, the data is read into a <code>tibble</code>, which is part of the <code>tidyverse</code> and is a modern reimagining of the traditional data frame.</li>
</ul>
</div>
</div>
</div>
</div>
<p>The full application code is available below:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide app.py</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># app title</span></span>
<span id="cb29-2">st.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Palmer Penguins Dashboard'</span>)</span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric columns for scatter plot</span></span>
<span id="cb29-5">numeric_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> penguins.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>]).columns</span>
<span id="cb29-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drop year</span></span>
<span id="cb29-7">numeric_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numeric_columns.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>)</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scatter plot</span></span>
<span id="cb29-10">st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"### Scatter Plot"</span>)</span>
<span id="cb29-11">x_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.selectbox(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis variable'</span>, numeric_columns)</span>
<span id="cb29-12">y_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.selectbox(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis variable'</span>, numeric_columns, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-13"></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x_axis <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> y_axis:</span>
<span id="cb29-15">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb29-16">    sns.scatterplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>penguins, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_axis, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_axis, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb29-17">    st.pyplot(fig)</span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display the dataframe as a table</span></span>
<span id="cb29-20">st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"### Dataset"</span>)</span>
<span id="cb29-21">st.dataframe(penguins)</span>
<span id="cb29-22"></span>
<span id="cb29-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># footer</span></span>
<span id="cb29-24">st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data Source: [palmerpenguins](https://github.com/allisonhorst/palmerpenguins)"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="run-the-app-1" class="level3">
<h3 class="anchored" data-anchor-id="run-the-app-1">Run the App</h3>
<p>Open your terminal, navigate to the directory containing <code>app.py</code>, and run:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">streamlit</span> run app.py</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/streamlit_penguins_app.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Streamlit Python App"><img src="https://mjfrigaard.github.io/posts/py-apps/img/streamlit_penguins_app.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Streamlit Python App"></a></p>
</figure>
</div>
<figcaption>Streamlit Python App</figcaption>
</figure>
</div>
<p>With streamlit we’re able to create an interactive graph and table display with about 1/3 the code we used in Bokeh, which is why they are ideal for quickly building and sharing simpler web apps (similar to flexdashboard in R). However, Streamlit apps have limited customization and may not handle very complex apps or large datasets efficiently.</p>
</section>
</section>
<section id="dash" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="dash">Dash</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="img/dash.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://mjfrigaard.github.io/posts/py-apps/img/dash.png" class="img-fluid" style="width:40.0%"></a></p>
</div></div><p><a href="https://dash.plotly.com/">Dash</a> is a framework developed by Plotly for building analytical web applications using Python. It’s especially well-suited for interactive visualizations and dashboards.</p>
<section id="importing-libraries-2" class="level3">
<h3 class="anchored" data-anchor-id="importing-libraries-2">Importing Libraries</h3>
<p>In an <code>app.py</code> file, we’ll start by importing the following necessary libraries. <code>dash</code> and <code>dash.dependencies</code> <sup>3</sup> are used for building web applications (similar to <code>shiny</code>), <code>pandas</code> is imported for data manipulation, <code>plotly.express</code> is used for creating plots (akin to <code>ggplot2</code>), and <code>dash_bootstrap_components</code> allows us to use Bootstrap themes for styling the app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dash</span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dash <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dcc, html, dash_table</span>
<span id="cb31-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dash.dependencies <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Input, Output</span>
<span id="cb31-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb31-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb31-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dash_bootstrap_components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dbc</span></code></pre></div>
</div>
</section>
<section id="loading-data-2" class="level3">
<h3 class="anchored" data-anchor-id="loading-data-2">Loading Data</h3>
<p>Now that we’ve identified and imported the dependencies, we can read the data into the application using <code>pandas</code>. We can assign the URL to the raw <code>.csv</code> file to <code>url</code>, then have <code>pd.read_csv()</code> read the CSV file into a <code>pandas</code> DataFrame.<sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv"</span></span>
<span id="cb32-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url)</span></code></pre></div>
</div>
</section>
<section id="utility-function" class="level3">
<h3 class="anchored" data-anchor-id="utility-function">Utility Function</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> format_label(label):</span>
<span id="cb33-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> label.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).title()</span></code></pre></div>
</div>
<p>This function replaces underscores with spaces and capitalizes words. In R, you would define a similar function using <code>gsub()</code> and <code>tools::toTitleCase()</code>.</p>
</section>
<section id="define-columns" class="level3">
<h3 class="anchored" data-anchor-id="define-columns">Define Columns</h3>
<p>We want to omit the <code>year</code> column from the drop-dowwns, so we’ll define <code>numerical_columns</code> outside of the app so we don’t have to repeat this code later. Type <code>float64</code> or <code>int64</code> are numeric columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">numerical_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>]).columns <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>]</span></code></pre></div>
</div>
</section>
<section id="initialize-app" class="level3">
<h3 class="anchored" data-anchor-id="initialize-app">Initialize App</h3>
<p><code>dash.Dash</code> creates a Dash app instance with Bootstrap styling by supplying <code>dbc.themes.BOOTSTRAP</code> to the <code>external_stylesheets</code> argument.<sup>5</sup> This is somewhat similar to initializing a Shiny app with <code>shiny::shinyApp()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dash.Dash(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, external_stylesheets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[dbc.themes.BOOTSTRAP])</span></code></pre></div>
</div>
<p>In the case of initializing a Dash app, <code>__name__</code> is passed as an argument to the <code>dash.Dash()</code> constructor to specify the <code>name</code> of the application. We’ll encounter this again when we launch the application below.</p>
</section>
<section id="layout-1" class="level3">
<h3 class="anchored" data-anchor-id="layout-1">Layout</h3>
<p>The majority of the code is contributed to defining the app layout using Bootstrap components.</p>
<ul>
<li><p><code>dbc.Container</code>, <code>dbc.Row</code>, and <code>dbc.Col</code> arrange components in a grid, similar to layout functions in Shiny like <code>fluidPage()</code>, <code>sidebarLayout()</code>, etc.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">app.layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dbc.Container([</span>
<span id="cb36-2">    dbc.Row([</span>
<span id="cb36-3">        dbc.Col([</span>
<span id="cb36-4"></span>
<span id="cb36-5">        ])</span>
<span id="cb36-6">    ])</span>
<span id="cb36-7">])</span></code></pre></div>
</div></li>
<li><p><code>html.H1</code> creates a header, like <code>tags$h1()</code> in Shiny.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">  html.H1(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins Dashboard"</span>)</span></code></pre></div>
</div></li>
<li><p><code>dcc.Dropdown</code> creates dropdown menus for user input, similar to <code>selectInput()</code> in Shiny.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">  dcc.Dropdown(</span>
<span id="cb38-2">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-axis'</span>,</span>
<span id="cb38-3">      options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: col} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numerical_columns],</span>
<span id="cb38-4">      value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_length_mm'</span>,</span>
<span id="cb38-5">      clearable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb38-6">  )</span></code></pre></div>
</div></li>
<li><p><code>dcc.Graph</code> places a plot in the app, analogous to <code>plotOutput()</code> in Shiny.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">  dcc.Graph(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter-plot'</span>)</span></code></pre></div>
</div></li>
<li><p><code>dash_table.DataTable</code> displays data in a table, similar to <code>DT::dataTableOutput()</code> in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">  dash_table.DataTable(</span>
<span id="cb40-2">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table'</span>,</span>
<span id="cb40-3">      columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: i} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns],</span>
<span id="cb40-4">      data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.to_dict(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'records'</span>),</span>
<span id="cb40-5">      page_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb40-6">      style_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overflowX'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>},</span>
<span id="cb40-7">      style_cell<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb40-8">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>,</span>
<span id="cb40-9">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minWidth'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'140px'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'140px'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maxWidth'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'140px'</span>,</span>
<span id="cb40-10">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'whiteSpace'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'normal'</span></span>
<span id="cb40-11">      }</span>
<span id="cb40-12">  )</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="callback" class="level3">
<h3 class="anchored" data-anchor-id="callback">Callback</h3>
<p>The <strong>callback function</strong> updates the scatter plot based on dropdown inputs.</p>
<ul>
<li><p>The <code>@app.callback</code> decorator defines reactive behavior, similar to <code>observeEvent()</code> or <code>reactive()</code> in Shiny.<sup>6</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.callback</span>(</span>
<span id="cb41-2">      Output(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter-plot'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure'</span>),</span>
<span id="cb41-3">      [Input(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-axis'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>),</span>
<span id="cb41-4">       Input(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y-axis'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>)]</span>
<span id="cb41-5">  )</span></code></pre></div>
</div></li>
<li><p>The function <code>update_scatter_plot</code> takes inputs from dropdowns and updates the plot, using <code>plotly.express</code> and our <code>format_label()</code> utility function to create the scatter plot, similar to using <code>ggplot2</code> in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_scatter_plot(x_axis, y_axis):</span>
<span id="cb42-2">      fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.scatter(</span>
<span id="cb42-3">          df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_axis, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_axis, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>,</span>
<span id="cb42-4">          labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{x_axis: format_label(x_axis), y_axis: format_label(y_axis)},</span>
<span id="cb42-5">          title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Scatter Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>format_label(x_axis)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> vs </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>format_label(y_axis)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb42-6">      )</span>
<span id="cb42-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fig</span></code></pre></div>
</div></li>
</ul>
<p>The full callback code is below:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide app callback in app.py</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.callback</span>(</span>
<span id="cb43-2">    Output(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter-plot'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure'</span>),</span>
<span id="cb43-3">    [Input(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-axis'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>),</span>
<span id="cb43-4">     Input(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y-axis'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>)]</span>
<span id="cb43-5">)</span>
<span id="cb43-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_scatter_plot(x_axis, y_axis):</span>
<span id="cb43-7">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.scatter(</span>
<span id="cb43-8">        df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_axis, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_axis, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>,</span>
<span id="cb43-9">        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{x_axis: format_label(x_axis), y_axis: format_label(y_axis)},</span>
<span id="cb43-10">        title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Scatter Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>format_label(x_axis)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> vs </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>format_label(y_axis)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb43-11">    )</span>
<span id="cb43-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fig</span></code></pre></div>
</details>
</div>
</section>
<section id="for-loops" class="level3">
<h3 class="anchored" data-anchor-id="for-loops">For loops</h3>
<p>Python often relies on explicit iteration using for loops, which means Python code tends to use for loops more frequently than R code. The reason for this goes beyond the scope of this blog post, but it’s rooted in the distinct practices and strengths of each language.</p>
<p>Coming from R (and <code>purrr</code> or the <code>apply</code> family of functions), writing <code>for</code> loops can take some getting used to, so I’ve broken down the <code>numerical_columns</code> and <code>dcc.Dropdown()</code> examples from our Dash app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">numerical_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>]).columns <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>]</span></code></pre></div>
</div>
<ol type="1">
<li><p><code>[col for col in ...]</code> is a list comprehension–it iterates over each column name (<code>col</code>) in the filtered list of column names.</p></li>
<li><p><code>df</code> is a DataFrame, and <code>select_dtypes</code> is a method that filters the DataFrame columns based on their data types. It includes columns with data types <code>float64</code> and <code>int64</code> (similar to numeric types in R).</p></li>
<li><p><code>.columns</code> retrieves the names of the columns that have been filtered by <code>select_dtypes</code>.</p></li>
<li><p><code>if col != 'year'</code> is the condition to ensure that the column <code>year</code> is excluded from the resulting list, even if it has a numeric type.</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: col} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numerical_columns]</span></code></pre></div>
</div>
<p>This <code>for</code> loop iterates over each column name (<code>col</code>) in the <code>numerical_columns</code> list.</p>
<ol type="1">
<li><p>For each column name, it creates a dictionary (<code>{'label': col, 'value': col}</code>).</p></li>
<li><p><code>label</code> is the text displayed in the Dropdown, and <code>value</code> is the actual value assigned to this option.</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: i} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns]</span></code></pre></div>
</div>
<p>This <code>for</code> loop iterates over all columns of the DataFrame <code>df</code>.</p>
<ol type="1">
<li><p>For each column, it creates a dictionary with <code>name</code> and <code>id</code> both set to the column name.</p></li>
<li><p>These dictionaries are used to define the columns of the <code>dash_table.DataTable()</code>.</p></li>
</ol>
<p>The entire app layout code is below:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide full Dash app in app.py</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dash</span>
<span id="cb47-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dash <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dcc, html, dash_table</span>
<span id="cb47-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dash.dependencies <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Input, Output</span>
<span id="cb47-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb47-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb47-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dash_bootstrap_components <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dbc</span>
<span id="cb47-7"></span>
<span id="cb47-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the dataset</span></span>
<span id="cb47-9">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv"</span></span>
<span id="cb47-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url)</span>
<span id="cb47-11"></span>
<span id="cb47-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the 'year' column </span></span>
<span id="cb47-13">numerical_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>]).columns <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>]</span>
<span id="cb47-14"></span>
<span id="cb47-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize the Dash app</span></span>
<span id="cb47-16">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dash.Dash(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, external_stylesheets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[dbc.themes.BOOTSTRAP])</span>
<span id="cb47-17"></span>
<span id="cb47-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to replace underscores with spaces</span></span>
<span id="cb47-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> format_label(label):</span>
<span id="cb47-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> label.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).title()</span>
<span id="cb47-21"></span>
<span id="cb47-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># app layout</span></span>
<span id="cb47-23">app.layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dbc.Container([</span>
<span id="cb47-24">    dbc.Row(</span>
<span id="cb47-25">        dbc.Col(</span>
<span id="cb47-26">            html.H1(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins Dashboard"</span>), </span>
<span id="cb47-27">        width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb47-28">    ),</span>
<span id="cb47-29">    dbc.Row(</span>
<span id="cb47-30">        html.H3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inputs"</span>)</span>
<span id="cb47-31">    ),</span>
<span id="cb47-32">    dbc.Row([</span>
<span id="cb47-33">        dbc.Col(</span>
<span id="cb47-34">            dcc.Dropdown(</span>
<span id="cb47-35">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-axis'</span>,</span>
<span id="cb47-36">                options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: col} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numerical_columns],</span>
<span id="cb47-37">                value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_length_mm'</span>,</span>
<span id="cb47-38">                clearable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb47-39">            ), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb47-40">        ),</span>
<span id="cb47-41">        dbc.Col(</span>
<span id="cb47-42">            dcc.Dropdown(</span>
<span id="cb47-43">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y-axis'</span>,</span>
<span id="cb47-44">                options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: col} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numerical_columns],</span>
<span id="cb47-45">                value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bill_depth_mm'</span>,</span>
<span id="cb47-46">                clearable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb47-47">            ), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb47-48">        )</span>
<span id="cb47-49">    ]),</span>
<span id="cb47-50">    dbc.Row([</span>
<span id="cb47-51">        dbc.Col([</span>
<span id="cb47-52">            html.H3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scatter Plot"</span>),</span>
<span id="cb47-53">            dcc.Graph(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter-plot'</span>)</span>
<span id="cb47-54">        ], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb47-55">        dbc.Col([</span>
<span id="cb47-56">            html.H3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Table"</span>),</span>
<span id="cb47-57">            dash_table.DataTable(</span>
<span id="cb47-58">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table'</span>,</span>
<span id="cb47-59">                columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: i} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns],</span>
<span id="cb47-60">                data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.to_dict(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'records'</span>),</span>
<span id="cb47-61">                page_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb47-62">                style_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overflowX'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>},</span>
<span id="cb47-63">                style_cell<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb47-64">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>,</span>
<span id="cb47-65">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minWidth'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'140px'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'140px'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maxWidth'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'140px'</span>,</span>
<span id="cb47-66">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'whiteSpace'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'normal'</span></span>
<span id="cb47-67">                }</span>
<span id="cb47-68">            )</span>
<span id="cb47-69">        ], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb47-70">    ])</span>
<span id="cb47-71">])</span>
<span id="cb47-72"></span>
<span id="cb47-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># callback to update the scatter plot</span></span>
<span id="cb47-74"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.callback</span>(</span>
<span id="cb47-75">    Output(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter-plot'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure'</span>),</span>
<span id="cb47-76">    [Input(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-axis'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>),</span>
<span id="cb47-77">     Input(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y-axis'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>)]</span>
<span id="cb47-78">)</span>
<span id="cb47-79"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_scatter_plot(x_axis, y_axis):</span>
<span id="cb47-80">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.scatter(</span>
<span id="cb47-81">        df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_axis, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_axis, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>,</span>
<span id="cb47-82">        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{x_axis: format_label(x_axis), y_axis: format_label(y_axis)},</span>
<span id="cb47-83">        title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Scatter Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>format_label(x_axis)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> vs </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>format_label(y_axis)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb47-84">    )</span>
<span id="cb47-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fig</span>
<span id="cb47-86"></span>
<span id="cb47-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the app</span></span>
<span id="cb47-88"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__main__'</span>:</span>
<span id="cb47-89">    app.run_server(debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="run-the-app-2" class="level3">
<h3 class="anchored" data-anchor-id="run-the-app-2">Run the App</h3>
<p>The code below runs the application. Note that the <code>__name__ == '__main__'</code> condition corresponds to the <code>dash.Dash(__name__, ...)</code> we used to initialize the application above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__main__'</span>:</span>
<span id="cb48-2">    app.run_server(debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<p>Run the application by running the following commands in the terminal:</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb49-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> app.py</span></code></pre></div>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb50-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Dash</span> is running on http://127.0.0.1:8050/</span>
<span id="cb50-2"></span>
<span id="cb50-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> Serving Flask app <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'app'</span></span>
<span id="cb50-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> Debug mode: on</span></code></pre></div>
<p>Use <kbd>Cmd</kbd>/<kbd>Ctrl</kbd> + click on the URL to open the web browser with our application:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/dash_penguins_app.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Penguins Dash App"><img src="https://mjfrigaard.github.io/posts/py-apps/img/dash_penguins_app.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Penguins Dash App"></a></p>
</figure>
</div>
<figcaption>Penguins Dash App</figcaption>
</figure>
</div>
<p>The Dash application has an interactive scatter plot (with hover features) with a side-by-side table display. The layout functions in Dash give us more control over output placement in the UI, and the additional HTML functions give us the ability to build our application up like a standard webpage (or Shiny app).</p>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In summary, <a href="https://docs.bokeh.org/en/latest/">Bokeh</a> is excellent for creating detailed and interactive visualizations, comparable to <code>ggplot2</code> and <code>plotly</code> for interactive plots, but it’s not focused on developing complete applications. <a href="https://docs.streamlit.io/">Streamlit</a> is very user-friendly and ideal for quickly building and sharing simpler web apps, but with fewer options for customization. <a href="https://dash.plotly.com/">Dash</a> is capable of developing highly customizable and complex web applications (similar to Shiny), but has a steeper learning curve than Streamlit.</p>
<p>You can view the code used to create the apps in this <a href="https://github.com/mjfrigaard/py-apps/tree/main">repo.</a></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><code>venv</code> is a module that comes built-in with <a href="https://docs.python.org/3/library/venv.html">Python 3.3 and later versions</a>, so we do not need to install it separately.↩︎</p></li>
<li id="fn2"><p><a href="https://docs.streamlit.io/develop/api-reference/write-magic/st.write"><code>st.write()</code></a> is incredibly versatile. We’re passing it Markdown-formatted text in this example, but it can be used to display DataFrames, models, and more.↩︎</p></li>
<li id="fn3"><p>Watch <a href="https://youtu.be/mTsZL-VmRVE?si=C6mkTzQYAI0FlCRJ">The Dash Callback - Input, Output, State, and more</a> on the <a href="https://www.youtube.com/@CharmingData">Charming Data YouTube channel</a>.↩︎</p></li>
<li id="fn4"><p><code>pd.read_csv</code> is analogous to <code>read.csv</code> or <code>readr::read_csv</code> in R.↩︎</p></li>
<li id="fn5"><p>Read all the arguments for dash.Dash in the <a href="https://dash.plotly.com/reference#dash.dash">documentation.</a>↩︎</p></li>
<li id="fn6"><p>Read more about Dash callback definitions in the <a href="https://dash.plotly.com/basic-callbacks">documentation</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>VSCode</category>
  <guid>https://mjfrigaard.github.io/posts/py-apps/</guid>
  <pubDate>Sat, 13 Jul 2024 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/py-apps/image.png" medium="image" type="image/png" height="122" width="144"/>
</item>
<item>
  <title>VS Code, meet Quarto.</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/py-vscode/</link>
  <description><![CDATA[ 





<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.10em;">Note</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.05em; color: #282b2d;">
<p>I’ve been using VS Code to write more and more Python code lately, so I’ve decided make some notes on 1) installing Python, 2) working in VS Code, and 3) using Python code chunks in Quarto.</p>
</div>
</div>
</div>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I’d been an avid R/RStudio (now Posit Workbench) user for 10+ years, but lately I’ve been spending a lot of time with Python in VS Code. Transitioning from one programming language and development environment to another was daunting at first, but Quarto opens up a world of new opportunities for learning new languages. This post covers setting up Quarto and Python in VS Code, learning pains, tips, and early successes.</p>
<!--

received my new copy of [Learning Data Science](https://learningds.org/intro.html) by Sam Lau, Joseph Gonzalez, and Deborah Nolan. The [code examples](https://github.com/DS-100/textbook/) are in Python, so I 

-->
</section>
<section id="installing-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="installing-vs-code">Installing VS Code</h2>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[75, 25]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 75.0%;justify-content: flex-start;">
<p>You can download VS Code from the <a href="https://code.visualstudio.com/">official website</a>. I recommend following the installation instructions for your particular operating system. After installing VS Code, you’ll want to install the <a href="https://marketplace.visualstudio.com/items?itemName=quarto.quarto">Quarto extension</a> and <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension from Microsoft</a>.</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-right">
<figure class="figure">
<p><a href="img/vscode.jpeg" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/vscode.jpeg" class="cover img-fluid quarto-figure quarto-figure-right figure-img" width="450"></a></p>
</figure>
</div>
</div>
</div>
</div>
<div id="fig-vscode_start" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-vscode_start-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/vscode_start.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Figure&nbsp;1: VS Code Start"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/vscode_start.png" id="fig-vscode_start" class="img-fluid quarto-figure quarto-figure-center anchored figure-img" style="width:90.0%"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-vscode_start-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: VS Code Start
</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-warning no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">OS DISCLAIMER</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>I’m using macOS Sonoma (14.4.1 (23E224)) with <a href="https://www.gnu.org/software/bash/">Bash</a> and <a href="https://iterm2.com/">iTerm2</a>.</p>
</div>
</div>
</div>
</div>
<p>Now we’ll cover a few options for installing and using Python.</p>
</section>
<section id="installing-python" class="level2">
<h2 class="anchored" data-anchor-id="installing-python">Installing Python</h2>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[85, 15]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 85.0%;justify-content: flex-start;">
<p>Installing Python was always a little fuzzy for me. There are multiple ways to install Python: from the official <a href="https://www.python.org">Python website</a>; using a package manager like <a href="https://community.chocolatey.org/">Chocolatey</a> or <a href="https://brew.sh/">Homebrew</a>; or with an IDE like <a href="https://www.jetbrains.com/pycharm/">PyCharm</a> or <a href="https://www.anaconda.com/">Anaconda.</a> These options would often result in questions like:</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 15.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-right">
<figure class="figure">
<p><a href="img/python-black.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/python-black.png" class="cover img-fluid quarto-figure quarto-figure-right figure-img" width="375"></a></p>
</figure>
</div>
</div>
</div>
</div>
<p><em>How do I install Python on other operating systems (i.e., Windows and Linux)?</em></p>
<p><em>What is the differences between Python versions? Which one should I install and use?</em></p>
<p><em>How do I manage multiple Python versions on my machine?</em></p>
<p><em>Should I use anaconda or miniconda or pip for managing Python packages?</em></p>
<p>The safest way I found to install Python was to follow the following steps:</p>
<ol type="1">
<li><p>Go to the <a href="https://www.python.org">Python website</a>.</p></li>
<li><p>Click on the “Downloads” tab and choose the appropriate version for your operating system (Windows, macOS, Linux).</p></li>
</ol>
<div id="fig-download_python" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-download_python-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/download_python.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Figure&nbsp;2: Python Downloads"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/download_python.png" id="fig-download_python" class="img-fluid quarto-figure quarto-figure-center anchored figure-img" style="width:90.0%"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-download_python-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Python Downloads
</figcaption>
</figure>
</div>
<ol start="3" type="1">
<li>Run the installer and make sure to check the box that says “Add Python to <code>PATH</code>” during installation.</li>
</ol>
<section id="homebrew" class="level3">
<h3 class="anchored" data-anchor-id="homebrew">Homebrew</h3>
<p>When using Homebrew, it’s important to note the different locations for Python installations. The <code>which</code> command is helpful here:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>In Terminal</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span> python3</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /usr/bin/python3</span></span></code></pre></div>
</details>
</div>
<p><code>/usr/bin/python3</code> is the <strong>system-managed Python installation</strong>. It’s minimal and less likely to change, and is intended to ensure stability.</p>
<p>If you’re using Homebrew to install Python, you’ll probably notice there are other installations of Python in <code>/usr/local/bin</code>. This is because <code>/usr/local/bin</code> is commonly location for user-installed software, separate from the system’s default utilities.<sup>1</sup></p>
<div class="cell">
<details open="" class="code-fold">
<summary>In Terminal</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tree</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-P</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python*"</span> /usr/local/bin <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span> 2</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /usr/local/bin</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ├── python3 -&gt; ../Cellar/python@3.12/3.12.4/bin/python3</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ├── python3-config -&gt; ../Cellar/python@3.12/3.12.4/bin/python3-config</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ├── python3.12 -&gt; ../Cellar/python@3.12/3.12.4/bin/python3.12</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># └── python3.12-config -&gt; ../Cellar/python@3.12/3.12.4/bin/python3.12-config</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 directory, 4 files</span></span></code></pre></div>
</details>
</div>
<p>The output above shows the files and the <a href="https://linuxize.com/post/how-to-create-symbolic-links-in-linux-using-the-ln-command/">symbolic links</a> they are referencing. The links are pointing to the actual binaries located under the <code>../Cellar/python@3.12/</code> directory.<sup>2</sup></p>
<p>The symbolic links in <code>/usr/local/bin</code> are a modular approach to updating Python. This is handy for user-installed environments where installations or updates can be managed flexibly without disrupting the system’s core functionality.</p>
<p>The Python tutorial offered by VS Code also clarified many of the previous questions I’d struggle with.<sup>3</sup></p>
</section>
<section id="python-vs-code-extension" class="level3">
<h3 class="anchored" data-anchor-id="python-vs-code-extension">Python VS Code Extension</h3>
<p>Locate and install the Python VS Code <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">extension</a> using the search bar in the <strong>Extensions</strong>:</p>
<div id="fig-python-ext" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-python-ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-python-ext" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-python_ext_search" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-python_ext_search-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/python_ext_search.png" class="lightbox" data-gallery="fig-python-ext" title="Figure&nbsp;3&nbsp;(a): Search for ‘Python’"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/python_ext_search.png" class="img-fluid figure-img" style="width:90.0%" data-ref-parent="fig-python-ext"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-python_ext_search-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Search for ‘Python’
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-python-ext" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-python_ext" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-python_ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/python_ext.png" class="lightbox" data-gallery="fig-python-ext" title="Figure&nbsp;3&nbsp;(b): Python VS Code Extension"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/python_ext.png" class="img-fluid figure-img" style="width:95.0%" data-ref-parent="fig-python-ext"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-python_ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) Python VS Code Extension
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-python-ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Search for and install Python VS Code extension
</figcaption>
</figure>
</div>
</section>
</section>
<section id="installing-quarto" class="level2">
<h2 class="anchored" data-anchor-id="installing-quarto">Installing Quarto</h2>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[25, 75]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-right">
<figure class="figure">
<p><a href="img/quarto.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/quarto.png" class="cover img-fluid quarto-figure quarto-figure-right figure-img" width="500"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 75.0%;justify-content: flex-start;">
<p>Quarto can be downloaded and installed from its <a href="https://quarto.org/docs/get-started/">official website</a>. Follow the platform-specific instructions to install it on your system. Make sure Quarto has been installed correctly and is available in your system’s <code>PATH</code>.</p>
</div>
</div>
</div>
<p>Check if Quarto is on <code>PATH</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>In Terminal</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1.5.28</span></span></code></pre></div>
</details>
</div>
<p>If it isn’t, you’ll need to add the location of your quarto installation to <code>PATH</code>. You can do that with the commands below (depending on your shell).</p>
<p>For Bash (common in Linux and older macOS versions):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'export PATH="$PATH:/path/to/quarto"'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> ~/.bashrc</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> ~/.bashrc</span></code></pre></div>
<p>For Zsh (default in newer macOS versions):</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'export PATH="$PATH:/path/to/quarto"'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> ~/.zshrc</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> ~/.zshrc</span></code></pre></div>
<p>You can also use <code>which</code> to locate quarto path:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>In Terminal</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span> quarto</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /usr/local/bin/quarto</span></span></code></pre></div>
</details>
</div>
<p>Now that we have Quarto installed and configured, we’ll check our dependencies and install the VS Code extension to make sure VS Code can find Quarto and Python.</p>
<section id="quarto-check" class="level3">
<h3 class="anchored" data-anchor-id="quarto-check">Quarto Check</h3>
<p>I highly recommend running <code>quarto check</code> to confirm Python and the other dependencies have been installed. I’ve provided the output from my setup and a brief description below:</p>
<p><strong><code>Quarto installation</code></strong> displays the path to the installation of the current Quarto version.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Quarto</span> 1.5.28</span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking versions of quarto binary dependencies...</span>
<span id="cb7-3">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Pandoc</span> version 3.1.11: OK</span>
<span id="cb7-4">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Dart</span> Sass version 1.70.0: OK</span>
<span id="cb7-5">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Deno</span> version 1.41.0: OK</span>
<span id="cb7-6">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Typst</span> version 0.10.0: OK</span>
<span id="cb7-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking versions of quarto dependencies......OK</span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking Quarto installation......OK</span>
<span id="cb7-9">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Version:</span> 1.5.28</span>
<span id="cb7-10">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path:</span> /Applications/quarto/bin</span></code></pre></div>
<p><strong><code>tools</code></strong> checks for a <a href="https://yihui.org/tinytex/">TinyTex</a> installation (and installs it if its not there), <code>Latex</code> confirms the installation of <a href="https://www.latex-project.org/">LaTeX</a> or <a href="https://yihui.org/tinytex/">TinyTex</a> and displays the path (in this case, the path to the TinyTex installation), and basic markdown rendering is confirmed.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking tools....................OK</span>
<span id="cb8-2">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TinyTeX:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">external</span> install<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb8-3">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Chromium:</span> 869685</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking LaTeX....................OK</span>
<span id="cb8-6">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Using:</span> TinyTex</span>
<span id="cb8-7">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path:</span> /Users/username/Library/TinyTeX/bin/universal-darwin</span>
<span id="cb8-8">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Version:</span> 2023</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking basic markdown render....OK</span></code></pre></div>
<p><strong><code>Python 3 installation</code></strong> returns the python and jupyter versions, the python installation path, and kernels.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking Python 3 installation....OK</span>
<span id="cb9-2">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Version:</span> 3.11.5 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Conda</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb9-3">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path:</span> /Users/username/miniconda3/bin/python</span>
<span id="cb9-4">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Jupyter:</span> 5.7.2</span>
<span id="cb9-5">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Kernels:</span> python3</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking Jupyter engine render....OK</span></code></pre></div>
<p>Notice Quarto is using the python version installed in <code>/Users/username/miniconda3/bin/python</code>, not the <code>/usr/bin/python3</code> version above.</p>
<p><strong><code>R installation</code></strong> checks all the R stuff (<code>LibPaths</code>, <code>knitr</code>, <code>rmarkdown</code>)</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking R installation...........OK</span>
<span id="cb10-2">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Version:</span> 4.3.2</span>
<span id="cb10-3">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path:</span> /Library/Frameworks/R.framework/Resources</span>
<span id="cb10-4">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">LibPaths:</span></span>
<span id="cb10-5">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library</span>
<span id="cb10-6">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">knitr:</span> 1.46</span>
<span id="cb10-7">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rmarkdown:</span> 2.26</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[✓]</span> Checking Knitr engine render......OK</span></code></pre></div>
</section>
<section id="quarto-vs-code-extension" class="level3">
<h3 class="anchored" data-anchor-id="quarto-vs-code-extension">Quarto VS Code Extension</h3>
<p>After installing Quarto, locate and install the <a href="https://marketplace.visualstudio.com/items?itemName=quarto.quarto">Quarto VS Code Extension</a> from VS Code by searching for ‘Quarto’:</p>
<div id="fig-quarto-ext" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-quarto-ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-quarto-ext" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-quarto_ext_search" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-quarto_ext_search-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/quarto_ext_search.png" class="lightbox" data-gallery="fig-quarto-ext" title="Figure&nbsp;4&nbsp;(a): Search for ‘Quarto’"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/quarto_ext_search.png" class="img-fluid figure-img" style="width:90.0%" data-ref-parent="fig-quarto-ext"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-quarto_ext_search-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Search for ‘Quarto’
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-quarto-ext" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-quarto_ext" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-quarto_ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/quarto_ext.png" class="lightbox" data-gallery="fig-quarto-ext" title="Figure&nbsp;4&nbsp;(b): Quarto VS Code Extension"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/quarto_ext.png" class="img-fluid figure-img" style="width:95.0%" data-ref-parent="fig-quarto-ext"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-quarto_ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) Quarto VS Code Extension
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-quarto-ext-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Search for and install Quarto VS Code extension
</figcaption>
</figure>
</div>
</section>
<section id="quarto-.qmd-files" class="level3">
<h3 class="anchored" data-anchor-id="quarto-.qmd-files">Quarto (<code>.qmd</code>) files</h3>
<p>I’ve created a <code>hello.qmd</code> file in the <code>py-quarto-hello</code> folder to run the example code from the Quarto website.<sup>4</sup> The document contains a <span style="color: #FF2600; font-weight: bold;">YAML header</span>, some <span style="color: #FF9300; font-weight: bold;">markdown text</span>, and a <span style="color: #0433FF; font-weight: bold;">Python code chunk</span>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/hello_qmd.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="Quarto document with Python code"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/hello_qmd.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" alt="Quarto document with Python code"></a></p>
</figure>
</div>
<figcaption>Quarto document with Python code</figcaption>
</figure>
</div>
</section>
</section>
<section id="python-interpreter" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="python-interpreter">Python Interpreter</h2>
<p>We can select a Python interpreter to run Python in VS Code by using the command palette. Below are the available Python interpreters I can select on my machine:<sup>5</sup></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Command Palette Keyboard Shortcut:</p>
<p><br></p>
<p><kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd></p>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/py_interpreter.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11" title="Python interpreter"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/py_interpreter.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" alt="Python interpreter"></a></p>
</figure>
</div>
<figcaption>Python interpreter</figcaption>
</figure>
</div>
<p>If I select the recommended Python interpreter in the command palette and run <code>which python3</code> in the terminal <em>inside</em> VS Code, I see the following:<sup>6</sup></p>
<div class="cell">
<details open="" class="code-fold">
<summary>Inside VS Code Terminal</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span> python3</span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /Users/&lt;username&gt;/.pyenv/versions/3.9.15/bin/python3</span></span></code></pre></div>
</details>
</div>
<p>But when I run <code>which python3</code> in a Terminal <em>outside</em> of VS Code, I see the following:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>Outside VS Code (in iTerm2)</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span> python3</span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /Users/&lt;username&gt;/miniconda3/bin/python3</span></span></code></pre></div>
</details>
</div>
<p>The differences in Python versions when running <code>which python3</code> in the VS Code Terminal versus the iTerm2 Terminal are due to distinct Python environments being picked up by each terminal session.</p>
<section id="pyenv" class="level3">
<h3 class="anchored" data-anchor-id="pyenv"><code>pyenv</code></h3>
<p>In the VS Code Terminal, <code>which python3</code> identifies the Python version installed via <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a>. <code>pyenv</code> is a simple Python version management tool that allows you to easily switch between multiple versions of Python. It focuses primarily on managing different versions of the Python interpreter.<sup>7</sup></p>
<p><code>pyenv</code> modifies the <code>PATH</code> to prioritize its versions of Python over system-installed versions (like the one stored in <code>/usr/bin/python3</code>):</p>
<ul>
<li><strong>Python Version</strong>: 3.9.15</li>
<li><strong>Source</strong>: <code>pyenv</code> environment</li>
<li><strong>Path</strong>: <code>/Users/username/.pyenv/versions/3.9.15/bin/python3</code></li>
</ul>
</section>
<section id="miniconda3" class="level3">
<h3 class="anchored" data-anchor-id="miniconda3"><code>miniconda3</code></h3>
<p>The output from <code>which python3</code> in the iTerm2 terminal indicates it’s using Python from a <a href="https://docs.anaconda.com/free/distro-or-miniconda/">Conda environment.</a>–specifically, <a href="https://docs.anaconda.com/free/miniconda/"><code>miniconda</code></a>.</p>
<p><code>miniconda</code> is a popular package, dependency, and environment management system which is typically used for scientific computing and data science, where managing complex dependencies is crucial. The <code>miniconda</code> environment has its own isolated directory, separate from the system-wide installations (like <code>/usr/bin/python3</code>).</p>
<ul>
<li><strong>Python Version</strong>: 3.11.5</li>
<li><strong>Source</strong>: Conda environment</li>
<li><strong>Path</strong>: <code>/Users/&lt;username&gt;/miniconda3/bin/python3</code></li>
</ul>
<p>The primary reason for the differences between the VS Code terminal and iTerm2 is how the <code>PATH</code> environment variable is set up in each terminal instance. VS Code’s terminal is configured to add the <code>pyenv</code> managed Python to the <code>PATH</code> ahead of the <code>miniconda</code> managed version, resulting in the <code>pyenv</code> version being used when <code>which python3</code> is executed.</p>
</section>
<section id="key-features" class="level3">
<h3 class="anchored" data-anchor-id="key-features">Key Features</h3>
<p><strong><code>pyenv</code></strong> manages multiple Python versions by manipulating the <code>PATH</code> environment variable and does not concern itself with non-Python dependencies.</p>
<p><strong><code>miniconda</code></strong> generally creates and manages self-contained environments that include Python and other dependencies. It modifies the <code>PATH</code> within the shell it’s activated in, which might be automatically configured in your standard macOS Terminal.</p>
<p>The table below compares key features between <code>pyenv</code> and <code>miniconda</code>:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 35%">
<col style="width: 37%">
<col style="width: 27%">
</colgroup>
<thead>
<tr class="header">
<th>Feature</th>
<th>Pyenv</th>
<th>Miniconda</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Python Version Management</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>Virtual Environment</td>
<td>Yes (with pyenv-virtualenv)</td>
<td>Yes</td>
</tr>
<tr class="odd">
<td>Package Management</td>
<td>Basic (via pip)</td>
<td>Advanced (via Conda)</td>
</tr>
<tr class="even">
<td>Cross-Language Support</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr class="odd">
<td>Dependency Management</td>
<td>Limited</td>
<td>Robust</td>
</tr>
<tr class="even">
<td>Ideal for Simple Projects</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr class="odd">
<td>Ideal for Complex Projects</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>Multi-Language Support</td>
<td>No</td>
<td>Yes</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="vs-code-quarto-python" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="vs-code-quarto-python">VS Code + Quarto + Python</h2>
<p>We’re finally ready to render our Quarto document! Quarto documents can be rendered by clicking on the <span style="color: #FF2600; font-weight: bold;">Preview icon</span>:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Quarto Render Keyboard Shortcut:</p>
<p><br></p>
<p><kbd>Shift</kbd>+<kbd>Cmd</kbd>+<kbd>K</kbd></p>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/quarto_preview.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/quarto_preview.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></a></p>
</figure>
</div>
<p>I’ve also added <code>editor: render-on-save:</code> and set the value to <code>true</code> so the document will automatically render in the Quarto preview pane.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/vscode_hello_quarto.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13" title="Hello Quarto"><img src="https://mjfrigaard.github.io/posts/py-vscode/img/vscode_hello_quarto.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" alt="Hello Quarto"></a></p>
</figure>
</div>
<figcaption>Hello Quarto</figcaption>
</figure>
</div>
<section id="dependencies-and-metadata" class="level3">
<h3 class="anchored" data-anchor-id="dependencies-and-metadata">Dependencies and metadata</h3>
<p>If we continue adding the Python code <sup>8</sup> to our Quarto document, it’s a good practice to create and work within a virtual environment to manage project-specific dependencies. We can do this by entering the following in the VS Code terminal:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>In VS Code Terminal</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span></code></pre></div>
</details>
</div>
<p>The commands above uses the <code>venv</code> module that is included with Python to create a virtual environment. <code>.venv</code> is the directory where the virtual environment will be created. Inside this directory, a standalone Python environment is set up. This environment includes its own Python interpreter and a <code>site-packages</code> directory where Python packages can be installed independently of the global Python environment.</p>
<p>The <code>source .venv/bin/activate</code> command adjusts the environment variables so the shell uses the Python interpreter and libraries from the virtual environment instead of the global Python installation. Any Python packages installed using <code>pip</code> will be installed in the virtual environment’s <code>site-packages</code> directory.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>In VS Code Terminal</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyter matplotlib plotly pandas</span></code></pre></div>
</details>
</div>
<p>Once all the dependencies are installed, we should generate a list of all installed packages along with their versions in a <code>requirements.txt</code> file using the <code>pip freeze</code> command:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>In VS Code Terminal</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span></code></pre></div>
</details>
</div>
<p>We should also include our virtual environment folder in the <code>.gitignore</code> file (because all of the dependencies are safely listed in the <code>requirements.txt</code>).</p>
<div class="cell">
<details open="" class="code-fold">
<summary>In .gitignore</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore the virtual environment directory</span></span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.venv/</span></span></code></pre></div>
</details>
</div>
<p>We can also add a <code>_quarto.yml</code> file to store project-level metadata like styling, outputs, and code cell configurations.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb17-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python in Quarto"</span></span>
<span id="cb17-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">output-dir</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb17-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc-title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Contents</span></span>
<span id="cb17-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc-location</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> left</span></span>
<span id="cb17-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc-expand</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb17-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">number-sections</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb17-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb17-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code-fold</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> show</span></span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">editor</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb17-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render-on-save</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</section>
</section>
<section id="more-resources" class="level2">
<h2 class="anchored" data-anchor-id="more-resources">More resources</h2>
<p><a href="https://github.com/RamiKrispin">Rami Krispin</a> also has a great <a href="https://github.com/RamiKrispin/vscode-python">guide</a> for setting up Python and Docker in VS Code. The <a href="https://code.visualstudio.com/docs/python/python-quick-start">Quick Start Guide for Python in VS Code</a> has a lot of information (and .gifs!). Eric Nantz also has a fantastic and thorough <a href="https://youtu.be/XgzcNu-8HeM?si=bswcEvm4qUsni24K">Setting up my Quarto adventures!</a> video on the <a href="https://www.youtube.com/@ShinyDeveloperSeries">Shiny Developer Series YouTube channel</a>, too.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I display these below using the <code>tree</code> command.↩︎</p></li>
<li id="fn2"><p>This is typical of Homebrew installations on macOS, where Homebrew installs software under <code>/usr/local/Cellar</code> and creates symlinks in <code>/usr/local/bin</code> for easy execution.↩︎</p></li>
<li id="fn3"><p><a href="https://code.visualstudio.com/docs/python/python-tutorial">Getting Started with Python in VS Code</a>.↩︎</p></li>
<li id="fn4"><p>The example code in <code>hello.qmd</code> comes from the <a href="https://quarto.org/docs/get-started/hello/vscode.html#render-and-preview">Render and Preview</a> section.↩︎</p></li>
<li id="fn5"><p>The path of the recommended interpreter is <code>~/pyenv/versions/3.9.15/bin/python</code>.↩︎</p></li>
<li id="fn6"><p>I’ve replaced my username with <code>&lt;username&gt;</code>.↩︎</p></li>
<li id="fn7"><p><a href="https://github.com/pyenv/pyenv?tab=readme-ov-file#how-it-works">Read more</a> about how <code>pyenv</code> works.↩︎</p></li>
<li id="fn8"><p>The Python code we’re using comes from the <a href="https://quarto.org/docs/get-started/computations/vscode.html">Computations section</a> of the Quarto website.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>VSCode</category>
  <category>Quarto</category>
  <guid>https://mjfrigaard.github.io/posts/py-vscode/</guid>
  <pubDate>Fri, 05 Jul 2024 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/py-vscode/img/quarto-vscode-python.png" medium="image" type="image/png" height="135" width="144"/>
</item>
<item>
  <title>Shiny system tests with shinytest2</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p4-test-system-shiny/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.20em;">NOTE</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>This post has been shortened from the original version. I felt it was too long and duplicative of other resources written better elsewhere. If you’d like to read the previous version, you can find it in the <a href="https://mjfrigaard.github.io/series.html">series section.</a></p>
</div>
</div>
</div>
</div>
<p>This is the fourth post in a <a href="https://mjfrigaard.github.io/series.html#testing-shiny-applications">series on testing</a> Shiny applications. The previous posts have covered using <a href="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/">BDD in unit tests</a>, testing apps <a href="https://mjfrigaard.github.io/posts/p2-tests-nonpkg-unit-tests/">outside of an R package</a> structure, and <a href="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/">testing module server functions</a>. In this post, we’ll be covering testing Shiny applications using <code>testthat</code> and <code>shinytest2</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="img/image.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/image.svg" class="img-fluid" style="width:70.0%"></a></p>
</div></div><section id="app-packages" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="app-packages">App-Packages</h2>
<p>In the previous post, we stored the modules and applications from the <a href="https://mastering-shiny.org/scaling-modules.html">Shiny modules chapter</a> of Mastering Shiny in the <a href="https://mjfrigaard.github.io/mstsap/"><code>mstsap</code></a> package. The <a href="https://mjfrigaard.github.io/msst2ap/"><code>msst2ap</code></a> package contains <code>shinytest2</code> tests for the Shiny apps in Mastering Shiny (hence the name: <strong>M</strong>astering <strong>S</strong>hiny <strong>s</strong>hiny<strong>t</strong>est<strong>2</strong> <strong>a</strong>pp-<strong>p</strong>ackage).</p>
<p>You can install <code>msst2ap</code> using the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)</span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/mjfrigaard/msst2ap"</span></span>
<span id="cb1-4">)</span></code></pre></div>
</div>
<p>I’ve stored development versions of the applications in the <a href="https://github.com/mjfrigaard/msst2ap/tree/main/inst/dev"><code>inst/dev/</code> folder</a> of <code>msst2ap</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">inst</span>
<span id="cb2-2">└── dev</span>
<span id="cb2-3">    ├── datasetApp</span>
<span id="cb2-4">    │   ├── DESCRIPTION</span>
<span id="cb2-5">    │   ├── R</span>
<span id="cb2-6">    │   │   └── modules.R</span>
<span id="cb2-7">    │   ├── README.md</span>
<span id="cb2-8">    │   └── app.R</span>
<span id="cb2-9">    ├── gghistApp</span>
<span id="cb2-10">    │   ├── DESCRIPTION</span>
<span id="cb2-11">    │   ├── R</span>
<span id="cb2-12">    │   │   └── modules.R</span>
<span id="cb2-13">    │   ├── README.md</span>
<span id="cb2-14">    │   └── app.R</span>
<span id="cb2-15">    ├── histogramApp</span>
<span id="cb2-16">    │   ├── DESCRIPTION</span>
<span id="cb2-17">    │   ├── R</span>
<span id="cb2-18">    │   │   └── modules.R</span>
<span id="cb2-19">    │   ├── README.md</span>
<span id="cb2-20">    │   └── app.R</span>
<span id="cb2-21">    ├── selectDataVarApp</span>
<span id="cb2-22">    │   ├── DESCRIPTION</span>
<span id="cb2-23">    │   ├── R</span>
<span id="cb2-24">    │   │   └── modules.R</span>
<span id="cb2-25">    │   ├── README.md</span>
<span id="cb2-26">    │   └── app.R</span>
<span id="cb2-27">    └── selectVarApp</span>
<span id="cb2-28">        ├── DESCRIPTION</span>
<span id="cb2-29">        ├── R</span>
<span id="cb2-30">        │   └── modules.R</span>
<span id="cb2-31">        ├── README.md</span>
<span id="cb2-32">        └── app.R</span>
<span id="cb2-33"></span>
<span id="cb2-34">12 directories, 20 files</span></code></pre></div>
<section id="using-system.file" class="level3">
<h3 class="anchored" data-anchor-id="using-system.file">Using <span style="font-size: 1.10em; font-weight: bold;"><code>system.file()</code></span></h3>
<p>The apps stored in the <code>inst/dev/</code> directory of <code>msst2ap</code> can be passed to the <code>app_dir</code> argument of <code>AppDriver$new()</code> with <code>system.file()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb3-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>,</span>
<span id="cb3-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb3-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>,</span>
<span id="cb3-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb3-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>()</span>
<span id="cb3-7">})</span></code></pre></div>
</div>
<p><a href="img/app_view_datasetApp.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/app_view_datasetApp.png" class="img-fluid" style="width:100.0%"></a></p>
</section>
<section id="setting-inputs" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="setting-inputs">Setting inputs</h3>
<p>The first things we’ll check is changing the <code>dataset-dataset</code> input from <code>ability.cov</code> to <code>attitude</code> using <code>app$set_inputs()</code> (<em>Note that this uses the module notation above (i.e., <code>"id-inputId"</code></em>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mstsap::datasetApp"</span>, {</span>
<span id="cb4-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>,</span>
<span id="cb4-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb4-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>,</span>
<span id="cb4-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb4-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb4-7">})</span></code></pre></div>
</div>
<p>If you can see both windows, you’ll see the application values change in the Chromium browser:</p>
<div class="page-columns page-full">
<div id="fig-set_inputs" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-set_inputs" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_set_inputs" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="img/app_set_inputs.png" class="lightbox page-columns page-full" data-gallery="fig-set_inputs" title="Figure&nbsp;1&nbsp;(a): app$set_inputs()"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/app_set_inputs.png" class="img-fluid figure-img column-page-right" data-ref-parent="fig-set_inputs"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>app$set_inputs()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Set application inputs with <code>app$set_inputs()</code>
</figcaption>
</figure>
</div>
</div>
</section>
<section id="checking-inputs" class="level3">
<h3 class="anchored" data-anchor-id="checking-inputs">Checking inputs</h3>
<p>We can capture values in a list <em>inside</em> the test by including a call to <code>app$get_values()</code> and assigning the output to <code>app_values</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb5-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>,</span>
<span id="cb5-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb5-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>,</span>
<span id="cb5-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb5-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb5-7">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb5-8">})</span></code></pre></div>
</div>
<p><code>app_values</code> has a similar structure to the <code>.json</code> snapshot covered above (i.e., with <code>input</code>, <code>output</code>, and <code>export</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(app_values)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">List of 3</span>
<span id="cb7-2"> $ input :List of 1</span>
<span id="cb7-3">  ..$ dataset-dataset: chr "attitude"</span>
<span id="cb7-4"> $ output:List of 2</span>
<span id="cb7-5">  ..$ data: chr "&lt;table  class = 'table shiny-table table- spacing-s' style = 'width:auto;'&gt;\n&lt;thead&gt; &lt;tr"..</span>
<span id="cb7-6">  ..$ vals: chr "$`dataset-dataset`\n[1] \"attitude\"\n"</span>
<span id="cb7-7"> $ export: Named list()</span></code></pre></div>
<p>We can use <code>waldo::compare()</code> to verify the <code>input</code> in <code>app_values</code> to verify the value that we changed with <code>app$set_inputs()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span></span>
<span id="cb8-4">)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">✔ No differences</span></code></pre></div>
<p><code>waldo::compare()</code> can easily be adapted to a new test expectation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb10-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>,</span>
<span id="cb10-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb10-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>,</span>
<span id="cb10-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb10-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb10-7">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb10-8">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb10-9">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb10-10">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb10-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb10-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb10-13">})</span></code></pre></div>
</div>
<p>At the end of the test, I’ll add a call <a href="https://rstudio.github.io/shinytest2/articles/zzz-faq.html#should-i-manually-shut-down-my-appdriver"><code>app$stop()</code></a> to close the Chromium app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb11-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>,</span>
<span id="cb11-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb11-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>,</span>
<span id="cb11-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb11-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb11-7">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb11-8">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb11-9">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb11-10">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb11-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb11-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb11-13">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>()</span>
<span id="cb11-14">})</span></code></pre></div>
</div>
</section>
</section>
<section id="exporting-test-values" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="exporting-test-values">Exporting test values</h2>
<p>The <code>shinytest2</code> documentation repeatedly<sup>1</sup> recommends<sup>2</sup> exporting test values from Shiny applications. We’ll use the application stored in <code>inst/dev/selectVarApp/</code> to explore exporting test values.</p>
<p>The application in the <code>inst/dev/selectVarApp/</code> folder of <code>msst2ap</code> includes a call to <code>exportTestValues()</code> and the <code>test.mode</code> option set to <code>TRUE</code> in the call to <code>shinyApp()</code>.<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb12-2">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb12-3">  var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> filter)</span>
<span id="cb12-4"></span>
<span id="cb12-5">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderTable</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>()))</span>
<span id="cb12-6"></span>
<span id="cb12-7">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb12-8">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb12-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb12-10">    )</span>
<span id="cb12-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb12-12">  })</span>
<span id="cb12-13"></span>
<span id="cb12-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exportTestValues</span>(</span>
<span id="cb12-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(),</span>
<span id="cb12-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()</span>
<span id="cb12-17">  )</span>
<span id="cb12-18">}</span></code></pre></div>
</div>
<p>The test for this application contains the same <code>system.file()</code> call to create the <code>AppDriver</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="cb13-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="cb13-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb13-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb13-5">})</span></code></pre></div>
</div>
<p>After entering <code>app$view()</code> in the <strong>Console</strong>, the application opens in the Chromium headless browser again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>()</span></code></pre></div>
</div>
<p>We can see <code>selectVarApp</code> has been launched in showcase mode, so the <code>README</code> and code files are displayed in the UI.</p>
<div class="page-columns page-full">
<div id="fig-app_view_selectVarApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view_selectVarApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view_selectVarApp" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="img/app_view_selectVarApp.png" class="lightbox page-columns page-full" data-gallery="fig-app_view_selectVarApp" title="Figure&nbsp;2&nbsp;(a): app$view()"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/app_view_selectVarApp.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-app_view_selectVarApp"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: View <code>selectVarApp()</code> application with <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
<p>In our test file, we’ll use <code>app$set_values()</code> to change the <code>$`data-dataset`</code> and <code>$`var-var`</code> inputs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-15" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-15-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="annotated-cell-15-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="annotated-cell-15-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-15-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="annotated-cell-15-5">  </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="1">1</button><span id="annotated-cell-15-6" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="annotated-cell-15-7">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-15" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="6" data-code-annotation="1">Change <code>$`data-dataset`</code> to <code>mtcars</code></span>
</dd>
</dl>
</div>
</div>
<p>We’ll also change the variable input from <code>mpg</code> to <code>wt</code> and verify the output in the UI:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-16" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-16-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="annotated-cell-16-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="annotated-cell-16-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-16-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="annotated-cell-16-5">  </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-16" data-target-annotation="1">1</button><span id="annotated-cell-16-6" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-16" data-target-annotation="2">2</button><span id="annotated-cell-16-7" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>)</span>
<span id="annotated-cell-16-8">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-16" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-16" data-code-lines="6" data-code-annotation="1">Change <code>$`data-dataset`</code> to <code>mtcars</code></span>
</dd>
<dt data-target-cell="annotated-cell-16" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-16" data-code-lines="7" data-code-annotation="2">Change <code>$`var-var`</code> to <code>wt</code></span>
</dd>
</dl>
</div>
</div>
<p>The printed <code>reactiveValuesToList()</code> is updated UI when the <code>selectInput()</code> changes:</p>
<div class="page-columns page-full">
<div id="fig-selectVarApp_changes" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-selectVarApp_changes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-selectVarApp_changes" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-selectVarApp_changes" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-selectVarApp_changes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="img/selectVarApp_changes.gif" class="lightbox page-columns page-full" data-gallery="fig-selectVarApp_changes" title="Figure&nbsp;3&nbsp;(a): Set data-dataset"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/selectVarApp_changes.gif" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-selectVarApp_changes"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectVarApp_changes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Set <code>data-dataset</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectVarApp_changes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: View <code>selectVarApp()</code> after setting <code>data-dataset</code> and <code>var-var</code> with <code>app$set_inputs()</code>
</figcaption>
</figure>
</div>
</div>
<section id="getting-values" class="level3">
<h3 class="anchored" data-anchor-id="getting-values">Getting values</h3>
<p>We’ll use <code>app$get_values()</code> to store the exported <code>input</code>, <code>output</code>, and <code>export</code> test values in <code>app_values</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-17" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-17-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="annotated-cell-17-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="annotated-cell-17-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-17-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="annotated-cell-17-5"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-17" data-target-annotation="1">1</button><span id="annotated-cell-17-6" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-17" data-target-annotation="2">2</button><span id="annotated-cell-17-7" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>)</span>
<span id="annotated-cell-17-8"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-17" data-target-annotation="3">3</button><span id="annotated-cell-17-9" class="code-annotation-target">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="annotated-cell-17-10">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-17" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-17" data-code-lines="6" data-code-annotation="1">Change <code>$`data-dataset`</code> to <code>mtcars</code></span>
</dd>
<dt data-target-cell="annotated-cell-17" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-17" data-code-lines="7" data-code-annotation="2">Change <code>$`var-var`</code> to <code>wt</code></span>
</dd>
<dt data-target-cell="annotated-cell-17" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-17" data-code-lines="9" data-code-annotation="3">Assign to <code>app_values</code> list</span>
</dd>
</dl>
</div>
</div>
<p><code>app_values</code> is a list (similar to the <code>.json</code> snapshot file), but now we’ve explicitly exported values from the server in <code>selectVarApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span> </span></code></pre></div>
</div>
</section>
<section id="expectations" class="level3">
<h3 class="anchored" data-anchor-id="expectations">Expectations</h3>
<p>We can use <code>app_values</code> to verify the structure of each exported object:</p>
<ul>
<li><code>data</code> should be a <code>data.frame()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data)</span>
<span id="cb17-3">)</span></code></pre></div>
</div>
<ul>
<li><code>var</code> should be have one column:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Once again, we end the test with a call to <code>app$stop()</code>. The completed test for <code>selectVarApp()</code> is below:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide mstsap::selectVarApp test</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="cb19-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="cb19-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb19-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb19-5"></span>
<span id="cb19-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb19-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>)</span>
<span id="cb19-8"></span>
<span id="cb19-9">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb19-10"></span>
<span id="cb19-11">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb19-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data))</span>
<span id="cb19-13"></span>
<span id="cb19-14">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb19-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-16"></span>
<span id="cb19-17">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>()</span>
<span id="cb19-18">})</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="testing-complex-outputs" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testing-complex-outputs">Testing complex outputs</h2>
<p><code>msst2ap</code> has the <a href="https://mastering-shiny.org/scaling-modules.html#case-study-histogram"><code>histogramApp()</code> from Mastering Shiny</a> in <code>inst/dev/histogramApp/</code>, and a <code>ggplot2</code> version of the <code>histogramApp()</code> in the <code>inst/dev/ggHistApp/</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">inst</span></span>
<span id="cb20-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> dev</span>
<span id="cb20-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> ggHistApp</span>
<span id="cb20-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── DESCRIPTION</span>
<span id="cb20-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── R</span>
<span id="cb20-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   │   └── modules.R</span>
<span id="cb20-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── README.md</span>
<span id="cb20-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── app.R</span>
<span id="cb20-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> histogramApp</span>
<span id="cb20-10">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> DESCRIPTION</span>
<span id="cb20-11">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> R</span>
<span id="cb20-12">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── modules.R</span>
<span id="cb20-13">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> README.md</span>
<span id="cb20-14">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> app.R</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> directories, 8 files</span></code></pre></div>
</div>
<div data-layout="[49,-2,49]" data-layout-valign="top">
<div id="fig-sbs_histogramApp_ggHistApp" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-sbs_histogramApp_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-sbs_histogramApp_ggHistApp" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-sbs_histogramApp" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-sbs_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/sbs_histogramApp.png" class="lightbox" data-gallery="fig-sbs_histogramApp_ggHistApp" title="Figure&nbsp;4&nbsp;(a): histogramApp()"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/sbs_histogramApp.png" class="img-fluid figure-img" data-ref-parent="fig-sbs_histogramApp_ggHistApp"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-sbs_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>histogramApp()</code>
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-sbs_histogramApp_ggHistApp" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-sbs_ggHistApp" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-sbs_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/sbs_ggHistApp.png" class="lightbox" data-gallery="fig-sbs_histogramApp_ggHistApp" title="Figure&nbsp;4&nbsp;(b): ggHistApp()"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/sbs_ggHistApp.png" class="img-fluid figure-img" data-ref-parent="fig-sbs_histogramApp_ggHistApp"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-sbs_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) <code>ggHistApp()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-sbs_histogramApp_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: <code>histogramApp()</code> vs.&nbsp;<code>ggHistApp()</code>
</figcaption>
</figure>
</div>
</div>
<section id="testing-reactive-values" class="level3">
<h3 class="anchored" data-anchor-id="testing-reactive-values">Testing reactive values</h3>
<p>The module server functions in <code>histogramApp()</code> return two values: <code>data</code> and <code>x</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb21-2">  </span>
<span id="cb21-3">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb21-4">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data)</span>
<span id="cb21-5">  </span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">histogramServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>, x)</span>
<span id="cb21-7"></span>
<span id="cb21-8">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb21-9">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb21-10">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb21-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb21-12">  })</span>
<span id="cb21-13"></span>
<span id="cb21-14">}</span></code></pre></div>
</div>
<p><code>data</code> is returned reactive from <code>datasetServer()</code> and becomes an input parameter for <code>selectVarServer()</code>, and <code>x</code> is the returned reactive.</p>
<p>Both of these are reactive values, but they aren’t treated like returned values from the <code>reactive()</code> function (i.e., they don’t have parentheses). These are passed in the server as reactive <em>expressions</em>, which we can confirm using <code>exportTestValues()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide msst2ap::histogramApp() server</summary>
<div class="sourceCode cell-code" id="annotated-cell-25" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-25-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="annotated-cell-25-2">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="annotated-cell-25-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data)</span>
<span id="annotated-cell-25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">histogramServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>, x)</span>
<span id="annotated-cell-25-5"></span>
<span id="annotated-cell-25-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remaining code omitted</span></span>
<span id="annotated-cell-25-7">  </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-25" data-target-annotation="1">1</button><span id="annotated-cell-25-8" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exportTestValues</span>(</span>
<span id="annotated-cell-25-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data,</span>
<span id="annotated-cell-25-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x</span>
<span id="annotated-cell-25-11">    )</span>
<span id="annotated-cell-25-12">}</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-25" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-25" data-code-lines="8,11" data-code-annotation="1">We’ve also added <code>options(shiny.testmode = TRUE)</code> to the top of the <code>app.R</code> file.</span>
</dd>
</dl>
</div>
</div>
<p>In the test for <code>histogramApp()</code>, we’ll create the app with <code>AppDriver$new()</code> and change the three inputs using <code>app$set_inputs()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: histogramApp"</span>, {</span>
<span id="cb22-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogramApp"</span>,</span>
<span id="cb22-3">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb22-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>,</span>
<span id="cb22-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="cb22-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb22-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"privileges"</span>)</span>
<span id="cb22-8">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb22-9">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb22-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(app_values)</span>
<span id="cb22-11">})</span></code></pre></div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">[1] "data" "x"  </span></code></pre></div>
<p>We’ll test is these are reactive functions by combining <code>rlang::is_function()</code> and <code>shiny::is.reactive()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: histogramApp"</span>, {</span>
<span id="cb24-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogramApp"</span>,</span>
<span id="cb24-3">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb24-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>,</span>
<span id="cb24-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="cb24-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb24-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"privileges"</span>)</span>
<span id="cb24-8">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb24-9">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb24-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(app_values)</span>
<span id="cb24-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb24-12">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_function</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb24-13">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data))</span>
<span id="cb24-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb24-15">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_function</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x),</span>
<span id="cb24-16">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x))</span>
<span id="cb24-17">})</span></code></pre></div>
</div>
</section>
<section id="using-app-logs" class="level3">
<h3 class="anchored" data-anchor-id="using-app-logs">Using app logs</h3>
<p><code>shinytest2</code> also has the handy <code>get_logs()</code> that allows us to check the logs for specific functionality. Below is the output from <code>get_logs()</code> from <code>histogramApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-29" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: histogramApp"</span>, {</span>
<span id="annotated-cell-29-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogramApp"</span>,</span>
<span id="annotated-cell-29-3">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-29-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>,</span>
<span id="annotated-cell-29-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="annotated-cell-29-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="annotated-cell-29-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"privileges"</span>)</span>
<span id="annotated-cell-29-8">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-29" data-target-annotation="1">1</button><span id="annotated-cell-29-9" class="code-annotation-target">  app_logs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_logs</span>()</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-29" data-target-annotation="2">2</button><span id="annotated-cell-29-10" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(app_logs)</span>
<span id="annotated-cell-29-11">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-29" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-29" data-code-lines="9" data-code-annotation="1">Create app logs</span>
</dd>
<dt data-target-cell="annotated-cell-29" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-29" data-code-lines="10" data-code-annotation="2">View log structure</span>
</dd>
</dl>
</div>
</div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">Classes ‘shinytest2_log’ and 'data.frame':  56 obs. of  5 variables:</span>
<span id="cb25-2"> $ workerid : chr  NA NA NA NA ...</span>
<span id="cb25-3"> $ timestamp: POSIXct, format: "2024-03-31 04:47:41" "2024-03-31 04:47:41" ...</span>
<span id="cb25-4"> $ location : chr  "shinytest2" "shinytest2" "shinytest2" "shinytest2" ...</span>
<span id="cb25-5"> $ level    : chr  "info" "info" "info" "info" ...</span>
<span id="cb25-6"> $ message  : chr  "Start AppDriver initialization" "Starting Shiny app" "Creating "..</span></code></pre></div>
<p>After changing the three inputs with <code>set_inputs()</code>, we can check the output to see these actions were included in the logs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-31" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: histogramApp"</span>, {</span>
<span id="annotated-cell-31-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogramApp"</span>,</span>
<span id="annotated-cell-31-3">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-31-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>,</span>
<span id="annotated-cell-31-5">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="annotated-cell-31-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="annotated-cell-31-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"privileges"</span>)</span>
<span id="annotated-cell-31-8">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="annotated-cell-31-9">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="annotated-cell-31-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(app_values)</span>
<span id="annotated-cell-31-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-31-12">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_function</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="annotated-cell-31-13">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data))</span>
<span id="annotated-cell-31-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-31-15">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_function</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x),</span>
<span id="annotated-cell-31-16">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x))</span>
<span id="annotated-cell-31-17">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="1">1</button><span id="annotated-cell-31-18" class="code-annotation-target">  app_logs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_logs</span>()</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="2">2</button><span id="annotated-cell-31-19" class="code-annotation-target">  ds_msg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(app_logs,</span>
<span id="annotated-cell-31-20">                   message <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setting inputs: 'data-dataset'"</span>)</span>
<span id="annotated-cell-31-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(ds_msg), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="3">3</button><span id="annotated-cell-31-22" class="code-annotation-target">  var_msg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(app_logs,</span>
<span id="annotated-cell-31-23">                    message <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setting inputs: 'var-var'"</span>)</span>
<span id="annotated-cell-31-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(var_msg), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="4">4</button><span id="annotated-cell-31-25" class="code-annotation-target">  hist_msg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(app_logs,</span>
<span id="annotated-cell-31-26">                     message <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Setting inputs: 'hist-bins'"</span>)</span>
<span id="annotated-cell-31-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(hist_msg), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="annotated-cell-31-28">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-31" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="18" data-code-annotation="1">Create app logs<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="19,20,21" data-code-annotation="2">Create and test dataset<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="22,24" data-code-annotation="3">Create and test variable<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="25,27" data-code-annotation="4">Create and test bins</span>
</dd>
</dl>
</div>
</div>
<p>Logs can also be passed from the test to the application using <a href="https://rstudio.github.io/shinytest2/reference/AppDriver.html#method-log-message-"><code>log_message()</code></a>.</p>
</section>
<section id="verify-initial-inputs" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="verify-initial-inputs">Verify initial <span style="font-size: 1.10em; font-weight: bold;"><code>input</code></span>s</h3>
<p>The <code>ggHistApp()</code> app is similar to <code>histogramApp()</code>, but instead of passing a reactive vector to <code>hist()</code>, <code>ggHistServer()</code> passes a reactive one-column <code>data.frame</code> (<code>x()</code>) to the <code>ggplot2</code> functions. We’ll add <code>exportTestValues()</code> to a development version of <code>ggHistServer()</code> in <code>inst/dev/</code>: <sup>4</sup></p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide ggHistServer()</summary>
<div class="sourceCode cell-code" id="annotated-cell-32" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-32-1">ggHistServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram"</span>)) {</span>
<span id="annotated-cell-32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(x))</span>
<span id="annotated-cell-32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(title))</span>
<span id="annotated-cell-32-4"></span>
<span id="annotated-cell-32-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="annotated-cell-32-6">    </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-32" data-target-annotation="1">1</button><span id="annotated-cell-32-7" class="code-annotation-target">    gg2_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="annotated-cell-32-8">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="annotated-cell-32-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span></span>
<span id="annotated-cell-32-10">            ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>()))</span>
<span id="annotated-cell-32-11">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="annotated-cell-32-12">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="annotated-cell-32-13">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="annotated-cell-32-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [bins = "</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>),</span>
<span id="annotated-cell-32-15">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>,</span>
<span id="annotated-cell-32-16">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())</span>
<span id="annotated-cell-32-17">          ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="annotated-cell-32-18">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="annotated-cell-32-19">    })</span>
<span id="annotated-cell-32-20"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-32" data-target-annotation="2">2</button><span id="annotated-cell-32-21" class="code-annotation-target">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="annotated-cell-32-22">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gg2_plot</span>()}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124</span>)</span>
<span id="annotated-cell-32-23">    }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="annotated-cell-32-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(), input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins))</span>
<span id="annotated-cell-32-25"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-32" data-target-annotation="3">3</button><span id="annotated-cell-32-26" class="code-annotation-target">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exportTestValues</span>(</span>
<span id="annotated-cell-32-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins,</span>
<span id="annotated-cell-32-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(),</span>
<span id="annotated-cell-32-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>()</span>
<span id="annotated-cell-32-30">    )</span>
<span id="annotated-cell-32-31"></span>
<span id="annotated-cell-32-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remaining code omitted</span></span>
<span id="annotated-cell-32-33">    </span>
<span id="annotated-cell-32-34">  })</span>
<span id="annotated-cell-32-35">}</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-32" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-32" data-code-lines="7,19" data-code-annotation="1">Build <code>ggplot2</code> graph</span>
</dd>
<dt data-target-cell="annotated-cell-32" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-32" data-code-lines="21,24" data-code-annotation="2">Render plot<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-32" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-32" data-code-lines="26,30" data-code-annotation="3">Export bins, <code>x()</code> and <code>title()</code></span>
</dd>
</dl>
</div>
</div>
<p>The version of <code>ggHistServer()</code> above replaces the <code>ggHistServer()</code> used in the standalone app function).<sup>5</sup> The remaining modules from <code>mstsap</code> are explicitly namespaced. The code below identifies the location of each module in <code>ggHistApp()</code>: <sup>6</sup></p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide ggHistApp()</summary>
<div class="sourceCode cell-code" id="annotated-cell-33" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-33-1">ggHistApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="annotated-cell-33-2">  ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="annotated-cell-33-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="annotated-cell-33-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="annotated-cell-33-5">        mstsap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, is.data.frame),</span>
<span id="annotated-cell-33-6">        mstsap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>),</span>
<span id="annotated-cell-33-7">      ),</span>
<span id="annotated-cell-33-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-33" data-target-annotation="1">1</button><span id="annotated-cell-33-9" class="code-annotation-target">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">histogramOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>),</span>
<span id="annotated-cell-33-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app vals"</span>),</span>
<span id="annotated-cell-33-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="annotated-cell-33-12">      )</span>
<span id="annotated-cell-33-13">    )</span>
<span id="annotated-cell-33-14">  )</span>
<span id="annotated-cell-33-15"></span>
<span id="annotated-cell-33-16">  server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="annotated-cell-33-17">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mstsap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-33" data-target-annotation="2">2</button><span id="annotated-cell-33-18" class="code-annotation-target">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggSelectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-33" data-target-annotation="3">3</button><span id="annotated-cell-33-19" class="code-annotation-target">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggHistServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>, x)</span>
<span id="annotated-cell-33-20"></span>
<span id="annotated-cell-33-21">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="annotated-cell-33-22">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="annotated-cell-33-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="annotated-cell-33-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)},</span>
<span id="annotated-cell-33-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="annotated-cell-33-26">  }</span>
<span id="annotated-cell-33-27">  </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-33" data-target-annotation="4">4</button><span id="annotated-cell-33-28" class="code-annotation-target">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exportTestValues</span>(</span>
<span id="annotated-cell-33-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(),</span>
<span id="annotated-cell-33-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(),</span>
<span id="annotated-cell-33-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">react_x =</span> x,</span>
<span id="annotated-cell-33-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">react_data =</span> data</span>
<span id="annotated-cell-33-33">    )</span>
<span id="annotated-cell-33-34"></span>
<span id="annotated-cell-33-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span>
<span id="annotated-cell-33-36">}</span>
<span id="annotated-cell-33-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggHistApp</span>()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-33" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-33" data-code-lines="9" data-code-annotation="1">From <code>R/histogramOutput.R</code><br>
</span>
</dd>
<dt data-target-cell="annotated-cell-33" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-33" data-code-lines="18" data-code-annotation="2">From <code>R/ggSelectVarServer.R</code><br>
</span>
</dd>
<dt data-target-cell="annotated-cell-33" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-33" data-code-lines="19" data-code-annotation="3">From <code>inst/dev/ggHistApp/R/modules.R</code></span>
</dd>
<dt data-target-cell="annotated-cell-33" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-33" data-code-lines="28,33" data-code-annotation="4">Exported test values</span>
</dd>
</dl>
</div>
</div>
<p>In the <code>test-shinytest2-ggHistApp.R</code> test file, I’ll verify the <a href="https://vdiffr.r-lib.org/"><code>vdiffr</code> package</a> is installed, then create the <code>AppDriver</code> object with a call to <code>system.file()</code> and set the <code>height</code> and <code>width</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: ggHistApp"</span>, {</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skip_if_not_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vdiffr"</span>)</span>
<span id="cb26-3">  app_pth <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggHistApp"</span>,</span>
<span id="cb26-4">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>)</span>
<span id="cb26-5">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(app_pth,</span>
<span id="cb26-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="cb26-7">})</span></code></pre></div>
</div>
<p>View the application in the Chromium browser by running <code>app$view()</code> in the <strong>Console</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>()</span></code></pre></div>
</div>
<div class="page-columns page-full">
<div id="fig-app_view_ggHistApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view_ggHistApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view_ggHistApp" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="img/app_view_ggHistApp.png" class="lightbox page-columns page-full" data-gallery="fig-app_view_ggHistApp" title="Figure&nbsp;5&nbsp;(a): app$view()"><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/img/app_view_ggHistApp.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-app_view_ggHistApp"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view_ggHistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: View <code>ggHistApp()</code> application with <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
<p>The first expectations in the example test the default <code>input</code> values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-36" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-36-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: gghistApp"</span>, {</span>
<span id="annotated-cell-36-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skip_if_not_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vdiffr"</span>)</span>
<span id="annotated-cell-36-3"></span>
<span id="annotated-cell-36-4">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gghistApp"</span>,</span>
<span id="annotated-cell-36-5">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-36-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="annotated-cell-36-7"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-36" data-target-annotation="1">1</button><span id="annotated-cell-36-8" class="code-annotation-target">  app_init_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-dataset"</span>)</span>
<span id="annotated-cell-36-9">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_init_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BOD"</span>)</span>
<span id="annotated-cell-36-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-36-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_data,</span>
<span id="annotated-cell-36-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BOD"</span>)</span>
<span id="annotated-cell-36-13"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-36" data-target-annotation="2">2</button><span id="annotated-cell-36-14" class="code-annotation-target">  app_init_var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var-var"</span>)</span>
<span id="annotated-cell-36-15">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_init_var, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="annotated-cell-36-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-36-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_var,</span>
<span id="annotated-cell-36-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="annotated-cell-36-19">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-36" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-36" data-code-lines="8,12" data-code-annotation="1">Verify initial data</span>
</dd>
<dt data-target-cell="annotated-cell-36" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-36" data-code-lines="14,18" data-code-annotation="2">Verify initial variable</span>
</dd>
</dl>
</div>
</div>
</section>
<section id="set-and-verify-export" class="level3">
<h3 class="anchored" data-anchor-id="set-and-verify-export">Set and verify <span style="font-size: 1.10em; font-weight: bold;"><code>export</code></span></h3>
<p>Next, we check changing the input values with <strong><code>app$set_values(id-inputId)</code></strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-37" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-37-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: gghistApp"</span>, {</span>
<span id="annotated-cell-37-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skip_if_not_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vdiffr"</span>)</span>
<span id="annotated-cell-37-3"></span>
<span id="annotated-cell-37-4">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gghistApp"</span>,</span>
<span id="annotated-cell-37-5">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-37-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="annotated-cell-37-7"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-37" data-target-annotation="1">1</button><span id="annotated-cell-37-8" class="code-annotation-target">  app_init_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-dataset"</span>)</span>
<span id="annotated-cell-37-9">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_init_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BOD"</span>)</span>
<span id="annotated-cell-37-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-37-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_data,</span>
<span id="annotated-cell-37-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BOD"</span>)</span>
<span id="annotated-cell-37-13"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-37" data-target-annotation="2">2</button><span id="annotated-cell-37-14" class="code-annotation-target">  app_init_var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var-var"</span>)</span>
<span id="annotated-cell-37-15">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_init_var, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="annotated-cell-37-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-37-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_var,</span>
<span id="annotated-cell-37-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="annotated-cell-37-19">  </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-37" data-target-annotation="3">3</button><span id="annotated-cell-37-20" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="annotated-cell-37-21">  app_exp_x_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-x"</span>)</span>
<span id="annotated-cell-37-22">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="annotated-cell-37-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> app_exp_x_01,</span>
<span id="annotated-cell-37-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="annotated-cell-37-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-37-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_x_01,</span>
<span id="annotated-cell-37-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="annotated-cell-37-28"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-37" data-target-annotation="4">4</button><span id="annotated-cell-37-29" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disp"</span>)</span>
<span id="annotated-cell-37-30">  app_exp_plot_obj_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj"</span>)</span>
<span id="annotated-cell-37-31">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="annotated-cell-37-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> app_exp_plot_obj_01,</span>
<span id="annotated-cell-37-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(mtcars[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'disp'</span>]))</span>
<span id="annotated-cell-37-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-37-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_plot_obj_01,</span>
<span id="annotated-cell-37-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(mtcars[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'disp'</span>]))</span>
<span id="annotated-cell-37-37"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-37" data-target-annotation="5">5</button><span id="annotated-cell-37-38" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="annotated-cell-37-39">  app_set_bins_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-bins"</span>)</span>
<span id="annotated-cell-37-40">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_set_bins_01, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>L)</span>
<span id="annotated-cell-37-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-37-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_set_bins_01,</span>
<span id="annotated-cell-37-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="annotated-cell-37-44">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-37" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-37" data-code-lines="8,12" data-code-annotation="1">Verify initial data</span>
</dd>
<dt data-target-cell="annotated-cell-37" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-37" data-code-lines="14,18" data-code-annotation="2">Verify initial variable</span>
</dd>
<dt data-target-cell="annotated-cell-37" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-37" data-code-lines="20,27" data-code-annotation="3">Verify exported data</span>
</dd>
<dt data-target-cell="annotated-cell-37" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-37" data-code-lines="29,36" data-code-annotation="4">Verify exported var</span>
</dd>
<dt data-target-cell="annotated-cell-37" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-37" data-code-lines="38,43" data-code-annotation="5">Verify histogram changes</span>
</dd>
</dl>
</div>
</div>
</section>
<section id="verify-exports" class="level3">
<h3 class="anchored" data-anchor-id="verify-exports">Verify <span style="font-size: 1.10em; font-weight: bold;"><code>export</code></span>s</h3>
<p>Finally, we’ll test the exported values by creating <strong><code>app$get_values()$export</code></strong> and checking it’s contents:</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-38" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-38-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: gghistApp"</span>, {</span>
<span id="annotated-cell-38-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skip_if_not_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vdiffr"</span>)</span>
<span id="annotated-cell-38-3"></span>
<span id="annotated-cell-38-4">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gghistApp"</span>,</span>
<span id="annotated-cell-38-5">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="annotated-cell-38-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="annotated-cell-38-7"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="1">1</button><span id="annotated-cell-38-8" class="code-annotation-target">  app_init_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-dataset"</span>)</span>
<span id="annotated-cell-38-9">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_init_data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BOD"</span>)</span>
<span id="annotated-cell-38-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-38-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_data,</span>
<span id="annotated-cell-38-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BOD"</span>)</span>
<span id="annotated-cell-38-13"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="2">2</button><span id="annotated-cell-38-14" class="code-annotation-target">  app_init_var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var-var"</span>)</span>
<span id="annotated-cell-38-15">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_init_var, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="annotated-cell-38-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-38-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_var,</span>
<span id="annotated-cell-38-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="annotated-cell-38-19">  </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="3">3</button><span id="annotated-cell-38-20" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="annotated-cell-38-21">  app_exp_x_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-x"</span>)</span>
<span id="annotated-cell-38-22">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="annotated-cell-38-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> app_exp_x_01,</span>
<span id="annotated-cell-38-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="annotated-cell-38-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-38-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_x_01,</span>
<span id="annotated-cell-38-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="annotated-cell-38-28"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="4">4</button><span id="annotated-cell-38-29" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disp"</span>)</span>
<span id="annotated-cell-38-30">  app_exp_plot_obj_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj"</span>)</span>
<span id="annotated-cell-38-31">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="annotated-cell-38-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> app_exp_plot_obj_01,</span>
<span id="annotated-cell-38-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(mtcars[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'disp'</span>]))</span>
<span id="annotated-cell-38-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-38-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_plot_obj_01,</span>
<span id="annotated-cell-38-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(mtcars[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'disp'</span>]))</span>
<span id="annotated-cell-38-37"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="5">5</button><span id="annotated-cell-38-38" class="code-annotation-target">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="annotated-cell-38-39">  app_set_bins_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-bins"</span>)</span>
<span id="annotated-cell-38-40">  waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(app_set_bins_01, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>L)</span>
<span id="annotated-cell-38-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-38-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_set_bins_01,</span>
<span id="annotated-cell-38-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="annotated-cell-38-44"></span>
<span id="annotated-cell-38-45">  </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="6">6</button><span id="annotated-cell-38-46" class="code-annotation-target">  exp_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export</span>
<span id="annotated-cell-38-47"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="7">7</button><span id="annotated-cell-38-48" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="8">8</button><span id="annotated-cell-38-49" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, mtcars[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'disp'</span>])</span>
<span id="annotated-cell-38-50"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="9">9</button><span id="annotated-cell-38-51" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-plot_obj</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-38" data-target-annotation="10">10</button><span id="annotated-cell-38-52" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="annotated-cell-38-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-plot_obj</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="annotated-cell-38-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(mtcars[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'disp'</span>]))</span>
<span id="annotated-cell-38-55">})</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-38" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="8,12" data-code-annotation="1">Verify initial data</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="14,18" data-code-annotation="2">Verify initial variable</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="20,27" data-code-annotation="3">Verify exported data</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="29,36" data-code-annotation="4">Verify exported var</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="38,43" data-code-annotation="5">Verify histogram changes</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="46" data-code-annotation="6">Export expected values</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="48" data-code-annotation="7">Verify hist-x is data.frame</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="49" data-code-annotation="8">Verify hist-x is correct column</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="51" data-code-annotation="9">Verify hist-plot_obj is numeric</span>
</dd>
<dt data-target-cell="annotated-cell-38" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-38" data-code-lines="52,54" data-code-annotation="10">Verify hist-plot_obj is vector</span>
</dd>
</dl>
</div>
</div>
</section>
<section id="verify-plot-with-vdiffr" class="level3">
<h3 class="anchored" data-anchor-id="verify-plot-with-vdiffr">Verify plot with <span style="font-size: 1.10em; font-weight: bold;"><code>vdiffr</code></span></h3>
<p>Now we verify the plot with the exported <code>plot_obj</code> (in the <code>hist</code> module) with <code>expect_doppelganger()</code> from the <code>vdiffr</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="annotated-cell-39" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-39-1">gg2_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-hist"</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-39" data-target-annotation="1">1</button><span id="annotated-cell-39-2" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(gg2_plot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>alt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plot object"</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-39" data-target-annotation="2">2</button><span id="annotated-cell-39-3" class="code-annotation-target">  vdiffr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_doppelganger</span>(</span>
<span id="annotated-cell-39-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars_disp_plot"</span>,</span>
<span id="annotated-cell-39-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="annotated-cell-39-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span></span>
<span id="annotated-cell-39-7">              ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> disp)</span>
<span id="annotated-cell-39-8">          ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="annotated-cell-39-9">            ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="annotated-cell-39-10">            ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="annotated-cell-39-11">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-title</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="annotated-cell-39-12">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [bins = "</span>,</span>
<span id="annotated-cell-39-13">                             exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>),</span>
<span id="annotated-cell-39-14">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>,</span>
<span id="annotated-cell-39-15">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="annotated-cell-39-16">            ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="annotated-cell-39-17">            ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="annotated-cell-39-18">      )</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-39" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-39" data-code-lines="2" data-code-annotation="1">Check the rendered plot object<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-39" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-39" data-code-lines="3,18" data-code-annotation="2"><code>ggHistApp()</code> renders a <code>ggplot2</code> graph, which makes it easier to demonstrate <a href="https://rstudio.github.io/shinytest2/articles/robust.html#example">this example of checking a plot</a> from the <code>shinytest2</code> package website.</span>
</dd>
</dl>
</div>
</div>
<p><em>I saved the test file and ran the test to confirm the snapshot file was created in <code>tests/testthat/_snaps/</code></em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">──</span> Warning <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test-shinytest2-gghistApp.R:72:3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> {shinytest2}: gghistApp ─────────</span>
<span id="cb28-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Adding</span> new file snapshot: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tests/testthat/_snaps/mtcars-disp-plot.svg'</span></span></code></pre></div>
</div>
</section>
<section id="set-get-expect" class="level3">
<h3 class="anchored" data-anchor-id="set-get-expect">Set, get, expect</h3>
<p>The process above is repeated with new values passed to <strong><code>app$set_inputs()</code></strong> and verified with <strong><code>app$get_values()</code></strong>:</p>
<ul>
<li>The <code>data-dataset</code>, <code>var-var</code>, and <code>hist-bins</code> are updated again with new values.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify usaarrests_plot ---- </span></span>
<span id="cb29-2">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USArrests"</span>)</span>
<span id="cb29-3">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UrbanPop'</span>)</span>
<span id="cb29-4">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
</div>
<ul>
<li>The updated values are exported automatically with <code>exportTestValues()</code> and stored in <code>exp_values</code>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># export values </span></span>
<span id="cb30-2">exp_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export</span></code></pre></div>
</div>
<ul>
<li>The new plot is verified again with <code>expect_doppelganger()</code>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">vdiffr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_doppelganger</span>(</span>
<span id="cb31-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"usaarrests_plot"</span>,</span>
<span id="cb31-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb31-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span></span>
<span id="cb31-5">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> UrbanPop)</span>
<span id="cb31-6">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb31-7">        ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-8">        ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb31-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-title</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb31-10">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [bins = "</span>,</span>
<span id="cb31-11">                         exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>),</span>
<span id="cb31-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>,</span>
<span id="cb31-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="cb31-14">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-15">        ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb31-16">  )</span></code></pre></div>
</div>
<p>Now that we have a template, we can set, get, and expect multiple plot snapshots:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## SET -----</span></span>
<span id="cb32-2">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sleep"</span>)</span>
<span id="cb32-3">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extra'</span>)</span>
<span id="cb32-4">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb32-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GET ----</span></span>
<span id="cb32-6">  exp_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export</span>
<span id="cb32-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># EXPECT ----</span></span>
<span id="cb32-8">  vdiffr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_doppelganger</span>(</span>
<span id="cb32-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sleep_extra_plot"</span>,</span>
<span id="cb32-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data,</span>
<span id="cb32-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span></span>
<span id="cb32-12">            ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> extra)</span>
<span id="cb32-13">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-14">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-15">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb32-16">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-title</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb32-17">                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [bins = "</span>,</span>
<span id="cb32-18">                           exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>),</span>
<span id="cb32-19">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>,</span>
<span id="cb32-20">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(exp_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x)</span>
<span id="cb32-21">          ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-22">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb32-23">    )</span></code></pre></div>
</div>
<p>The initial run of this test will save the snapshot file to <code>tests/testthat/_snaps/</code>:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">tests/testthat/_snaps/shinytest2-gghistApp</span>
<span id="cb33-2">├── mtcars-disp-plot.svg</span>
<span id="cb33-3">├── sleep-extra-plot.svg</span>
<span id="cb33-4">└── usaarrests-plot.svg</span>
<span id="cb33-5"></span>
<span id="cb33-6">1 directory, 3 files</span></code></pre></div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>The final results of <code>devtools::test()</code> in <code>msst2ap</code> are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb35-1">==&gt; devtools::test()</span>
<span id="cb35-2"></span>
<span id="cb35-3">ℹ Testing msst2ap</span>
<span id="cb35-4">✔ | F W  S  OK | Context</span>
<span id="cb35-5">✔ |          1 | shinytest2-datasetApp [4.8s]                                                   </span>
<span id="cb35-6">⠼ |          5 | shinytest2-gghistApp       </span>
<span id="cb35-7">⠋ |         11 | shinytest2-gghistApp                                   </span>
<span id="cb35-8">⠙ |         12 | shinytest2-gghistApp                       </span>
<span id="cb35-9">✔ |         13 | shinytest2-gghistApp [5.1s]                                </span>
<span id="cb35-10">✔ |          5 | shinytest2-histogramApp [3.6s]                                                 </span>
<span id="cb35-11">✔ |          2 | shinytest2-selectVarApp [2.2s]                                                 </span>
<span id="cb35-12">✔ |          1 | shinytest2 [4.2s]                                                              </span>
<span id="cb35-13"></span>
<span id="cb35-14">══ Results ══════════════════════════════════════════════════════════════════</span>
<span id="cb35-15">Duration: 19.9 s</span>
<span id="cb35-16"></span>
<span id="cb35-17">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 22 ]</span></code></pre></div>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has covered creating tests with <code>testthat</code> and <code>shinytest2</code> for an app-package containing a Shiny application. In general, <code>shinytest2</code> is designed for end-to-end testing of Shiny applications. System tests (or regression testing) can capture the state of a Shiny app (input, output, and exported values) during user interactions and compare them with a previous state (i.e., snapshots). As we can see, <code>shinytest2</code> makes it easier to test specific app behaviors and set expectations iteratively with the <code>AppDriver</code>.</p>
<p><code>shinytest2</code> tests can also simulate user interaction in a way that <code>testServer()</code> tests can’t, such as waiting for reactive outputs to update after the input changes, clicking on action buttons, etc. <code>shinytest2</code> can also be resource-intensive, so it’s recommended to write these tests after you’ve completed the standard <code>testthat</code> unit tests and <code>testServer()</code> tests.</p>
<p>Other things to consider when writing <code>shinytest2</code> tests include:</p>
<ol type="1">
<li><p><strong>Define What to Test</strong>: Since Shiny apps are interactive, so <code>shinytest2</code> tests should simulate user interaction as much as possible. The tests should focus on key user interactions and the output they should generate. <code>shinytest2</code> provides functions for simulating user clicks, inputs, and other interactions. Not every interaction needs to be tested, but crucial ones and those that handle complex logic should be.</p></li>
<li><p><strong>Organize Your Tests &amp; Use Descriptive Test Names</strong>: Organize your tests into separate files based on the app or feature they test. Each test should have a descriptive name that clarifies what the test is for. Organizing your test files with unambiguous names will make it easier to manage multiple tests, and it will make it easier to understand what’s going wrong when a test fails.</p></li>
<li><p><strong>Create snapshots for expected outputs</strong>: Use snapshot files to verify that an app’s output matches the expected results. <code>AppDriver$expect_values()</code> generates <code>.json</code> and <code>.png</code> snapshot files for the application. The .json file contains <code>input</code>, <code>output</code>, and <code>export</code> values, and the .png file is a <em>debug</em> screenshot, which records how the app looked when the values where captured. These files can then be compared to a baseline snapshot.</p></li>
<li><p><strong>Export app values</strong>: While snapshot files are great for detecting changes, it’s important to remember that “<em>differences in the captured screenshot will never cause test failures.</em>” Manually inspecting the snapshot .png files during test development can also be time-consuming and tedious. Wherever possible, export app values and compare them against expected reference values.</p></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>“<em>In some cases, it’s useful to snapshot some bits of internal state of an application – state that’s not reflected directly in the inputs or outputs. This can be done by exporting values.</em>” - <a href="https://rstudio.github.io/shinytest2/articles/in-depth.html#exported-values"><code>shinytest2</code> documentation</a>↩︎</p></li>
<li id="fn2"><p>“<em>It cannot be recommended enough to use <code>exportTestValues()</code> to test your Shiny app’s reactive values.</em>” - <a href="https://rstudio.github.io/shinytest2/articles/robust.html#exported-values"><code>shinytest2</code> documentation</a>↩︎</p></li>
<li id="fn3"><p>Read more about exporting test values <a href="https://shiny.posit.co/r/reference/shiny/1.0.2/exporttestvalues">here</a>.↩︎</p></li>
<li id="fn4"><p>This section replicates these <a href="https://rstudio.github.io/shinytest2/articles/robust.html#example">test examples from <code>shinytest2</code></a> using the <code>ggHistApp()</code>.↩︎</p></li>
<li id="fn5"><p>This version is loaded from a <code>inst/dev/histogramApp/R/modules.R</code> file.↩︎</p></li>
<li id="fn6"><p>This version is loaded from a <code>inst/dev/histogramApp/R/app.R</code> file.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Shiny</category>
  <category>Testing</category>
  <guid>https://mjfrigaard.github.io/posts/p4-test-system-shiny/</guid>
  <pubDate>Sun, 15 Oct 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p4-test-system-shiny/image.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Testing Shiny modules</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/</link>
  <description><![CDATA[ 





<p>This is the third post in a <a href="https://mjfrigaard.github.io/series.html">series on testing</a> shiny applications. I’ll cover testing shiny module server functions using the <a href="https://testthat.r-lib.org/"><code>testhat</code> package</a> and shiny’s <a href="https://shiny.rstudio.com/reference/shiny/1.7.0/testserver"><code>testServer()</code> function</a>.</p>
<section id="testing-shiny-modules" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testing-shiny-modules">Testing shiny modules</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="shiny.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/shiny.png" class="img-fluid" style="width:40.0%"></a></p>
</div></div><p>Shiny functions pose a couple of unique challenges for testing. First, we can’t execute shiny <code>server</code> functions in the console. Second, as Shiny apps become more complex, it’s <a href="https://engineering-shiny.org/structuring-project.html#using-shiny-modules">highly</a> <a href="https://mastering-shiny.org/scaling-modules.html#module-motivation">recommended</a> to break up the code base into <a href="https://shiny.posit.co/r/articles/improve/modules/index.html">modules</a>. Modules have additional challenges due to their reactivity being split between interconnected UI and server functions.</p>
<p>The <code>shiny</code> package doesn’t provide a direct, built-in way to test modules, but the <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/"><code>testServer()</code></a> function addresses these challenges by testing “<em>reactive interactions</em>” in module server functions. <code>testServer()</code> also works with <a href="https://testthat.r-lib.org/"><code>testthat</code></a>, which means we can structure these ‘reactive interaction’ tests just like other unit tests (for non-application functions).</p>
</section>
<section id="a-shiny-app-package" class="level2">
<h2 class="anchored" data-anchor-id="a-shiny-app-package">A Shiny App-Package</h2>
<p><code>testthat</code> is designed to work within an R package, and the <a href="https://github.com/mjfrigaard/sapkgs/tree/mstsap"><code>mstsap</code></a> branch of <code>sapkgs</code> has a <strong>M</strong>astering <strong>S</strong>hiny <strong>t</strong>est<strong>S</strong>erver <strong>a</strong>pp-<strong>p</strong>ackage to demonstrate writing tests with <code>testServer()</code>.</p>
<p>The functions, modules, and applications in <code>mstsap</code> come from the <a href="https://mastering-shiny.org/scaling-modules.html">Shiny Modules chapter</a> of Mastering Shiny.<sup>1</sup> If you haven’t read this chapter–start there.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to get the mstsap package used in this post:</span></span>
<span id="cb1-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>()</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mstsap)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="Why create an app-package?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why create an app-package?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>A shiny app-package is a shiny application that’s been developed as (or converted to) an R package. The benefits of storing shiny apps in R packages have been <a href="https://mastering-shiny.org/scaling-packaging.html">well</a> <a href="https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package">documented</a>, but I’ll summarize just a few that are specific to testing:</p>
<ol type="1">
<li><strong>Standardized folder structure</strong>:
<ol type="a">
<li>If unit tests are performed with <code>testthat</code>, minimal setup is required to perform tests.</li>
<li><code>usethis::use_testthat()</code> sets up test files in the tests/testthat/ folder (to test the code in the R/ folder)<br>
</li>
<li><em>Read more about using <code>testthat</code> with R packages <a href="https://r-pkgs.org/testing-basics.html">here.</a></em></li>
</ol></li>
<li><strong>Test extras</strong>:
<ol type="a">
<li>Test data can be placed in <code>tests/testthat/&lt;test dir&gt;/&lt;test_data.rds&gt;</code><br>
</li>
<li>The code used to create the test data should be placed in <code>make_&lt;test_data.rds&gt;</code><br>
</li>
<li>Additional testing functions can be stored in <code>tests/testthat/helpers.R</code><br>
</li>
<li><em>Read more about test helpers <a href="https://r-pkgs.org/testing-design.html#testthat-helper-files">here.</a></em></li>
</ol></li>
<li><strong>Development tools</strong>:
<ol type="a">
<li>If you’re using RStudio, tests can be run individually (<code>testthat::test_file()</code>) or collectively (<code>devtools::test()</code>), and code helpers and data are loaded using <code>devtools::load_all()</code><br>
</li>
<li>Tests created with <code>testthat</code> remain isolated during development<br>
</li>
<li><em>Read more about developing packages with RStudio in the <a href="https://r-pkgs.org/">R Packages text.</a></em></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</section>
<section id="modules" class="level2">
<h2 class="anchored" data-anchor-id="modules">Modules</h2>
<p>In <a href="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/">a previous post</a>, I used the following definition for unit tests,</p>
<blockquote class="blockquote">
<p>“<em>A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work.</em>” - <a href="https://www.manning.com/books/the-art-of-unit-testing-second-edition">The Art of Unit Testing, 2nd edition</a></p>
</blockquote>
<p>Shiny modules can also be broken into discrete ‘units of work’ with expected ‘end results.’ Modules are <a href="https://mastering-shiny.org/scaling-modules.html">‘<em>a pair of UI and server functions</em>’</a> designed to compartmentalize input and output IDs into distinct namespaces.<sup>2</sup></p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Shiny module refresher">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Shiny module refresher
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Module UI functions typically wrap the layout, input, and output functions in <code>tagList()</code>. Module server functions contain the ‘backend’ code that typically goes in a shiny <code>server</code> function. Both the UI and server module functions are linked by an <code>id</code> argument, which is created using <code>NS()</code> (namespace) in the UI function, and called in the server function with <code>moduleServer()</code>.</p>
<section id="module-ui-functions" class="level3">
<h3 class="anchored" data-anchor-id="module-ui-functions">Module UI functions</h3>
<p>Below is an example module UI function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mod_fun_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">namespace =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_input"</span>)),</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">namespace =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_out"</span>))</span>
<span id="cb2-5">  )</span>
<span id="cb2-6">}</span></code></pre></div>
</div>
<ul>
<li><p><code>mod_fun_ui</code> creates a dedicated namespace for one <code>inputId</code> and one <code>outputId</code> with <code>shiny::NS()</code>:</p>
<div class="cell">
<pre><code>█─mod_fun_ui 
├─id 
└─█─tagList 
  ├─█─numericInput 
  │ └─inputId = █─NS 
  │             ├─namespace = id 
  │             └─id = "num_input" 
  └─█─uiOutput 
    └─outputId = █─NS 
                 ├─namespace = id 
                 └─id = "num_out" </code></pre>
</div></li>
</ul>
</section>
<section id="module-server-functions" class="level3">
<h3 class="anchored" data-anchor-id="module-server-functions">Module server functions</h3>
<p>The corresponding module server function is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod_fun_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb4-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb4-3">            ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session</span>
<span id="cb4-4">          output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_input)</span>
<span id="cb4-5">      })</span>
<span id="cb4-6">}</span></code></pre></div>
</div>
<ul>
<li><p>The code to render the reactive <code>input$num_input</code> with <code>output$num_out</code> is contained in the nested call to <code>moduleServer()</code></p>
<div class="cell">
<pre><code>█─mod_fun_server 
├─id 
└─█─moduleServer 
  ├─id = id 
  ├─server = █─`function(input, output, session)` 
  │          ├─`ns &lt;- session` 
  │          ├─`output$num_out &lt;-` 
  │          └─█─renderUI 
  │            └─`input$num_input` 
  └─session = session </code></pre>
</div></li>
</ul>
</section>
<section id="using-modules" class="level3">
<h3 class="anchored" data-anchor-id="using-modules">Using modules</h3>
<p>Both module functions are combined in the <code>ui</code> and <code>server</code> arguments of <code>shinyApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb6-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb6-3">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_fun_ui</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod"</span>)</span>
<span id="cb6-4">        ),</span>
<span id="cb6-5">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) </span>
<span id="cb6-6">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_fun_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod"</span>)</span>
<span id="cb6-7">  )</span></code></pre></div>
</div>
<ul>
<li><p>The <code>id</code> arguments connect the UI and server functions to communicate between the UI and backend of the app:</p>
<div class="cell">
<pre><code>█─shinyApp 
├─ui = █─fluidPage 
│      └─█─mod_fun_ui 
│        └─id = "mod namespace" 
└─server = █─`function(input, output, session)` 
           └─█─mod_fun_server 
             └─id = "mod namespace" </code></pre>
</div></li>
</ul>
<p>I recommend creating test files when you create module files (i.e., with <code>usethis::use_r()</code> &amp; <code>usethis::use_test()</code>).</p>
</section>
</div>
</div>
</div>
<p>However, the ‘unit of work’ for a Shiny module might be accomplished with a combination of a module UI and server functions, <em>and</em> a helper/utility function.</p>
<p><code>mstsap</code> contains three modules: <code>dataset</code>, <code>selectVar</code>, and <code>selectDataVar</code>. If you’re like more information on these modules, click on the links below.</p>
<section id="dataset-input-module" class="level3">
<h3 class="anchored" data-anchor-id="dataset-input-module">1) Dataset input module</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="dataset.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/dataset.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<p><a href="https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output"><code>datasetInput</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output"><code>datasetServer</code></a>: loads and returns data object from the <code>datasets</code> package (filtered by data frames or matrices)</p>
</div>
</div>
</div>
<p>The objects from <code>datasets</code> are filtered in the UI module function with a <code>filter</code> argument that can be used to <em>“limit the options to built-in datasets that are either data frames (<code>filter = is.data.frame</code>) or matrices (<code>filter = is.matrix</code>)”</em>. The <code>names</code> are passed to the <code>choices</code> in the <code>selectInput()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide choices in datasetInput()</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb8-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(filter)) {</span>
<span id="cb8-3">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(names, get, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb8-4">    names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> names[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb8-5">  }</span></code></pre></div>
</details>
</div>
<p>The <code>datasets</code> object is returned with <code>get()</code> (wrapped in <code>reactive()</code>). See below:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide returned data from datasetServer()</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(</span>
<span id="cb9-2">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb9-3">    )</span></code></pre></div>
</details>
</div>
</section>
<section id="selectvar-module" class="level3">
<h3 class="anchored" data-anchor-id="selectvar-module">2) selectVar module</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="selectVar.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVar.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<p><a href="https://mastering-shiny.org/scaling-modules.html#case-study-selecting-a-numeric-variable"><code>selectVarInput</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#server-inputs"><code>selectVarServer</code></a>: displays a <code>selectInput()</code> that “<em>allows the user to select variables of specified type from a given reactive dataset.</em>”</p>
</div>
</div>
</div>
<p>The <code>data</code> argument in <code>selectVarServer()</code> is the returned value from <code>datasetServer()</code>. The <code>data()</code> is used with the <code>filter</code> argument in the <code>find_vars()</code> function:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide find_vars()</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb10-2"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I've included the updated version with the 'stopifnot()' checks!</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data))</span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(filter))</span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb10-6">}</span></code></pre></div>
</details>
</div>
<p>The filter argument can be used to return variables by class/type (using <code>is.*</code> functions like <code>is.numeric()</code> or <code>is.character()</code>).</p>
<p>When <code>data()</code> changes, the output from <code>find_vars()</code> updates the choices in the variable <code>selectInput()</code> (i.e., <code>input$var</code>). See below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="selectVar_find_vars.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVar_find_vars.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></a></p>
</figure>
</div>
<p><code>selectVarServer()</code> also returns the selected variable (<code>input$var</code>) as a reactive value (<code>var()</code>)</p>
</section>
<section id="selectdatavar-module" class="level3">
<h3 class="anchored" data-anchor-id="selectdatavar-module">3) selectDataVar module</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="selectDataVar.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVar.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<p><a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><code>selectDataVarUI</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><code>selectDataVarServer</code></a>: The <code>selectDataVar</code> module is from the section titled, “<a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><em>Modules inside of modules</em></a>”, so here we see the <code>dataset</code> and <code>selectVar</code> modules placed <em>inside</em> the <code>selectDataVar</code> module (each with a new namespace (<code>NS()</code>)).</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Naming modules">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Naming modules
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.15em; color: #063E23;">
<p>When creating an app-packages, modules are stored in the <code>R/</code> folder as a single file, typically following a <a href="https://mastering-shiny.org/scaling-modules.html#naming-conventions">naming convention</a> that differentiates modules from the other package functions. The modules in this post use <a href="https://en.wikipedia.org/wiki/Camel_case">camelCase</a>, with suffix variations (i.e., <code>Input</code>/<code>Server</code> and <code>UI</code>/<code>Server</code>) for each functions. Other options come from the <a href="https://thinkr-open.github.io/golem/"><code>golem</code></a> and <a href="https://leprechaun.opifex.org/#/"><code>leprechaun</code></a> packages.</p>
<p><code>golem</code> modules are created with <a href="https://thinkr-open.github.io/golem/reference/add_module.html"><code>golem::add_module()</code></a></p>
</div>
<div class="cell">
<details class="code-fold">
<summary>expand to see golem::add_module(“inputs”)</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">mod_inputs_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id){</span>
<span id="cb11-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb11-4">  )</span>
<span id="cb11-5">}</span>
<span id="cb11-6">mod_inputs_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id){</span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>( id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session){</span>
<span id="cb11-8">    ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb11-9"> </span>
<span id="cb11-10">  })</span>
<span id="cb11-11">}</span>
<span id="cb11-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## To be copied in the UI</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mod_inputs_ui("inputs_1")</span></span>
<span id="cb11-14">    </span>
<span id="cb11-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## To be copied in the server</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mod_inputs_server("inputs_1")</span></span></code></pre></div>
</details>
</div>
<div style="font-size: 1.15em; color: #063E23;">
<p><code>golem</code> modules the following naming convention:</p>
<ol type="1">
<li><p>All new module functions have a <code>mod_</code> prefix</p></li>
<li><p><code>golem</code> module functions are differentiated with either a <code>_ui</code> or <code>_server</code> suffix</p></li>
<li><p>New <code>golem</code> module files are named <code>R/mod_&lt;name&gt;.R</code></p></li>
</ol>
<p><code>leprechaun</code> modules are also created with a <a href="https://leprechaun.opifex.org/#/reference/add_module"><code>leprechaun::add_module()</code></a> function.</p>
</div>
<div class="cell">
<details class="code-fold">
<summary>expand to see leprechaun::add_module(“inputs”)</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">inputsUI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id){</span>
<span id="cb12-2">    ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb12-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs"</span>)</span>
<span id="cb12-5">    )</span>
<span id="cb12-6">}</span>
<span id="cb12-7">inputs_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id){</span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb12-9">                ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb12-10">                send_message <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_send_message</span>(session)</span>
<span id="cb12-11">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb12-12">        }</span>
<span id="cb12-13">    )</span>
<span id="cb12-14">}</span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI</span></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputsUI('id')</span></span>
<span id="cb12-17"></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server</span></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputs_server('id')</span></span></code></pre></div>
</details>
</div>
<div style="font-size: 1.15em; color: #063E23;">
<p><code>leprechaun</code> modules have a slightly different naming convention:</p>
<ol type="1">
<li><p>All new UI module functions have a <code>UI</code> suffix</p></li>
<li><p>All new module server functions have a <code>_server</code> suffix</p></li>
<li><p><code>leprechaun</code> module functions <em>do not have a prefix</em></p></li>
<li><p>New <code>leprechaun</code> modules named <code>module_&lt;name&gt;.R</code></p></li>
</ol>
<p>Shiny app-packages often require multiple modules and utility functions, so uniform names will make it easier to manage (and test!) your code.</p>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="standalone-app-functions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="standalone-app-functions">Standalone App Functions</h2>
<p><code>mstsap</code> contains three <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">standalone functions</a> for running each set of module functions.</p>
<p>I’ve made a small change to each standalone app function–each app has a call to <code>reactiveValuesToList()</code> that displays in the UI.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>print reactive values</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb13-2"></span>
<span id="cb13-3">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb13-4">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb13-5">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb13-7">  })</span></code></pre></div>
</details>
</div>
<section id="datasetapp" class="level3">
<h3 class="anchored" data-anchor-id="datasetapp">datasetApp</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="datasetApp.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<p><code>datasetApp()</code> contains a call to the <code>dataset</code> module, and includes a <code>tableOutput()</code> to render the selected data object:</p>
</div>
</div>
</div>
<p>When <code>datasetApp()</code> is run, the app displays the dataset object in the <code>tableOutput()</code>, and the <code>verbatimTextOutput()</code> renders the reactive values as a text:</p>
<div id="fig-datasetApp_run" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center" width="100%">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-datasetApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="datasetApp_run.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Figure&nbsp;1: "><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp_run.png" id="fig-datasetApp_run" class="img-fluid quarto-figure quarto-figure-center anchored figure-img" style="width:100.0%"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-datasetApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1
</figcaption>
</figure>
</div>
<p>The output above shows what <code>NS()</code> does in the <code>dataset</code> module–it appends the module <code>id</code> argument to the <code>inputId</code> (which is why we see <code>dataset-dataset</code>).</p>
<ul>
<li><p><strong><code>dataset-</code>:</strong> the module id</p></li>
<li><p><strong><code>dataset-dataset</code></strong> the <code>inputId</code> from the <code>selectInput()</code></p></li>
</ul>
</section>
<section id="selectvarapp" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="selectvarapp">selectVarApp</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="selectVarApp.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVarApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<p><code>selectVarApp()</code> includes both <code>dataset</code> and <code>selectVar</code> modules, but instead of rendering the output in a table, the UI renders the variable output in a <code>verbatimTextOutput()</code>.</p>
</div>
</div>
</div>
<p>Note that <code>selectVarApp()</code> contains namespaces for two modules:</p>
<ol type="1">
<li><p><strong><code>"data"</code></strong>: the namespace for the <code>datasetnput()</code> and <code>datasetServer()</code> modules, inheriting the <code>filter</code> argument and creating the data object</p></li>
<li><p><strong><code>"var"</code></strong>: the <code>selectVar</code> modules are linked with the <code>"var"</code> id. <code>selectVarServer()</code> uses the <code>data</code> object created by <code>datasetServer()</code> (and also inherits the <code>filter</code> argument).</p></li>
</ol>
<p>These namespaced IDs are rendered below with <code>reactiveValuesToList()</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="selectVarApp_run.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVarApp_run.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></a></p>
</figure>
</div>
<p>There’s a lot happening in <code>selectVarApp()</code>, so I’ve created the figure below to display the code for the modules with their displayed outputs:</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="selectVarApp_schema.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-10"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVarApp_schema.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%"></a></p>
</figure>
</div>
</div>
<p>As we can see, the <code>data</code> output from the <code>dataset</code> module is used to generate the <code>vars()</code> reactive for the <code>verbatimTextOutput()</code> in <code>selectVarApp()</code>. Note that both <code>dataset</code> and <code>selectVar</code> modules don’t contain any output functions–these have been provided in the UI for both <code>datasetApp()</code> and <code>selectVarApp()</code>.</p>
</section>
<section id="selectdatavarapp" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="selectdatavarapp">selectDataVarApp</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="selectDataVarApp.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<p>The final app in <code>mstsap</code> is <code>selectDataVarApp()</code>. Here the inputs from <code>dataset</code> and <code>selectVar</code> have been moved into the <code>sidebarPanel()</code>, and the output is rendered in the <code>mainPanel()</code>.</p>
</div>
</div>
</div>
<p>The reactive values here show how the <a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules">‘Modules inside of modules’</a> work–by adding the additional call to <code>NS()</code> in the <code>datasetInput()</code> and <code>selectVarInput()</code> functions <em>within</em> <code>selectDataVarUI()</code> and <code>selectDataVarServer()</code>, an additional namespace is appended to the reactive values (<code>input$dataset</code> and <code>input$var</code>):</p>
<div id="fig-selectDataVarApp_run" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectDataVarApp_run" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="selectDataVarApp_run.png" class="lightbox" data-gallery="fig-selectDataVarApp_run" title="Figure&nbsp;2&nbsp;(a): selectDataVarApp with reactive values"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp_run.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-selectDataVarApp_run"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectDataVarApp</code> with reactive values
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: <code>selectDataVarApp</code> with <code>reactiveValuesToList()</code>
</figcaption>
</figure>
</div>
<p>Below is a figure that displays the contents of the <code>selectDataVar</code> modules (I’ve removed the <code>tagList()</code> and <code>moduleServer()</code> for simplicity), the <code>selectDataVarApp()</code>, and the rendered outputs:</p>
<div class="page-columns page-full">
<div id="fig-selectDataVarApp_schema" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-selectDataVarApp_schema" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="selectDataVarApp_schema.png" class="lightbox page-columns page-full" data-gallery="fig-selectDataVarApp_schema" title="Figure&nbsp;3&nbsp;(a): selectDataVarApp schema"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp_schema.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-right" style="width:100.0%" data-ref-parent="fig-selectDataVarApp_schema"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectDataVarApp</code> schema
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: <code>dataset</code> and <code>selectVar</code> modules inside <code>selectDataVar</code> module with rendered outputs
</figcaption>
</figure>
</div>
</div>
</section>
</section>
<section id="testserver" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testserver">testServer()</h2>
<p>Module server functions can be tested the same way as a traditional shiny <code>server</code> function, as long as you provide the inputs and verify the correct outputs. Below I’ll cover some general advice on module server tests (and the arguments in <code>testServer()</code>).</p>
<section id="what-should-i-test" class="level3">
<h3 class="anchored" data-anchor-id="what-should-i-test">What should I test?</h3>
<p>The best bit of advice I’ve found helpful when writing tests comes from <a href="https://r-pkgs.org/testing-design.html#what-to-test">R Packages</a>,</p>
<blockquote class="blockquote">
<p><em>“focus your time on code that you’re not sure about, is fragile, or has complicated interdependencies”</em></p>
</blockquote>
<p>The quote isn’t in reference to testing modules or Shiny application functions, but I’ve found it’s easy to fall into the trap of trying to test <em>everything</em> when a targeted approach is more efficient (and equally valid).</p>
<p>The items below have been compiled from <a href="https://mastering-shiny.org/scaling-testing.html#basic-workflow">Mastering Shiny</a>, <a href="https://r-pkgs.org/testing-design.html#what-to-test">R Packages</a>, and <a href="https://engineering-shiny.org/build-yourself-safety-net.html#testing-your-app">Engineering Production-Grade Shiny Apps</a>:</p>
<ol type="1">
<li><strong><em>Do the inputs/outputs behave as expected?</em></strong>
<ul>
<li>These tests verify the module server function <code>inputId</code>s and <code>outputId</code>s are properly namespaced and accessible</li>
</ul></li>
<li><strong><em>Does the module contain the expected reactive values/objects?</em></strong>
<ul>
<li>Tests should verify it’s reactivity–module server functions will automatically recompute the outputs when it’s inputs change, so tests should verify changes to inputs produce the expected behaviors and outputs. This includes any returned values from the module (and any additional function arguments).</li>
</ul></li>
<li><strong><em>Are the calculations correct?</em></strong>
<ul>
<li>If the module server function performs calculations or data manipulations, the tests should verify the module produces the correct result (ideally for a variety of inputs and edge cases).</li>
</ul></li>
<li><strong><em>How are errors handled in the module?</em></strong>
<ul>
<li>What errors are displayed from the module? Tests should simulate scenarios that can test if the module: 1) returns errors that are informative, 2) fails silently (when appropriate), or 3) falls back to the correct default behavior.</li>
</ul></li>
</ol>
<p>The first test I’ll perform is for <code>datasetServer()</code>, the module used to return a data object from the <code>datasets</code> package.</p>
</section>
<section id="arguments" class="level3">
<h3 class="anchored" data-anchor-id="arguments">Arguments</h3>
<p><code>testServer()</code> has the following arguments:</p>
<ul>
<li><p><code>app</code> can be a module server function (i.e., <code>datasetServer</code>), or any <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html"><code>shiny.appobj</code></a></p></li>
<li><p><code>expr</code> is where I’ll add the <code>testthat</code> expectations and other test code</p></li>
<li><p><code>args</code> is a <code>list()</code> I can use to include any module server function arguments</p></li>
</ul>
</section>
<section id="testing-inputs" class="level3">
<h3 class="anchored" data-anchor-id="testing-inputs">Testing inputs</h3>
<p>I’ll start by testing if the initial input value (<code>input$dataset</code>) in <code>datasetServer()</code> is set to <code>NULL</code>. The module server function is the first argument in <code>testServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> datasetServer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">datasetServer: dataset$input is NULL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-4">})</span></code></pre></div>
</div>
<ul>
<li><p>Add custom messages with <code>cat()</code> and the <code>inputId</code> we’re testing. Then load, document, and install the package</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">devtools::load_all()</span>
<span id="cb15-2">ℹ Loading mstsap</span>
<span id="cb15-3">devtools::document()</span>
<span id="cb15-4">ℹ Updating mstsap documentation</span>
<span id="cb15-5">ℹ Loading mstsap</span>
<span id="cb15-6"></span>
<span id="cb15-7">Restarting R session...</span>
<span id="cb15-8"></span>
<span id="cb15-9">library(mstsap)</span></code></pre></div>
<ul>
<li>And run the test with <code>testthat::test_file()</code>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb17-2">datasetServer: dataset$input is NULL </span></code></pre></div></li>
</ul>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Test comments with `testServer()`">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Test comments with <code>testServer()</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>The <code>testServer()</code> documentation has <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/">examples</a> of using <code>cat()</code> to create custom messages. I put a function for creating <code>testServer()</code> messages (<code>test_cmt()</code>) in the <a href="https://github.com/mjfrigaard/mstsap/blob/main/tests/testthat/helper.R"><code>helper.R</code></a> file (<a href="https://r-pkgs.org/testing-advanced.html">read more about test helpers here</a>).</p>
<p>It has two arguments (<code>test</code> and <code>msg</code>), and makes it easy to print messages to the console while I’m developing tests.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod_server_function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test contents"</span>)</span>
<span id="cb18-2"></span>
<span id="cb18-3">       mod_server_function<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> test contents </span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<section id="setting-test-inputs" class="level4">
<h4 class="anchored" data-anchor-id="setting-test-inputs">Setting test inputs</h4>
<p><code>testServer()</code> allows us to mimic changing application (or module) <code>inputId</code>s with <code>session$setInputs()</code> like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
</div>
<p>I’ll demonstrate with a test for <code>input$dataset</code> in <code>datasetServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faithful"</span>)</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb20-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset,</span>
<span id="cb20-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faithful"</span>)</span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset$input"</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="returned-values" class="level3">
<h3 class="anchored" data-anchor-id="returned-values">Returned values</h3>
<p>Any returned values from module server functions can be accessed in <code>testServer()</code> with <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-return-values"><code>session$returned()</code></a>. I’ll verify <code>input$dataset</code> returns an object from <code>datasetServer()</code> by testing the class of <code>session$returned()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide test with session$returned()</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb21-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()),</span>
<span id="cb21-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class(session$returned())"</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WorldPhones"</span>)</span>
<span id="cb21-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb21-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()))</span>
<span id="cb21-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.matrix(session$returned())"</span>)</span></code></pre></div>
</details>
</div>
<p>Note that both methods above can be used to check the class of the returned object.</p>
<ul>
<li><p>I can also use the <code>typeof(datasets::mtcars)</code> for a direct comparison:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide test with session$returned()</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb22-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># app value...</span></span>
<span id="cb22-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()), </span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...compared to actual output</span></span>
<span id="cb22-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars)) </span>
<span id="cb22-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typeof(session$returned())"</span>)</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="server-function-arguments" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="server-function-arguments">Server function arguments</h3>
<p>If the module server function has additional arguments beyond <code>id</code>, then it has additional functionality to verify with unit tests. To test additional module server arguments, pass these to <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-additional-parameters"><code>testServer(args = list())</code>.</a> The <code>args</code> list should include named arguments from the module server function, i.e., <code>list(param1 = "value1", param2 = "value2")</code>.</p>
<p>For example, <code>selectVarServer()</code> has <code>data</code> and <code>filter</code> arguments:</p>
<ul>
<li><p><code>data</code> is the returned reactive object from <code>datasetServer()</code></p></li>
<li><p><code>filter</code> is the function passed to the <code>find_vars()</code> utility function</p></li>
</ul>
<div class="page-columns page-full">
<div id="fig-dataset_selectVar" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dataset_selectVar" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dataset_selectVar.png" class="lightbox page-columns page-full" data-gallery="fig-dataset_selectVar" title="Figure&nbsp;4&nbsp;(a): dataset() -> selectVar()"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/dataset_selectVar.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-dataset_selectVar"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>dataset()</code> -&gt; <code>selectVar()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Object returned from <code>datasetServer()</code> and passed to <code>selectVarServer()</code>
</figcaption>
</figure>
</div>
</div>
<p>Below is a test for <code>selectVarServer()</code> using <code>args</code> to verify the reactive <code>data()</code> is <code>datasets::mtcars</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb23-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars,</span>
<span id="cb23-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb23-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb23-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb23-7">})</span></code></pre></div>
</div>
<div style="font-size: 1.15em; font-style: italic; font-weight: bold; color: #A20025;">
<p>But this fails with the following error:</p>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb25-2">── Error (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ───</span>
<span id="cb25-3">Error in `(function (id, data, filter = is.numeric) </span></code></pre></div>
<div style="font-size: 1.15em; font-style: italic; font-weight: bold; color: #006CD9;">
<p>What happened?</p>
</div>
<p>I’ve included this example because it’s not in the <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#testing-shiny-modules"><code>testServer()</code> documentation</a>, and it’s common to pass values between modules (see <a href="https://engineering-shiny.org/structuring-project.html#a.-returning-values-from-the-module">here in Engineering Production-Grade Shiny Apps</a> and <a href="https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs">here in Mastering Shiny</a>)</p>
<section id="testing-module-communication" class="level4">
<h4 class="anchored" data-anchor-id="testing-module-communication">Testing module communication</h4>
<p>The error message above tells me the issue is originating from the <code>stopifnot()</code> calls in <code>selectVarServer()</code>.</p>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Updating selectVarServer() and find_vars()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>Both <code>selectVarServer()</code> and <code>find_vars()</code> are updated from their original versions to include <code>stopifnot()</code> checks for <code>is.reactive()</code>, <code>is.data.frame()</code> and <code>is.function()</code>:</p>
<ul>
<li><p><a href="https://mastering-shiny.org/scaling-modules.html#server-inputs">Original versions:</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb26-3">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">selectVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), {</span>
<span id="cb27-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), filter))</span>
<span id="cb27-5">    })</span>
<span id="cb27-6"></span>
<span id="cb27-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]])</span>
<span id="cb27-8">  })</span>
<span id="cb27-9">}</span></code></pre></div>
</div></li>
<li><p><a href="https://mastering-shiny.org/scaling-modules.html#server-inputs">Updated versions:</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">selectVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb28-2"></span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(filter))</span>
<span id="cb28-5"></span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb28-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), {</span>
<span id="cb28-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session, </span>
<span id="cb28-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, </span>
<span id="cb28-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), filter)</span>
<span id="cb28-11">        )</span>
<span id="cb28-12">    })</span>
<span id="cb28-13"></span>
<span id="cb28-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]])</span>
<span id="cb28-15">  })</span>
<span id="cb28-16">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data))</span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(filter))</span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb29-5">}</span></code></pre></div>
</div></li>
</ul>
</div>
</div>
</div>
</div>
<p>I’ll stop a moment here to address what’s happening in each module:</p>
<ol type="1">
<li><p>The <code>datasetServer()</code> returns the results of <code>input$dataset</code> as a reactive (<code>data()</code>)</p></li>
<li><p><code>data()</code> enters <code>selectVarServer()</code> in the <code>data</code> argument</p></li>
<li><p><em>Inside</em> <code>selectVarServer()</code>, two <code>stopifnot()</code> functions evaluate the reactivity of <code>data</code> and <code>filter</code> with <code>shiny::is.reactive()</code></p></li>
</ol>
<p>In <code>datasetServer()</code>, the return object is <a href="https://github.com/mjfrigaard/mstsap/blob/f10e497df195cfa188afd031e7d082ed1466989d/R/datasetServer.R#L20">wrapped in the <code>reactive()</code> function</a>, so the items <code>args = list()</code> also need to be wrapped in <code>reactive()</code>.</p>
<p>I’ll re-write the test above to a more basic test using <code>is.reactive()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb30-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(mtcars), </span>
<span id="cb30-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb30-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb30-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb30-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb30-7">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb32-2">       selectVarServer: is.reactive(data()) </span>
<span id="cb32-3">── Failure (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ───</span>
<span id="cb32-4">is.reactive(data()) is not TRUE</span>
<span id="cb32-5"></span>
<span id="cb32-6">`actual`:   FALSE</span>
<span id="cb32-7">`expected`: TRUE </span></code></pre></div>
<div style="font-size: 1.15em; font-style: italic; font-weight: bold; color: #A20025;">
<p><strong><em>Another failure???</em></strong></p>
</div>
<p>The results of this test might seem confusing given my advice to wrap the <code>args</code> list in <code>reactive()</code>, but some reading of the <code>x</code> argument in <code>is.reactive()</code> will clear up the error:</p>
<blockquote class="blockquote">
<p><em>For <code>is.reactive()</code>, an object to test. For <code>reactive()</code>, an expression.</em></p>
</blockquote>
<p>Removing the parentheses from <code>data()</code> will result in the proper test results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb33-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(mtcars), </span>
<span id="cb33-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb33-7">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb35-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb35-2">       selectVarServer: is.reactive(data()) </span></code></pre></div>
<p>Now that I have a reactive <code>data()</code> input, I can explore how this value is used inside <code>selectVarServer()</code>. To update <code>input$var</code>, the <code>data()</code> input is passed to <code>find_vars()</code> (a function that uses a <code>filter</code> argument “<em>used to select which variables to list</em>”). See the example below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(</span>
<span id="cb36-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> chickwts, </span>
<span id="cb36-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.factor)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "feed"</span></span></code></pre></div>
<p>I’ll write an expectation that captures the behavior of <code>find_vars()</code> in <code>selectVarServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb38-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(chickwts),</span>
<span id="cb38-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb38-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb38-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), is.factor),</span>
<span id="cb38-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>)</span>
<span id="cb38-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"find_vars()"</span>)</span>
<span id="cb38-8">})</span></code></pre></div>
</div>
<p>The results are below:</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb39-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb39-2">       selectVarServer: find_vars()</span></code></pre></div>
<p>To verify that the returned object from <code>selectVarServer()</code> is the selected column, I’ll need to simulate the application behavior in the tests:</p>
<ul>
<li><p>Create a reactive <code>data()</code> input in <code>selectVarServer()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>setting args = list()</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb40-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(chickwts),</span>
<span id="cb40-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb40-4"></span>
<span id="cb40-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># include expectations below...</span></span>
<span id="cb40-6"></span>
<span id="cb40-7">  })</span></code></pre></div>
</details>
</div></li>
<li><p>Set the <code>input$var</code> and verify the <code>input$var</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>verify input$var</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var,</span>
<span id="cb41-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb41-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$var"</span>)</span></code></pre></div>
</details>
</div></li>
<li><p>Set the <code>input$var</code> and verify the <code>session$returned()</code></p>
<div class="cell">
<details open="" class="code-fold">
<summary>verify session$returned()</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>)</span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>(),</span>
<span id="cb42-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>]])</span>
<span id="cb42-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"session$returned()"</span>)</span></code></pre></div>
</details>
</div></li>
</ul>
<p>The results from these tests are below:</p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb43-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb43-2">       selectVarServer: input$var </span>
<span id="cb43-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb43-4">       selectVarServer: session$returned() </span></code></pre></div>
</section>
</section>
<section id="module-outputs" class="level3">
<h3 class="anchored" data-anchor-id="module-outputs">Module outputs</h3>
<p>Rendered outputs can be accessed in <code>testServer()</code> just like inputs (i.e., with <code>output$outputId</code>). But the modules in <code>mstsap</code> don’t have outputs–these are included in the standalone app functions (<code>datasetApp()</code>, <code>selectVarApp()</code>, and <code>selectDaraVarApp()</code>).</p>
<p>Fortunately, app functions can also be passed to the <code>app</code> argument of <code>testServer()</code>. I’ll use <code>datasetApp()</code> to demonstrate.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="datasetApp.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, </span>
<span id="cb44-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb44-4"></span>
<span id="cb44-5">  })</span></code></pre></div>
</div>
</div>
</div>
<p>Testing a standalone app function is similar to testing a module server function, but with a few minor differences. First, the output from the standalone app function is <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#shiny-app-objects">assigned to an object</a> (<code>ds_app</code>), then placed in the <code>app</code> argument.</p>
<p>To use <code>session$setInputs()</code> need to include the namespace for the <code>inputId</code>. The output from <code>reactiveValuesToList()</code> in <code>datasetApp()</code> shows me how to access the <code>inputId</code> in the <code>datasetServer()</code> module (i.e., <code>input$`dataset-dataset`</code>):</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[65,35]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 65.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="datasetApp_reactives.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp_reactives.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 35.0%;justify-content: flex-start;">
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, </span>
<span id="cb45-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb45-4">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(</span>
<span id="cb45-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb45-6">})</span></code></pre></div>
</div>
</div>
</div>
<section id="output-testing-strategy" class="level4">
<h4 class="anchored" data-anchor-id="output-testing-strategy">Output testing strategy</h4>
<p>Testing outputs with <code>testServer()</code> is different than testing outputs in regular unit tests, because Shiny outputs are executed in the server, but then rendered as HTML in the UI. <code>testServer()</code> <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#complex-outputs-plots-htmlwidgets">outlines</a> a testing strategy for complex outputs:</p>
<blockquote class="blockquote">
<p>*The goal for your tests should be to ask “is the code that I wrote producing the plot I want?” There are two components to that question:</p>
<ol type="1">
<li><em>Does the plot generate without producing an error?</em></li>
<li><em>Is the plot visually correct?</em></li>
</ol>
<p><em><code>testServer</code> is great for assessing the first component here. By merely referencing <code>output$plot</code> in your test, you’ll confirm that the plot was generated without an error.</em></p>
</blockquote>
<p>If we replace <em>plot</em> with <em>table</em> in the advice above, the tests for <code>datasetApp()</code> should confirm <code>output$data</code> is generated without producing an error.</p>
<p>Instead of writing an expectation, we’ll use <code>cat()</code> to display the contents of <code>output$data</code> after setting the <code>`dataset-dataset`</code> input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb46-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb46-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$data:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb46-5">})</span></code></pre></div>
</div>
<p>The results from the test is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb48-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb48-2">    output$data:</span></code></pre></div>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb49-1"> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">table</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">  class </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table shiny-table table- spacing-s'</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> style </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width:auto;'</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">thead</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb49-3">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb49-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">th</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text-align: right;'</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> weight <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">th</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb49-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">th</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text-align: left;'</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> feed <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">th</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>  </span>
<span id="cb49-6">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb49-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">thead</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb49-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tbody</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-9">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 179.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-10">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 160.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-11">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 136.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-12">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 227.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 217.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 168.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb49-15">   <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tbody</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb49-16"> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">table</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span></code></pre></div>
<p>The output is the HTML used to render the table in the UI. This doesn’t add a passing test, but it confirms that the table is being generated from the <code>data()</code> reactive.</p>
<p>The tests for <code>datasetApp()</code> will confirm the <code>inputId</code>, and verify the <code>class</code> and <code>names</code> of the <code>data()</code> reactive (which will be passed to the <code>renderTable()</code> function):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb50-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb50-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb50-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`dataset-dataset`"</span>)</span>
<span id="cb50-5"></span>
<span id="cb50-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb50-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb50-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.data.frame(data())"</span>)</span>
<span id="cb50-9"></span>
<span id="cb50-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb50-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()),</span>
<span id="cb50-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts))</span>
<span id="cb50-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"names(data())"</span>)</span></code></pre></div>
</div>
<p>I can include a test for the <code>class</code> of <code>output$data</code>, but note that this is a character output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb51-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb51-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)</span>
<span id="cb51-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class(output$data)"</span>)</span></code></pre></div>
</div>
<p>The results from <code>test_file()</code> are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb53-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb53-2">       datasetApp: input$`dataset-dataset` </span>
<span id="cb53-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb53-4">       datasetApp: is.data.frame(data()) </span>
<span id="cb53-5">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb53-6">       datasetApp: names(data()) </span>
<span id="cb53-7">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb53-8">       datasetApp: class(output$data) </span></code></pre></div>
<p>The same method can be used to test the <code>selectVarApp()</code>, but note this app requires passing both <code>inputId</code>s to <code>session$setInputs()</code>:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide selectVarApp() tests</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">sv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarApp</span>()</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> sv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb54-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb54-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb54-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm contents of output$out</span></span>
<span id="cb54-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$out:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-7">  </span>
<span id="cb54-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm var is reactive </span></span>
<span id="cb54-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(var))</span>
<span id="cb54-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm var input</span></span>
<span id="cb54-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb54-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb54-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>)</span>
<span id="cb54-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm data is reactive</span></span>
<span id="cb54-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb54-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm data() is a data.frame</span></span>
<span id="cb54-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb54-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb54-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm 'data' can be subsetted with 'var'</span></span>
<span id="cb54-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb54-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>]],</span>
<span id="cb54-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> airquality[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>]])</span>
<span id="cb54-23">})</span></code></pre></div>
</details>
</div>
</section>
<section id="testing-nested-modules" class="level4">
<h4 class="anchored" data-anchor-id="testing-nested-modules">Testing nested modules</h4>
<p>I highly recommend viewing the output of <code>reactiveValuesToList()</code> if your application has nested modules. It’s easy to lose track of ids if they span multiple layers.</p>
<p>We know <code>selectDataVarApp()</code> contains ‘modules inside other modules’, and these layers are reflected in the namespaces:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="selectDataVarApp_reactives.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp_reactives.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></a></p>
</figure>
</div>
<p>To access the <code>inputId</code>s in the nested modules, we need to pass the full ‘appended’ namespace:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">dv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarApp</span>()</span>
<span id="cb55-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> dv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb55-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb55-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb55-5">})</span></code></pre></div>
</div>
<p>After setting the inputs, I can confirm the contents of <code>output$out</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">dv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarApp</span>()</span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> dv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb56-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb56-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb56-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$out:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-6">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb58-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb58-2">    output$out:</span>
<span id="cb58-3">   [1]  41  36  12  18  NA  28  23  19   8  NA   7  16  11  14  18</span>
<span id="cb58-4"> [16]  14  34   6  30  11   1  11   4  32  NA  NA  NA  23  45 115</span>
<span id="cb58-5"> [31]  37  NA  NA  NA  NA  NA  NA  29  NA  71  39  NA  NA  23  NA</span>
<span id="cb58-6"> [46]  NA  21  37  20  12  13  NA  NA  NA  NA  NA  NA  NA  NA  NA</span>
<span id="cb58-7"> [61]  NA 135  49  32  NA  64  40  77  97  97  85  NA  10  27  NA</span>
<span id="cb58-8"> [76]   7  48  35  61  79  63  16  NA  NA  80 108  20  52  82  50</span>
<span id="cb58-9"> [91]  64  59  39   9  16  78  35  66 122  89 110  NA  NA  44  28</span>
<span id="cb58-10">[106]  65  NA  22  59  23  31  44  21   9  NA  45 168  73  NA  76</span>
<span id="cb58-11">[121] 118  84  85  96  78  73  91  47  32  20  23  21  24  44  21</span>
<span id="cb58-12">[136]  28   9  13  46  18  13  24  16  13  23  36   7  14  30  NA</span>
<span id="cb58-13">[151]  14  18  20 </span></code></pre></div>
<p>After confirming <code>output$out</code>, I’ll test the inputs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb59-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb59-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>)</span>
<span id="cb59-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`var-var-var`"</span>)</span>
<span id="cb59-5"></span>
<span id="cb59-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb59-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb59-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb59-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`var-data-dataset`"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb61-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb61-2">       selectDataVarApp: input$`var-var-var` </span>
<span id="cb61-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb61-4">       selectDataVarApp: input$`var-data-dataset`</span></code></pre></div>
<p>I can also verify the contents of the reactive <code>var()</code> inside the test:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(var))</span>
<span id="cb62-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(var)"</span>)</span>
<span id="cb62-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">var:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb64-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb64-2">       selectDataVarApp: is.reactive(var) </span>
<span id="cb64-3"></span>
<span id="cb64-4">    var:</span>
<span id="cb64-5"> 41 36 12 18 NA 28 23 19 8 NA 7 16 11 14 18 14 34 6 30 11 1 11 4 32 NA NA NA 23 </span>
<span id="cb64-6">    45 115 37 NA NA NA NA NA NA 29 NA 71 39 NA NA 23 NA NA 21 37 20 12 13 NA NA NA</span>
<span id="cb64-7">    NA NA NA NA NA NA NA 135 49 32 NA 64 40 77 97 97 85 NA 10 27 NA 7 48 35 61 79 </span>
<span id="cb64-8">    63 16 NA NA 80 108 20 52 82 50 64 59 39 9 16 78 35 66 122 89 110 NA NA 44 28 </span>
<span id="cb64-9">    65 NA 22 59 23 31 44 21 9 NA 45 168 73 NA 76 118 84 85 96 78 73 91 47 32 20 23</span>
<span id="cb64-10">    21 24 44 21 28 9 13 46 18 13 24 16 13 23 36 7 14 30 NA 14 18 20 </span></code></pre></div>
</section>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has shown how shiny’s <code>testServer()</code> function allows you to isolate and test module server functions, which makes it easier to ensure that your <code>server</code> function behaves as expected (and locate and fix bugs).</p>
<p>I hope you have a better understanding of how you can use <code>testServer()</code> to test a modules inputs/outputs, reactivity, calculations, and errors.</p>
<p>In the next post I’ll cover performing integration tests with <code>shinytest2</code>!</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Specifically, the applications come from sections <a href="https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs">19.3</a> through <a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules">19.3.4</a>.↩︎</p></li>
<li id="fn2"><p>The help files for <code>NS()</code> include the following description for a module namespace: “<em>a namespace is to an ID as a directory is to a file.</em>”↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Shiny</category>
  <category>Testing</category>
  <guid>https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/</guid>
  <pubDate>Sun, 01 Oct 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/image.png" medium="image" type="image/png" height="192" width="144"/>
</item>
<item>
  <title>Debugging in RStudio</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/debugging/</link>
  <description><![CDATA[ 





<p>In this post I’ll cover using the <code>browser()</code> function with RStudio’s debugger. RStudio’s debugging tools are built into the IDE, which provides a seamless transition between writing, running, and debugging code.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="image.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/debugging/image.png" class="img-fluid" style="width:70.0%"></a></p>
</div></div><section id="debugging" class="level1 page-columns page-full">
<h1>Debugging</h1>
<p>Debuggers are a critical tool when you’re programming, and they have several benefits that make them a must-use for any R user. You’ll inevitably encounter an error or unexpected behavior while you’re programming. Using a debugger allows you to ‘step through’ your code line-by-line, which makes it easier to find the precise location of bugs and errors and the conditions under which they occur.</p>
<p>But debuggers aren’t only helpful in dealing with errors. The debugger can also be a great learning tool because it provides an interactive way to see how the code is being executed and the order in which functions are being called. For example, you might know that a function returns a particular object but can’t determine how that object was created. Debugging lets us get ‘under the hood’ of our code and see how it’s really working.</p>
<p>You’re probably doing some version of debugging already. If you’ve ever dropped a call to <code>print()</code> or <code>return()</code> at some well-placed intermediate point in a function to try and understand its behavior, then you know the challenge debugging tries to solve: <strong>We can’t see what happens inside the parentheses when code is executed.</strong> When you use <code>print()</code> or <code>return()</code> in this way, it’s an attempt to indirectly investigate how/if/where the code is performing its intended purpose.</p>
<p>In this post, I’ll cover using the <code>browser()</code> function and RStudio’s debugger while developing a series of small, modular functions for returning a table of ‘package data structures.’ The code for this post comes from <a href="https://github.com/mjfrigaard/dbap"><code>dbap</code></a> (‘debugging app-package’).</p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>I want to create a function that returns a table of ‘data structure’ columns that describe the available <code>data.frame</code> or <code>tibble</code> objects loaded with a package. Below is a small example of the desired return object from this function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 25%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 10%">
<col style="width: 7%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Dataset</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13</td>
<td style="text-align: left;">19066</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">datasets</td>
<td style="text-align: left;">mtcars</td>
<td style="text-align: left;">data.frame</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">32</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>This table shows the <code>storms</code> data from <code>dplyr</code> and the <code>mtcars</code> data from <code>datasets</code>. The columns include the <code>Package</code> the data came from, the dataset name (<code>Dataset</code>), the data <code>Title</code> from the documentation, the <code>Class</code> of the data object, the total number of <code>Columns</code> and <code>Rows</code>, and the number of columns by type (<code>Logical</code>, <code>Numeric</code>, <code>Character</code>, <code>Factor</code> and <code>List</code>).</p>
<p>One of the first steps for creating this function is to verify a package’s namespace is loaded. I’ve written the <code>check_pkg_ns()</code> to check this.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>check_pkg_ns()</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">check_pkg_ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(quiet)) {</span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with messages</span></span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(pkg)) {</span>
<span id="cb1-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb1-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loading package: "</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb1-7">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb1-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" not available"</span>))</span>
<span id="cb1-9">      }</span>
<span id="cb1-10">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package "</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" loaded</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb1-12">    }</span>
<span id="cb1-13">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without messages</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(pkg)) {</span>
<span id="cb1-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb1-17">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb1-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" not available"</span>))</span>
<span id="cb1-19">      }</span>
<span id="cb1-20">    }</span>
<span id="cb1-21">  }</span>
<span id="cb1-22">}</span></code></pre></div>
</details>
</div>
<p><code>check_pkg_ns()</code> checks if a packages’s namespace is loaded, and if not, loads it. This function assumes the package (<code>pkg</code>) has been installed with <code>install.packages()</code> (I’ve also written <a href="https://github.com/mjfrigaard/dbap/blob/main/R/check_pkg_inst.R"><code>check_pkg_inst()</code></a> to check if the package has been installed.)</p>
<section id="experiment" class="level3">
<h3 class="anchored" data-anchor-id="experiment">Experiment</h3>
<p>Before debugging, I’ll read the documentation and help files to find examples or use cases for ‘mini-experiments.’ These are designed to clarify any function arguments and learn how the code truly works. Experiments should produce predictable, definitive (preferably incompatible) outputs from each function.</p>
<section id="namespace-functions" class="level4">
<h4 class="anchored" data-anchor-id="namespace-functions">Namespace functions</h4>
<p>The help file contains the following helpful statement on <code>isNamespaceLoaded()</code>:</p>
<blockquote class="blockquote">
<p><em>“<code>isNamespaceLoaded(pkg)</code> is equivalent to but more efficient than <code>pkg %in% loadedNamespaces()</code>”</em></p>
</blockquote>
<p>First, I’ll check the loaded namespaces with <code>loadedNamespaces()</code>, then look for a package I know <em>isn’t</em> in the namespace with <code>isNamespaceLoaded()</code>. I’ll use the <code>fs</code> package because it isn’t loaded or attached to the <code>search()</code> list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what's in the namespace? </span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadedNamespaces</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1"> [1] "compiler"   "rsconnect"  "graphics"  </span>
<span id="cb3-2"> [4] "tools"      "rstudioapi" "utils"     </span>
<span id="cb3-3"> [7] "grDevices"  "stats"      "datasets"  </span>
<span id="cb3-4">[10] "methods"    "base"</span></code></pre></div>
<p>Check if <code>fs</code> is in the loaded namespace:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify fs is not loaded</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">[1] FALSE</span></code></pre></div>
<p>The help file tells me the following about <code>requireNamespace</code>:</p>
<blockquote class="blockquote">
<p><em>“<code>requireNamespace</code> is a wrapper for <code>loadNamespace</code> analogous to <code>require()</code> that returns a logical value.”</em></p>
</blockquote>
<p>…and…</p>
<blockquote class="blockquote">
<p><em>“<code>requireNamespace</code> returns <code>TRUE</code> if it succeeds or <code>FALSE</code>”</em></p>
</blockquote>
<p>I’ll load a package (<code>"fs"</code>) with <code>requireNamespace()</code> and verify it’s in the namespace with <code>isNamespaceLoaded()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add "fs" to the namespace</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">Loading required namespace: fs</span>
<span id="cb7-2">[1] TRUE</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify it's been added </span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">[1] TRUE</span></code></pre></div>
<p>Finally, I’ll unload the <code>"fs"</code> package from the namespace so it can be tested in the debugger.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove fs</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify fs has been unloaded</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">[1] FALSE</span></code></pre></div>
<p>The great thing about designing these mini experiments is that they can be quickly converted into <a href="https://testthat.r-lib.org/"><code>testthat</code> tests</a>. I’m now confident I can use the namespace functions to:</p>
<ol type="1">
<li>View loaded packages namespaces<br>
</li>
<li>Check for a specific package in the loaded namespaces<br>
</li>
<li>Require a package namespace is loaded<br>
</li>
<li>Remove a loaded package namespace</li>
</ol>
<p>These are the behaviors I want to confirm in <code>check_pkg_ns()</code> using the <code>browser()</code> function.</p>
</section>
</section>
</section>
<section id="browser" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="browser">browser()</h2>
<p>If I want to explore the behaviors of the namespace functions in <code>check_pkg_ns()</code>, I need to add <code>browser()</code> somewhere I can ‘step into’ this function and then proceed through line-by-line. In this case, the top of the function makes sense:</p>
<div id="fig-browser_fun" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-browser_fun" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-browser_fun.png" class="lightbox" data-gallery="fig-browser_fun" title="Figure&nbsp;1&nbsp;(a): browser() in check_pkg_ns()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browser_fun.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-browser_fun"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>browser()</code> in <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <code>browser()</code> placement in <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
<section id="debug-mode" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="debug-mode">Debug mode</h3>
<p>To enter debugging mode, I’ll need to run <code>check_pkg_ns()</code> or source <code>R/check_pkg_ns.R</code> with the package I used in my experiments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="page-columns page-full">
<div id="fig-dbg-debug_mode" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-debug_mode" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-debug_mode.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-debug_mode" title="Figure&nbsp;2&nbsp;(a): Debug mode"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-debug_mode.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-debug_mode"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: RStudio IDE in debug mode
</figcaption>
</figure>
</div>
</div>
<p>The <code>browser()</code> function is one of the multiple methods for using RStudio debugging tools (see the <strong>TIP</strong> callout box below for more).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TIP: Other debugging methods
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.15em; color: #063E23;">
<p>In this post, I focused on using the <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/browser.html"><code>browser()</code></a> function to enter debug mode, but RStudio has several built-in tools that can help you debug your R code:</p>
<ul>
<li><p><strong>Debug function on error:</strong> You can set R to automatically enter the debugger when an error occurs by using <code>options(error = utils::recover)</code>. Then, when an error occurs, you’ll be given a menu of places to browse, the most recent (the location where the error occurred) first.</p></li>
<li><p><strong>Breakpoints:</strong> Breakpoints can be set in your R scripts to pause execution at a particular line of code. You can add breakpoints by clicking to the left of the line number in the script editor or by pressing Shift+F9 with your cursor on the desired line. Then, run your code. Execution will stop just before the line with the breakpoint, allowing you to inspect the current state of the environment.</p></li>
<li><p><strong><code>debug()</code>:</strong> You can use <code>debug(function_name)</code> to flag a function for “debug” mode. When you call the function, the debugger will open and stop at the first line of the function, where you can step through the function line by line, inspect the environment, and see what’s happening at each step.</p></li>
<li><p><strong><code>traceback()</code></strong>: When an error occurs, you can call <code>traceback()</code> to get a stack trace that shows you the sequence of calls that led up to the error.</p></li>
<li><p><strong>Code Diagnostics</strong>: RStudio provides real-time notifications about potential issues in your code, like syntax errors or unused variables. These are not technically part of the debugger, but diagnostics will help you avoid bugs before you run your code.</p></li>
</ul>
<p>You should read <a href="https://support.posit.co/hc/en-us/articles/205612627-Debugging-with-the-RStudio-IDE">this blog post</a> and <a href="https://adv-r.hadley.nz/debugging.html">this chapter</a> of Advanced R, 2nd Ed. for more information on the various debugging methods.</p>
</div>
</div>
</div>
</div>
</section>
<section id="console" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="console">Console</h3>
<p>When the <code>browser()</code> function is called, the <strong>Console</strong> enters the ‘reactive browser environment,’ tells me where the debugging function was called from, and changes the prompt to <code>Browse[1]&gt;</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">Called from: check_pkg_ns("fs")</span>
<span id="cb13-2">Browse[1]&gt; </span></code></pre></div>
<p>I can use the <strong>Console</strong> to inspect variables and ‘step through’ the function code.</p>
<div class="page-columns page-full">
<div id="fig-console" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-console" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-browse-console.png" class="lightbox page-columns page-full" data-gallery="fig-console" title="Figure&nbsp;3&nbsp;(a): Debug mode in Console"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-console.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:80.0%" data-ref-parent="fig-console"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode in <strong>Console</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Debug mode with <code>browser()</code> in Console
</figcaption>
</figure>
</div>
</div>
<p>The debugger toolbar is also placed at the top of the <strong>Console</strong>:</p>
<div id="fig-browser_toolbar" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-browser_toolbar" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-browser_toolbar.png" class="lightbox" data-gallery="fig-browser_toolbar" title="Figure&nbsp;4&nbsp;(a): Debug toolbar Console"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browser_toolbar.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-browser_toolbar"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug toolbar <strong>Console</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Debug toolbar in Console
</figcaption>
</figure>
</div>
<p>I can use the toolbar or enter the following commands in the <strong>Console</strong>:</p>
<ul>
<li><p><code>n</code> (next): execute the next step in the function</p></li>
<li><p><code>s</code> (step into): step into the function call on the current line</p></li>
<li><p><code>c</code> (continue): continue normal execution without stepping</p></li>
<li><p><code>f</code> (finish): execute the rest of the current loop or function</p></li>
<li><p><code>Q</code> (Quit): quit the debugger</p></li>
</ul>
<p>I’ll return to the <strong>Console</strong> in a bit (this is where most of the debugging is done), but let’s view the other changes to the IDE first.</p>
</section>
<section id="source" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="source">Source</h3>
<p>In the <strong>Source</strong> pane, we can see the line with <code>browser()</code> has been highlighted with an arrow:</p>
<div class="page-columns page-full">
<div id="fig-source" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-source" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-browse-source.png" class="lightbox page-columns page-full" data-gallery="fig-source" title="Figure&nbsp;5&nbsp;(a): Debug mode in Source"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-source.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:80.0%" data-ref-parent="fig-source"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode in <strong>Source</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Debug mode with <code>browser()</code> in Source
</figcaption>
</figure>
</div>
</div>
<p>The <strong>Source</strong> pane will continually update and highlight my execution position (i.e., what’s going to be executed next) as I ‘step through’ the code.</p>
<p>*<em>After we’ve finished debugging, it’s important to remember to remove the <code>browser()</code> function so it isn’t triggered the next time it is executed.</em></p>
</section>
<section id="environment" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="environment">Environment</h3>
<p>The <em>(Environment)</em> pane is changed from the global environment to the environment of the function that’s currently being executed in the <strong>Console</strong>:</p>
<div class="page-columns page-full">
<div id="fig-env" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-env" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-browse-env.png" class="lightbox page-columns page-full" data-gallery="fig-env" title="Figure&nbsp;6&nbsp;(a): Debug mode in Environment"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-env.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:80.0%" data-ref-parent="fig-env"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode in <strong>Environment</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Debug mode with <code>browser()</code> in Environment
</figcaption>
</figure>
</div>
</div>
<p>In the case of <code>check_pkg_ns()</code>, I can see the <strong>Values</strong> section contains the <code>pkg</code> (<code>"fs"</code>) and <code>quiet</code> (<code>FALSE</code>) arguments.</p>
<section id="other-environments" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="other-environments">Other environments</h4>
<p>The drop-down list of environments above the <strong>Values</strong> is arranged in reverse hierarchical order: The <strong>Global Environment</strong> is listed under the drop-down list, but it’s above the <code>check_pkg_ns()</code> environment in the search path:</p>
<div class="page-columns page-full">
<div id="fig-env" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row column-page-inset-right">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-env" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-env-list" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-browse-env-list.png" class="lightbox" data-gallery="fig-env" title="Figure&nbsp;7&nbsp;(a): Items in Environment debug mode"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-env-list.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-env"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Items in <strong>Environment</strong> debug mode
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-env" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-env-list" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="search-path.png" class="lightbox" data-gallery="fig-env" title="Figure&nbsp;7&nbsp;(b): Package environments and the search path"><img src="https://mjfrigaard.github.io/posts/debugging/search-path.png" title="Source: https://adv-r.hadley.nz/environments.html#search-path" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-env"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) <a href="https://adv-r.hadley.nz/environments.html#search-path">Package environments and the search path</a>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Environments with debugger
</figcaption>
</figure>
</div>
</div>
</section>
<section id="traceback" class="level4">
<h4 class="anchored" data-anchor-id="traceback">Traceback</h4>
<p>The traceback (or ‘call stack’) is the ‘stack’ of functions that have been run thus far:</p>
<div id="fig-traceback" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-traceback" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-browse-traceback.png" class="lightbox" data-gallery="fig-traceback" title="Figure&nbsp;8&nbsp;(a): Traceback in Environment"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-traceback.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-traceback"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Traceback in <strong>Environment</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Environment Traceback viewer
</figcaption>
</figure>
</div>
<p>Clicking on an item in traceback will display the environment contents in the function’s code. Right now, it includes the call to <code>source("R/check_pkg_ns.R")</code>, and ‘Debug source’ call to <code>check_pkg_ns("fs")</code>.</p>
<p>If the <strong><em>Show internals</em></strong> option is selected, the internal functions are shown (slightly subdued in gray).</p>
<div id="fig-traceback-internals" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-traceback-internals" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-browse-traceback-internals.png" class="lightbox" data-gallery="fig-traceback-internals" title="Figure&nbsp;9&nbsp;(a): Traceback internals"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-traceback-internals.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-traceback-internals"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Traceback internals
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Traceback internals
</figcaption>
</figure>
</div>
</section>
</section>
<section id="arguments" class="level3">
<h3 class="anchored" data-anchor-id="arguments">Arguments</h3>
<p>The <code>pkg</code> argument can be printed to verify it’s contents.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">Browse[1]&gt; pkg</span>
<span id="cb14-2">[1] "fs"</span></code></pre></div>
<p>The debugger lets me view the state of a function’s values or variables at each execution step, which helps me understand any incorrect or unexpected values.</p>
<p>Based on the help files and my experiments, <code>check_pkg_ns()</code> should be looking through the namespace to see if a <code>pkg</code> is loaded; if it isn’t, that <code>pkg</code> is loaded in the namespace.</p>
<p>I can also check the code from the mini experiments inside the debugger <strong>Console</strong> to see if the <code>fs</code> namespace has been loaded:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">Browse[1]&gt; isNamespaceLoaded("fs")</span>
<span id="cb15-2">[1] FALSE</span></code></pre></div>
<p>At my current location in <code>check_pkg_ns()</code>, the <code>fs</code> package hasn’t been loaded.</p>
</section>
<section id="stepping-through" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="stepping-through">Stepping through</h3>
<p>I can begin ‘stepping through’ <code>check_pkg_ns()</code> by entering <strong><code>n</code></strong> in the <strong>Console</strong>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">Browse[1]&gt; n</span></code></pre></div>
<p>Notice after the entering <strong><code>n</code></strong> in the <strong>Console</strong>, the debugger tells me where the <code>browser()</code> function has paused execution (<code>debug at /path/to/function/file.R</code>), the line number (<code>#27</code>), and the <code>check_pkg_ns()</code> function is printed to console (I’ve omitted it here):</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">Browse[1]&gt; n</span>
<span id="cb17-2">debug at ~/projects/apps/dbap/R/check_pkg_ns.R#27:</span>
<span id="cb17-3"></span>
<span id="cb17-4">&lt;...check_pkg_ns() function...&gt;</span>
<span id="cb17-5"></span>
<span id="cb17-6">Browse[2]&gt;</span></code></pre></div>
<p>The prompt also changes from <code>Browse[1]&gt;</code> to <code>Browse[2]&gt;</code> to let me know I’m inside the <code>check_pkg_ns()</code> function.</p>
<p>I’ll use <strong><code>n</code></strong> (or Next) to continue following the path <code>pkg</code> takes through the function:</p>
<div class="page-columns page-full">
<div id="fig-dbg-next-console" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-next-console" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-next-console.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-next-console" title="Figure&nbsp;10&nbsp;(a): Use Console to step through function"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-next-console.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-next-console"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Use Console to step through function
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Use <code>n</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>When I land on the line <em>after</em> the call to <code>requireNamespace()</code>, I can check to see if the <code>fs</code> namespace has been loaded with <code>isNamespaceLoaded("fs")</code></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">Browse[2]&gt; isNamespaceLoaded("fs")</span>
<span id="cb18-2">[1] TRUE</span></code></pre></div>
</section>
<section id="inspect-values" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="inspect-values">Inspect values</h3>
<p>Now that I’ve confirmed <code>check_pkg_ns()</code> works with <code>fs</code>, I should also confirm it works with a development package (i.e., not on CRAN). I can test this with the <a href="https://github.com/csgillespie/roxygen2Comment"><code>roxygen2Comment</code> package</a>–it contains an addin for pasting <code>roxygen2</code> comment blocks.</p>
<p>To quit debug mode, I can enter <strong><code>Q</code></strong> in the <strong>Console</strong> or click on the red square (<strong><em>Stop</em></strong>) icon in the toolbar.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1">Browse[2]&gt; Q</span></code></pre></div>
<p>I’ll confirm <code>roxygen2Comment</code> is not loaded with <code>isNamespaceLoaded()</code>, then change the <code>pkg</code> argument in <code>check_pkg_ns()</code> and re-run the function</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb20-1">isNamespaceLoaded("roxygen2Comment")</span>
<span id="cb20-2">[1] FALSE</span></code></pre></div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">&gt; check_pkg_ns("roxygen2Comment")</span>
<span id="cb21-2">Called from: check_pkg_ns("roxygen2Comment")</span>
<span id="cb21-3">Browse[1]&gt; </span></code></pre></div>
<p>This time, when I step through <code>check_pkg_ns()</code>, I notice <code>pkg</code> takes an alternative path:</p>
<div class="page-columns page-full">
<div id="fig-dbg-next-console-02" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-next-console-02" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-next-console-02.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-next-console-02" title="Figure&nbsp;11&nbsp;(a): Alternative path through function"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-next-console-02.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-next-console-02"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Alternative path through function
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: Development package in <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>When the <strong>Source</strong> pane highlights the <code>stop()</code> function, I can check to confirm this package wasn’t loaded:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">Browse[2]&gt; isNamespaceLoaded("roxygen2Comment")</span>
<span id="cb22-2">[1] FALSE</span></code></pre></div>
<p>If I enter <strong><code>n</code></strong> one more time in the <strong>Console</strong>, I see the <code>stop()</code> error from the function is returned:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">Browse[2]&gt; n</span>
<span id="cb23-2">Error in check_pkg_ns("roxygen2Comment") : </span>
<span id="cb23-3">  roxygen2Comment not available</span></code></pre></div>
<p>I’ll perform one last check on <code>check_pkg_ns()</code>: what if I want to pass multiple packages to <code>pkg</code>? I’ll check this with <a href="https://fs.r-lib.org/"><code>fs</code></a> and <a href="https://klmr.me/box/index.html"><code>box</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First make sure these aren't loaded...</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>)</span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now combine into vector</span></span>
<span id="cb24-5">pkgs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>)</span>
<span id="cb24-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(pkgs)</span></code></pre></div>
</div>
<p>After entering debug mode, I want to proceed to the control flow and verify the <code>pkgs</code> variable:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">&gt; check_pkg_ns(pkgs)</span>
<span id="cb25-2">Called from: check_pkg_ns(pkgs)</span>
<span id="cb25-3">Browse[1]&gt; n</span>
<span id="cb25-4">Browse[2]&gt; pkgs</span>
<span id="cb25-5">[1] "fs"  "box"</span></code></pre></div>
<p>This confirms both packages are in the <code>pkg</code> variable. If I use <strong><code>n</code></strong> to proceed through to end of <code>check_pkg_ns()</code>, I see the final line returns the successful loading message twice:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb26-1">Browse[2]&gt; n</span>
<span id="cb26-2">Loading package: fs</span>
<span id="cb26-3">Loading package: box</span></code></pre></div>
</section>
<section id="browser-recap" class="level3">
<h3 class="anchored" data-anchor-id="browser-recap"><em>browser() recap</em></h3>
<p>Once execution is paused with <code>browser()</code>, using the <strong><code>n</code></strong> command in the <strong>Console</strong> (or in the debugging toolbar at the top-right of the pane) lets me step through the code line-by-line.</p>
<div id="fig-next_toolbar" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-next_toolbar" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-next_toolbar.png" class="lightbox" data-gallery="fig-next_toolbar" title="Figure&nbsp;12&nbsp;(a): Step through/over"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-next_toolbar.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:75.0%" data-ref-parent="fig-next_toolbar"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step through/over
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;12: Step through/over code
</figcaption>
</figure>
</div>
<p>This allows me to inspect the state of the variables at various points within a function.</p>
</section>
</section>
<section id="nested-functions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="nested-functions">Nested functions</h2>
<p>The <code>check_pkg_ns()</code> function is fairly basic in that it performs a single ‘unit of work’ (i.e., <em>check if add-on packages package have been loaded and attached; if not, load and attach them</em>). When functions become more complex, it’s more efficient to use nested functions–i.e., functions within other functions–which allow me to execute multiple commands simultaneously.</p>
<p>An example of this is the <code>pkg_data_results()</code> function below:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>pkg_data_results()</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)</span>
<span id="cb27-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 5 × 3</span></span>
<span id="cb27-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Package Item              Title              </span></span>
<span id="cb27-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt;              </span></span>
<span id="cb27-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dplyr   band_instruments  Band membership    </span></span>
<span id="cb27-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dplyr   band_instruments2 Band membership    </span></span>
<span id="cb27-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dplyr   band_members      Band membership    </span></span>
<span id="cb27-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dplyr   starwars          Starwars characters</span></span>
<span id="cb27-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dplyr   storms            Storm tracks data</span></span></code></pre></div>
</details>
</div>
<p><code>pkg_data_results()</code> returns a <code>data.frame</code> with three columns: <code>Package</code>, <code>Item</code>, and <code>Title</code>.</p>
<p>The output from <code>pkg_data_results()</code> comes from the <code>data(package = "pkg")</code> output:</p>
<div id="fig-next_toolbar" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-dbg-data_output" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dbg-data_output-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-data_output.png" class="lightbox" data-gallery="fig-next_toolbar" title="Figure&nbsp;13&nbsp;(a): Output from data(package = )"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-data_output.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-next_toolbar"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-data_output-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Output from <code>data(package = )</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;13: <code>data(package = "dplyr")</code>
</figcaption>
</figure>
</div>
<p>This output is normally opened in a separate window, but it’s created as a matrix.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>structure of data(package =)</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>))</span>
<span id="cb28-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 4</span></span>
<span id="cb28-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ title  : chr "Data sets"</span></span>
<span id="cb28-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ header : NULL</span></span>
<span id="cb28-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ results: chr [1:5, 1:4] "dplyr" "dplyr" "dplyr" "dplyr" ...</span></span>
<span id="cb28-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "dimnames")=List of 2</span></span>
<span id="cb28-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..$ : NULL</span></span>
<span id="cb28-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..$ : chr [1:4] "Package" "LibPath" "Item" "Title"</span></span>
<span id="cb28-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ footer : NULL</span></span>
<span id="cb28-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "class")= chr "packageIQR"</span></span></code></pre></div>
</details>
</div>
<p><code>pkg_data_results()</code> converts the matrix output into a <code>data.frame</code> three columns in (<code>Package</code>, <code>Title</code>, <code>Item</code>).</p>
<p>I’ve placed <code>browser()</code> at the top of <code>pkg_data_results()</code> and run it with the <a href="https://fivethirtyeight-r.netlify.app/"><code>fivethirtyeight</code> package</a>.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb29-1">pkg_data_results("fivethirtyeight")</span></code></pre></div>
<div id="fig-pkg_data_results_538" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-dbg-pkg_data_results_538" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dbg-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-pkg_data_results_538.png" class="lightbox" data-gallery="fig-pkg_data_results_538" title="Figure&nbsp;14&nbsp;(a): browser() in pkg_data_results(“fivethirtyeight”)"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-pkg_data_results_538.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-pkg_data_results_538"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) browser() in pkg_data_results(“fivethirtyeight”)
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;14: <code>browser()</code> in <code>pkg_data_results("fivethirtyeight")</code>
</figcaption>
</figure>
</div>
<section id="step-into" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="step-into">Step into</h3>
<p>When the debugger lands on <code>check_pkg_ns()</code>, I can follow the <code>fivethirtyeight</code> package through this function by ‘stepping into’ this function by entering <strong><code>s</code></strong> in the <strong>Console</strong> (or the toolbar icon):</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="dbg-step_into_toolbar.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17" title="Step into a function"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_toolbar.png" class="img-fluid figure-img" style="width:100.0%" alt="Step into a function"></a></p>
<figcaption>Step into a function</figcaption>
</figure>
</div>
</div></div><div id="fig-step_into_pkg_data_results" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-dbg-step_into_pkg_data_results" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dbg-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="dbg-step_into_pkg_data_results.png" class="lightbox" data-gallery="fig-step_into_pkg_data_results" title="Figure&nbsp;15&nbsp;(a): browser() in pkg_data_results(“fivethirtyeight”)"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_pkg_data_results.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%" data-ref-parent="fig-step_into_pkg_data_results"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) browser() in pkg_data_results(“fivethirtyeight”)
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;15: Step into in <code>pkg_data_results("fivethirtyeight")</code>
</figcaption>
</figure>
</div>
</section>
<section id="debugging-at-vs-in" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="debugging-at-vs-in">Debugging ‘at’ vs ‘in’</h3>
<p>In the <strong>Console</strong>, there are now <code>debugging in</code> and <code>debug at</code> locations:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">Browse[2]&gt; s</span>
<span id="cb30-2">debugging in: check_pkg_ns(pkg = pkg, quiet = TRUE)</span>
<span id="cb30-3">debug at /apps/dbap/R/check_pkg_ns.R#25: </span></code></pre></div>
<p>The <code>debug at</code> location is the the we location of the initial call to <code>browser()</code>, and <code>debugging in</code> is the function I <em>stepped into</em>.</p>
<p>The prompt has also changed from <code>Browse[2]&gt;</code> to <code>Browse[3]&gt;</code>:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb31-1">Browse[3]&gt;</span></code></pre></div>
<div class="page-columns page-full">
<div id="fig-dbg-step_into_01" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-step_into_01" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-step_into_01.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-step_into_01" title="Figure&nbsp;16&nbsp;(a): Use s to step into check_pkg_ns()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_01.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-step_into_01"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Use <code>s</code> to step into check_pkg_ns()
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;16: Use <code>s</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>The <code>R/check_pkg_ns.R</code> file will open with the highlighted function. I can proceed through <code>check_pkg_ns()</code> using <strong><code>n</code></strong> until I reach <code>requireNamespace()</code>:</p>
<div class="page-columns page-full">
<div id="fig-dbg-step_into_02" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-step_into_02" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-step_into_02.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-step_into_02" title="Figure&nbsp;17&nbsp;(a): Use n to step through check_pkg_ns()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_02.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:70.0%" data-ref-parent="fig-dbg-step_into_02"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Use <code>n</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;17: Use <code>n</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>When I reach the final line in <code>check_pkg_ns()</code>, I can use either method below verify the <code>pkg</code> namespace is loaded:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">Browse[3]&gt; pkg %in% loadedNamespaces()</span>
<span id="cb32-2">[1] TRUE</span>
<span id="cb32-3">Browse[3]&gt; isNamespaceLoaded(pkg)</span>
<span id="cb32-4">[1] TRUE</span></code></pre></div>
<p>After the last line of <code>check_pkg_ns()</code> has been evaluated, the debugger will automatically return to the <code>pkg_data_results()</code> function. The <strong>Source</strong> pane will highlight the final step (and the prompt returns to <code>Browse[2]&gt;</code>):</p>
<div class="page-columns page-full">
<div id="fig-dbg-step_into_03" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-step_into_03" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-step_into_03.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-step_into_03" title="Figure&nbsp;18&nbsp;(a): Step into/through check_pkg_ns() from pkg_data_results()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_03.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-step_into_03"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step into/through <code>check_pkg_ns()</code> from <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;18: Step into and through <code>check_pkg_ns()</code> from <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<p>A final <strong><code>n</code></strong> command in the <strong>Console</strong> will return the output table:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">Browse[2]&gt; n</span>
<span id="cb33-2">### A tibble: 129 × 3</span>
<span id="cb33-3">##    Package         Item                Title</span>
<span id="cb33-4">##    &lt;chr&gt;           &lt;chr&gt;               &lt;chr&gt;</span>
<span id="cb33-5">##  1 fivethirtyeight US_births_1994_2003 Some People Are Too Superstitious To …</span>
<span id="cb33-6">##  2 fivethirtyeight US_births_2000_2014 Some People Are Too Superstitious To …</span>
<span id="cb33-7">##  3 fivethirtyeight ahca_polls          American Health Care Act Polls</span>
<span id="cb33-8">##  4 fivethirtyeight airline_safety      Should Travelers Avoid Flying Airline…</span>
<span id="cb33-9">##  5 fivethirtyeight antiquities_act     Trump Might Be The First President To…</span>
<span id="cb33-10">##  6 fivethirtyeight august_senate_polls How Much Trouble Is Ted Cruz Really  …</span>
<span id="cb33-11">##  7 fivethirtyeight avengers            Joining The Avengers Is As Deadly As</span>
<span id="cb33-12">##  8 fivethirtyeight bachelorette        Bachelorette / Bachelor</span>
<span id="cb33-13">##  9 fivethirtyeight bad_drivers         Dear Mona, Which State Has The Worst …</span>
<span id="cb33-14">## 10 fivethirtyeight bechdel             The Dollar-And-Cents Case Against Hol…</span>
<span id="cb33-15">## # ℹ 119 more rows</span>
<span id="cb33-16">## # ℹ Use `print(n = ...)` to see more rows</span></code></pre></div>
</section>
</section>
<section id="put-it-all-together" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="put-it-all-together">Put it all together</h2>
<p>The initial <code>pkg_data_str()</code> function for returning a table of ‘package data structures’ is below.</p>
<div class="cell">
<details class="code-fold">
<summary>expand to see initial pkg_data_str()</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">pkg_data_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb34-2"></span>
<span id="cb34-3">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span>
<span id="cb34-4"></span>
<span id="cb34-5">  ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb34-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]], </span>
<span id="cb34-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb34-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb34-9">  )</span>
<span id="cb34-10"></span>
<span id="cb34-11">  cols_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb34-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-13">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-15">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-17">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span></span>
<span id="cb34-21">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span></span>
<span id="cb34-25">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span></span>
<span id="cb34-29">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span></span>
<span id="cb34-33">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span></span>
<span id="cb34-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-38">  )</span>
<span id="cb34-39"></span>
<span id="cb34-40">  pkg_tbls_dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cols_tbl,</span>
<span id="cb34-41">    stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb34-42">  )</span>
<span id="cb34-43"></span>
<span id="cb34-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pkg_tbls_dfs)</span>
<span id="cb34-45">}</span></code></pre></div>
</details>
</div>
<p><code>pkg_data_str()</code> uses nested functions to create the following intermediate objects I can check while developing with <code>browser()</code> (the example below uses the <a href="https://forcats.tidyverse.org/"><code>forcats</code> package</a>)</p>
<section id="data-results" class="level3">
<h3 class="anchored" data-anchor-id="data-results">Data results</h3>
<p>The output from <code>pkg_data_results()</code> is stored in <code>data_results</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">Browse[2]&gt; data_results</span>
<span id="cb36-2"># A tibble: 1 × 3</span>
<span id="cb36-3">  Package Item    Title                                                           </span>
<span id="cb36-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                                                           </span>
<span id="cb36-5">1 forcats gss_cat A sample of categorical variables from the General Social su...</span></code></pre></div>
</section>
<section id="package-data-objects" class="level3">
<h3 class="anchored" data-anchor-id="package-data-objects">Package data objects</h3>
<p>After extracting the <code>Package</code>, <code>Title</code>, and <code>Type</code> columns from <code>pkg_data_results()</code>, I use <code>purrr:map2()</code> to iterate over each <code>Item</code> and <code>Package</code>, which builds a list of datasets (<code>ds_list</code>). The <code>.f</code> argument is a <a href="https://github.com/mjfrigaard/dbap/blob/main/R/pkg_data_object.R">nested <code>pkg_data_object()</code> function</a>, which calls <code>base::get()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb37-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]],</span>
<span id="cb37-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb37-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb37-5">)</span></code></pre></div>
</div>
<p>I’ll view the contents of the list with <code>str()</code></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">Browse[2]&gt; str(ds_list)</span>
<span id="cb38-2">List of 1</span>
<span id="cb38-3"> $ : tibble [21,483 × 9] (S3: tbl_df/tbl/data.frame)</span>
<span id="cb38-4">  ..$ year   : int [1:21483] 2000 2000 2000 2000 2000 2000 2000 2000 ...</span>
<span id="cb38-5">  ..$ marital: Factor w/ 6 levels "No answer","Never married",..: 2 4 ...</span>
<span id="cb38-6">  ..$ age    : int [1:21483] 26 48 67 39 25 25 36 44 44 47 ...</span>
<span id="cb38-7">  ..$ race   : Factor w/ 4 levels "Other","Black",..: 3 3 3 3 3 3 3 3 3 3 ...</span>
<span id="cb38-8">  ..$ rincome: Factor w/ 16 levels "No answer","Don't know",..: 8 8 16 16 ...</span>
<span id="cb38-9">  ..$ partyid: Factor w/ 10 levels "No answer","Don't know",..: 6 5 7 6  ...</span>
<span id="cb38-10">  ..$ relig  : Factor w/ 16 levels "No answer","Don't know",..: 15 15 15 ...</span>
<span id="cb38-11">  ..$ denom  : Factor w/ 30 levels "No answer","Don't know",..: 25 23 3 ...</span>
<span id="cb38-12">  ..$ tvhours: int [1:21483] 12 NA 2 4 1 NA 3 NA 0 3 ...</span></code></pre></div>
</section>
<section id="column-counts" class="level3">
<h3 class="anchored" data-anchor-id="column-counts">Column counts</h3>
<p>The <code>ds_list</code> created above is used to add the <code>Class</code>, <code>Columns</code>, and <code>Rows</code> columns to <code>data_results</code> using the <code>class()</code>, <code>ncol()</code>, <code>nrow()</code>. The column counts are added with the <a href="https://github.com/mjfrigaard/dbap/blob/main/R/col_type_count.R"><code>col_type_count()</code> function</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">  cols_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb39-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-5">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-7">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span></span>
<span id="cb39-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span></span>
<span id="cb39-15">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span></span>
<span id="cb39-19">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span></span>
<span id="cb39-23">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span></span>
<span id="cb39-27">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-28">  )</span></code></pre></div>
</div>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb40-1">Browse[2]&gt; cols_tbl</span>
<span id="cb40-2"># A tibble: 1 × 11</span>
<span id="cb40-3">  Package Item    Title          Class Columns Rows  Logical Numeric Character Factor  List</span>
<span id="cb40-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt;   &lt;int&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt;</span>
<span id="cb40-5">1 forcats gss_cat A sample of c… tbl_… 9 colu… 2148…       0       3         0      6     0</span></code></pre></div>
</section>
<section id="rectangular-objects" class="level3">
<h3 class="anchored" data-anchor-id="rectangular-objects">Rectangular objects</h3>
<p>Finally, <code>cols_tbl</code> is filtered to only those objects with a <code>class()</code> containing the string ‘<code>data.frame</code>’.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">pkg_tbls_dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> cols_tbl,</span>
<span id="cb41-2">                  stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>))</span></code></pre></div>
</div>
<p>This is exactly the same as the previous tibble because forcats has only one data object (<code>gss_cat</code>), and it’s a tibble:</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb42-1">Browse[2]&gt; pkg_tbls_dfs</span>
<span id="cb42-2"># A tibble: 1 × 11</span>
<span id="cb42-3">  Package Item    Title          Class Columns Rows  Logical Numeric Character Factor  List</span>
<span id="cb42-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt;   &lt;int&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt;</span>
<span id="cb42-5">1 forcats gss_cat A sample of c… tbl_… 9 colu… 2148…       0       3         0      6     0</span></code></pre></div>
<p>I’m explicitly returning <code>pkg_tbls_dfs</code> to view it in the debugger. When I’m confident it’s behaving as expected, I’ll remove this final object and ‘<a href="https://style.tidyverse.org/functions.html#return">rely on R to return the result of the last evaluated expression</a>.’</p>
</section>
<section id="error" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="error">Error!</h3>
<p>When I tried using the initial <code>pkg_data_str()</code> with a package that had zero data objects (<code>fs</code>), I get the following error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb44-1">Error in `dplyr::filter()` at dbap/R/pkg_data_str.R:78:2:</span>
<span id="cb44-2">ℹ In argument: `stringr::str_detect(Class, "data.frame")`.</span>
<span id="cb44-3">Caused by error in `vctrs::vec_size_common()`:</span>
<span id="cb44-4">! object 'Class' not found</span>
<span id="cb44-5">Run `rlang::last_trace()` to see where the error occurred.</span></code></pre></div>
<p>In the debugger, I was able to pinpoint the source of this error (and the underlying condition causing it to occur).</p>
<section id="replicate-the-error" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="replicate-the-error">Replicate the error</h4>
<p>The <code>browser()</code> beings at the top of <code>pkg_data_str()</code>, where I’ll step into <code>pkg_data_results()</code></p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_01" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_01" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-all_together_01.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-all_together_01" title="Figure&nbsp;19&nbsp;(a): pkg_data_results() from pkg_data_str()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_01.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_01"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>pkg_data_results()</code> from <code>pkg_data_str()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;19: Step into <code>pkg_data_results()</code> from <code>pkg_data_str()</code>
</figcaption>
</figure>
</div>
</div>
<p>When I’m inside <code>pkg_data_results()</code>, I’ll use <strong><code>n</code></strong> to verify the <code>fs</code> package namespace was loaded and the <code>tibble</code> was created:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_02" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_02" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-all_together_02.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-all_together_02" title="Figure&nbsp;20&nbsp;(a): Step through pkg_data_results()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_02.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_02"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step through <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;20: Step through <code>pkg_data_results()</code> (from <code>pkg_data_str()</code>)
</figcaption>
</figure>
</div>
</div>
<p>Back in <code>pkg_data_str()</code>, the output from <code>pkg_data_results()</code> is stored as <code>data_results</code>. I can check the contents of <code>data_results</code> in the <strong>Console</strong>.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb45-1">Browse[2]&gt; data_results</span>
<span id="cb45-2"># A tibble: 0 × 3</span>
<span id="cb45-3"># ℹ 3 variables: Package &lt;chr&gt;, Item &lt;chr&gt;, Title &lt;chr&gt;</span></code></pre></div>
<p>I see it’s empty. An empty <code>data_results</code> results in an empty list output from <code>purrr::map2()</code>:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_03" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_03" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-all_together_03.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-all_together_03" title="Figure&nbsp;21&nbsp;(a): Step out of pkg_data_results()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_03.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_03"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step out of <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;21: Step out of <code>pkg_data_results()</code> back into <code>pkg_data_str()</code>
</figcaption>
</figure>
</div>
</div>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb46-1">Browse[2]&gt; ds_list</span>
<span id="cb46-2">list()</span></code></pre></div>
<p>The empty <code>ds_list</code> results in <code>dplyr::mutate()</code> being unable to create the <code>Class</code> column in <code>cols_tbl</code>:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_04" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_04" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-all_together_04.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-all_together_04" title="Figure&nbsp;22&nbsp;(a): dplyr::mutate() call in get_ds_strs()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_04.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:65.0%" data-ref-parent="fig-dbg-all_together_04"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>dplyr::mutate()</code> call in <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;22: Create <code>Class</code> column in <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb47-1">Browse[2]&gt; cols_tbl</span>
<span id="cb47-2"># A tibble: 0 × 3</span>
<span id="cb47-3"># ℹ 3 variables: Package &lt;chr&gt;, Item &lt;chr&gt;, Title &lt;chr&gt;</span></code></pre></div>
<p>Which triggers the error in <code>dplyr::filter()</code></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb48-1">Browse[2]&gt; n</span>
<span id="cb48-2">Error in `dplyr::filter()` at dbap/R/get_ds_str.R:60:2:</span>
<span id="cb48-3">ℹ In argument: `stringr::str_detect(Class, "data.frame")`.</span>
<span id="cb48-4">Caused by error in `vctrs::vec_size_common()`:</span>
<span id="cb48-5">! object 'Class' not found</span>
<span id="cb48-6">Run `rlang::last_trace()` to see where the error occurred.</span></code></pre></div>
<p>The full path for the <code>fs</code> package through the initial <code>get_ds_str()</code> is outlined in the figure below:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_05" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_05" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<a href="dbg-all_together_05.png" class="lightbox page-columns page-full" data-gallery="fig-dbg-all_together_05" title="Figure&nbsp;23&nbsp;(a): Error path in get_ds_strs()"><img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_05.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_05"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Error path in <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;23: Replicate the error from <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
</section>
</section>
<section id="solution" class="level3">
<h3 class="anchored" data-anchor-id="solution">Solution</h3>
<p>To fix this error, I had to make some changes to <em>both</em> <code>pkg_data_results()</code> <em>and</em> <code>pkg_data_str()</code>:</p>
<p>In <code>pkg_data_results()</code>, I added control flow to return a <code>tibble</code> of logical columns (all <code>NA</code>) if the package doesn’t have any data objects:</p>
<div class="cell">
<details class="code-fold">
<summary>Expand to view the updated pkg_data_results()</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">pkg_data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb49-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load packages</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb49-4"></span>
<span id="cb49-5">  results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb49-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb49-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Package =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>],</span>
<span id="cb49-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Item =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>],</span>
<span id="cb49-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>],</span>
<span id="cb49-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb49-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb49-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb49-13">    )</span>
<span id="cb49-14">  )</span>
<span id="cb49-15"></span>
<span id="cb49-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(results) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb49-17"></span>
<span id="cb49-18">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb49-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb49-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb49-21">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb49-22">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb49-23">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb49-24">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>,</span>
<span id="cb49-25">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rows"</span>,</span>
<span id="cb49-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numeric"</span>, </span>
<span id="cb49-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Character"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>, </span>
<span id="cb49-28">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span>))</span>
<span id="cb49-29">                ),</span>
<span id="cb49-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>))</span>
<span id="cb49-31"></span>
<span id="cb49-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb49-33"></span>
<span id="cb49-34"></span>
<span id="cb49-35">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb49-36"></span>
<span id="cb49-37">    results</span>
<span id="cb49-38"></span>
<span id="cb49-39">  }</span>
<span id="cb49-40"></span>
<span id="cb49-41">}</span></code></pre></div>
</details>
</div>
<p>In <code>pkg_data_str()</code>, I added two <code>if</code> statements:</p>
<ul>
<li><p>the first <code>if</code> statement identifies the logical <code>NA</code> columns (indicating the results from <code>data(package = pkg)</code> didn’t have any data objects)</p></li>
<li><p>the second <code>if</code> statement creates the <code>Class</code> column <em>first</em>, then filters the rows to only those containing a <code>data.frame</code> string pattern. If none of the data objects have the <code>data.frame</code> string pattern in their class, an empty <code>data_results</code> table is returned</p></li>
</ul>
<div class="cell">
<details class="code-fold">
<summary>Expand to view the updated pkg_data_str()</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">pkg_data_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb50-2">  </span>
<span id="cb50-3">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span>
<span id="cb50-4">  </span>
<span id="cb50-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]])) {</span>
<span id="cb50-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_results contains data objects</span></span>
<span id="cb50-7">    ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb50-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]], </span>
<span id="cb50-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb50-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb50-11">    )</span>
<span id="cb50-12"></span>
<span id="cb50-13">    class_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb50-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-15">        purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>()</span>
<span id="cb50-16">    )</span>
<span id="cb50-17"></span>
<span id="cb50-18">    df_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb50-19">      class_tbl,</span>
<span id="cb50-20">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb50-21">    )</span>
<span id="cb50-22"></span>
<span id="cb50-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df_tbl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb50-24">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_tbl does not contain 'data.frame' classes</span></span>
<span id="cb50-25">      data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb50-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb50-27">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb50-28">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb50-29">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb50-30">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb50-31">              <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb50-32">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb50-33">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>,</span>
<span id="cb50-34">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rows"</span>,</span>
<span id="cb50-35">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Character"</span>,</span>
<span id="cb50-36">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span></span>
<span id="cb50-37">              )</span>
<span id="cb50-38">            )</span>
<span id="cb50-39">          ),</span>
<span id="cb50-40">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb50-41">        )</span>
<span id="cb50-42">      )</span>
<span id="cb50-43"></span>
<span id="cb50-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb50-45">      </span>
<span id="cb50-46">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb50-47">      </span>
<span id="cb50-48">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_tbl contains 'data.frame' classes</span></span>
<span id="cb50-49">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(df_tbl,</span>
<span id="cb50-50">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-51">          purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-52">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-53">          purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-54">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-55">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-56">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-57">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-58">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-59">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-60">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-61">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-62">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-63">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-64">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-65">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-66">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-67">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-68">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>())</span>
<span id="cb50-69">      </span>
<span id="cb50-70">    }</span>
<span id="cb50-71">    </span>
<span id="cb50-72">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb50-73">    </span>
<span id="cb50-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_results does not contains data objects</span></span>
<span id="cb50-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb50-76">    </span>
<span id="cb50-77">  }</span>
<span id="cb50-78">  </span>
<span id="cb50-79">}</span></code></pre></div>
</details>
</div>
<p>Rather than go through the debugger process again, I’ll go through each of the the mini experiments I used to check the updated <code>pkg_data_results()</code> and <code>pkg_data_str()</code> functions:</p>
<ul>
<li><p>Check single package without any data objects (<code>box</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check single package with data objects, but none with classes that contain <code>data.frame</code> (<code>stringr</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check single package with multiple data objects (<code>dplyr</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb53-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 6%">
<col style="width: 13%">
<col style="width: 15%">
<col style="width: 18%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 5%">
<col style="width: 3%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: right;">Logical</th>
<th style="text-align: right;">Numeric</th>
<th style="text-align: right;">Character</th>
<th style="text-align: right;">Factor</th>
<th style="text-align: right;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments2</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_members</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">Starwars characters</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">14 columns</td>
<td style="text-align: left;">87 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">storms</td>
<td style="text-align: left;">Storm tracks data</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">19537 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check multiple packages with multiple data objects (<code>dplyr</code>, <code>forcats</code> and <code>lubridate</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forcats"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lubridate"</span>)))</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 5%">
<col style="width: 10%">
<col style="width: 36%">
<col style="width: 13%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 3%">
<col style="width: 2%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: right;">Logical</th>
<th style="text-align: right;">Numeric</th>
<th style="text-align: right;">Character</th>
<th style="text-align: right;">Factor</th>
<th style="text-align: right;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">forcats</td>
<td style="text-align: left;">gss_cat</td>
<td style="text-align: left;">A sample of categorical variables from the General Social survey</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">9 columns</td>
<td style="text-align: left;">21483 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">lubridate</td>
<td style="text-align: left;">lakers</td>
<td style="text-align: left;">Lakers 2008-2009 basketball data set</td>
<td style="text-align: left;">data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">34624 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments2</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_members</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">Starwars characters</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">14 columns</td>
<td style="text-align: left;">87 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">storms</td>
<td style="text-align: left;">Storm tracks data</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">19537 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div></li>
</ul>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>RStudio’s debugger is a powerful tool that can save tons of time when you’re developing new functions, discovering how a function’s code is executed, or dealing with errors. When you’ve finished debugging, remember to remove the <code>browser()</code> call from your function.</p>
<p>The steps above should help get you started, and if you’d like to learn more, check out the <a href="https://adv-r.hadley.nz/debugging.html">debugging chapter of Advanced R</a>, and the documentation for <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/browser.html"><code>browser()</code></a>, <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/debug.html"><code>debug()</code>/<code>debugonce()</code>/<code>undebug()</code></a>, and <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/traceback.html"><code>traceback()</code></a> functions.</p>


</section>
</section>

 ]]></description>
  <category>Shiny</category>
  <category>Debugging</category>
  <guid>https://mjfrigaard.github.io/posts/debugging/</guid>
  <pubDate>Fri, 01 Sep 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/debugging/image.png" medium="image" type="image/png" height="168" width="144"/>
</item>
<item>
  <title>Testing Non-Package Shiny Apps</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p2-tests-nonpkg-unit-tests/</link>
  <description><![CDATA[ 





<div class="cell">
<details open="" class="code-fold">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(vdiffr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinytest2)</span></code></pre></div>
</details>
</div>
<p>This is the second post in a series on testing Shiny applications. I’ll cover testing Shiny module server functions using the <a href="https://testthat.r-lib.org/"><code>testhat</code> package</a> <em>outside</em> of an R package structure. The <a href="https://github.com/mjfrigaard/sapkgs/tree/noap"><code>noap</code></a> branch of the <a href="https://github.com/mjfrigaard/sapkgs"><code>sapkgs</code></a>.</p>
<section id="testing-module-server-functions" class="level2">
<h2 class="anchored" data-anchor-id="testing-module-server-functions">Testing module server functions</h2>
<p>This post covers how <code>shiny::testServer()</code> works using a simple Shiny application. The code for <code>abcApp()</code> is an RStudio project (i.e., there is a <code>noap.Rproj</code> file in the parent folder), but it’s not part of an R package. Developing shiny applications as R packages is <a href="https://mastering-shiny.org/scaling-packaging.html">highly</a> <a href="https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package">recommended</a>, but it’s <em>possible</em> to begin writing unit tests before your application is a fully developed shiny app-package.</p>
<p>For more information regarding performing tests outside of the package environment, see <a href="https://github.com/r-lib/testthat/issues/659">this issue on GitHub</a>.</p>
<section id="abc-app" class="level3">
<h3 class="anchored" data-anchor-id="abc-app">ABC App</h3>
<p><code>testthat</code> is designed to perform unit tests in R packages, but not all Shiny apps begin as R packages. The Shiny application we’ll be using for this demonstration has been written using <a href="https://shiny.posit.co/r/articles/improve/modules/">Shiny modules</a> and a single <a href="https://github.com/mjfrigaard/sapkgs/blob/noap/utils.R">utility function</a>.</p>
<p>The standalone application function (<code>launchApp()</code>) is stored in <code>app.R</code>, the modules are contained in <code>modules.R</code>, and the single utility function is stored in <code>utils.R</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">├── README.md</span>
<span id="cb2-2">├── app.R</span>
<span id="cb2-3">├── modules.R</span>
<span id="cb2-4">├── sapkgs.Rproj</span>
<span id="cb2-5">├── tests/</span>
<span id="cb2-6">│   ├── testthat/</span>
<span id="cb2-7">│   │   ├── test-mod_abc_server.R</span>
<span id="cb2-8">│   │   └── test-num_super_script.R</span>
<span id="cb2-9">│   └── testthat.R</span>
<span id="cb2-10">└── utils.R</span></code></pre></div>
<ul>
<li><p>The <code>tests/</code> folder contains the following:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">tests</span>
<span id="cb3-2">├── testthat</span>
<span id="cb3-3">│   ├── test-mod_abc_server.R</span>
<span id="cb3-4">│   └── test-num_super_script.R</span>
<span id="cb3-5">└── testthat.R</span></code></pre></div>
<ul>
<li><code>tests/</code> has a <code>testthat.R</code> ‘test runner’ file<br>
</li>
<li>New test files should be placed in <code>tests/testthat/</code> (see example <code>test-mod_abc_server.R</code> below):</li>
</ul></li>
</ul>
<section id="ui-module-function" class="level4">
<h4 class="anchored" data-anchor-id="ui-module-function">UI module function</h4>
<p>In this small example app, both ui and server modules are stored in the <code>modules.R</code> file.</p>
<ul>
<li><p>UI module:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>mod_abc_ui() (example ui module function)</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ui module</span></span>
<span id="cb4-2">mod_abc_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb4-3">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column</span>(</span>
<span id="cb4-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb4-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">offset =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(</span>
<span id="cb4-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>),</span>
<span id="cb4-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alphabet Number"</span>,</span>
<span id="cb4-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span></span>
<span id="cb4-14">      )</span>
<span id="cb4-15">    ),</span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column</span>(</span>
<span id="cb4-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb4-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">br</span>(),</span>
<span id="cb4-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(</span>
<span id="cb4-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"txt"</span>)</span>
<span id="cb4-21">      ),</span>
<span id="cb4-22">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"out"</span>))</span>
<span id="cb4-23">    )</span>
<span id="cb4-24">  )</span>
<span id="cb4-25">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="server-module-function" class="level4">
<h4 class="anchored" data-anchor-id="server-module-function">Server module function</h4>
<p>The counterpart to <code>mod_abc_ui()</code> is <code>mod_abc_server()</code>:</p>
<ul>
<li><p>Server module:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>mod_abc_server() (example server module function)</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server module</span></span>
<span id="cb5-2">mod_abc_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reactive</span></span>
<span id="cb5-5">    letter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb5-6">      LETTERS[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num]</span>
<span id="cb5-7">    })</span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># super script</span></span>
<span id="cb5-9">    sup_scrpt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb5-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">num_super_script</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num)</span>
<span id="cb5-11">    })</span>
<span id="cb5-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output</span></span>
<span id="cb5-13">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="cb5-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HTML</span>(</span>
<span id="cb5-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb5-16">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">em</span>(</span>
<span id="cb5-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>()),</span>
<span id="cb5-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" letter in the alphabet is: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>())</span>
<span id="cb5-19">          )</span>
<span id="cb5-20">        )</span>
<span id="cb5-21">      )</span>
<span id="cb5-22">    })</span>
<span id="cb5-23">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb5-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HTML</span>(</span>
<span id="cb5-25">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb5-26">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">em</span>(</span>
<span id="cb5-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>()),</span>
<span id="cb5-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" letter in the alphabet is: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>())</span>
<span id="cb5-29">          )</span>
<span id="cb5-30">        )</span>
<span id="cb5-31">      )</span>
<span id="cb5-32">    })</span>
<span id="cb5-33">  })</span>
<span id="cb5-34">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="module-utility-function" class="level4">
<h4 class="anchored" data-anchor-id="module-utility-function">Module utility function</h4>
<p>The <code>mod_abc_server()</code> function uses the <code>num_super_script()</code> function stored in <code>utils.R</code>:</p>
<ul>
<li><p>Utility function:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>num_super_script() (example utility function)</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># utility function</span></span>
<span id="cb6-2">num_super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-3">      num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x)</span>
<span id="cb6-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb6-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not a valid number"</span>)</span>
<span id="cb6-6">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>) {</span>
<span id="cb6-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not a valid number"</span>)</span>
<span id="cb6-8">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb6-9">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb6-10">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>) {</span>
<span id="cb6-11">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"st"</span></span>
<span id="cb6-12">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>) {</span>
<span id="cb6-13">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nd"</span></span>
<span id="cb6-14">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>) {</span>
<span id="cb6-15">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rd"</span></span>
<span id="cb6-16">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb6-17">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"th"</span></span>
<span id="cb6-18">      }</span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(super_script)</span>
<span id="cb6-20">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="standalone-app-function" class="level4">
<h4 class="anchored" data-anchor-id="standalone-app-function">Standalone app function</h4>
<ul>
<li><p>Standalone app functions include a call to <code>shiny::shinyApp()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>launch() (example app with modules)</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">launchApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb7-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC App"</span>),</span>
<span id="cb7-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidRow</span>(</span>
<span id="cb7-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_abc_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb7-7">      )</span>
<span id="cb7-8">    ),</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb7-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_abc_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb7-11">    }</span>
<span id="cb7-12">  )</span>
<span id="cb7-13">}</span>
<span id="cb7-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">launchApp</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li><p>The call to <code>shiny::shinyApp()</code> is placed inside the <code>launchApp()</code> function</p></li>
<li><p>The <code>ui</code> argument is wrapped in <code>shiny::fluidPage()</code> with the ui module function (<code>mod_abc_ui()</code>) placed inside <code>fluidRow()</code></p></li>
<li><p>The <code>server</code> argument includes the standard <code>function(input, output, session)</code> and the module server companion function–<code>mod_abc_server()</code>–with a matching <code>id</code> arguments</p></li>
</ul></li>
</ul>
<p>Because <code>launchApp()</code> is not part of a package, <code>shiny</code> and <code>testthat</code> are loaded and the modules and utility function are sourced in the top of the <code>app.R</code> file.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>source utils.R and modules.R in app.R</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># packages --------------------------------------------------------</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># utils ------------------------------------------------------------------</span></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils.R"</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modules ------------------------------------------------------------------</span></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modules.R"</span>)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="using-testserver" class="level3">
<h3 class="anchored" data-anchor-id="using-testserver">Using <code>testServer()</code></h3>
<p>In the <code>test-mod_abc_server.R</code> file, I’ll add <code>testServer()</code> and include the module server function as the first argument:</p>
<ul>
<li><p><code>app</code> is the module server function (<code>mod_abc_server</code>) or any <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html"><code>shiny.appobj</code></a></p>
<div class="cell">
<details open="" class="code-fold">
<summary>app = mod_abc_server</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> mod_abc_server, {</span>
<span id="cb9-2"></span>
<span id="cb9-3">})</span></code></pre></div>
</details>
</div></li>
</ul>
<section id="testing-inputs" class="level4">
<h4 class="anchored" data-anchor-id="testing-inputs">Testing <code>input$</code>s</h4>
<ul>
<li><p>The first test I’ll add will check the initial value of <code>input$num</code></p>
<ul>
<li>I’ll also include a custom message with <code>cat()</code></li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>test initial value with custom message</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test initial value</span></span>
<span id="cb10-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 1 initial input$num = NULL: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-5">})</span></code></pre></div>
</details>
</div></li>
</ul>
<p><code>testServer()</code> allows me to set new <code>input</code> values with <code>session$setInputs()</code></p>
<ul>
<li><p>Use <code>session$setInputs()</code> to set <code>input$num</code> to <code>3</code></p>
<ul>
<li>Test 2 confirms <code>input$num</code> has changed (we’ll also add another custom message with <code>cat()</code>)</li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>setInputs() and test inputs</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb11-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set inputs</span></span>
<span id="cb11-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test set inputs</span></span>
<span id="cb11-5">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 2 setInputs(num = 3):"</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-7">})</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="testing-reactive-values" class="level4">
<h4 class="anchored" data-anchor-id="testing-reactive-values">Testing reactive values</h4>
<p>The module’s reactive values are also available to in <code>testServer()</code>.</p>
<ul>
<li><p>Test 3 adds a test for <code>sup_scrpt()</code> (given the changed value of <code>input$num</code>)</p>
<ul>
<li>The <code>expected</code> value is what I’m expecting <code>num_super_script()</code> to return:</li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>Check sup_scrpt() reactive value with expect_equal()</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test super script</span></span>
<span id="cb12-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rd"</span>)</span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 3 sup_scrpt(): = 'rd':"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-5">})</span></code></pre></div>
</details>
</div>
<ul>
<li>For completeness we’ll add a test for <code>letter()</code></li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>Check letter() reactive value with expect_equal()</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb13-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test letter</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>)</span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 4 letter() = C:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-5">})</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="testing-outputs" class="level4">
<h4 class="anchored" data-anchor-id="testing-outputs">Testing <code>output$</code>s</h4>
<p>The module output values are also available as <code>output$&lt;value&gt;</code>.</p>
<ul>
<li><p>The final test will verify this object is a list and print the results to the Console</p>
<ul>
<li>Output tests can verify that <code>output$txt</code> has been updated with <code>input$num</code>:</li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>Check module output values</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb14-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test output</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt))</span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt)</span>
<span id="cb14-5">})</span></code></pre></div>
</details>
</div>
<ul>
<li>Finally, I’ll run the tests with <code>test_file()</code>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/app/tests/testthat/"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb16-2"> Test 1 initial input$num = NULL:  TRUE </span>
<span id="cb16-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb16-4"> Test 2 setInputs(num = 3): 3 </span>
<span id="cb16-5">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb16-6"> Test 3 sup_scrpt(): = 'rd': rd </span>
<span id="cb16-7">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb16-8"> Test 4 letter() = C: C </span>
<span id="cb16-9">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]$html</span>
<span id="cb16-10">&lt;em&gt;</span>
<span id="cb16-11">  The </span>
<span id="cb16-12">  &lt;code&gt;3&lt;/code&gt;</span>
<span id="cb16-13">  &lt;code&gt;rd&lt;/code&gt;</span>
<span id="cb16-14">   letter in the alphabet is: </span>
<span id="cb16-15">  &lt;code&gt;C&lt;/code&gt;</span>
<span id="cb16-16">&lt;/em&gt;</span></code></pre></div></li>
</ul>
<p>The results show the tests passed! Now I am confident inputs, reactive values (<code>sup_scrpt()</code> &amp; <code>letter()</code>), outputs behave as expected.</p>
</section>
</section>
<section id="recap" class="level3">
<h3 class="anchored" data-anchor-id="recap">Recap</h3>
<p>The example above provides a workflow for using <code>testServer()</code> with <code>testthat</code> <em>outside</em> a package environment. The checklist below summarizes the steps required to test your application’s module server functions:</p>
<ol type="1">
<li><p>Create test files (in <code>tests/testthat/</code>)</p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">All test files should have the <code>test-</code> prefix</label></li>
</ul></li>
<li><p>Verify inputs with <code>session$setInputs(inputId = &lt;value&gt;)</code></p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">All <code>input$</code> values should initially be <code>NULL</code></label></li>
</ul></li>
<li><p>Test reactive values by referring to them as you would in the module server</p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">Compare expected values after changing inputs with <code>session$setInputs()</code></label></li>
</ul></li>
<li><p>Test outputs using <code>output$&lt;value&gt;</code> to check changes to the inputs and reactives</p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">Check output values with <code>output$txt</code></label></li>
</ul></li>
</ol>
<p>This concludes running tests on <code>noap</code>. Ideally, Shiny applications are developed as an R package (which I’ll cover in future posts), but now you know how to perform tests if this isn’t the case. The files for this demonstration are located <a href="https://github.com/mjfrigaard/sapkgs/tree/noap">here.</a>.</p>
<p>For a more comprehensive review of testing, check out the chapters on testing in <a href="https://r-pkgs.org/testing-basics.html">R packages</a> and <a href="https://mastering-shiny.org/scaling-testing.html">Mastering Shiny</a>.</p>


</section>
</section>

 ]]></description>
  <category>Shiny</category>
  <category>Testing</category>
  <guid>https://mjfrigaard.github.io/posts/p2-tests-nonpkg-unit-tests/</guid>
  <pubDate>Sun, 20 Aug 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p2-tests-nonpkg-unit-tests/image.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Behavior Driven Unit Tests</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p1-tests-unit-tests/</link>
  <description><![CDATA[ 





<div class="cell">
<details open="" class="code-fold">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lobstr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(covr)</span></code></pre></div>
</details>
</div>
<p>This post is the first in a series on testing Shiny applications. We’ll cover developing and testing a set of utility functions for a Shiny app-package using <a href="https://testthat.r-lib.org/"><code>testhat</code></a>. If you’d like to follow along, all the code we’ll be using is contained in the <a href="https://github.com/mjfrigaard/sapkgs/tree/utap"><code>utap</code> branch</a> of the <code>sapkgs</code> repo on GitHub.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renv::install("mjfrigaard/utap")</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(utap)</span></code></pre></div>
</div>
<p>Testing the code in Shiny app-packages can be more complicated than testing the code in a typical R package, because app-packages contain two types of code:</p>
<ol type="1">
<li><p><strong>Application code</strong>: functions designed to run the application (i.e., the <code>ui</code> and <code>server</code> functions, modules, standalone app functions will a call to <code>shinyApp()</code>, etc.)</p></li>
<li><p><strong>Everything else</strong>: functions or code used for connecting to databases, uploading, importing, or manipulating data, building visualizations and/or tables, generating custom HTML layouts, etc. The non-application code and functions in app-packages are typically referred to as ‘<a href="https://engineering-shiny.org/build-app-golem.html?#submodules-and-utility-functions">utility</a>’ or ‘<a href="https://mastering-shiny.org/scaling-functions.html#file-organisation">helper</a>’ functions</p></li>
</ol>
<p>These two types of code require different types of tests. Utility functions are usually accompanied by unit tests similar to the tests you’d find in a standard R package<sup>1</sup>, while the application’s reactive code can be tested using Shiny’s <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/testserver"><code>testServer()</code></a> function, and the system tests can be built using the <a href="https://rstudio.github.io/shinytest2/"><code>shinytest2</code> package</a>.</p>
<p>This post will cover writing unit tests for a set of utility functions using <a href="https://testthat.r-lib.org/"><code>testthat</code></a> and <a href="https://covr.r-lib.org/"><code>covr</code></a>. Any tips or time-savers I’ve found will be in green callout boxes:</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">TIP!</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>This is a tip!</p>
</div>
</div>
</div>
</div>
<section id="what-are-unit-tests" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-are-unit-tests">What are unit tests?</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="testthat.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat.png" class="img-fluid" style="width:40.0%"></a></p>
</div></div><blockquote class="blockquote">
<p>“<em>A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work. If the assumptions on the end result turn out to be wrong, the unit test has failed. A unit test’s scope can span as little as a method or as much as multiple classes.</em>” - <a href="https://www.manning.com/books/the-art-of-unit-testing-second-edition">The Art of Unit Testing, 2nd edition</a></p>
</blockquote>
<p>Thinking of functions as ‘units of work’ and their desired behavior as an ‘end results’ provides a useful mental model (especially during <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">behavior-driven development</a>. These terms also align nicely with the testing advice offered by <a href="https://r-pkgs.org/testing-design.html#sec-testing-design-principles"><code>testthat</code></a>:</p>
<blockquote class="blockquote">
<p><em>Strive to test each behaviour in one and only one test. Then if that behaviour later changes you only need to update a single test.</em></p>
</blockquote>
<p>In app-packages, the <code>testthat</code> package provides a comprehensive and flexible framework for performing unit tests.</p>
<section id="testthat" class="level3">
<h3 class="anchored" data-anchor-id="testthat">testthat</h3>
<p>Get started with <code>testthat</code> by running <a href="https://usethis.r-lib.org/reference/use_testthat.html"><code>usethis::use_testthat()</code></a>. This function will create following files and folders:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">tests/</span>
<span id="cb3-2">  ├── testthat/</span>
<span id="cb3-3">  └── testthat.R</span></code></pre></div>
<p>To create new tests, we’ll run <code>usethis::use_test("&lt;name&gt;")</code> (with <code>"select_class"</code> being the name of the function we’d like to test).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_test</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">✔ Setting active project to '/projects/apps/utap'</span>
<span id="cb5-2">✔ Writing 'tests/testthat/test-select_class.R'</span>
<span id="cb5-3">• Modify 'tests/testthat/test-select_class.R'</span></code></pre></div>
<section id="test-files" class="level4">
<h4 class="anchored" data-anchor-id="test-files">Test files</h4>
<p>New test files are be created and opened from the <code>tests/testthat/</code> folder (with a <code>test-</code> prefix). Each function we’re testing should have it’s own <code>.R</code> file the <code>R/</code> folder and a corresponding <code>test-</code> file in the <code>tests/testthat/</code> folder (we’ll see how this helps with interactive testing in the IDE below). The initial contents of a new test file contains the boilerplate code below:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50, 50]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiplication works"</span>, {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb6-3">})</span></code></pre></div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="testthat-test-file.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="testthat test file"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-test-file.png" class="img-fluid figure-img" style="width:50.0%" alt="testthat test file"></a></p>
<figcaption>testthat test file</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="test-structure" class="level4">
<h4 class="anchored" data-anchor-id="test-structure">Test structure</h4>
<p><code>test_that()</code> sets the test “scope” or “execution environment”, and encapsulates the test code and expectations. Note the use of curly brackets after the <code>code</code> argument:</p>
<div id="fig-tests" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-tests-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="testthat-tests.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Figure&nbsp;1: testthat test"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-tests.png" class="img-fluid figure-img" style="width:90.0%"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-tests-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <code>testthat</code> test
</figcaption>
</figure>
</div>
</section>
<section id="expectations" class="level4">
<h4 class="anchored" data-anchor-id="expectations">Expectations</h4>
<p>Test expectations are the code that comes into direct contact with the <em>unit of work</em> and <em>end result</em> for each function. It’s likely we’ll have multiple expectations for any given function, so we store these in <strong>tests</strong> and use the <code>desc</code> to describe the test context (all <code>testthat</code> expectations have an <code>expect_*</code> prefix):</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50, 50]">
<div class="quarto-layout-row quarto-layout-valign-center">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="testthat-test-expectations.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="expect_* functions"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-test-expectations.png" class="img-fluid figure-img" style="width:90.0%" alt="expect_* functions"></a></p>
<figcaption><code>expect_*</code> functions</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="testthat-expectation.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="expectations"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-expectation.png" style="width:50.0%;height:50.0%" alt="expectations" class="figure-img"></a></p>
<figcaption>expectations</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="keyboard-shortcuts" class="level3">
<h3 class="anchored" data-anchor-id="keyboard-shortcuts">Keyboard shortcuts</h3>
<p>I <strong>highly</strong> recommend using a shortcut while developing tests because it will improve your ability to iterate quickly.<sup>2</sup></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[54, -1, 45]">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<section id="devtools-function" class="level4 quarto-layout-cell" style="flex-basis: 54.0%;justify-content: flex-start;">
<h4 class="anchored" data-anchor-id="devtools-function"><strong><code>devtools</code> function</strong></h4>
<p><span style="font-weight: bold; font-size: 0.95em"><code>test()</code></span></p>
</section>
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 1.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<section id="keyboard-shortcut" class="level4 quarto-layout-cell" style="flex-basis: 45.0%;justify-content: flex-start;">
<h4 class="anchored" data-anchor-id="keyboard-shortcut"><strong>Keyboard shortcut</strong></h4>
<p><span style="font-weight: bold; font-size: 0.80em"><kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></span></p>
</section>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[54, -1, 45]">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<div class="quarto-layout-cell" style="flex-basis: 54.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.95em"><code>test_active_file()</code></span></p>
</div>
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 1.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 45.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.80em"><kbd>Ctrl/Cmd</kbd> + <kbd>T</kbd></span></p>
</div>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[54, -1, 45]">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<div class="quarto-layout-cell" style="flex-basis: 54.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.95em"><code>test_coverage_active_file()</code></span></p>
</div>
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 1.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 45.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.80em"><kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></span></p>
</div>
</div>
</div>
</section>
</section>
<section id="behavior-driven-development" class="level2">
<h2 class="anchored" data-anchor-id="behavior-driven-development">Behavior-Driven Development</h2>
<p>Behavior-driven development (or behavior-driven testing) is helpful if you find yourself communicating with users and/or stakeholders while developing Shiny apps. BDD centers around “<em>conversation and examples to specify how you expect a system to behave</em>”<sup>3</sup> and it’s supported with <code>testthat</code>s <code>describe()</code> and <code>it()</code> functions.<sup>4</sup></p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">BDD features &amp; scenarios</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>In BDD, requirements are written plain language ‘feature files’ using a series of keywords:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Feature:</span>  </span>
<span id="cb7-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">As</span> a </span>
<span id="cb7-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">I</span> want </span>
<span id="cb7-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">So</span> that</span>
<span id="cb7-5">  </span>
<span id="cb7-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Background:</span></span>
<span id="cb7-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Given</span> </span>
<span id="cb7-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">And</span>  </span>
<span id="cb7-9">    </span>
<span id="cb7-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scenario:</span>  </span>
<span id="cb7-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">When</span> </span>
<span id="cb7-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">And</span>  </span>
<span id="cb7-13">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Then</span> </span>
<span id="cb7-14">    </span></code></pre></div>
<p>The <code>Feature</code> is a high-level description (usually with a title <em>and</em> description). <code>As a</code> describes the end user the feature is intended for, their needs (<code>I want</code>), and the desired result (<code>So that</code>).</p>
<p>The <code>Background</code> can include any steps or conditions that exist <em>before</em> each scenario.</p>
<p>A <code>Scenario</code> is a series of steps outlining a concrete examples that illustrates a feature. <code>When</code> is used to describe an event, or an action. <code>Then</code> describes what will verify the expected outcome is observable by the user. <code>And</code> combines <code>Given</code> with <code>When</code> or <code>Then</code>.</p>
<p>Read more about Gherkin on the <a href="https://cucumber.io/docs/gherkin/reference/">Cucumber website.</a>.</p>
</div>
</div>
</div>
</div>
<section id="specifications" class="level3">
<h3 class="anchored" data-anchor-id="specifications">Specifications</h3>
<p>In <a href="https://r-pkgs.org/testing-basics.html#run-tests">R packages</a>, micro-iteration is defined as, “<em>the interactive phase where you initiate and refine a function and its tests in tandem.</em>” In app development, this stage might after you’ve received needs or specifications by an end-user or stakeholder.</p>
<p>If we’re using <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>, we’ll translate these specifications into functional requirements, then start writing test(s). After outlining the tests, we’ll write the function(s) to pass the test.</p>
<p><code>testthat</code>’s <code>describe()</code> and <code>it()</code> functions and Gherkin syntax can clarify this process because we can <em>describe</em> what <em>it</em> is we want to test before getting stuck writing any test code.</p>
<p>Let’s assume we’ve been asked to design an application that automatically to populates the user drop-downs with variables based on their format: binary, numeric, categorical, and–a subset of categorical–facet.<sup>5</sup></p>
<ol type="1">
<li><strong>Features &amp; Background</strong>: use the <code>description</code> (entered as a character string in the first argument of <code>describe()</code>) to capture the “unit of work” for each function. <code>Feature</code> and <code>Background</code> information can be included in nested <code>describe()</code> blocks.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb8-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Feature: Pull column names by type from a data frame or tibble</span></span>
<span id="cb8-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Background: Given a data frame or tibble </span></span>
<span id="cb8-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    And it has binary, character, and numeric columns"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb8-5">  </span>
<span id="cb8-6">})</span></code></pre></div>
</div>
<ol start="2" type="1">
<li><strong>Scenario</strong>: Every new <code>Scenario</code> keyword should have a corresponding <code>it()</code> or <code>test_that()</code> call.<sup>6</sup> Try to be as specific as possible (while staying short and sweet) when describing the scenarios.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Feature: Pull column names by type from a data frame or tibble</span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Background: Given a data frame or tibble </span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    And it has binary, character, and numeric columns"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb9-5">  </span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scenario: Given a data frame with a mix of columns</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      When I call pull_cols() with type 'binary'</span></span>
<span id="cb9-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      Then I should receive a list of 'binary' column names"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb9-9">      </span>
<span id="cb9-10">    })</span>
<span id="cb9-11">  </span>
<span id="cb9-12">})</span></code></pre></div>
</div>
<ol start="3" type="1">
<li><strong>Expectations</strong>: The <code>Then</code> keywords capture our expectations (and <code>expect_*()</code> function). In this case, it’s the ‘<em>list of column names that match the <code>"&lt;type&gt;"</code> criteria</em>’</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Feature: Pull column names by type from a data frame or tibble</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Background: Given a data frame or tibble </span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    And it has binary, character, and numeric columns"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb10-5">  </span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scenario: Given a data frame with a mix of columns</span></span>
<span id="cb10-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      When I call pull_cols() with type 'binary'</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      Then I should receive a list of 'binary' column names"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb10-9">      </span>
<span id="cb10-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(object))</span>
<span id="cb10-11">      </span>
<span id="cb10-12">    })</span>
<span id="cb10-13">  </span>
<span id="cb10-14">})</span></code></pre></div>
</div>
<p>It’s worth noting that, at least conceptually, scenarios and expectations arise first. We’re usually working backwards from a desired “end result” a function is supposed to produce (i.e., compute a value, download a file, create a column, etc.).</p>
<section id="requirements" class="level4">
<h4 class="anchored" data-anchor-id="requirements">Requirements</h4>
<p>For example, calling <code>pull_cols(df, "bin")</code> would ‘pull’ all the binary columns from an input <code>data.frame</code> or <code>tibble</code> (the example below uses <code>palmerpenguins::penguins</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_cols</span>(palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bin"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  sex </span></span>
<span id="cb12-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "sex" </span></span></code></pre></div>
</div>
<p>The return values can be passed to <code>updateSelectInput()</code> in the <code>server</code> to provide column names by <code>type</code> (i.e., numeric, binary, etc). <code>pull_colls()</code> can be used to quickly group variables into groups for data visualizations or table displays.</p>
<p>For example, categorical variables with 3-5 levels can be mapped to a facet layer (if using <code>ggplot2</code>). See the hypothetical UI output example below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI code</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facet"</span>),</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select Facet Column"</span>,</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb13-6">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pull facet columns from data</span></span>
<span id="cb14-2">facet_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_cols</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ds</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facet"</span>)</span>
<span id="cb14-4">})</span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update facet inputs</span></span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(</span>
<span id="cb14-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb14-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facet"</span>,</span>
<span id="cb14-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_cols</span>()</span>
<span id="cb14-11">  )</span>
<span id="cb14-12">}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_cols</span>())</span></code></pre></div>
</div>
<p>In the example above, <code>pull_cols()</code> is passed a reactive dataset (<code>data()</code>), and the output is used to update the <code>selectInput()</code>:</p>
<div class="cell">
<div class="cell-output-display no-overflow-x">
<div class="form-group shiny-input-container">
<label class="control-label" id="num_cols-label" for="num_cols">Select Facet Column</label>
<div>
<select id="num_cols" class="shiny-input-select"><option value="species" selected="">species</option>
<option value="island">island</option></select>
<script type="application/json" data-for="num_cols" data-nonempty="">{"plugins":["selectize-plugin-a11y"]}</script>
</div>
</div>
</div>
</div>
<p><br></p>
<p>The first step of <code>pull_cols()</code> will be to identify and extract columns based on their class, so we’ll create a test for <code>select_class()</code>, a function with a <code>class</code> parameter that supports multiple column types. The <code>roxygen2</code> documentation for <code>select_class()</code> is below:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide roxygen2 documentation</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Select Column Class</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' `select_class()` selects columns from a data.frame based on the specified</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' `class`. Options include logical, integer, double, character, factor, ordered,</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' and list column types.</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param df A `data.frame` from which columns will be selected.</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param class Character vector specifying the class(es) of columns to select.</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   Supported values are:</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "logical" ("lo")  </span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "integer" ("in")  </span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "double" ("do")  </span></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "character" ("ch")  </span></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "factor" ("fa")   </span></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "ordered" ("or")   </span></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "list" ("li")</span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   </span></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param return_tbl Logical indicating whether to return the result as a</span></span>
<span id="cb15-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `data.frame`. If `FALSE`, a vector of selected column names is returned.</span></span>
<span id="cb15-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb15-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A `data.frame` or vector of column names, depending on `return_tbl`.</span></span></code></pre></div>
</details>
</div>
<p>We’ve also included a <code>return_tbl</code> argument that allows <code>select_class()</code> to return the column names.</p>
</section>
<section id="abstract-folder-trees" class="level4">
<h4 class="anchored" data-anchor-id="abstract-folder-trees">Abstract folder trees</h4>
<p>While developing R functions, I’ve found the <code>ast()</code> function from the <a href="https://lobstr.r-lib.org/reference/ast.html"><code>lobstr</code> package</a> can be great for keeping track of nested function calls.</p>
<p><code>select_class()</code> will have a nested <code>is_class()</code> function, which contains a series of test for objects (i.e., <code>is.logical()</code>, <code>is.integer()</code>, etc.). To keep track of nested functions in <code>R/</code> files, sometimes I’ll outline the function in an abstract function tree and store this in a <a href="https://github.com/mjfrigaard/sapkgs/blob/utap/vignettes/utap.Rmd">vignette</a>.<sup>7</sup></p>
<p>Below is an example tree for <code>select_class()</code>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[25,75]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: flex-start;">
<p><strong>Syntax</strong>:</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 75.0%;justify-content: flex-start;">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(</span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_class</span>(</span>
<span id="cb16-3">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_class</span>()</span>
<span id="cb16-4">      )</span>
<span id="cb16-5">)</span></code></pre></div>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: flex-start;">
<p><strong>Output</strong>:</p>
</div>
<div class="cell quarto-layout-cell" style="flex-basis: 75.0%;justify-content: flex-start;">
<div class="cell-output cell-output-stdout">
<pre><code>█─select_class 
└─█─is_class </code></pre>
</div>
</div>
</div>
</div>
<p>The tree above is simple–it only has two functions so far–but as packages grow these abstract displays become more important for tracking function calls (and tests!).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">TIP! Function Names</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>Coming up with names for functions can be challenging. I like to follow the <a href="https://style.tidyverse.org/syntax.html#object-names"><code>tidyverse</code> style guide</a> and use short verbs as a prefix (<code>make_</code>, <code>get_</code>, <code>check_</code> etc.) that will give ‘future’ me hints as to their behavior.</p>
<p>I like to stick to naming conventions I’m familiar with. For example, <code>select_class()</code> has similar behavior to <code>dplyr::select()</code>, and <code>pull_cols()</code> is more like <code>dplyr::pull()</code>.</p>
</div>
</div>
</div>
</div>
<p>Outlining functions with <code>lobstr::ast()</code> can helpful if we plan on iterating multiple, smaller functions. For example, before making a binary vector of column names, we need to verify the column has only two values. Binary variables can come in multiple flavors (logical, integer, character, factor, ordered, etc.), so <code>check_binary_vec()</code> will have a series of ‘checks’ for each column type.</p>
<p>Below is an abstract folder tree outlining <code>pull_binary_cols()</code>, the function called to extract a named character vector of binary column names:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>█─pull_binary_cols 
├─█─select_class 
│ └─█─is_class 
└─█─make_binary_vec 
  └─█─check_binary_vec 
    ├─█─check_log_binary 
    ├─█─check_int_binary 
    ├─█─check_chr_binary 
    ├─█─check_fct_binary 
    └─█─check_ord_binary </code></pre>
</div>
</div>
<p><code>pull_binary_cols()</code> calls <code>select_class()</code> then passes the selected columns to <code>make_binary_vec()</code>, where <code>check_binary_vec()</code> determines if it’s one of the five types of possible binary variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins)</span>
<span id="cb19-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   sex </span></span>
<span id="cb19-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "sex"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>starwars)</span>
<span id="cb20-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   gender </span></span>
<span id="cb20-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "gender"</span></span></code></pre></div>
</div>
<p>The <code>pull_facet_cols()</code> outline is similar, except that it calls the <code>pull_binary_cols()</code> first, then selects the columns and determines if any remaining have 3-5 categorical levels:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>█─pull_facet_cols 
├─█─pull_binary_cols 
├─█─select_class 
│ └─█─is_class 
└─█─make_facet_vec 
  └─█─check_facet_vec 
    ├─█─check_chr_facet 
    └─█─check_fct_facet </code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="test-tools" class="level2">
<h2 class="anchored" data-anchor-id="test-tools">Test tools</h2>
<p>Before we can start developing the tests for <code>pull_cols()</code>, we’ll need data. We can define test data inside the <code>it()</code> call for <code>select_class()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() returned objects"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df returned"</span>, {</span>
<span id="cb22-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define test data</span></span>
<span id="cb22-4">    test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb22-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb22-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L),</span>
<span id="cb22-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbl_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span>),</span>
<span id="cb22-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item:"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb22-9">  })</span>
<span id="cb22-10">})</span></code></pre></div>
</div>
<p>This is helpful because it’s clear what <code>test_data</code> contains, and many times a small dataset will suffice. However, larger, more complex test data should be stored as a test fixture.</p>
<section id="test-fixtures" class="level3">
<h3 class="anchored" data-anchor-id="test-fixtures">Test fixtures</h3>
<p>Creating test fixtures is covered in <a href="https://r-pkgs.org/testing-design.html#storing-test-data">R packages</a>, but I’ll summarize the key points:</p>
<ol type="1">
<li><p>Test data (and other objects) can either be created within a test, or as a persistent <a href="https://r-pkgs.org/testing-advanced.html#sec-testing-advanced-concrete-fixture">test fixture</a></p></li>
<li><p>Test data fixtures should be stored in <code>tests/testthat/fixtures/&lt;test_data.rds&gt;</code></p></li>
<li><p>The code used to create any test data fixtures should be stored in the same folder with a <code>make_</code> prefix (i.e., <code>tests/testthat/fixtures/&lt;make_test_data.R&gt;</code>)</p></li>
</ol>
<p>This is easier to picture with a demonstration: In the <code>tests/testthat/</code> folder, I’ll create a new <code>fixtures</code> folder, and add a <code>make_test_data.R</code> file.<sup>8</sup></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">tests/testthat/</span>
<span id="cb23-2">        └── fixtures/</span>
<span id="cb23-3">                └── make_test_data.R</span></code></pre></div>
<p>In <code>make_test_data.R</code>, I’ll create <code>test_data</code> using the code above and save <code>test_data</code> in <code>tests/testthat/fixtures/</code> as <code>test_data.rds</code>:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">tests/testthat/</span>
<span id="cb24-2">        └── fixtures/</span>
<span id="cb24-3">                ├── make_test_data.R</span>
<span id="cb24-4">                └── test_data.rds</span></code></pre></div>
<p>To load the data into my test, I’ll add the following to the top of the test context:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() returned objects"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb25-2">  </span>
<span id="cb25-3">  test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_data.rds"</span>))</span>
<span id="cb25-4">  </span>
<span id="cb25-5">})</span></code></pre></div>
</div>
<p><code>testthat::test_path()</code> will load the data from the testing directory when I’m ready to run my test.</p>
<p>The <code>select_class()</code> function should also be able to return a data.frame/tibble of the specified class, or a named vector of the column names. <code>testthat</code>’s <code>expect_</code>* functions have a lot of options for writing very specific tests.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() returned objects"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb26-2">  </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df returned"</span>, {</span>
<span id="cb26-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(object, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb26-6">  })</span>
<span id="cb26-7">  </span>
<span id="cb26-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tibble returned"</span>, {</span>
<span id="cb26-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(object,</span>
<span id="cb26-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl_df"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb26-12">    )</span>
<span id="cb26-13">  })</span>
<span id="cb26-14">  </span>
<span id="cb26-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string returned"</span>, {</span>
<span id="cb26-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_type</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)</span>
<span id="cb26-18">  })</span>
<span id="cb26-19">  </span>
<span id="cb26-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"named vector returned"</span>, {</span>
<span id="cb26-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_named</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_var"</span>)</span>
<span id="cb26-23">  })</span>
<span id="cb26-24">})</span></code></pre></div>
</div>
<p><code>select_class()</code> should also return the columns according to the <code>class</code> argument. For the logical, integer, double, character, and list columns, we can assess each returned object with <code>expect_type()</code>. However, with the factor and ordered columns, we’ll use the <code>expect_s3_class()</code>.</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide select_class() tests</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check classes ----</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() return classes"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb27-3">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check logical ----</span></span>
<span id="cb27-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical works"</span>, {</span>
<span id="cb27-5">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_data.rds"</span>))</span>
<span id="cb27-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define obj</span></span>
<span id="cb27-7">      obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_class</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> test_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>)</span>
<span id="cb27-8">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test type</span></span>
<span id="cb27-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_type</span>(obj[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>)</span>
<span id="cb27-10">    })</span>
<span id="cb27-11">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check integer ----</span></span>
<span id="cb27-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer works"</span>, {</span>
<span id="cb27-13">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># integer test code</span></span>
<span id="cb27-14">      })</span>
<span id="cb27-15">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check double ----</span></span>
<span id="cb27-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double works"</span>, {</span>
<span id="cb27-17">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># double test code</span></span>
<span id="cb27-18">    })</span>
<span id="cb27-19">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check character ----</span></span>
<span id="cb27-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character works"</span>, {</span>
<span id="cb27-21">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># character test code</span></span>
<span id="cb27-22">    })</span>
<span id="cb27-23">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check list ----</span></span>
<span id="cb27-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list works"</span>, {</span>
<span id="cb27-25">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list test code</span></span>
<span id="cb27-26">    })</span>
<span id="cb27-27">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check factor ----</span></span>
<span id="cb27-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor works"</span>, {</span>
<span id="cb27-29">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_data.rds"</span>))</span>
<span id="cb27-30">      obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_class</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> test_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>)</span>
<span id="cb27-31">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(obj[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>)</span>
<span id="cb27-32">    })</span>
<span id="cb27-33">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check factor (ordered) ----</span></span>
<span id="cb27-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ordered works"</span>, {</span>
<span id="cb27-35">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ordered factor test code</span></span>
<span id="cb27-36">    })</span>
<span id="cb27-37"></span>
<span id="cb27-38">})</span></code></pre></div>
</details>
</div>
<p>Using <code>describe()</code> and <code>it()</code> allows us to outline tests for <code>select_class()</code>, and including test fixtures makes it easier to test all possible classes returned.</p>
<p>When we’ve covered my intended ‘end results’ for <code>select_class()</code> (i.e., what we expect to happen when it works and we expect to happen when it doesn’t), we cam write the function:</p>
<div class="cell">
<details class="code-fold">
<summary>select_column_class()</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">select_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">return_tbl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb28-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(df)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df must be a dataframe"</span>)</span>
<span id="cb28-3"></span>
<span id="cb28-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define classes</span></span>
<span id="cb28-5">  valid_classes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb28-6">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ordered"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>)</span>
<span id="cb28-7">  class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.arg</span>(class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> valid_classes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">several.ok =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb28-8"></span>
<span id="cb28-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function to check classes</span></span>
<span id="cb28-10">  is_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, cls) {</span>
<span id="cb28-11">    cls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(cls, valid_classes)</span>
<span id="cb28-12">    cls_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> valid_classes[cls]</span>
<span id="cb28-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span>(cls_name,</span>
<span id="cb28-14">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">logical =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(x),</span>
<span id="cb28-15">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">integer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x),</span>
<span id="cb28-16">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">double =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(x),</span>
<span id="cb28-17">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numeric =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x),</span>
<span id="cb28-18">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">character =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x),</span>
<span id="cb28-19">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.factor</span>(x),</span>
<span id="cb28-20">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.ordered</span>(x),</span>
<span id="cb28-21">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(x),</span>
<span id="cb28-22">           <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb28-23">  }</span>
<span id="cb28-24"></span>
<span id="cb28-25">  selected_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(df, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(class, is_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x)))</span>
<span id="cb28-26"></span>
<span id="cb28-27">  col_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df)[selected_cols]</span>
<span id="cb28-28"></span>
<span id="cb28-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (return_tbl) {</span>
<span id="cb28-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df[, col_names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>])</span>
<span id="cb28-31">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb28-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> col_names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nm =</span> col_names))</span>
<span id="cb28-33">  }</span>
<span id="cb28-34">}</span></code></pre></div>
</details>
</div>
<p>Below is a summary of tips for adding data your tests.</p>
<div id="fig-unit_test_dep_data" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-unit_test_dep_data" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="unit_test_dep_data.png" class="lightbox" data-gallery="fig-unit_test_dep_data" title="Figure&nbsp;2&nbsp;(a): Unit test fixtures"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/unit_test_dep_data.png" class="img-fluid figure-img" style="width:90.0%" data-ref-parent="fig-unit_test_dep_data"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Unit test fixtures
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Unit test fixtures
</figcaption>
</figure>
</div>
</section>
<section id="test-helpers" class="level3">
<h3 class="anchored" data-anchor-id="test-helpers">Test helpers</h3>
<p>Test helpers can be stored in <code>tests/testthat/helper.R</code>. Test helpers are functions or code that 1) is too long to repeat with each test, and 2) doesn’t take too much time or memory to run. Read more about test helpers <a href="https://r-pkgs.org/testing-advanced.html#sec-testing-advanced-fixture-helper">here.</a>.</p>
<p>For this application, I’ve created a <a href="https://github.com/mjfrigaard/utap/blob/main/tests/testthat/helper.R">set of test helpers</a> to make different forms of test data (because we’ll be repeatedly defining columns with <em>slightly</em> different attributes).</p>
<p>For example, <code>col_maker()</code> can be used to create a <code>tibble</code> with columns based on the <code>col_type</code>, <code>size</code>, and <code>missing</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>, </span>
<span id="cb29-2">                       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ord"</span>),</span>
<span id="cb29-3">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb29-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb29-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 × 6</span></span>
<span id="cb29-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   log_var int_var dbl_var chr_var fct_var ord_var</span></span>
<span id="cb29-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;lgl&gt;     &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;fct&gt;   &lt;ord&gt;  </span></span>
<span id="cb29-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 TRUE          1     0.1 item:1  group 1 level 1</span></span>
<span id="cb29-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 FALSE        20    NA   &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   </span></span>
<span id="cb29-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 NA           NA     0.1 item:1  group 1 level 1</span></span></code></pre></div>
</div>
<p>I can also create tibbles with custom columns using individual helper <code>_maker()</code> functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb30-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb30-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chr_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lvls =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ord_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ord_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lvls =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-5">)</span>
<span id="cb30-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 × 3</span></span>
<span id="cb30-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   log_var chr_var ord_var</span></span>
<span id="cb30-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;lgl&gt;   &lt;chr&gt;   &lt;ord&gt;  </span></span>
<span id="cb30-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 TRUE    item:1  level 1</span></span>
<span id="cb30-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 FALSE   item:2  level 2</span></span>
<span id="cb30-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 TRUE    item:3  level 1</span></span></code></pre></div>
</div>
<p>These helpers make it easier to iterate through the test expectations <em>and</em> function development, because <code>tibble</code>s like the one above can be developed <em>inside</em> each test.</p>
<p>Below is an example for testing if <code>pull_binary_cols()</code> will correctly identify the <code>logical</code> columns (for both return objects):</p>
<div class="cell">
<details open="" class="code-fold">
<summary>using test helpers</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pull_binary_cols() works"</span>, {</span>
<span id="cb31-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical tibble (with missing)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb31-3">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb31-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb31-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>))</span>
<span id="cb31-6">    })</span>
<span id="cb31-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical tibble"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb31-8">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span>
<span id="cb31-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb31-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>))</span>
<span id="cb31-11">    })</span>
<span id="cb31-12">})</span></code></pre></div>
</details>
</div>
<p>Sometimes it will still make sense to create the test data inside the test scope (i.e.&nbsp;inside the <code>it()</code> or <code>test_that()</code> call). For example, I was <code>pull_binary_cols()</code> to identify integer columns with binary values (<code>0</code>, <code>1</code>). I should make these test data explicit:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>using test helpers</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test integer with binary values (0, 1, NA)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb32-2">  test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L))</span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>))</span>
<span id="cb32-5">})</span>
<span id="cb32-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test integer with binary values and missing (0, 1, NA)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb32-7">  test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_integer_</span>))</span>
<span id="cb32-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb32-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>))</span>
<span id="cb32-10">})</span></code></pre></div>
</details>
</div>
<p>When I’m confident with the <code>pull_binary_cols()</code> function and it’s tests, I’ll run <code>devtools:::test_active_file()</code>.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 9 ]</span></code></pre></div>
</section>
<section id="test-coverage" class="level3">
<h3 class="anchored" data-anchor-id="test-coverage">Test coverage</h3>
<p><em>How many tests should I write?</em></p>
<p>In <code>testthat</code> code coverage measures the extent to which the tests in the <code>tests/testthat/</code> folder cover the possible execution paths of the functions in the <code>R/</code> folder.</p>
<p>Code test coverage is a way to confirm that the unit tests are robust enough to verify that your code behaves as expected. In R packages, code coverage is discussed in the <a href="https://r-pkgs.org/testing-design.html#sec-testing-design-coverage">testing chapter</a> using the <a href="https://covr.r-lib.org/"><code>covr</code> package</a>.</p>
<p>During development, check the code coverage of a test file with <code>devtools::test_coverage_active_file()</code>. Sometimes this function can be temperamental, so I use the combination of <code>covr</code> functions below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">covr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_coverage</span>(</span>
<span id="cb34-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_files =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R/&lt;function_file.R&gt;"</span>, </span>
<span id="cb34-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test_files =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-&lt;function_file.R&gt;"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-4">  covr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report</span>()</span></code></pre></div>
</div>
<p>Below is the test coverage for <code>make_binary_vec()</code>–a smaller helper function for <code>pull_binary_cols()</code>–in the <strong>Viewer</strong> when <code>devtools::test_coverage_active_file()</code> is entered in the <strong>Console</strong>:</p>
<div id="fig-make_binary_vec_coverage" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-make_binary_vec_coverage" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="make_binary_vec_coverage.png" class="lightbox" data-gallery="fig-make_binary_vec_coverage" title="Figure&nbsp;3&nbsp;(a): Test coverage"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/make_binary_vec_coverage.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-make_binary_vec_coverage"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Test coverage
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Unit test coverage interactively
</figcaption>
</figure>
</div>
<p>We can see from the output we don’t have 100% test coverage for <code>make_binary_vec()</code>. When we click on the file path in the table we can se what execution paths aren’t being tested:</p>
<div id="fig-make_binary_vec_coverage_source" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-make_binary_vec_coverage_source" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="make_binary_vec_coverage_source.png" class="lightbox" data-gallery="fig-make_binary_vec_coverage_source" title="Figure&nbsp;4&nbsp;(a): Behavior not tested in make_binary_vec()"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/make_binary_vec_coverage_source.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-make_binary_vec_coverage_source"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Behavior not tested in <code>make_binary_vec()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: The area in red is the untested portion of <code>make_binary_vec()</code>
</figcaption>
</figure>
</div>
<p>It’s probably not worth chasing down the remaining 17% on this function because I’ve outlined it’s primary requirements in the BDD functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"make_binary_vec() works"</span>, {</span>
<span id="cb35-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>, {</span>
<span id="cb35-3">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-4">    })</span>
<span id="cb35-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>, {</span>
<span id="cb35-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-7">    })</span>
<span id="cb35-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>, {</span>
<span id="cb35-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-10">    })</span>
<span id="cb35-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>, {</span>
<span id="cb35-12">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-13">    })</span>
<span id="cb35-14">})</span></code></pre></div>
</div>
<p>Striving for a high percentage of coverage is a good practice, it doesn’t guarantee that the function always behaves as expected. Unit tests might execute a line of code, but still not catch a bug due to the design of the test (it’s easy to have high coverage if the unit tests are shallow and don’t check for any potential <a href="https://en.wikipedia.org/wiki/Edge_case">edge cases</a>).</p>
<p>After developing the functions in <code>utap</code>, the files in the <code>R/</code> folder are organized into names <a href="https://r-pkgs.org/code.html#sec-code-organising">based on the</a> ‘<em>main function and its supporting helpers</em>’:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">R/</span>
<span id="cb36-2">├── check_binary_vec.R</span>
<span id="cb36-3">├── check_facet_vec.R</span>
<span id="cb36-4">├── make_binary_vec.R</span>
<span id="cb36-5">├── make_facet_vec.R</span>
<span id="cb36-6">├── nin.R</span>
<span id="cb36-7">├── pull_binary_cols.R</span>
<span id="cb36-8">├── pull_cat_cols.R</span>
<span id="cb36-9">├── pull_cols.R</span>
<span id="cb36-10">├── pull_facet_cols.R</span>
<span id="cb36-11">├── pull_numeric_cols.R</span>
<span id="cb36-12">├── select_class.R</span>
<span id="cb36-13">└── utap-package.R</span></code></pre></div>
<p>The <code>tests/testthat/</code> folder file names have identical names as the files in the <code>R/</code> folder.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb37-1">tests</span>
<span id="cb37-2">├── testthat</span>
<span id="cb37-3">│   ├── _snaps</span>
<span id="cb37-4">│   ├── fixtures</span>
<span id="cb37-5">│   │   ├── make_test_data.R</span>
<span id="cb37-6">│   │   └── test_data.rds</span>
<span id="cb37-7">│   ├── helper.R</span>
<span id="cb37-8">│   ├── test-check_binary_vec.R</span>
<span id="cb37-9">│   ├── test-check_facet_vec.R</span>
<span id="cb37-10">│   ├── test-make_binary_vec.R</span>
<span id="cb37-11">│   ├── test-nin.R</span>
<span id="cb37-12">│   ├── test-pull_binary_cols.R</span>
<span id="cb37-13">│   ├── test-pull_cat_cols.R</span>
<span id="cb37-14">│   ├── test-pull_cols.R</span>
<span id="cb37-15">│   ├── test-pull_facet_cols.R</span>
<span id="cb37-16">│   ├── test-pull_numeric_cols.R</span>
<span id="cb37-17">│   └── test-select_class.R</span>
<span id="cb37-18">└── testthat.R</span>
<span id="cb37-19"></span>
<span id="cb37-20">4 directories, 14 files</span></code></pre></div>
<p>It’s common for R packages to have a general <code>R/utils.R</code> file that defines the ‘utility’ functions, but these files <em>can</em> become a catch-all for any functions that don’t have a clear home (read more <a href="https://rud.is/b/2018/04/08/dissecting-r-package-utility-belts/">here</a>).</p>
<p>For example, I could stored the <code>%nin%</code> operator in <code>R/utils.R</code> (but it removes the ability to run <code>test_coverage_active_file()</code>:</p>
<p>When I’ve completed a set of test files, I can use <code>devtools::test()</code> to check if they’re passing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb39-1">==&gt; devtools::test()</span>
<span id="cb39-2"></span>
<span id="cb39-3">ℹ Testing utap</span>
<span id="cb39-4">✔ | F W  S  OK | Context</span>
<span id="cb39-5">✔ |         23 | check_binary_vec</span>
<span id="cb39-6">✔ |          3 | check_facet_vec</span>
<span id="cb39-7">✔ |          4 | make_binary_vec</span>
<span id="cb39-8">✔ |          3 | nin          </span>
<span id="cb39-9">✔ |          9 | pull_binary_cols</span>
<span id="cb39-10">✔ |          4 | pull_cat_cols</span>
<span id="cb39-11">✔ |          4 | pull_cols    </span>
<span id="cb39-12">✔ |         15 | pull_facet_cols</span>
<span id="cb39-13">✔ |          2 | pull_numeric_cols</span>
<span id="cb39-14">✔ |         14 | select_class </span>
<span id="cb39-15"></span>
<span id="cb39-16">══ Results ═══════════════════</span>
<span id="cb39-17">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 81 ]</span>
<span id="cb39-18"></span>
<span id="cb39-19">🎯 Your tests hit the mark 🎯</span></code></pre></div>
<p>The output above shows all tests are passing (and some helpful words of encouragement!). To check the code coverage for the utap package, I can run <code>devtools::test_coverage()</code> to view the output in the <strong>Viewer</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_coverage</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">ℹ Computing test coverage for utap</span></code></pre></div>
<div id="fig-utap_coverage" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-utap_coverage" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="utap_coverage.png" class="lightbox" data-gallery="fig-utap_coverage" title="Figure&nbsp;5&nbsp;(a): test_coverage() for entire package"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/utap_coverage.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-utap_coverage"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>test_coverage()</code> for entire package
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: <code>devtools::test_coverage()</code>
</figcaption>
</figure>
</div>
<p>Clicking on any of the <strong>Files</strong> will open the <strong>Source</strong> tab and give a summary like the one above from <code>test_coverage_active_file()</code>. I can also use <code>covr::package_coverage()</code> in the <strong>Console</strong> for simpler output:</p>
<div id="fig-covr_package_coverage" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-covr_package_coverage" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="covr_package_coverage.png" class="lightbox" data-gallery="fig-covr_package_coverage" title="Figure&nbsp;6&nbsp;(a): package_coverage() for entire package"><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/covr_package_coverage.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:75.0%" data-ref-parent="fig-covr_package_coverage"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>package_coverage()</code> for entire package
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: <code>covr::package_coverage()</code>
</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">TIPS: Unit tests</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>The advice on unit tests below (in <strong>bold</strong>) comes from <a href="https://www.manning.com/books/effective-software-testing">Effective Software Testing, 2022</a>. I’ve included descriptions of how <code>testthat</code> satisfies each recommendation:</p>
<ol type="1">
<li><p><strong>Unit tests should be fast</strong>: the text recommends unit tests take a ‘<em>couple of milliseconds</em>’ to execute. <code>testthat</code> tests typically fall within this threshold (and provide time measurements to identify bottlenecks).</p></li>
<li><p><strong>Unit tests are easy to control</strong>: i.e., ‘<em>input values and the expected result value are easy to adapt or modify in the test</em>.’ <code>testthat</code> expectations give us ample access to 1) the <code>expected</code> result and 2) the <code>observed</code> result.</p></li>
<li><p><strong>Unit tests are easy to write</strong>: i.e., ‘<em>do not require a complicated setup or additional work</em>’. When used combination with <code>usethis</code>, <code>testthat</code> unit tests can be set up, created, written, and run with a few lines of code.</p></li>
</ol>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="other-code-metrics" class="level2">
<h2 class="anchored" data-anchor-id="other-code-metrics">Other code metrics</h2>
<p>Sometimes it’s interesting to view the relationship between function size and number of tests using the <a href="https://github.com/hrbrmstr/cloc"><code>cloc</code> package.</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cloc)</span></code></pre></div>
</div>
<p><code>cloc</code> stands for <em>Count Lines of Code</em>, and it’s a rough metric used to gauge code complexity. It’s simple, but apparently provides “<em>just as much predictive power as more elaborate constructs like cyclomatic complexity.</em>”<a href="https://www.oreilly.com/library/view/software-design-x-rays/9781680505795/">source</a></p>
<p>Below is a count of the lines of code in each file in the <code>R</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">cloc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cloc_by_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb44-1"># A tibble: 13 × 6</span>
<span id="cb44-2">   source filename                language   loc blank_lines comment_lines</span>
<span id="cb44-3">   &lt;chr&gt;  &lt;chr&gt;                   &lt;chr&gt;    &lt;int&gt;       &lt;int&gt;         &lt;int&gt;</span>
<span id="cb44-4"> 1 R      "R/select_class.R"      R           27           5            31</span>
<span id="cb44-5"> 2 R      "R/check_binary_vec.R"  R           24           0            14</span>
<span id="cb44-6"> 3 R      "R/make_facet_vec.R"    R           19           0            19</span>
<span id="cb44-7"> 4 R      "R/pull_numeric_cols.R" R           19           1            23</span>
<span id="cb44-8"> 5 R      "R/pull_binary_cols.R"  R           14           0            19</span>
<span id="cb44-9"> 6 R      "R/pull_facet_cols.R"   R           14           0            37</span>
<span id="cb44-10"> 7 R      "R/check_facet_vec.R"   R           13           0            14</span>
<span id="cb44-11"> 8 R      "R/pull_cat_cols.R"     R           13           0            18</span>
<span id="cb44-12"> 9 R      "R/make_binary_vec.R"   R           10           0            19</span>
<span id="cb44-13">10 R      "R/pull_cols.R"         R            8           0            15</span>
<span id="cb44-14">11 R      "R/nin.R"               R            3           0             9</span>
<span id="cb44-15">12 R      "R/utap-package.R"      R            2           0             6</span>
<span id="cb44-16">13 R      ""                      SUM        166           6           224</span></code></pre></div>
<p>This output also confirms the relationship between lines of code and tests.</p>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has been an introduction to unit testing utility functions in a Shiny app-package. When I’m confident the utility functions are working, I’ll start adding them into modules (and testing with <code>testServer()</code> or <code>shinytest2</code>). Files names can change a lot throughout the course of developing a Shiny app-package, so it’s helpful to adopt (or create) a naming convention.<sup>9</sup></p>
<p>Which particular file naming convention you choose isn’t as important as adopting a convention and implementing it.</p>
<!--



```{.default}
test-column_classes.R:
            │
            └── select_column_class()
                  │
                  └── get_column_class() 
```


```{.default}
tree/
  │
  └── get_column_class()
        │     │
        │     └── select_column_class()
        │
        ├── pull_binary_cols()
        │
        ├── pull_facet_cols()
        │
        ├── pull_cat_cols()
        │
        └── pull_numeric_cols()
```


```{.default}
tree/
  │
  └── get_column_class() # used in all pull_[type]_cols()
        │     │
        │     └── select_column_class()
        │
        ├── pull_binary_cols()
        │        │
        │        ├── check_binary_vec()
        │        │      │
        │        │      ├── check_log_binary()
        │        │      ├── check_int_binary()
        │        │      └── check_fct_binary()
        │        │
        │        └── make_binary_vec()
        │
        ├── pull_facet_cols() # custom definition
        │        │
        │        ├── check_facet_vec()
        │        │      │
        │        │      ├── check_chr_facet()
        │        │      └── check_fct_facet()
        │        │
        │        └── make_facet_vec()
        │
        ├── pull_cat_cols() # is.character & is.factor
        │
        └── pull_numeric_cols() # is.integer & is.double
```


-->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Learn more about R packages in <a href="https://r-pkgs.org/testing-basics.html">R Packages, 2ed</a>↩︎</p></li>
<li id="fn2"><p>R Packages, 2ed also <a href="https://r-pkgs.org/testing-basics.html#run-tests">suggests</a> binding <code>test_active_file()</code> and <code>test_coverage_active_file()</code> to keyboard shortcuts.↩︎</p></li>
<li id="fn3"><p>Read more about behavior-driven development in <a href="https://www.manning.com/books/bdd-in-action-second-edition">BDD in Action, 2ed</a>↩︎</p></li>
<li id="fn4"><p><code>describe()</code> and <code>it()</code> are discussed in the <a href="https://testthat.r-lib.org/reference/describe.html"><code>testthat</code> documentation.</a>↩︎</p></li>
<li id="fn5"><p>The variable names would automatically populate the <code>choices</code> argument for a <code>selectInput()</code>↩︎</p></li>
<li id="fn6"><p><code>testthat</code>’s <code>it()</code> function is essentially identical to <a href="https://testthat.r-lib.org/reference/describe.html#details"><code>test_that()</code></a>.↩︎</p></li>
<li id="fn7"><p>Both functions are placed in <code>R/select_class.R</code>, and both unit tests are also in the <code>tests/testthat/test-select_class.R</code> file.↩︎</p></li>
<li id="fn8"><p>The <code>fixtures</code> name is not required, but it always make sense to keep folder names explicit.↩︎</p></li>
<li id="fn9"><p>If you’re using the <code>golem</code> framework to develop your shiny app-package, the <code>utils_</code> and <code>fct_</code> prefixes are used to define two different types of <a href="https://engineering-shiny.org/structuring-project.html#conventions-matter">utility/helper functions</a>. <code>utils_</code> files contain ‘<em>small helper functions</em> and’<em>top-level functions defining your user interface and your server function</em>’. <code>fct_</code> files contain ‘<em>the business logic, which are potentially large functions</em>…<em>the backbone of the application and may not be specific to a given module</em>’.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Shiny</category>
  <category>Testing</category>
  <guid>https://mjfrigaard.github.io/posts/p1-tests-unit-tests/</guid>
  <pubDate>Tue, 01 Aug 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/image.png" medium="image" type="image/png" height="192" width="144"/>
</item>
<item>
  <title>Writing modular code with box</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/box/</link>
  <description><![CDATA[ 





<!--
https://mjfrigaard.github.io/posts/vanilla-shiny/

https://mjfrigaard.github.io/posts/my-pkg-app/

https://mjfrigaard.github.io/posts/my-golem-app/

https://mjfrigaard.github.io/posts/my-leprechaun-app/

https://mjfrigaard.github.io/posts/my-rhino-app/
-->
<section id="what-is-box" class="level2">
<h2 class="anchored" data-anchor-id="what-is-box">What is <code>box</code>?</h2>
<p><a href="https://klmr.me/box/index.html"><code>box</code></a> provides a precise and concise method for using add-on packages and functions. <code>box</code> also doesn’t require bundling your code into R packages to make it reusable. This post covers tackling some common workflow steps to demonstrate how <code>box</code> modules work.</p>
</section>
<section id="packages-functions-and-namespaces" class="level2">
<h2 class="anchored" data-anchor-id="packages-functions-and-namespaces">Packages, functions, and namespaces</h2>
<p>To understand the problem <code>box</code> solves, we’ll review the typical process for using add-on package functions in a standard R sesson and when developing R packages:</p>
<section id="r-sessions" class="level3">
<h3 class="anchored" data-anchor-id="r-sessions">R sessions</h3>
<ol type="1">
<li><p>Assume I want to use the <code>glue()</code> function from the <code>glue</code> package. The first step is to install it with <code>install.packages("glue")</code></p>
<ul>
<li><p>I’ll use the example from the <a href="https://glue.tidyverse.org/"><code>glue</code> package website</a>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glue"</span>)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The downloaded binary packages are in</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   /var/folders/0x/x5wkbhmx0k74tncn9swz7xpr0000gn/T//Rtmp2id54K/downloaded_packages</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul></li>
<li><p>To use the functions from <code>glue</code>, I’ll need to run <code>library(glue)</code> in the same R session.</p>
<ul>
<li><p>If I try to use a function from a package but it hasn’t been attached with <code>library</code> or <code>require</code>, I see the following:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error in glue("My name is {name}."): could not find function "glue"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>The error above can be confusing, because it doesn’t tell us if the package hasn’t been <em>installed</em>, or if the package hasn’t been <em>attached</em>.</p></li>
<li><p>However, after installing <code>glue</code>, I can get around using <code>library</code> by explicitly calling the function from the package namespace (i.e., <code>pkg::foo()</code>):</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span></span>
<span id="cb3-2">glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># My name is Fred.</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>While this method works, it doesn’t attach the package to the search list (which I check with <code>search()</code>)</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] ".GlobalEnv"        "package:stats"     "package:graphics" </span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [4] "package:grDevices" "package:utils"     "package:datasets" </span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [7] "package:methods"   "Autoloads"         "package:base"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><code>library()</code> attaches the <code>glue</code> package in the search list and makes the glue() function available to use (without the <code>package::</code> prefix)</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb5-2">base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  [1] ".GlobalEnv"        "package:glue"      "package:stats"    </span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  [4] "package:graphics"  "package:grDevices" "package:utils"    </span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  [7] "package:datasets"  "package:methods"   "Autoloads"        </span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [10] "package:base"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>Unfortunately, <code>library()</code> also attaches <strong>all</strong> the objects from the <code>glue</code> package to the <code>search()</code> list, even though I’m only using a single function.</p></li>
</ul></li>
</ol>
<p>Read more about namespaces in <a href="https://adv-r.hadley.nz/environments.html#namespaces">Advanced R</a> and <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace-motivation">R packages</a>.</p>
</section>
<section id="r-packages" class="level3">
<h3 class="anchored" data-anchor-id="r-packages">R packages</h3>
<p>If I want to make the code I write using <code>glue</code> reusable, I can bundle it into an R package. Including <code>glue</code> as an add-on package (i.e., packages not loaded automatically with R) is done with the <code>NAMESPACE</code> file (created and edited via <code>roxygen2</code> tags), and by listing these packages under <code>Imports</code> in the <code>DESCRIPTION</code> file.</p>
<section id="in-r-files" class="level4">
<h4 class="anchored" data-anchor-id="in-r-files">In <code>R/</code> files:</h4>
<p>All <code>.R</code> files in R packages are placed in the <code>R/</code> folder. If these files use add-on packages (i.e., <code>library()</code> or <code>package::fun()</code>), I include the <code>@import</code> or <code>@importFrom</code> tag. If I’d like to include and make <code>my_name()</code> available to users, I use the <code>@export</code> tag:</p>
<ul>
<li><p>I’ve converted the use of <code>glue()</code> into a small function below:</p>
<ul>
<li><p><code>my_name()</code> is saved as <code>R/my_name.R</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-2">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb6-3">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb6-4">}</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_name</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span>)</span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># My name is Fred.</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>Below is a default <code>roxygen2</code> skeleton:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Introduce yourself </span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x a name </span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return An glued introduction to R</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export my_name</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_name("Fred")</span></span>
<span id="cb7-10">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb7-11">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb7-12">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb7-13">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul></li>
</ul>
<p>As we can see, the default <code>roxygen2</code> skeleton doesn’t include <code>@import</code> or <code>@importFrom</code>. The general advice is to prefer <code>@importFrom</code> over <code>@import</code>, because <strong><code>@import</code> imports the entire package namespace</strong> (only use this in ‘<em>very special situations</em>’ such as ‘<em>heavy use</em>’ of a package functions).</p>
<ul>
<li><p>Below is an example of using <code>@importFrom</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Introduce yourself </span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x a name </span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return An glued introduction to R</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export my_name</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_name("Fred")</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom glue glue</span></span>
<span id="cb8-12">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb8-13">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb8-14">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb8-15">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
<section id="namespace" class="level4">
<h4 class="anchored" data-anchor-id="namespace">NAMESPACE</h4>
<p>While developing my R package, I’ll run <code>devtools::load_all()</code> and <code>devtools::document()</code> frequently, and each time the imported functions are available in the current session and the tags are converted into <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-NAMESPACE-file"><strong>directives</strong></a> in the <code>NAMESPACE</code> file</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb9-1">import(package)</span>
<span id="cb9-2">importFrom(package,function) </span></code></pre></div>
</section>
<section id="description" class="level4">
<h4 class="anchored" data-anchor-id="description">DESCRIPTION</h4>
<p>A package <code>DESCRIPTION</code> file is managed completely independent of it’s <code>NAMESPACE</code> file. This can be confusing during package development, because it’s easy to assume some kind of connection between the <code>roxygen2</code> tags, the <code>NAMESPACE</code> file, and the <code>DESCRIPTION</code> file:</p>
<ul>
<li><p>However, this is not the case:</p>
<ul>
<li><p>To include <code>glue</code> in the <code>DESCRIPTION</code> under <code>Imports</code>, I also need to use <code>usethis::use_package("glue")</code></p></li>
<li><p>As noted in <a href="https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports">R packages</a>, “<em>The <code>Imports</code> field</em> [in the <code>DESCRIPTION</code> file] <em>makes sure that the packages listed there are installed when your package is installed.</em>” The <code>DESCRIPTION</code> file does not make functions available to the package developer (or the user).</p></li>
</ul></li>
</ul>
<p>The recommended practices for add-on packages are 1) use the namespace-qualified calls in the <code>R/</code> scripts (i.e., <code>package::function()</code> with an accompanying <code>@importFrom package function</code> tag), and 2) list these packages in the <code>DESCRIPTION</code> file under <code>Imports</code> or <code>Suggests</code> to make sure a package is installed whenever your package is installed (i.e., with <code>usethis::use_package("package")</code>)</p>
<p>The table below shows the connection between <code>roxygen2</code> tags, the resulting <code>NAMESPACE</code> entry, and what should be listed in the <code>DESCRIPTION</code> (this is also covered in <a href="https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports-r-code">R packages</a>)</p>
<p><br></p>
<div style="font-size: 0.70em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Refresher on <code>roxygen2</code>, <code>NAMESPACE</code> &amp; <code>DESCRPTION</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 0.90em; color: #696969;">
<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
roxygen2 tag
</th>
<th style="text-align:left;">
NAMESPACE directive
</th>
<th style="text-align:right;">
DESCRIPTION
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="importFrom">@importFrom</span>
</td>
<td style="text-align:left;">
importFrom() : import selected object from another namespace
</td>
<td style="text-align:right;">
Consider listing under ‘Suggests’
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="import">@import</span>
</td>
<td style="text-align:left;">
import(): import all objects from another package’s namespace
</td>
<td style="text-align:right;">
List under ‘Imports’
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="export">@export</span>
</td>
<td style="text-align:left;">
export() : export the function, method, generic, or class so it’s available outside of the package (in the namespace)
</td>
<td style="text-align:right;">
Nothing to list
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
</section>
</section>
<section id="how-box-is-different" class="level2">
<h2 class="anchored" data-anchor-id="how-box-is-different">How <code>box</code> is different</h2>
<p><code>box</code> doesn’t require installing or attaching add-on packages. Instead, it uses modules to make package functions available. I’ll demonstrate with a simplified example using the <a href="https://glue.tidyverse.org/"><code>glue()</code> package</a>. Assume I have a project folder <code>pkg/</code>,</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb10-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> pkg.Rproj</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> directory, 1 file</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li><p>Projects in RStudio have a hidden folder, <code>.Rproj.user/</code>:</p>
<ul>
<li><p>The the following contents are automatically created with a new <code>.Rproj</code> file:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details class="code-fold">
<summary>contents of .Rproj</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb11-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> .Rproj.user</span>
<span id="cb11-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      ├── 8CC5F70E</span>
<span id="cb11-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── bibliography-index</span>
<span id="cb11-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── ctx</span>
<span id="cb11-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── explorer-cache</span>
<span id="cb11-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── presentation</span>
<span id="cb11-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── profiles-cache</span>
<span id="cb11-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── sources</span>
<span id="cb11-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      │      └── session-16ca0811</span>
<span id="cb11-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      │          └── lock_file</span>
<span id="cb11-12">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      ├── tutorial</span>
<span id="cb11-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      │      └── viewer-cache</span>
<span id="cb11-14">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>      └── shared</span>
<span id="cb11-15">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>          └── notebooks</span>
<span id="cb11-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>              └── patch-chunk-names</span>
<span id="cb11-17">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> pkg.Rproj</span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">14</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div></li>
<li><p>None of these contents deal with installing or loading packages, but I’ve included it here for full transparency</p></li>
</ul></li>
</ul>
<section id="create-a-box-module" class="level3">
<h3 class="anchored" data-anchor-id="create-a-box-module">Create a box module</h3>
<p>I’ll put the modules in a <code>box/fun.R</code> file, which I’ll create from the command-line:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> box </span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> box/fun.R</span></code></pre></div>
</details>
</div>
</div>
<p>Now my <code>pkg</code> folder looks like this:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb13-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> box</span>
<span id="cb13-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>    └── fun.R</span>
<span id="cb13-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> pkg.Rproj</span>
<span id="cb13-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> use.R</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>pkg/box/fun.R</code> I’ll add the following:</p>
<ol type="1">
<li><p>a brief comment with the path to the module</p></li>
<li><p>the <code>@export</code> tag from <code>roxygen2</code></p></li>
<li><p>a call to <code>box::use(glue[glue])</code></p></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/fun.R</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb14-3">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb14-4">  glue[glue]</span>
<span id="cb14-5">  )</span></code></pre></div>
</details>
</div>
</div>
<p>In the parent folder, create another file named <code>use.R</code>.</p>
<p>In <code>use.R</code>, use the <code>fun</code> module by calling <code>box::use(box/fun)</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fun)</span></code></pre></div>
</details>
</div>
</div>
<p>View <code>fun</code> by printing it to the console:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print</span></span>
<span id="cb16-2">fun</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>module: <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/fun</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>This confirms the module has been created.</p>
</section>
<section id="using-modules" class="level3">
<h3 class="anchored" data-anchor-id="using-modules">Using modules</h3>
<p>The <code>glue</code> function is available from <code>fun</code> using the <code>$</code> (like a column in a <code>data.frame</code> or <code>tibble</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use </span></span>
<span id="cb18-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span></span>
<span id="cb18-3">fun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is a box {x}.'</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> is a box module.</span></code></pre></div>
</details>
</div>
</div>
<p><code>box</code> modules are combinations of named folders and files, but unlike R packages, these folders and files can be <em>nested</em>. The <code>folder/file</code> structure is used for separating modules, the same way we might separate files in a project (i.e., <code>project/data/file.csv</code> and <code>project/code/analysis.R</code>)</p>
<ul>
<li><p><code>box</code> makes the function and package namespacing <strong>explicit</strong> by using <code>box::use(package[fun])</code></p></li>
<li><p><code>box</code> also simplifies using module by calling the same function when building/using modules <code>box::use(folder/file)</code>:</p></li>
</ul>
<div style="font-size: 1.0em;">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CREATE MODULE</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/fun.R</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb20-4">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb20-5">  glue[glue]</span>
<span id="cb20-6">  )</span></code></pre></div>
</div>
<div style="font-size: 1.0em;">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># USE MODULE</span></span>
<span id="cb21-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fun)</span></code></pre></div>
</div>
<p>Below is a slightly more involved example:</p>
</section>
</section>
<section id="module-workflow" class="level2">
<h2 class="anchored" data-anchor-id="module-workflow">Module workflow</h2>
<p>Below I’m going to create a module that imports, wrangles, and visualizes data from the <a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins package.</a> (<strong>which is installed, but not loaded</strong>).</p>
<section id="boximport" class="level3">
<h3 class="anchored" data-anchor-id="boximport"><code>box/import</code></h3>
<p>This workflow starts with an <code>import</code> module in a <code>pengbox</code> project. The code below is stored in <code>pengbox/box/import.R</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>import module</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/import.R</span></span>
<span id="cb22-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb22-3">  readr[read_csv],</span>
<span id="cb22-4">)</span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb22-6">get_raw_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb22-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb22-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(raw_csv_url)</span>
<span id="cb22-9">}</span></code></pre></div>
</details>
</div>
</div>
<p>In a the master <code>pengbox/run.R</code> file, I’ll use <code>import</code> like so:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb23-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_raw_csv</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.75em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 × 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb24-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb24-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb24-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb24-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb24-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb24-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb24-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb24-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb24-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb24-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb24-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb24-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb24-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb24-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb24-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb24-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb24-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll re-write this module in <code>box/import.R</code> using an alias for <code>readr</code>s <code>read_csv()</code> function (<code>rcsv</code>) and include the <code>readr::cols()</code> function to remove the lengthy message.</p>
<p>This code is stored in the <code>box/import.R</code> file:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>import module with alias</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/import.R</span></span>
<span id="cb25-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb25-3">  readr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rcsv =</span> read_csv, cols]</span>
<span id="cb25-4">)</span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb25-6">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb25-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb25-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use alias for read_csv()</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rcsv</span>(raw_csv_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols</span>())</span>
<span id="cb25-10">}</span></code></pre></div>
</details>
</div>
</div>
<p>Using import with the new module is more concise:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb26-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb26-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raw</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.75em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 × 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb27-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb27-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb27-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb27-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb27-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb27-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb27-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb27-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb27-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb27-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb27-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb27-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb27-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb27-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb27-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb27-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb27-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="boxprep" class="level3">
<h3 class="anchored" data-anchor-id="boxprep"><code>box/prep</code></h3>
<p>After importing the raw penguins data, I’ll write a module for wrangling the data (that also imports the <code>import</code> module).</p>
<p>This module takes the following steps:</p>
<ul>
<li>Reset the <code>box.path</code><br>
</li>
<li>Import the <code>box/import</code> module<br>
</li>
<li>Load all the functions from <code>dplyr</code> using <code>[...]</code><br>
</li>
<li>Load aliases for <code>stringr::str_extract()</code> and <code>janitor::clean_names()</code><br>
</li>
<li>Compose <code>prep()</code> with the wrangling steps</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>prep module with import</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/prep.R</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb28-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import alias import module</span></span>
<span id="cb28-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle packages, functions, and aliases</span></span>
<span id="cb28-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb28-11">  dplyr[...],</span>
<span id="cb28-12">  stringr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str_ext =</span> str_extract],</span>
<span id="cb28-13">  janitor[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fix_cols =</span> clean_names]</span>
<span id="cb28-14">)</span>
<span id="cb28-15"></span>
<span id="cb28-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb28-17">prep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb28-18">  raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raw</span>()</span>
<span id="cb28-19">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fix_cols</span>(raw)</span>
<span id="cb28-20">  vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(clean_cols, </span>
<span id="cb28-21">    species, </span>
<span id="cb28-22">    island, </span>
<span id="cb28-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> culmen_length_mm,</span>
<span id="cb28-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mm =</span> culmen_depth_mm,</span>
<span id="cb28-25">    flipper_length_mm,</span>
<span id="cb28-26">    body_mass_g,</span>
<span id="cb28-27">    sex)</span>
<span id="cb28-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(vars, </span>
<span id="cb28-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_ext</span>(species, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([[:alpha:]]+)"</span>),</span>
<span id="cb28-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex))</span>
<span id="cb28-31">}</span></code></pre></div>
</details>
</div>
</div>
<p>We can now the <code>prep</code> module to access the import module for the wrangled dataset.</p>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prepare</span></span>
<span id="cb29-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>prep)</span>
<span id="cb29-3">peng_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> prep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>()</span>
<span id="cb29-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(peng_clean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tibble</span> [344 × 7] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb30-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> species          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb30-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> island           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> ...</span>
<span id="cb30-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_length_mm   : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...</span>
<span id="cb30-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_depth_mm    : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...</span>
<span id="cb30-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> flipper_length_mm: num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 190 ...</span>
<span id="cb30-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> body_mass_g      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb30-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sex              : Factor w/ 2 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span>: 2 1 1 NA 1 2 1 2 NA NA ...</span></code></pre></div>
</div>
</div>
<p>These data look like they’re ready for graphing! Time to write another module…</p>
</section>
<section id="boxplot" class="level3">
<h3 class="anchored" data-anchor-id="boxplot"><code>box/plot</code></h3>
<p>I will build my visualization with <code>ggplot2</code> (in the <code>box/plot.R</code> module) and <code>dplyr::filter()</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>plot module with prep</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pengbox/plot.R</span></span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb31-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import prep module</span></span>
<span id="cb31-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>prep)</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import ggplot2</span></span>
<span id="cb31-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb31-11">  dplyr[filter],</span>
<span id="cb31-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ggplot2 =</span> ggplot2[ggplot, aes, geom_point, </span>
<span id="cb31-13">                    facet_wrap, labs, theme_minimal])</span>
<span id="cb31-14"></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb31-16">scatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb31-17">  prepped <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> prep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>()</span>
<span id="cb31-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove missing sex</span></span>
<span id="cb31-19">  filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prepped, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) </span>
<span id="cb31-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot filtered data</span></span>
<span id="cb31-21">  plotted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> filtered, </span>
<span id="cb31-22">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb31-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm,</span>
<span id="cb31-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g,</span>
<span id="cb31-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> sex</span>
<span id="cb31-26">    )</span>
<span id="cb31-27">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-28">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb31-29">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> island)</span>
<span id="cb31-30">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-31">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sex) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-32">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body Mass (g)"</span>, </span>
<span id="cb31-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper vs. Body Mass"</span>, </span>
<span id="cb31-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-35">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb31-36">  plotted</span>
<span id="cb31-37">}</span></code></pre></div>
</details>
</div>
</div>
<p>Check our scatter plot with <code>plot$scatter()</code></p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot</span></span>
<span id="cb32-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>plot)</span>
<span id="cb32-3">plot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>()</span></code></pre></div>
</details>
</div>
</div>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><a href="scatter.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://mjfrigaard.github.io/posts/box/scatter.png" class="img-fluid figure-img" style="width:100.0%"></a></p>
</figure>
</div>
</div>
</div>
<p>And there you have it! A complete pipeline using <code>box</code> modules! And the total project size (files and folders) is much smaller than building an R package:</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/</span></span>
<span id="cb33-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> box</span>
<span id="cb33-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── import.R</span>
<span id="cb33-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── plot.R</span>
<span id="cb33-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── prep.R</span>
<span id="cb33-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> penguins.Rproj</span>
<span id="cb33-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> run.R</span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 5 files</span></code></pre></div>
</details>
</div>
</div>
<p>Below are the various ways to include packages and functions in <code>box</code> modules:</p>
<div style="font-size: 0.70em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Options for creating <code>box</code> modules:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 0.90em; color: #696969;">
<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
Inside box::use()
</th>
<th style="text-align:left;">
Action
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
box::use( pkg )
</td>
<td style="text-align:left;">
|imports ‘pkg’, does not attach any function names
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( p = pkg )
</td>
<td style="text-align:left;">
|imports ‘pkg’ with alias (‘p’), does not attach any function names
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( pkg = pkg[foo, bar] )
</td>
<td style="text-align:left;">
|imports ‘pkg’ and attaches the function names ‘pkg::foo()’ and ‘pkg::bar()’
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( pkg[my_foo = foo, …]
</td>
<td style="text-align:left;">
|imports ‘pkg’ with alias for ‘foo’ (‘my_foo’) and attaches all exported function name
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="nesting-modules" class="level2">
<h2 class="anchored" data-anchor-id="nesting-modules">Nesting modules</h2>
<p>The same workflow could be re-written as nested modules, with folders separating logical steps in an analysis workflow (or application). Consider the folder structure below:</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/</span></span>
<span id="cb34-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> box</span>
<span id="cb34-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── graph</span>
<span id="cb34-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       ├── wrangle</span>
<span id="cb34-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   ├── clean</span>
<span id="cb34-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   │   ├── import</span>
<span id="cb34-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   │   │   └── raw.R</span>
<span id="cb34-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   │   └── cols.R</span>
<span id="cb34-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       │   └── vars.R</span>
<span id="cb34-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>       └── scatter.R</span>
<span id="cb34-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> penguins.Rproj</span>
<span id="cb34-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> run.R</span>
<span id="cb34-13"></span>
<span id="cb34-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> directories, 6 files</span></code></pre></div>
</details>
</div>
</div>
<section id="import" class="level3">
<h3 class="anchored" data-anchor-id="import"><code>import</code></h3>
<p>With this structure, the <code>raw</code> module is in the <code>import</code> folder:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/box/graph/wrangle/clean/import</span></span>
<span id="cb35-2">                                    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> raw.R</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> directory, 1 file</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li><p>The <code>raw</code> module–the first step–is nested in the <code>box/graph/wrangle/clean/import/raw.R</code> file</p>
<ul>
<li>The <code>raw</code> module imports the raw <code>.csv</code> data with an aliass for <code>readr</code>’s <code>read_csv()</code></li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>raw module</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/clean/import/raw.R</span></span>
<span id="cb36-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb36-3">  readr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rcsv =</span> read_csv, cols]</span>
<span id="cb36-4">)</span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb36-6">csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb36-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb36-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use alias for read_csv()</span></span>
<span id="cb36-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rcsv</span>(raw_csv_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols</span>())</span>
<span id="cb36-10">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<section id="raw" class="level4">
<h4 class="anchored" data-anchor-id="raw"><code>raw</code></h4>
<ul>
<li><p>In <code>run.R</code>, I run <code>box/graph/wrangle/clean/import/raw</code> to import the <code>raw</code> module</p>
<ul>
<li>The <code>csv()</code> function imports the raw data</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in use.R</span></span>
<span id="cb37-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw)</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details class="code-fold">
<summary>raw module output</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb38-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 × 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb38-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb38-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb38-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb38-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb38-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb38-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb38-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb38-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb38-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb38-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb38-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb38-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb38-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb38-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb38-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb38-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb38-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="clean" class="level3">
<h3 class="anchored" data-anchor-id="clean"><code>clean</code></h3>
<p>The <code>clean</code> folder contains the <code>cols</code> module and the <code>snakes()</code> function</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/graph/wrangle/</span></span>
<span id="cb39-2">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> clean</span>
<span id="cb39-3">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import</span></span>
<span id="cb39-4">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   │   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#└── raw.R</span></span>
<span id="cb39-5">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── cols.R</span>
<span id="cb39-6">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> vars.R</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<section id="snakes" class="level4">
<h4 class="anchored" data-anchor-id="snakes"><code>snakes</code></h4>
<ul>
<li><p>The <code>box/graph/wrangle/clean/cols</code> module standardizes the column names</p>
<ul>
<li><code>cols</code> calls the <code>snakes()</code> function, which converts all the column names to <code>lower_snake_case</code> with an alias for <code>janitor::clean_names()</code>, then it imports <code>select</code> from <code>dplyr</code> to subset the columns</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>cols module</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/clean/cols.R</span></span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb40-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use import raw module</span></span>
<span id="cb40-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw)</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># columns</span></span>
<span id="cb40-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb40-11">  dplyr[select],</span>
<span id="cb40-12">  janitor[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fix_cols =</span> clean_names]</span>
<span id="cb40-13">)</span>
<span id="cb40-14"></span>
<span id="cb40-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb40-16">snakes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb40-17">  raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb40-18">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fix_cols</span>(raw)</span>
<span id="cb40-19">  vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(clean_cols, </span>
<span id="cb40-20">    species, </span>
<span id="cb40-21">    island, </span>
<span id="cb40-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> culmen_length_mm,</span>
<span id="cb40-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mm =</span> culmen_depth_mm,</span>
<span id="cb40-24">    flipper_length_mm,</span>
<span id="cb40-25">    body_mass_g,</span>
<span id="cb40-26">    sex)</span>
<span id="cb40-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(vars)</span>
<span id="cb40-28">}</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li>Back in <code>run.R</code>, we call the <code>cols</code> module to convert the columns names with <code>snakes()</code>:</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean columns</span></span>
<span id="cb41-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cols)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(cols<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snakes</span>())</span></code></pre></div>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>cols module output</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb42-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"island"</span>            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_length_mm"</span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_depth_mm"</span>                  </span>
<span id="cb42-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[5]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flipper_length_mm"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span> </span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="wrangle" class="level3">
<h3 class="anchored" data-anchor-id="wrangle"><code>wrangle</code></h3>
<ul>
<li>Now that I have standardized columns and the subset of the variables to plot, I can call the <code>vars</code> module to wrangle the plot variables</li>
</ul>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/graph/wrangle/</span></span>
<span id="cb43-2">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#clean</span></span>
<span id="cb43-3">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#├── #import</span></span>
<span id="cb43-4">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #└── raw.R</span></span>
<span id="cb43-5">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#└── cols.R</span></span>
<span id="cb43-6">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> vars.R</span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<section id="vars" class="level4">
<h4 class="anchored" data-anchor-id="vars"><code>vars</code></h4>
<ul>
<li><p><code>vars</code> is nested in the <code>wrangle</code> folder, and imports the <code>raw</code> and <code>cols</code> modules</p>
<ul>
<li>The <code>vars</code> module imports <code>mutate</code> and <code>filter</code> from <code>dplyr</code> and an alias for <code>stringr::str_extract()</code></li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>vars module</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/vars.R</span></span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb44-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use clean names module</span></span>
<span id="cb44-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cols)</span>
<span id="cb44-8"></span>
<span id="cb44-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle packages/functions</span></span>
<span id="cb44-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(dplyr[mutate, filter],</span>
<span id="cb44-11">  stringr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str_ext =</span> str_extract])</span>
<span id="cb44-12"></span>
<span id="cb44-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb44-14">scatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb44-15">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cols<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snakes</span>()</span>
<span id="cb44-16">  plot_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> clean_cols <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_ext</span>(species, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([[:alpha:]]+)"</span>),</span>
<span id="cb44-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(species),</span>
<span id="cb44-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">island =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(island),</span>
<span id="cb44-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex)</span>
<span id="cb44-22">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove missing sex</span></span>
<span id="cb44-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex))</span>
<span id="cb44-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plot_vars)</span>
<span id="cb44-26">}</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>run.R</code>, we check the structure of the output from <code>vars$scatter()</code></p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in run.R</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle variables </span></span>
<span id="cb45-3">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>vars)</span>
<span id="cb45-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(vars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>())</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>vars module output</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb46-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tibble</span> [333 × 7] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span>                                                     </span>
<span id="cb46-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> species          : Factor w/ 3 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span>,..: 1 1 1 1 1 1 1 1 1 1 ...</span>
<span id="cb46-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> island           : Factor w/ 3 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Biscoe"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dream"</span>,..: 3 3 3 3 3 3 3 3 3 3 ...</span>
<span id="cb46-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_length_mm   : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 36.7 39.3 38.9 39.2 41.1 38.6 34.6 ...</span>
<span id="cb46-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_depth_mm    : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 19.3 20.6 17.8 19.6 17.6 21.2 21.1 ...</span>
<span id="cb46-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> flipper_length_mm: num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 193 190 181 195 182 191 198 ...</span>
<span id="cb46-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> body_mass_g      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 3450 3650 ...</span>
<span id="cb46-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sex              : Factor w/ 2 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span>: 2 1 1 1 2 1 2 1 2 2 ...</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="graph" class="level3">
<h3 class="anchored" data-anchor-id="graph"><code>graph</code></h3>
<p>Finally, we get to the <code>graph</code> module. This module import all preceding modules.</p>
<div style="font-size: 1.10em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb47-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/</span></span>
<span id="cb47-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> graph</span>
<span id="cb47-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#wrangle</span></span>
<span id="cb47-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#├── #clean</span></span>
<span id="cb47-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #├── #import</span></span>
<span id="cb47-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #│   #└── raw.R</span></span>
<span id="cb47-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#│   #└── cols.R</span></span>
<span id="cb47-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#└── vars.R</span></span>
<span id="cb47-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> scatter.R</span>
<span id="cb47-10"></span>
<span id="cb47-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5</span> directories, 4 files</span></code></pre></div>
</div>
</div>
<section id="scatter" class="level4">
<h4 class="anchored" data-anchor-id="scatter"><code>scatter</code></h4>
<ul>
<li><p>The <code>scatter</code> module imports the <code>vars</code> module with the data that’s been imported, cleaned, and wrangled.</p>
<ul>
<li>The <code>ggp2()</code> function includes the <code>ggplot2</code> functions to build a scatter plot.</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>scatter module</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/scatter.R</span></span>
<span id="cb48-2"></span>
<span id="cb48-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb48-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb48-5"></span>
<span id="cb48-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import plot vars module</span></span>
<span id="cb48-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>vars)</span>
<span id="cb48-8"></span>
<span id="cb48-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import ggplot2</span></span>
<span id="cb48-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb48-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ggplot2 =</span> ggplot2[ggplot, aes, geom_point, </span>
<span id="cb48-12">                    facet_wrap, labs, theme_minimal]</span>
<span id="cb48-13">)</span>
<span id="cb48-14"></span>
<span id="cb48-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb48-16">ggp2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb48-17">  scatter_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>()</span>
<span id="cb48-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot prepped data</span></span>
<span id="cb48-19">  ggp2_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> scatter_vars, </span>
<span id="cb48-20">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb48-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm,</span>
<span id="cb48-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb48-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> island</span>
<span id="cb48-24">    )</span>
<span id="cb48-25">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-26">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb48-27">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)</span>
<span id="cb48-28">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-29">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> island) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-30">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb48-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, </span>
<span id="cb48-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill length (mm)"</span>, </span>
<span id="cb48-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>,</span>
<span id="cb48-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>,</span>
<span id="cb48-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper vs. Bill Length"</span>, </span>
<span id="cb48-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span></span>
<span id="cb48-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-38">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb48-39">  ggp2_plot</span>
<span id="cb48-40">}</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>run.R</code>, the final module call produces the plot.</p>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># graph</span></span>
<span id="cb49-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>scatter)</span>
<span id="cb49-3">scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggp2</span>()</span></code></pre></div>
</div>
</div></li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><a href="nested-scatter.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://mjfrigaard.github.io/posts/box/nested-scatter.png" class="img-fluid figure-img" style="width:100.0%"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this post I’ve covered how the <code>box</code> package uses modules to separate your analysis and workflow into small, <em>modular</em> scripts. Nesting modules also adds a flexibility R packages do not have (because everything has to be contained in the <code>R/</code> folder).</p>
<p>Both versions of the projects created in this example ended up with very few lines of code, and didn’t require a creating a <code>NAMESPACE</code> or <code>DESCRIPTION</code> file.</p>
<p>View the final <a href="https://github.com/mjfrigaard/penguins">project here.</a></p>
<!--

-->


</section>

 ]]></description>
  <category>Packages</category>
  <category>Box</category>
  <guid>https://mjfrigaard.github.io/posts/box/</guid>
  <pubDate>Wed, 21 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/box/image.png" medium="image" type="image/png" height="139" width="120"/>
</item>
<item>
  <title>purrr updates (v1.0.0)</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/purrr1.0/</link>
  <description><![CDATA[ 





<!--
https://mjfrigaard.github.io/posts/vanilla-shiny/

https://mjfrigaard.github.io/posts/my-pkg-app/

https://mjfrigaard.github.io/posts/my-golem-app/

https://mjfrigaard.github.io/posts/my-leprechaun-app/

https://mjfrigaard.github.io/posts/my-rhino-app/
-->
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_github("tidyverse/purrr", </span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                   force = TRUE, quiet = TRUE)</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sloop)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(snakecase)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(waldo)</span></code></pre></div>
</details>
</div>
</div>
<p>This post is going to cover the recent updates to the <a href="https://purrr.tidyverse.org/"><code>purrr</code> package</a>. The release of <a href="https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/">version 1.0.0</a> (and dev version <a href="https://github.com/tidyverse/purrr/blob/main/NEWS.md#purrr-101">v1.0.1</a>) had some breaking changes, which I will cover below. But first, I’ll dive into some attributes of R’s functions and objects that make <code>purrr</code> particularly useful, and I’ll work through iteration problems I’ve encountered (and solved with <code>purrr</code>).</p>
<section id="refresher-functions-and-objects" class="level1">
<h1><strong>Refresher</strong>: functions and objects</h1>
<p>If you’re like me, you’ve never been a big fan of <code>for</code> loops. They’re an important concept to grasp, but if you’ve ever had to debug what’s happening in multiple nested <code>for</code> loops, you’ve probably found yourself asking if there’s a better way to iterate.</p>
<p>In a functional programming language like R, it’s nice when to have functions perform a lot of the work I’d have to write into a <code>for</code> loop.</p>
<section id="generic-functions-s3-objects" class="level2">
<h2 class="anchored" data-anchor-id="generic-functions-s3-objects">Generic functions &amp; S3 objects</h2>
<p>R’s syntax avoids explicit iteration by allowing certain <em>generic</em> functions to be used across different types (or objects). For example, the base <code>plot()</code> and <code>summary()</code> functions are S3 generic function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(plot)</span>
<span id="cb2-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"      "generic"</span></span>
<span id="cb2-3">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(summary)</span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"      "generic"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Which means <code>plot()</code> can be applied to S3 objects, like time-series (<code>ts</code>) and rectangular datasets (<code>data.frame</code>):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">otype</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb3-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "ts"</span></span>
<span id="cb3-5">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">otype</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "data.frame"</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb4-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   576.0   578.1   579.1   579.0   579.9   581.9</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb4-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      weight             feed   </span></span>
<span id="cb4-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Min.   :108.0   casein   :12  </span></span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1st Qu.:204.5   horsebean:10  </span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Median :258.0   linseed  :12  </span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Mean   :261.3   meatmeal :11  </span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3rd Qu.:323.5   soybean  :14  </span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Max.   :423.0   sunflower:12</span></span></code></pre></div>
</details>
</div>
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span></code></pre></div>
</details>
<div class="cell quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Time-series plot"><img src="https://mjfrigaard.github.io/posts/purrr1.0/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672" alt="Time-series plot"></a></p>
<figcaption>Time-series plot</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-3-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Scatter Plot"><img src="https://mjfrigaard.github.io/posts/purrr1.0/index_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid figure-img" width="672" alt="Scatter Plot"></a></p>
<figcaption>Scatter Plot</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p><code>summary()</code> is a particularly versatile function, because it can be used on <code>data.frame</code>s, a single column in a <code>data.frame</code>, model outputs, and more.</p>
<div style="font-size: 0.90em; color: #696969;">
<p><em>Click <strong>Code</strong> below to view an example using <code>summary()</code></em></p>
</div>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get summary of columns ----------------------------------------------------</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hp)</span>
<span id="cb6-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    52.0    96.5   123.0   146.7   180.0   335.0</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg)</span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   10.40   15.43   19.20   20.09   22.80   33.90</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store model output  -------------------------------------------------------</span></span>
<span id="cb6-10">lm_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> hp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb6-11">lm_mod</span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Call:</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## lm(formula = mpg ~ hp, data = mtcars)</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Coefficients:</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept)           hp  </span></span>
<span id="cb6-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    30.09886     -0.06823</span></span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get summary of model output -----------------------------------------------</span></span>
<span id="cb6-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_mod)</span>
<span id="cb6-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Call:</span></span>
<span id="cb6-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## lm(formula = mpg ~ hp, data = mtcars)</span></span>
<span id="cb6-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Residuals:</span></span>
<span id="cb6-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     Min      1Q  Median      3Q     Max </span></span>
<span id="cb6-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## -5.7121 -2.1122 -0.8854  1.5819  8.2360 </span></span>
<span id="cb6-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Coefficients:</span></span>
<span id="cb6-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##             Estimate Std. Error t value Pr(&gt;|t|)    </span></span>
<span id="cb6-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept) 30.09886    1.63392  18.421  &lt; 2e-16 ***</span></span>
<span id="cb6-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## hp          -0.06823    0.01012  -6.742 1.79e-07 ***</span></span>
<span id="cb6-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ---</span></span>
<span id="cb6-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</span></span>
<span id="cb6-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Residual standard error: 3.863 on 30 degrees of freedom</span></span>
<span id="cb6-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Multiple R-squared:  0.6024, Adjusted R-squared:  0.5892 </span></span>
<span id="cb6-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## F-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07</span></span>
<span id="cb6-40"></span>
<span id="cb6-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the output from one S3 generic to another S3 generic -----------------</span></span>
<span id="cb6-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_mod))</span>
<span id="cb6-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                Estimate Std. Error   t value     Pr(&gt;|t|)</span></span>
<span id="cb6-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept) 30.09886054  1.6339210 18.421246 6.642736e-18</span></span>
<span id="cb6-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## hp          -0.06822828  0.0101193 -6.742389 1.787835e-07</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="fp-oop" class="level2">
<h2 class="anchored" data-anchor-id="fp-oop">FP + OOP</h2>
<blockquote class="blockquote">
<p><em>Functional programming is complementary to object-oriented programming, which has been the dominant programming paradigm for the last several decades.</em> - Advanced R, 2nd edition</p>
</blockquote>
<p><code>plot()</code> and <code>summary()</code> are parametric polymorphic (generic) functions, which means they have slightly different behaviors based on the objects passed into them.</p>
<p>As I can see, generic functions are flexible and efficient because of not having to re-define a new function for each input object–outputs from generic functions will automatically change (in part) depending on the structure of the object provided to them.</p>
<p>The relationship between functions and objects is what makes <code>purrr</code> (and other tools for iteration) extremely helpful for solving iteration problems we commonly encounter when working with data. Similar to generic functions, these functions allow us to express iterative behavior using a complete and consistent set of tools.</p>
</section>
<section id="iteration-problems" class="level2">
<h2 class="anchored" data-anchor-id="iteration-problems">Iteration problems</h2>
<p>In programming, iteration refers to defining an input and applying an operation over every part of it. Some examples of problems that iteration can solve include:</p>
<ol type="1">
<li><p>You have a list of objects and you’d like to apply a function (or a series of functions) over the elements in the list</p></li>
<li><p>You have a folder full of files you’d like to rename or copy to a new directory</p></li>
<li><p>You’d like to download a collection of files from separate URLS</p></li>
<li><p>You have several years of data, and each year is contained in separate file. You’d like to read these data into R, combine them into a single dataset</p></li>
<li><p>You have a non-rectangular (i.e., list) of datasets you’d like to split into individual <code>data.frame</code>s, then export these into separate file paths.</p></li>
</ol>
<p>These are all problems I’ve personally encountered that required a variety of iteration tools to tackle. I’ll start with the first example because the principles remain the same (regardless of the size/scope of the problem):</p>
</section>
</section>
<section id="the-for-loop" class="level1">
<h1><strong>The <code>for</code> loop</strong></h1>
<p><code>for</code> loops are ubiquitous in programming, and (for the most part) they describe the types of problems they’re solving:</p>
<blockquote class="blockquote">
<p>“<em>for each <code>item</code> in <code>object</code>, do <code>operation</code></em>”</p>
</blockquote>
<p>I have a list (<code>my_list</code>), with items in various cases:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">my_list</span>
<span id="cb7-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb7-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "MOvE"     "tHURsDAy" "SISter"   "jOiN"     "lASt"    </span></span>
<span id="cb7-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb7-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "THe tHefT oF the Pearl PIN WaS kePT SEcrEt."    </span></span>
<span id="cb7-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "iT snOWed, RAINEd, AND HaIled ThE samE MOrNiNG."</span></span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "IT caUght iTs HINd pAw in a ruSTY tRaP."        </span></span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "W" "G" "T" "q" "X" "S" "O" "P" "u" "L"</span></span></code></pre></div>
</details>
</div>
</div>
<p>If I try to use the <code>tolower()</code> on <code>my_list</code>, it returns a vector.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span>
<span id="cb8-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  chr [1:3] "c(\"move\", \"thursday\", \"sister\", \"join\", \"last\")" ...</span></span></code></pre></div>
</details>
</div>
</div>
<p>How can I apply the <code>tolower()</code> function to each item in <code>my_list</code>, and return the original object type? I’ll use <code>my_list</code> and <code>tolower()</code> to demonstrate how I was taught to write <code>for</code> loops:</p>
<ul>
<li><p><strong>First</strong>: define the sequence, ‘<em>for <code>[item]</code> in <code>[items in object]</code></em>’</p>
<ul>
<li>In this case, <code>x</code> is the abstracted <code>[item]</code> taking on the values returned by <code>seq_along(my_list)</code> (the <code>[items in object]</code>)</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)</span>
<span id="cb9-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1 2 3</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take single value of 'x'</span></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use this to get 'items in object'</span></span>
<span id="cb9-7">my_list[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]]</span>
<span id="cb9-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "MOvE"     "tHURsDAy" "SISter"   "jOiN"     "lASt"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><strong>Second</strong>: write the operations the for loop will perform per iteration (i.e.&nbsp;the first iteration is <code>x</code> = <code>tolower(my_list[[1]])</code>; the second iteration is <code>x</code> = <code>tolower(my_list[[2]])</code>; etc.)</p>
<ul>
<li>Test this with a few values if you like</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb10-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb10-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb10-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><strong>Third</strong>: define an (optional) object to capture the results of the loop (<code>lc_list</code>), and make sure it’s the correct size</p>
<ul>
<li>Two methods for creating empty lists</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb11-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[2]]</span></span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[3]]</span></span>
<span id="cb11-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb11-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb11-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[2]]</span></span>
<span id="cb11-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[3]]</span></span>
<span id="cb11-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<p>Finally, we put it all together in a <code>for</code> loop</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define capture object</span></span>
<span id="cb12-2">lc_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write sequence</span></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)) {        </span>
<span id="cb12-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write operations/capture in object</span></span>
<span id="cb12-6">  lc_list[[x]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list[[x]])</span>
<span id="cb12-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean up container</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(lc_list) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentences"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"letters"</span>)</span>
<span id="cb12-9">}</span>
<span id="cb12-10">lc_list</span>
<span id="cb12-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb12-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb12-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb12-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb12-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb12-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb12-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb12-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
<p>This was a simple example, but it demonstrates the basic components in a <code>for</code> loop:</p>
<ol type="1">
<li>The sequence to index
<ul>
<li><code>for (x in seq_along(my_list))</code><br>
</li>
</ul></li>
<li>The operations to iterate
<ul>
<li><code>tolower(my_list[[x]])</code><br>
</li>
</ul></li>
<li>The object to capture the results
<ul>
<li><code>lc_list &lt;- vector(mode = "list", length = 3)</code> and<br>
</li>
<li><code>lc_list[[x]]</code></li>
</ul></li>
</ol>
</section>
<section id="base-r" class="level1">
<h1><strong>Base R</strong></h1>
<p>base R has the <code>_apply</code> family of functions (<code>apply()</code>, <code>lapply()</code>, <code>sapply()</code>, <code>vapply()</code>, etc.) that remove a lot of the ‘book keeping’ code we had to write in the <code>for</code> loop.</p>
<section id="lapply" class="level2">
<h2 class="anchored" data-anchor-id="lapply"><code>lapply()</code></h2>
<p>Sticking with the <code>my_list</code> and <code>tolower()</code> example, the <code>apply</code> function I want is <code>lapply()</code> (pronounced ‘l-apply’), and the <code>l</code> stands for list.</p>
<p><code>lapply()</code> has only two required arguments:</p>
<ul>
<li><p><code>X</code> the object we want to iterate over</p></li>
<li><p><code>FUN</code> being the function we want iterated</p></li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb13-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb13-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb13-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb13-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb13-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb13-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb13-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb13-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb13-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb13-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="sapply" class="level2">
<h2 class="anchored" data-anchor-id="sapply"><code>sapply()</code></h2>
<p><code>sapply()</code> attempts to simplify the result depending on the <code>X</code> argument. If <code>X</code> is a list containing vectors where every element has the same length (and it’s greater than 1), then <code>sapply()</code> returns a matrix:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb14-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 1</span></span>
<span id="cb14-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ words: chr [1:5] "MOvE" "tHURsDAy" "SISter" "jOiN" ...</span></span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb14-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      words     </span></span>
<span id="cb14-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1,] "move"    </span></span>
<span id="cb14-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2,] "thursday"</span></span>
<span id="cb14-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3,] "sister"  </span></span>
<span id="cb14-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4,] "join"    </span></span>
<span id="cb14-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5,] "last"</span></span></code></pre></div>
</details>
</div>
</div>
<p>If a vector is passed to <code>X</code> where every element is length 1, then a vector is returned:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb15-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  chr [1:5] "MOvE" "tHURsDAy" "SISter" "jOiN" "lASt"</span></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower) </span>
<span id="cb15-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       MOvE   tHURsDAy     SISter       jOiN       lASt </span></span>
<span id="cb15-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     "move" "thursday"   "sister"     "join"     "last"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Finally, if <code>X</code> is a list where elements have a length greater than 1, then a list is returned (making it identical to <code>lapply()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower), </span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb16-4">)</span>
<span id="cb16-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ✔ No differences</span></span></code></pre></div>
</details>
</div>
</div>
<p>This is because <code>sapply</code> is a wrapper around <code>lapply</code>, but has <code>simplify</code> and <code>USE.NAMES</code> set to <code>FALSE</code> (see what happens below when I change them to <code>TRUE</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb17-2">  </span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower), </span>
<span id="cb17-4">  </span>
<span id="cb17-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower, </span>
<span id="cb17-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">USE.NAMES =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb17-7">  </span>
<span id="cb17-8">  )</span>
<span id="cb17-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `old` is a list</span></span>
<span id="cb17-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `new` is a character vector ('move', 'thursday', 'sister', 'join', 'last')</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="anonmymous-functions" class="level2">
<h2 class="anchored" data-anchor-id="anonmymous-functions">Anonmymous functions</h2>
<p>The <code>FUN</code> argument can also take anonymous (undefined) functions. For example, if I wanted to access the second elements in <code>my_list</code>, I could pass an anonymous function the <code>FUN</code> (with the index):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb18-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb18-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "tHURsDAy"</span></span>
<span id="cb18-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb18-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb18-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "iT snOWed, RAINEd, AND HaIled ThE samE MOrNiNG."</span></span>
<span id="cb18-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb18-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb18-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "G"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="vapply" class="level2">
<h2 class="anchored" data-anchor-id="vapply"><code>vapply()</code></h2>
<p>Finally <code>vapply()</code> is unique in that it always simplifies the returned output. If we repeat the example above, we see the returned value is character vector:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, </span>
<span id="cb19-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]], </span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb19-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                             words </span></span>
<span id="cb19-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                        "tHURsDAy" </span></span>
<span id="cb19-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                         sentences </span></span>
<span id="cb19-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "iT snOWed, RAINEd, AND HaIled ThE samE MOrNiNG." </span></span>
<span id="cb19-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                           letters </span></span>
<span id="cb19-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                               "G"</span></span></code></pre></div>
</details>
</div>
</div>
<p>The <code>apply</code> functions get us much further than writing <code>for</code> loops because we can 1) iterate over vectors and lists, 2) control the output objects, and 3) <strong>write less code.</strong> Unlike generic functions, <code>apply</code> functions are designed to work with specific object types, and return values depending on these objects.</p>
<p>One downside of apply functions is they don’t play well with <code>data.frame</code>s or <code>tibble</code>s. However, we can control their return values (and manually supply these to <code>tibble::tibble()</code> or <code>data.frame()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb20-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb20-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sentences =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-6">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-7">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb20-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">letters =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-9">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-10">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
</details>
</div>
</div>
<p>Another downside of the <code>apply</code> functions is they’re not very uniform. Each function has slight variations in their arguments and rules for return values. This is where <code>purrr</code> comes in…</p>
</section>
</section>
<section id="purrr" class="level1">
<h1><strong><code>purrr</code></strong></h1>
<p>If you’re new to <code>purrr</code>, a great way to start using it’s functions is with a recipe covered in <a href="https://posit.co/resources/videos/happy-r-users-purrr-tutorial/">Charlotte Wickham’s tutorial</a></p>
<ol type="1">
<li><p>Do it for one element</p></li>
<li><p>Turn it into a recipe</p></li>
<li><p>Use <code>purrr::map()</code> to do it for all elements</p></li>
</ol>
<p>I’ll work through these three steps below using <code>my_list</code> and <code>tolower()</code></p>
<section id="do-it-for-one-element" class="level2">
<h2 class="anchored" data-anchor-id="do-it-for-one-element">1. Do it for one element</h2>
<p>The goal with the first step is to get a minimal working example with a single element from the object I want to iterate over (with the function I want to iterate with).</p>
<p>For this example, I need to subset <code>my_list</code> for a single element at position <code>[[1]]</code>, <code>[[2]]</code>, or <code>[[3]]</code> (or using one of the vector names).</p>
<p>I’ll then pass this element to <code>tolower()</code> and make sure it’s the desired behavior:</p>
<div style="font-size: 0.90em;">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset an element from the list</span></span>
<span id="cb21-2">? <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_list[[?]]</span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply a function to extracted element</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(?)</span></code></pre></div>
</div>
<ul>
<li><p><code>? &lt;- my_list[[?]]</code> = subset element from the list (<code>my_list</code>)</p></li>
<li><p><code>tolower(?)</code> = apply operation (i.e., function) to extracted element.</p></li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">my_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_list[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'words'</span>]]</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_words)</span>
<span id="cb22-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that I have a working example for one element, in the next step I’ll abstract these parts into the function arguments.</p>
</section>
<section id="turn-it-into-a-recipe" class="level2">
<h2 class="anchored" data-anchor-id="turn-it-into-a-recipe">2. Turn it into a recipe</h2>
<p>A standard <code>purrr</code> recipe defines <code>.x</code> (the object) and <code>.f</code> (the function), followed by any additional function arguments.</p>
<ul>
<li><p><code>.x</code> = a list or atomic vector</p></li>
<li><p><code>.f</code> = the function we want to apply over every element in <code>.x</code></p></li>
</ul>
<div style="font-size: .90em;">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">.x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> my_list, .f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> tolower</span></code></pre></div>
</div>
</section>
<section id="map-it-across-all-elements" class="level2">
<h2 class="anchored" data-anchor-id="map-it-across-all-elements">3. <code>map()</code> it across all elements</h2>
<p>In <code>purrr::map()</code>, the <code>.x</code> argument is the object (list or atomic vector) I want to iterate over, and <code>.f</code> is the function (i.e., operation) I want applied to every element of <code>.x</code></p>
<p>If I want to convert the case of every element in <code>my_list</code> to lowercase with <code>tolower()</code> I would use the following standard <code>purrr::map()</code> format:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower)</span>
<span id="cb24-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb24-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb24-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb24-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb24-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb24-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb24-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb24-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb24-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb24-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
<p>And there you have it! <code>map()</code> is the core function and workhorse of the <code>purrr</code> package. It’s important to note that <code>purrr::map()</code> always returns a list, regardless of the object supplied to <code>.x</code>.</p>
</section>
</section>
<section id="version-1.0.0-updates" class="level1">
<h1><strong>Version 1.0.0 updates</strong></h1>
<p>Now I’ll cover some of the updates in <code>purrr</code> 1.0.0. I’ll be using <code>mixed_list</code>, a list with five different types of vectors.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">mixed_list</span>
<span id="cb25-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $booleans</span></span>
<span id="cb25-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1]  TRUE FALSE  TRUE FALSE</span></span>
<span id="cb25-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $integers</span></span>
<span id="cb25-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1]  4  7  8  1 10</span></span>
<span id="cb25-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $doubles</span></span>
<span id="cb25-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 2.909 2.938 2.853 2.755 2.990</span></span>
<span id="cb25-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $strings</span></span>
<span id="cb25-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "second" "commit" "red"    "except" "fire"  </span></span>
<span id="cb25-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $dates</span></span>
<span id="cb25-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "2023-12-06" "2023-10-27" "2023-09-07"</span></span></code></pre></div>
</details>
</div>
</div>
<section id="map-updates" class="level2">
<h2 class="anchored" data-anchor-id="map-updates"><code>map()</code> updates</h2>
<p>As noted above, by default <code>purrr::map()</code> returns a list. If I’d like to return a vector, I can use one of the <code>map_</code> variations (there’s one for each vector type).</p>
<ul>
<li><p>By mapping the <code>is.&lt;type&gt;()</code> functions the elements in <code>mixed_list</code>, I can test which elements in <code>mixed_list</code> return <code>TRUE</code>:</p>
<ul>
<li><code>map_lgl()</code>: returns a logical vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
    TRUE    FALSE    FALSE    FALSE    FALSE </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_int()</code>: returns an integer vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
       0        1        0        0        0 </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_dbl()</code>: returns a double vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
       0        0        1        0        1 </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_chr()</code>: returns a character vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Automatic coercion from logical to character was deprecated in purrr 1.0.0.
ℹ Please use an explicit call to `as.character()` within `map_chr()` instead.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
 "FALSE"  "FALSE"  "FALSE"   "TRUE"  "FALSE" </code></pre>
</div>
</div>
</div></li>
</ul>
<p>When we test for characters in <code>mixed_list</code>, we see the following warning:</p>
<div style="font-size: 0.90em;">
<blockquote class="blockquote">
<p><code>Warning: Automatic coercion from logical to character was deprecated in purrr</code> <code>1.0.0. Please use an explicit call to as.character() within map_chr() instead</code></p>
</blockquote>
</div>
<p>As we can see from the output above, the logical return values from <code>is.character()</code> are coerced to characters (this behavior is now deprecated).</p>
<section id="map_vec" class="level3">
<h3 class="anchored" data-anchor-id="map_vec"><code>map_vec()</code></h3>
<p><br></p>
<p>However, the previous <code>purrr::map_raw()</code> function has been replaced with <code>purrr::map_vec()</code>, which “<em>simplifies to the common type of the output.</em>” I’ll demonstrate below with the characters in <code>mixed_list</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x))</span>
<span id="cb35-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## booleans integers  doubles  strings    dates </span></span>
<span id="cb35-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    FALSE    FALSE    FALSE     TRUE    FALSE</span></span></code></pre></div>
</details>
</div>
</div>
<p>Notice the difference in output? The results are the same as above, but output is not commented (<code>##</code>). The same is true when I test the dates in <code>mixed_list</code> using <code>lubridate::is.Date()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(\(x) lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>(x))</span>
<span id="cb36-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## booleans integers  doubles  strings    dates </span></span>
<span id="cb36-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    FALSE    FALSE    FALSE    FALSE     TRUE</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="anonymous-functions" class="level2">
<h2 class="anchored" data-anchor-id="anonymous-functions">Anonymous functions</h2>
<p>R introduced the shorthand anonymous function syntax in version <a href="https://cran.r-project.org/doc/manuals/r-devel/NEWS.html">4.1.0</a>:</p>
<blockquote class="blockquote">
<p>“<em><code>\(x) x + 1</code> is parsed as <code>function(x) x + 1</code>.</em>”</p>
</blockquote>
<p>Below is a comparison of an anonymous (unnamed) function and the updated shorthand syntax:</p>
<ul>
<li><p>Standard anonymous function</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pIrAtES Ship"</span>)</span>
<span id="cb37-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "pirates ship"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>The updated anonymous syntax is below:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pIrAtES Ship"</span>)</span>
<span id="cb38-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "pirates ship"</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<p>Writing the code above using an anonymous function would look like this:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))</span>
<span id="cb39-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb39-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb39-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb39-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb39-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb39-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb39-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb39-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb39-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb39-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Anonymous functions make it <em>easier to understand which arguments belong to which function and will tend to yield better error messages.</em></p>
<p>I’ll confirm the outputs from both methods are identical using <code>waldo::compare()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb40-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower), </span>
<span id="cb40-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x)))</span>
<span id="cb40-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ✔ No differences</span></span></code></pre></div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The formula (<code>~ .x + 1</code>)
</div>
</div>
<div class="callout-body-container callout-body">
<p><br></p>
<div style="font-size: 1.10em;">
<p>Prior to <code>purrr</code> v1.0.0, I could also use the formula syntax, but now it’s “<em>only recommended if you require backward compatibility with older versions of R.</em>” I’ll cover the formula syntax briefly because you’re likely to encounter it.</p>
</div>
<div style="font-size: 1.10em;">
<p>The formula syntax is typically used with pipes, so the contents of <code>purrr::map()</code> become the right-hand side of the formula, with the function we want to iterate (<code>&lt;FUNCTION&gt;</code>) and a placeholder (<code>.x</code>) in the appropriate argument.</p>
</div>
<div style="font-size: 1.20em;">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>OBJECT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> purrr::map<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>FUNCTION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<div style="font-size: 1.10em;">
<p>For the example above, <code>my_list</code> is ‘piped’ to <code>purrr::map()</code>, where the formula maps the <code>tolower()</code> function (using the <code>.x</code> placeholder).</p>
</div>
<div style="font-size: 1.00em;">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># written as normal expression</span></span>
<span id="cb42-2"> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x))</span></code></pre></div>
</div>
<div style="font-size: 1.10em;">
<p>Jenny Bryan offers a great description on <a href="https://jennybc.github.io/purrr-tutorial/ls03_map-function-syntax.html#anonymous_function,_formula">her <code>purrr</code> tutorial</a>,</p>
<blockquote class="blockquote">
<p>“<em>[formula syntax] should start with the <code>~</code> symbol and then look like a typical top-level expression, as you might write in a script. Use <code>.x</code> to refer to the input, i.e.&nbsp;an individual element of the primary vector or list.</em>”</p>
</blockquote>
<p>I can double-check to see that the output from two variations are identical using <code>waldo::compare()</code>.</p>
</div>
<div style="font-size: 1.00em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb43-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x)), </span>
<span id="cb43-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x)))</span>
<span id="cb43-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ✔ No differences</span></span></code></pre></div>
</details>
</div>
</div>
</div>
</div>
<!--
# map for `data.frame` and `tibble`s

::: {style="font-size: 0.90em;"}

::: {.cell}

```{.r .cell-code}
swdata <- dplyr::select(dplyr::starwars, !where(is.list))
purrr::map_df(.x = swdata, .f = tolower)
## # A tibble: 87 × 11
##    name     height mass  hair_color skin_color eye_color birth_year sex   gender
##    <chr>    <chr>  <chr> <chr>      <chr>      <chr>     <chr>      <chr> <chr> 
##  1 luke sk… 172    77    blond      fair       blue      19         male  mascu…
##  2 c-3po    167    75    <NA>       gold       yellow    112        none  mascu…
##  3 r2-d2    96     32    <NA>       white, bl… red       33         none  mascu…
##  4 darth v… 202    136   none       white      yellow    41.9       male  mascu…
##  5 leia or… 150    49    brown      light      brown     19         fema… femin…
##  6 owen la… 178    120   brown, gr… light      blue      52         male  mascu…
##  7 beru wh… 165    75    brown      light      blue      47         fema… femin…
##  8 r5-d4    97     32    <NA>       white, red red       <NA>       none  mascu…
##  9 biggs d… 183    84    black      light      brown     24         male  mascu…
## 10 obi-wan… 182    77    auburn, w… fair       blue-gray 57         male  mascu…
## # ℹ 77 more rows
## # ℹ 2 more variables: homeworld <chr>, species <chr>
```
:::

:::
-->
</section>
</section>
<section id="worked-examples" class="level1">
<h1>Worked Examples</h1>
<p>In this section, I’ll be working through some of the uses I’ve for <code>purrr</code>’s functions. I’ve tried to choose tasks that are common across <em>most</em> projects so my code can be easily copied and adapted.</p>
<section id="downloading-files" class="level2">
<h2 class="anchored" data-anchor-id="downloading-files">Downloading files</h2>
<blockquote class="blockquote">
<p><em>You’d like to download a collection of files from separate URLS</em></p>
</blockquote>
<p>I have a collection of 30 .csv files from <a href="https://github.com/oreillymedia/doing_data_science">Doing Data Science</a> by Cathy O’Neil and Rachel Schutt (O’Reilly Media) in a <a href="https://github.com/mjfrigaard/dds-data">GitHub repo</a>. Let’s assume I want to download one week of these files into my RStudio session (without downloading the repo).</p>
<p>I’ll navigate to the raw url for the first data file (<code>nyt1.csv</code>), then paste this into a character vector:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">nyt_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Knowing that all of the files on GitHub with have a similar sheme and domain, I can use <code>nyt_url</code> to generate urls for each of the 7 files.</p>
<ol type="1">
<li>First I get the folder of the files on GitHub with <code>fs::path_dir()</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file urls </span></span>
<span id="cb45-2">nyt_dir_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_dir</span>(nyt_url)</span>
<span id="cb45-3">nyt_dir_url</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main"</code></pre>
</div>
</div>
</div>
<ol start="2" type="1">
<li>I create a vector with the 7 file names</li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file names for 7th through 13th</span></span>
<span id="cb47-2">nyt_file_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nyt"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>)</span>
<span id="cb47-3">nyt_file_nms</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "nyt7.csv"  "nyt8.csv"  "nyt9.csv"  "nyt10.csv" "nyt11.csv" "nyt12.csv"
[7] "nyt13.csv"</code></pre>
</div>
</div>
</div>
<ol start="3" type="1">
<li>I combine the directory portion of the url with file name in <code>nyt_file_urls</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine</span></span>
<span id="cb49-2">nyt_file_urls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(nyt_dir_url, nyt_file_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb49-3">nyt_file_urls</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt7.csv" 
[2] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt8.csv" 
[3] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt9.csv" 
[4] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt10.csv"
[5] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt11.csv"
[6] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt12.csv"
[7] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt13.csv"</code></pre>
</div>
</div>
</div>
<p>I’ll need another vector of destination file names on my local machine, which I can do by combining the file names (<code>nyt_file_nms</code>) with the local destination folder (<code>dds-nyt</code>).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">nyt_local_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, nyt_file_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb51-2">nyt_local_pths</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "dds-nyt/nyt7.csv"  "dds-nyt/nyt8.csv"  "dds-nyt/nyt9.csv" 
[4] "dds-nyt/nyt10.csv" "dds-nyt/nyt11.csv" "dds-nyt/nyt12.csv"
[7] "dds-nyt/nyt13.csv"</code></pre>
</div>
</div>
</div>
<p>After creating the destination folder, I’ll use the <code>download.file()</code> function to test downloading a single <code>.csv</code> files into my local folder (<code>dds-nyt/</code>). <code>download.file()</code> has a progress bar which tells me if the file downloaded successfully.</p>
<div style="font-size: 0.90em;">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb53-2">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>)</span>
<span id="cb53-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> nyt_file_urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> nyt_local_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb54-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">trying</span> URL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv'</span></span>
<span id="cb54-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Content</span> type <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text/plain; charset=utf-8'</span> length 4920381 bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4.7</span> MB<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb54-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==================================================</span></span>
<span id="cb54-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">downloaded</span> 4.7 MB</span></code></pre></div>
</div>
<p><code>download.file()</code> takes two inputs (<code>url</code> and <code>destfile</code>), which changes the recipe a bit, because I need a <code>purrr</code> function with the following:</p>
<ol type="1">
<li><p><code>.x</code> the input vector of existing url paths</p></li>
<li><p><code>.y</code> the output vector of destination file paths</p></li>
<li><p>Additional arguments passed from <code>download.file()</code> (like <code>quiet = TRUE</code>)</p></li>
</ol>
<p>In this case, I don’t need <code>purrr</code> to return value–I just need the <code>purrr</code> function to iterate over the items and write them to the new location.</p>
<p><code>walk()</code> is ideal for this circumstance:</p>
<blockquote class="blockquote">
<p>“<em><code>walk()</code> returns the input <code>.x</code> (invisibly)</em>” and “<em>The return value of <code>.f()</code> is ignored</em>”</p>
</blockquote>
<p><strong><em>What do ‘return <code>.x</code> invisibly’ and ‘the side-effect of <code>.f</code>’ mean?</em></strong></p>
<section id="return-invisibly" class="level3">
<h3 class="anchored" data-anchor-id="return-invisibly">Return invisibly</h3>
<p>The previous <code>purrr</code> functions I covered varied in the kinds of values they returned (lists vs.&nbsp;vectors), but for some operations I won’t need a return value. If I’m ever curious about whether I should be using <code>map()</code> or <code>walk()</code>, I’ll ask myself, <em>“would it make sense to assign the output from this function to an object?</em>”</p>
<p>If the answer is no, then I probably need to be thinking <code>walk()</code> instead of <code>map()</code></p>
</section>
<section id="side-effects" class="level3">
<h3 class="anchored" data-anchor-id="side-effects">Side-effects</h3>
<p>In the help documentation <code>walk()</code>’s description states, “<em>calls .f for its side-effect</em>”, which can be generally interpreted as, “<em>there’s nothing to assign the output from that function to.</em>”</p>
</section>
<section id="purrr-progress-bars" class="level3">
<h3 class="anchored" data-anchor-id="purrr-progress-bars"><code>purrr</code> progress bars</h3>
<p>I’ll use <code>walk2()</code> below and add <code>.progress = TRUE</code> to view the <code>purrr</code> progress bar (and <code>quiet = TRUE</code> to silence the <code>download.file()</code> progress bar).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> nyt_file_urls, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> nyt_local_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span>  download.file, </span>
<span id="cb55-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p><br></p>
<div class="cell" data-layout-align="center" data-fig.asp="0.618">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="purrr-progress.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://mjfrigaard.github.io/posts/purrr1.0/purrr-progress.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></a></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>I can confirm the download using <code>fs::dir_tree()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>)</span>
<span id="cb56-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb56-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt10.csv</span></span>
<span id="cb56-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt11.csv</span></span>
<span id="cb56-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt12.csv</span></span>
<span id="cb56-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt13.csv</span></span>
<span id="cb56-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt7.csv</span></span>
<span id="cb56-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt8.csv</span></span>
<span id="cb56-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="copying-a-directory-of-files" class="level2">
<h2 class="anchored" data-anchor-id="copying-a-directory-of-files">Copying a directory of files</h2>
<blockquote class="blockquote">
<p><em>You have a folder of files you’d like to rename or copy to a new directory</em></p>
</blockquote>
<p>The collection of 7 .csv files from <a href="https://github.com/oreillymedia/doing_data_science">Doing Data Science</a> by Cathy O’Neil and Rachel Schutt (O’Reilly Media) are now in the <code>dds-nyt/</code> folder.</p>
<p>As with any project, I don’t want to alter the raw data, so I’m going to copy these files into <code>dds-nyt-raw/</code> and <code>dds-nyt-processed/</code>. I also want the processed file names to have a date stamp prefix.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">file_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>)</span>
<span id="cb57-2">file_pths</span>
<span id="cb57-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/nyt10.csv" "dds-nyt/nyt11.csv" "dds-nyt/nyt12.csv"</span></span>
<span id="cb57-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/nyt13.csv" "dds-nyt/nyt7.csv"  "dds-nyt/nyt8.csv" </span></span>
<span id="cb57-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "dds-nyt/nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>I’ll start with the raw data folder. I need to create a vector of the new raw file paths and names: <code>raw_file_pths</code> (the raw data paths will have the original file names)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb58-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>,</span>
<span id="cb58-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>,</span>
<span id="cb58-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb58-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/raw/nyt10.csv"</span></span>
<span id="cb58-6"></span>
<span id="cb58-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write the recipe</span></span>
<span id="cb58-8">file_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(x, </span>
<span id="cb58-9">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>, </span>
<span id="cb58-10">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span>
<span id="cb58-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/raw/nyt10.csv" "dds-nyt/raw/nyt11.csv" "dds-nyt/raw/nyt12.csv"</span></span>
<span id="cb58-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/raw/nyt13.csv" "dds-nyt/raw/nyt7.csv"  "dds-nyt/raw/nyt8.csv"</span></span>
<span id="cb58-13"></span>
<span id="cb58-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map it across all</span></span>
<span id="cb58-15">raw_file_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> file_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-16">                  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(x, </span>
<span id="cb58-17">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>, </span>
<span id="cb58-18">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>Before copying the files, I need to create the destination folder for the raw data (<code>dds-nyt/raw</code>). Then, I’ll make sure I can copy the first element from <code>file_pths</code> into the path in the first element of <code>raw_file_pths</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>)</span>
<span id="cb59-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb59-3">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_copy</span>(</span>
<span id="cb59-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb59-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_path =</span> raw_file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb59-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb59-7">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>)</span>
<span id="cb59-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/raw</span></span>
<span id="cb59-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── nyt10.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>I can see this is working, so I can use <code>purrr::walk2()</code> to move all the files from <code>dds-nyt/</code> to <code>dds-nyt/raw/</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> file_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> raw_file_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_copy, </span>
<span id="cb60-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb60-3">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>)</span>
<span id="cb60-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/raw</span></span>
<span id="cb60-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt10.csv</span></span>
<span id="cb60-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt11.csv</span></span>
<span id="cb60-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt12.csv</span></span>
<span id="cb60-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt13.csv</span></span>
<span id="cb60-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt7.csv</span></span>
<span id="cb60-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── nyt8.csv</span></span>
<span id="cb60-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that I’ve copied the files into their respective folders, I’ll need to remove the files from their original location in the parent <code>dds-nyt</code> folder.</p>
<p>Fortunately, I have a vector of these files in <code>file_pths</code>, and I can test removal with <code>fs::file_delete()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_delete</span>(file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
</div>
</div>
<p>Great! Now that I know this will work, I’ll use <code>walk()</code> because I want <code>.x</code> returned invisibly and the side-effect of <code>.f</code>.</p>
<p>But I’ve also deleted the first element in <code>file_pths</code>, so when <code>fs::file_delete()</code> goes looking for that file, it will find nothing and returned an error.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb62-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> in <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span>:</span>
<span id="cb62-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ℹ</span> In index: 1.</span>
<span id="cb62-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Caused</span> by error:</span>
<span id="cb62-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[ENOENT]</span> Failed to remove <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dds-nyt/nyt10.csv'</span>: no such file or directory</span></code></pre></div>
</details>
</div>
</div>
<p>I can protect against this by supplying the output from <code>list.files()</code> directly to <code>purrr::walk2()</code>, but include a <code>pattern</code> so it only matches the <code>.csv</code> files.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(</span>
<span id="cb63-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list CURRENT files </span></span>
<span id="cb63-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(</span>
<span id="cb63-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>,</span>
<span id="cb63-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>,</span>
<span id="cb63-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb63-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map function</span></span>
<span id="cb63-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_delete)</span></code></pre></div>
</details>
</div>
</div>
<p>And confirm the new folder contents and structure</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb64-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb64-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── raw</span></span>
<span id="cb64-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt10.csv</span></span>
<span id="cb64-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt11.csv</span></span>
<span id="cb64-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt12.csv</span></span>
<span id="cb64-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt13.csv</span></span>
<span id="cb64-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt7.csv</span></span>
<span id="cb64-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt8.csv</span></span>
<span id="cb64-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="import-multiple-datasets" class="level2">
<h2 class="anchored" data-anchor-id="import-multiple-datasets">Import multiple datasets</h2>
<blockquote class="blockquote">
<p><em>You have several days of data, and each day is contained in separate file. You’d like to read these data into R, and combine them into a single dataset</em></p>
</blockquote>
<p>Now that I have separate raw and processed folders, I can import the NYT data into R. Below I’ve imported a single file from the <code>raw</code> data folder to examine it’s contents:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">nyt1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> raw_file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb65-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, </span>
<span id="cb65-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb65-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nyt1)</span>
<span id="cb65-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## spc_tbl_ [452,766 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb65-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb65-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb65-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb65-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb65-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb65-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "spec")=</span></span>
<span id="cb65-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. cols(</span></span>
<span id="cb65-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Age = col_double(),</span></span>
<span id="cb65-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Gender = col_double(),</span></span>
<span id="cb65-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Impressions = col_double(),</span></span>
<span id="cb65-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Clicks = col_double(),</span></span>
<span id="cb65-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Signed_In = col_double(),</span></span>
<span id="cb65-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   .delim = ","</span></span>
<span id="cb65-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. )</span></span>
<span id="cb65-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>Each <code>nyt</code> file contains daily ads shown and clicks recorded on the New York Times home page. The rows represent users, and the variables are: <code>Age</code>, <code>Gender</code> (0 = female, 1 = male), <code>Impressions</code> (number impressions), <code>Clicks</code> (number clicks), and a binary indicator for signed in or not <code>Signed_in</code>.</p>
<p>I’ll add some hypothetical wrangling steps to make this example more realistic.</p>
<ol type="1">
<li><p>Create <code>age_group</code>, an ordered factor which contains six levels of Age (“&lt;18”, “18-24”, “25-34”, “35-44”, “45-54”, “55-64”, and “65+”)</p></li>
<li><p>Create <code>ctr_rate</code> or click-through rate, calculated as the number of clicks / the number of impressions. Round it to 3 digits.</p></li>
<li><p>Create <code>female</code>, a factor version of <code>Gender</code>, where when <code>Gender</code> = <code>0</code>, then <code>female</code> = <code>"yes"</code>, and when <code>Gender</code> = <code>1</code>, then <code>female</code> = <code>"no"</code></p></li>
<li><p>Create <code>signed_in</code>, a factor variable with levels <code>"no"</code> and <code>"yes"</code> from the <code>Signed_In</code> = <code>0</code> and <code>1</code></p></li>
</ol>
<p>I’ve bundled all of these steps into a function (<code>nyt_data_processing()</code>) that I can pass each dataset through:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">nyt_data_processing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nyt_csv) {</span>
<span id="cb66-2">  orig_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Impressions"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clicks"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Signed_In"</span>)</span>
<span id="cb66-3">  nyt_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt_csv)</span>
<span id="cb66-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> orig_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> nyt_nms))) {</span>
<span id="cb66-5">    cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"these data don't have the correct columns!"</span>)</span>
<span id="cb66-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb66-7">    nyt_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nyt_csv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-8">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb66-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create age_group variable</span></span>
<span id="cb66-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-11">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;18"</span>,</span>
<span id="cb66-12">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"18-24"</span>,</span>
<span id="cb66-13">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"25-34"</span>,</span>
<span id="cb66-14">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"35-44"</span>,</span>
<span id="cb66-15">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"45-54"</span>,</span>
<span id="cb66-16">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"55-64"</span>,</span>
<span id="cb66-17">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"65+"</span></span>
<span id="cb66-18">        ),</span>
<span id="cb66-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor age_group (ordered)</span></span>
<span id="cb66-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(age_group,</span>
<span id="cb66-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb66-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;18"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"18-24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"25-34"</span>,</span>
<span id="cb66-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"35-44"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"45-54"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"55-64"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"65+"</span></span>
<span id="cb66-24">          ),</span>
<span id="cb66-25">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb66-26">        ),</span>
<span id="cb66-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create CTR variable</span></span>
<span id="cb66-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ctr_rate =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Clicks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Impressions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb66-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create new Female variable</span></span>
<span id="cb66-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-31">          Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>,</span>
<span id="cb66-32">          Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>,</span>
<span id="cb66-33">          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb66-34">        ),</span>
<span id="cb66-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor female (un-ordered)</span></span>
<span id="cb66-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(female,</span>
<span id="cb66-37">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>)</span>
<span id="cb66-38">        ),</span>
<span id="cb66-39">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Signed_In =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-40">          Signed_In <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, </span>
<span id="cb66-41">          Signed_In <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, </span>
<span id="cb66-42">          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>),</span>
<span id="cb66-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor Signed_In (un-ordered) </span></span>
<span id="cb66-44">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Signed_In =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(Signed_In, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-45">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format columns</span></span>
<span id="cb66-46">      janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span>
<span id="cb66-47">  }</span>
<span id="cb66-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(nyt_proc)</span>
<span id="cb66-49">}</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll do some quick checks to make sure it only works with the raw data columns:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">nyt1_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nyt_data_processing</span>(nyt1)</span>
<span id="cb67-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nyt1_proc)</span>
<span id="cb67-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## spc_tbl_ [452,766 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb67-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb67-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb67-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb67-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb67-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ signed_in  : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 1 2 ...</span></span>
<span id="cb67-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 6 1 2 4 3 3 4 4 1 2 ...</span></span>
<span id="cb67-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ ctr_rate   : num [1:452766] 0 0.143 0 0 0 0 0 0 0.111 0 ...</span></span>
<span id="cb67-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ female     : Factor w/ 2 levels "no","yes": 1 2 2 1 1 1 2 2 2 1 ...</span></span>
<span id="cb67-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "spec")=</span></span>
<span id="cb67-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. cols(</span></span>
<span id="cb67-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Age = col_double(),</span></span>
<span id="cb67-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Gender = col_double(),</span></span>
<span id="cb67-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Impressions = col_double(),</span></span>
<span id="cb67-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Clicks = col_double(),</span></span>
<span id="cb67-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Signed_In = col_double(),</span></span>
<span id="cb67-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   .delim = ","</span></span>
<span id="cb67-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. )</span></span>
<span id="cb67-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>I’ll run <code>nyt_data_processing()</code> against a processed data file (<code>nyt1_proc</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nyt_data_processing</span>(nyt1_proc)</span>
<span id="cb68-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error in `nyt_data_processing()`:</span></span>
<span id="cb68-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ! these data don't have the correct columns!</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now I’m ready to write the import step. First I’ll store the raw file paths in <code>raw_data_pths</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">raw_data_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p>We’ll test <code>purrr::map()</code> and <code>vroom::vroom()</code> to import the <code>.csv</code> files in <code>raw_data_pths</code> into a list. I also add <code>utils::head()</code> and <code>dplyr::glimpse()</code> to limit the output.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb70-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb70-4">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb70-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-6">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-7">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb70-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb70-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ : spc_tbl_ [452,766 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb70-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb70-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb70-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb70-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb70-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb70-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb70-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb70-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb70-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb70-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb70-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb70-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb70-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb70-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb70-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb70-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ : spc_tbl_ [478,066 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb70-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb70-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb70-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb70-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb70-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:478066] 1 1 1 1 1 0 1 1 1 1 ...</span></span>
<span id="cb70-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb70-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb70-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb70-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb70-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb70-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb70-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb70-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb70-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb70-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>This returns a list, but you may have noticed I don’t have a great way for keeping track of the data files in the list–this is where <code>purrr::set_names()</code> comes in handy.</p>
<p><code>purrr::set_names()</code> works a lot like <code>names()</code>, but <code>purrr::set_names()</code> will automatically set the names of <code>x</code> to <code>as.character(x)</code> if no names are provided to <code>nm</code>. See below:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>()</span>
<span id="cb71-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   dds-nyt/raw/nyt10.csv   dds-nyt/raw/nyt11.csv   dds-nyt/raw/nyt12.csv </span></span>
<span id="cb71-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "dds-nyt/raw/nyt10.csv" "dds-nyt/raw/nyt11.csv" "dds-nyt/raw/nyt12.csv" </span></span>
<span id="cb71-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   dds-nyt/raw/nyt13.csv    dds-nyt/raw/nyt7.csv    dds-nyt/raw/nyt8.csv </span></span>
<span id="cb71-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "dds-nyt/raw/nyt13.csv"  "dds-nyt/raw/nyt7.csv"  "dds-nyt/raw/nyt8.csv" </span></span>
<span id="cb71-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    dds-nyt/raw/nyt9.csv </span></span>
<span id="cb71-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  "dds-nyt/raw/nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now the imported file will have their file path and name associated with the dataset:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb72-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import  </span></span>
<span id="cb72-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb72-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb72-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-8">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-9">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb72-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb72-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt10.csv: spc_tbl_ [452,766 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb72-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb72-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb72-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb72-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb72-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb72-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb72-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb72-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb72-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb72-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb72-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb72-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb72-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb72-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb72-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb72-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt11.csv: spc_tbl_ [478,066 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb72-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb72-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb72-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb72-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb72-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:478066] 1 1 1 1 1 0 1 1 1 1 ...</span></span>
<span id="cb72-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb72-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb72-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb72-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb72-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb72-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb72-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb72-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb72-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb72-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>To add the wrangling function, I can pipe in another call to <code>purrr::map()</code>, and add <code>nyt_data_processing()</code>.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb73-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb73-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb73-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb73-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb73-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-10">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-11">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb73-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb73-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt10.csv: spc_tbl_ [452,766 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb73-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb73-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb73-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb73-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb73-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ signed_in  : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 1 2 ...</span></span>
<span id="cb73-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 6 1 2 4 3 3 4 4 1 2 ...</span></span>
<span id="cb73-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ ctr_rate   : num [1:452766] 0 0.143 0 0 0 0 0 0 0.111 0 ...</span></span>
<span id="cb73-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ female     : Factor w/ 2 levels "no","yes": 1 2 2 1 1 1 2 2 2 1 ...</span></span>
<span id="cb73-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb73-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb73-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb73-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb73-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb73-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb73-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb73-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb73-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb73-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb73-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt11.csv: spc_tbl_ [478,066 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb73-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb73-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb73-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb73-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb73-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ signed_in  : Factor w/ 2 levels "no","yes": 2 2 2 2 2 1 2 2 2 2 ...</span></span>
<span id="cb73-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 3 5 3 2 2 1 6 4 4 4 ...</span></span>
<span id="cb73-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ ctr_rate   : num [1:478066] 0 0 0 0 0 0.333 0.2 0 0 0 ...</span></span>
<span id="cb73-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ female     : Factor w/ 2 levels "no","yes": 1 2 1 1 2 2 2 2 1 2 ...</span></span>
<span id="cb73-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb73-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb73-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb73-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb73-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb73-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb73-47"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb73-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb73-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb73-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<section id="list_rbind" class="level3">
<h3 class="anchored" data-anchor-id="list_rbind"><code>list_rbind()</code></h3>
<p>For the final step, I’ll bind all the data into a <code>data.frame</code> with the updated <code>purrr::list_rbind()</code> function (set <code>names_to = "id"</code>).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb74-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb74-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb74-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb74-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb74-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bind</span></span>
<span id="cb74-11">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-12">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb74-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 3,488,345</span></span>
<span id="cb74-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 9</span></span>
<span id="cb74-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id          &lt;chr&gt; "dds-nyt/raw/nyt10.csv", "dds-nyt/raw/nyt10.csv", "dds-nyt…</span></span>
<span id="cb74-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age         &lt;dbl&gt; 59, 0, 19, 44, 30, 33, 41, 41, 0, 23, 28, 34, 0, 17, 33, 6…</span></span>
<span id="cb74-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender      &lt;dbl&gt; 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0…</span></span>
<span id="cb74-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions &lt;dbl&gt; 4, 7, 5, 5, 4, 3, 1, 3, 9, 1, 4, 4, 7, 3, 7, 6, 6, 2, 7, 2…</span></span>
<span id="cb74-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks      &lt;dbl&gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…</span></span>
<span id="cb74-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in   &lt;fct&gt; yes, no, yes, yes, yes, yes, yes, yes, no, yes, yes, yes, …</span></span>
<span id="cb74-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group   &lt;ord&gt; 55-64, &lt;18, 18-24, 35-44, 25-34, 25-34, 35-44, 35-44, &lt;18,…</span></span>
<span id="cb74-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate    &lt;dbl&gt; 0.000, 0.143, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.…</span></span>
<span id="cb74-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female      &lt;fct&gt; no, yes, yes, no, no, no, yes, yes, yes, no, no, no, yes, …</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that we have a complete recipe, I store the result in <code>nyt_data_proc</code>. I can also confirm all files were imported and wrangled by checking the <code>count()</code> of <code>id</code>.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">nyt_data_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb75-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb75-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb75-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb75-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb75-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bind</span></span>
<span id="cb75-11">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) </span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(id)</span>
<span id="cb76-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 × 2</span></span>
<span id="cb76-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   id                         n</span></span>
<span id="cb76-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;                  &lt;int&gt;</span></span>
<span id="cb76-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dds-nyt/raw/nyt10.csv 452766</span></span>
<span id="cb76-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dds-nyt/raw/nyt11.csv 478066</span></span>
<span id="cb76-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dds-nyt/raw/nyt12.csv 396308</span></span>
<span id="cb76-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dds-nyt/raw/nyt13.csv 786044</span></span>
<span id="cb76-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dds-nyt/raw/nyt7.csv  452493</span></span>
<span id="cb76-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 dds-nyt/raw/nyt8.csv  463196</span></span>
<span id="cb76-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 dds-nyt/raw/nyt9.csv  459472</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="export-multiple-datasets" class="level2">
<h2 class="anchored" data-anchor-id="export-multiple-datasets">Export multiple datasets</h2>
<blockquote class="blockquote">
<p><em>You have a dataset you’d like to split into individual <code>data.frame</code>s, then export these into separate file paths</em></p>
</blockquote>
<p>I have a processed dataset with seven data files (<code>nyt_data_proc</code>), and I want to export these into seven processed data files in a <code>dds-nyt/processed/</code> folder.</p>
<p>Creating a vector of processed data file paths is a little more involved because I wanted to add a date prefix to the exported files, and because I want to add this path as a variable <em>in the <code>nyt_data_proc</code> dataset</em>.</p>
<p>Below I create a new <code>file_nm</code> and <code>proc_file_pth</code> column to <code>nyt_data_proc</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file names </span></span>
<span id="cb77-2">nyt_data_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> nyt_data_proc,</span>
<span id="cb77-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_nm =</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(id)),</span>
<span id="cb77-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">proc_file_pth =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>, </span>
<span id="cb77-5">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>()), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, </span>
<span id="cb77-6">                        file_nm))</span>
<span id="cb77-7">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(proc_file_pth)</span>
<span id="cb77-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 × 2</span></span>
<span id="cb77-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   proc_file_pth                           n</span></span>
<span id="cb77-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;                               &lt;int&gt;</span></span>
<span id="cb77-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dds-nyt/processed/2023-12-16-nyt10 452766</span></span>
<span id="cb77-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dds-nyt/processed/2023-12-16-nyt11 478066</span></span>
<span id="cb77-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dds-nyt/processed/2023-12-16-nyt12 396308</span></span>
<span id="cb77-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dds-nyt/processed/2023-12-16-nyt13 786044</span></span>
<span id="cb77-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dds-nyt/processed/2023-12-16-nyt7  452493</span></span>
<span id="cb77-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 dds-nyt/processed/2023-12-16-nyt8  463196</span></span>
<span id="cb77-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 dds-nyt/processed/2023-12-16-nyt9  459472</span></span></code></pre></div>
</details>
</div>
</div>
<p>Note that I don’t include the file extension in <code>proc_file_pth</code>, because I might want to use different file types when I’m exporting.</p>
<p>I’ll cover two methods for exporting datasets from a list.</p>
<p>In this first method, I’ll use the <code>base::split()</code> function to split <code>nyt_data_proc</code> by the <code>proc_file_pth</code> variable into a list of data frames. I’ll also use <code>utils::head()</code>, <code>purrr::walk()</code>, and <code>dplyr::glimpse()</code> to view the output.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> nyt_data_proc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb78-2">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb78-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> glimpse)</span>
<span id="cb78-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 452,766</span></span>
<span id="cb78-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt10.csv", "dds-nyt/raw/nyt10.csv", "dds-n…</span></span>
<span id="cb78-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 59, 0, 19, 44, 30, 33, 41, 41, 0, 23, 28, 34, 0, 17, 33,…</span></span>
<span id="cb78-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,…</span></span>
<span id="cb78-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 4, 7, 5, 5, 4, 3, 1, 3, 9, 1, 4, 4, 7, 3, 7, 6, 6, 2, 7,…</span></span>
<span id="cb78-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…</span></span>
<span id="cb78-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, no, yes, yes, yes, yes, yes, yes, no, yes, yes, yes…</span></span>
<span id="cb78-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 55-64, &lt;18, 18-24, 35-44, 25-34, 25-34, 35-44, 35-44, &lt;1…</span></span>
<span id="cb78-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.000, 0.143, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, …</span></span>
<span id="cb78-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; no, yes, yes, no, no, no, yes, yes, yes, no, no, no, yes…</span></span>
<span id="cb78-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt10", "nyt10", "nyt10", "nyt10", "nyt10", "nyt10", "n…</span></span>
<span id="cb78-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-12-16-nyt10", "dds-nyt/processed…</span></span>
<span id="cb78-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 478,066</span></span>
<span id="cb78-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt11.csv", "dds-nyt/raw/nyt11.csv", "dds-n…</span></span>
<span id="cb78-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 28, 51, 29, 20, 19, 0, 58, 42, 35, 44, 62, 20, 0, 0, 43,…</span></span>
<span id="cb78-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…</span></span>
<span id="cb78-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 8, 5, 2, 4, 5, 3, 5, 6, 8, 4, 6, 4, 5, 4, 4, 5, 3, 2, 5,…</span></span>
<span id="cb78-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,…</span></span>
<span id="cb78-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, yes, yes, yes, yes, no, yes, yes, yes, yes, yes, ye…</span></span>
<span id="cb78-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 25-34, 45-54, 25-34, 18-24, 18-24, &lt;18, 55-64, 35-44, 35…</span></span>
<span id="cb78-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.000, 0.000, 0.000, 0.000, 0.000, 0.333, 0.200, 0.000, …</span></span>
<span id="cb78-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; no, yes, no, no, yes, yes, yes, yes, no, yes, yes, yes, …</span></span>
<span id="cb78-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt11", "nyt11", "nyt11", "nyt11", "nyt11", "nyt11", "n…</span></span>
<span id="cb78-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-12-16-nyt11", "dds-nyt/processed…</span></span>
<span id="cb78-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 396,308</span></span>
<span id="cb78-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt12.csv", "dds-nyt/raw/nyt12.csv", "dds-n…</span></span>
<span id="cb78-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 29, 0, 27, 0, 69, 0, 0, 39, 53, 27, 0, 13, 26, 63, 79, 0…</span></span>
<span id="cb78-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,…</span></span>
<span id="cb78-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 4, 1, 2, 5, 9, 1, 6, 4, 7, 3, 1, 1, 2, 5, 6, 7, 3, 1, 5,…</span></span>
<span id="cb78-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,…</span></span>
<span id="cb78-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, no, yes, no, yes, no, no, yes, yes, yes, no, yes, y…</span></span>
<span id="cb78-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 25-34, &lt;18, 25-34, &lt;18, 65+, &lt;18, &lt;18, 35-44, 45-54, 25-…</span></span>
<span id="cb78-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.250, 0.000, 0.000, 0.200, 0.111, 0.000, 0.000, 0.000, …</span></span>
<span id="cb78-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; yes, yes, yes, yes, no, yes, yes, no, yes, no, yes, no, …</span></span>
<span id="cb78-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt12", "nyt12", "nyt12", "nyt12", "nyt12", "nyt12", "n…</span></span>
<span id="cb78-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-12-16-nyt12", "dds-nyt/processed…</span></span></code></pre></div>
</details>
</div>
</div>
<p>I can see this is returning a list of data frames as expected, so now I need to pass this list into <code>purrr::walk2()</code> so I can iterate <code>vroom::vroom_write()</code> over the processed data paths in <code>proc_file_pth</code>.</p>
<ol type="1">
<li>First I create the processed data folder (<code>dds-nyt/processed/</code>)</li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>)</span></code></pre></div>
</details>
</div>
</div>
<ol start="2" type="1">
<li>Second, I create the <code>.x</code> argument, which is the split list of <code>nyt_data_proc</code> by <code>proc_file_pth</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split nyt_data_proc (.x)</span></span>
<span id="cb80-2">by_proc_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb80-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth)</span></code></pre></div>
</details>
</div>
</div>
<ol start="3" type="1">
<li>Third, I get the unique processed data paths in the <code>proc_file_pth</code> column and store it as a vector for the <code>.y</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get unique processed paths in nyt_data_proc (.y) with .csv extension</span></span>
<span id="cb81-2">proc_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>)</span>
<span id="cb81-3">proc_pths</span>
<span id="cb81-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/processed/2023-12-16-nyt10.csv"</span></span>
<span id="cb81-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "dds-nyt/processed/2023-12-16-nyt11.csv"</span></span>
<span id="cb81-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "dds-nyt/processed/2023-12-16-nyt12.csv"</span></span>
<span id="cb81-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/processed/2023-12-16-nyt13.csv"</span></span>
<span id="cb81-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5] "dds-nyt/processed/2023-12-16-nyt7.csv" </span></span>
<span id="cb81-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [6] "dds-nyt/processed/2023-12-16-nyt8.csv" </span></span>
<span id="cb81-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "dds-nyt/processed/2023-12-16-nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now I can perform <code>purrr::walk2()</code> on <code>by_proc_pths</code> using <code>proc_pths</code> and <code>vroom::vroom_write()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate with .f</span></span>
<span id="cb82-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> by_proc_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> proc_pths, </span>
<span id="cb82-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom_write, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)</span>
<span id="cb82-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or as an anonymous function </span></span></code></pre></div>
</details>
</div>
</div>
<p>Or I could write this as an an anonymous function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb83-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb83-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> proc_pths, </span>
<span id="cb83-4">    \(x, y)</span>
<span id="cb83-5">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb83-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> y,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll want to perform a sanity check on this output with the first exported item in <code>dds-nyt/processed</code> and check it against the <code>nyt1_proc</code> data to evaluate the differences.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">nyt1_proc_check_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> proc_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the first file</span></span>
<span id="cb84-2">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p>I’ll check the differences with <code>diffobj::diffStr()</code>. Click on Code below to view the differences:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb85-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc),</span>
<span id="cb85-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_01), </span>
<span id="cb85-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_diffs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb85-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     old           | new                 </span></span>
<span id="cb85-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "age"         - "id"            [1] </span></span>
<span id="cb85-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "gender"      - "age"           [2] </span></span>
<span id="cb85-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "impressions" - "gender"        [3] </span></span>
<span id="cb85-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "clicks"      - "impressions"   [4] </span></span>
<span id="cb85-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5] "signed_in"   - "clicks"        [5] </span></span>
<span id="cb85-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [6] "age_group"   - "signed_in"     [6] </span></span>
<span id="cb85-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "ctr_rate"    - "age_group"     [7] </span></span>
<span id="cb85-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [8] "female"      - "ctr_rate"      [8] </span></span>
<span id="cb85-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "female"        [9] </span></span>
<span id="cb85-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "file_nm"       [10]</span></span>
<span id="cb85-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "proc_file_pth" [11]</span></span></code></pre></div>
</details>
</div>
</div>
<p>These are differences I’d expect, given the two data frames will have <em>slightly</em> different columns (<code>id</code>, <code>file_nm</code>, and <code>proc_file_pth</code>)</p>
<section id="group_walk" class="level3">
<h3 class="anchored" data-anchor-id="group_walk"><code>group_walk()</code></h3>
<p>Another option involves the <code>group_walk()</code> function from <code>dplyr</code> (<strong>WARNING:</strong> this is experimental). But I need to remove the processed folder so I’m not confusing myself:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed"</span>, </span>
<span id="cb86-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb86-3">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>),</span>
<span id="cb86-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_delete)</span>
<span id="cb86-5">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb86-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb86-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── processed</span></span>
<span id="cb86-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── raw</span></span>
<span id="cb86-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt10.csv</span></span>
<span id="cb86-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt11.csv</span></span>
<span id="cb86-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt12.csv</span></span>
<span id="cb86-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt13.csv</span></span>
<span id="cb86-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt7.csv</span></span>
<span id="cb86-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ├── nyt8.csv</span></span>
<span id="cb86-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     └── nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>The <a href="https://dplyr.tidyverse.org/reference/group_map.html">help file on <code>group_walk()</code></a> gives an example with <code>purrr</code>’s formula syntax (which I’ve adapted below):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb87-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>   </span>
<span id="cb87-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_walk</span>( <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .x, </span>
<span id="cb87-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(.y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>),</span>
<span id="cb87-5">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>I’ve also re-written this as an anonymous function (which is more stable, since the formula syntax is no longer recommended).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now re-create</span></span>
<span id="cb88-2">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>)</span>
<span id="cb88-3">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb88-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>   </span>
<span id="cb88-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_walk</span>(\(x, y) </span>
<span id="cb88-6">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(</span>
<span id="cb88-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb88-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>),</span>
<span id="cb88-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb88-10">    )</span>
<span id="cb88-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check</span></span>
<span id="cb88-12">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv$"</span>)</span>
<span id="cb88-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/processed/</span></span>
<span id="cb88-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-12-16-nyt10.csv</span></span>
<span id="cb88-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-12-16-nyt11.csv</span></span>
<span id="cb88-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-12-16-nyt12.csv</span></span>
<span id="cb88-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-12-16-nyt13.csv</span></span>
<span id="cb88-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-12-16-nyt7.csv</span></span>
<span id="cb88-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ├── 2023-12-16-nyt8.csv</span></span>
<span id="cb88-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## └── 2023-12-16-nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>Once again, I’ll import the first file in the new processed data folder and check it against the columns <code>nyt1_proc_check_01</code> data to evaluate the differences.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now re-check</span></span>
<span id="cb89-2">nyt1_proc_check_02 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> proc_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the first file</span></span>
<span id="cb89-3">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb90-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_01),</span>
<span id="cb90-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_02), </span>
<span id="cb90-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_diffs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb90-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `old[8:11]`: "ctr_rate" "female" "file_nm" "proc_file_pth"</span></span>
<span id="cb90-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `new[8:10]`: "ctr_rate" "female" "file_nm"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
</section>
<section id="recap-purrr-and-iteration" class="level1">
<h1>Recap: <code>purrr</code> and iteration</h1>
<p>In this post I’ve covered iteration and some of the new additions to the <code>purrr</code> version 1.0. These include:</p>
<ol type="1">
<li><p><code>purrr::map_vec()</code> (replaces <code>map_raw()</code>)</p></li>
<li><p>Progress bars</p></li>
<li><p><code>purrr::list_rbind()</code> (replaces <code>map_dfr()</code>)</p></li>
<li><p>The experimental <code>dplyr::group_walk()</code> function</p></li>
</ol>
<p>For more information, check out the following:</p>
<ul>
<li><p><a href="https://purrr.tidyverse.org/"><code>purrr</code> package website</a></p></li>
<li><p><a href="https://r4ds.hadley.nz/iteration.html">Iteration chapter in R for data science</a></p></li>
<li><p><a href="https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/"><code>purrr</code> version 1.0 blog post</a> and <a href="https://www.youtube.com/watch?v=EGAs7zuRutY">video from Posit</a></p></li>
</ul>
<div style="font-size: 1.10em;">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
REACP: <code>purrr</code> syntax variations
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em;">
<p><strong>Standard</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define .x and .f</span></span>
<span id="cb91-2">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower)</span></code></pre></div>
</div>
<div style="font-size: 1.25em;">
<p><strong>Anonymous function</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># anonymous shorthand notation</span></span>
<span id="cb92-2">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))</span></code></pre></div>
</div>
<div style="font-size: 1.25em;">
<p><strong>Formula (deprecated)</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># written as normal expression</span></span>
<span id="cb93-2">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x))</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Iteration</category>
  <guid>https://mjfrigaard.github.io/posts/purrr1.0/</guid>
  <pubDate>Sun, 05 Feb 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/purrr1.0/image.png" medium="image" type="image/png" height="139" width="120"/>
</item>
</channel>
</rss>
