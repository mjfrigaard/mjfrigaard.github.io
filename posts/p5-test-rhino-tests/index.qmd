---
title: "Testing `rhino` apps" 
subtitle: "Part 4: Testing with `box` modules"
author: "Martin Frigaard"
date: "2024-01-24"
categories: [shiny, box, testing]
image: "rhino.png"
draft: true
toc: true
toc-depth: 5
toc-title: 'Contents'
toc-location: "left"
# code-block-border-left: true
code-block-bg: "#f8f8f8"
code-block-border-left: "#e8e8e8"
code-fold: show
code-summary: 'show/hide'
callout-icon: false

freeze: true

execute:
  echo: true
  message: false
  warning: false
  eval: false
---

```{r}
#| label: setup
#| eval: true 
#| echo: false 
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
```


```{r}
#| label: pkgs
#| eval: true
#| code-summary: packages
library(shiny)
library(shinytest2)
library(testthat)
library(rhino)
```


```{r}
#| label: co_box_test
#| eval: true
#| results: asis
#| echo: false
co_box(color = "r", 
  header = "Note", 
  contents = "
This post is under construction.
  ")
```

The [`rhino` framework](https://appsilon.github.io/rhino/index.html) from [Appsilon](https://appsilon.com/) introduces a novel method for developing your Shiny application. Unlike the `golem` and `leprechaun` frameworks, `rhino` applications are not built inside R packages.

The example `rhino` application we'll be using comes from my `moviesApp` repo covered in the [Shiny App-Packages](https://mjfrigaard.github.io/shiny-app-pkgs/) book (you can access this app using the [`shinypak` package](https://mjfrigaard.github.io/shinypak/) or directly from the [repo](https://github.com/mjfrigaard/moviesApp/tree/24_rhino)).

