---
title: "VS Code, meet Quarto." 
subtitle: "Quarto, say 'hello' to Python."
author: "Martin Frigaard"
date: "2024-05-30"
categories: [quarto, python, vscode]
image: "img/quarto-vscode-python.png"
toc: true
toc-depth: 5
toc-title: 'Contents'
toc-location: "left"
# code-block-border-left: true
code-block-bg: "#f8f8f8"
code-block-border-left: "#e8e8e8"
code-fold: show
code-summary: 'show/hide'
callout-icon: false
# draft: true

freeze: true

execute:
  echo: true
  message: false
  warning: false
  eval: false
---


```{r}
#| label: setup
#| eval: true 
#| echo: false 
#| include: false
source("https://raw.githubusercontent.com/mjfrigaard/sapkgs/mstsap/tests/testthat/helper.R")
source("../_common.R")
options(scipen = 999)
library(shiny)
library(lobstr)
library(crayon)
library(stringr)
# install.packages(c("NHANES", "palmerpenguins"))
library(NHANES)
library(palmerpenguins)
```

```{r}
#| label: co_box_dev
#| results: asis 
#| echo: false
#| eval: true
co_box(
  color = 'b',
  header = 'Note',
  size = "1.05",
  hsize = "1.10",
  fold = FALSE,
  look = 'simple',
  contents = "I've been developing more in Python lately, so I've decided to document some thoughts on adopting a new programming language, working with VS Code, and trying to use Python to solve some common problems I would previously solve with R."
)
```




## Background

I've been an avid R/RStudio (now Posit Workbench) user for over 15 years now, so a new IDE and programming language has taken some getting used to. This post covers setting up VS Code, potential sticky spots, learning pains, tips, and early successes. 

<!--
received my new copy of [Learning Data Science](https://learningds.org/intro.html) by Sam Lau, Joseph Gonzalez, and Deborah Nolan. The [code examples](https://github.com/DS-100/textbook/) are in Python, so I  
-->

## Install VS Code

:::: {layout="[75, 25]"}

If you haven’t already installed VS Code, download it from the [official website](https://code.visualstudio.com/) and follow the installation instructions for your operating system. After installing VS Code, you'll want to install the [Quarto extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) and [Python extension from Microsoft](https://marketplace.visualstudio.com/items?itemName=ms-python.python). 

![](img/vscode.jpeg){class="cover" width="450" fig-align="right"}

::::

![VS Code Start](img/vscode_start.png){fig-align='center' width='80%'}

Below we'll cover configuring your Quarto installation in VS Code.

<br>

## Install Quarto

:::: {layout="[25, 75]"}

![](img/quarto.png){class="cover" width="500" fig-align="right"}

Quarto can be downloaded and installed from its [official website](https://quarto.org/docs/get-started/). Follow the platform-specific instructions to install it on your system. Make sure Quarto has been installed correctly and is available in your system’s `PATH`.

::::

```{r}
#| label: co_box_macos
#| echo: false
#| results: asis
#| eval: true
co_box(color = "o", 
  size = "1.10", hsize = "1.15",
  header = "OS DISCLAIMER", 
  contents = "I'm using macOS Sonoma (14.4.1 (23E224)) with [Bash](https://www.gnu.org/software/bash/) and [iTerm2](https://iterm2.com/).")
```


Check if Quarto is on `PATH`:

```{bash}
#| eval: true
#| code-fold: show
#| code-summary: 'In Terminal'
quarto --version
```

If it isn't, you'll need to add the location of your quarto installation to `PATH`. You can do that with the commands below (depending on your shell).

For Bash (common in Linux and older macOS versions):

``` sh
echo 'export PATH="$PATH:/path/to/quarto"' >> ~/.bashrc
source ~/.bashrc
```

For Zsh (default in newer macOS versions):

``` sh
echo 'export PATH="$PATH:/path/to/quarto"' >> ~/.zshrc
source ~/.zshrc
```

You can also use `which` to locate quarto path: 

```{bash}
#| eval: true
#| code-fold: show
#| code-summary: 'In Terminal'
which quarto
```

On macOS, you can use `find` in the Terminal: 

``` sh
find / -name quarto 2>/dev/null
```

Now we'll cover installing Python and making sure VS Code and Quarto can find it.

<br>

## Install Python

::: {layout="[15, 85]"}

![](img/python-black.png){class="cover" width="375" fig-align="right"}

Installing python has always been a maze for me. I would find myself stuck on questions like, *'Do I use conda, miniconda, pip?'* *'Do I need to specify the version of pip (i.e., `pip3 install`)?'* *'What version of python do I have installed?'* *'Is it stored in `PATH`?'* The Python tutorial offered by VS Code clarified many of the issues I was having with Python. [^python-tutorial] 

:::

For example, I typically work on macOS, so I use Homebrew to install Python 3:

```{bash}
#| eval: false
#| code-fold: show
#| code-summary: 'In Terminal'
brew install python3
```

If you're using Homebrew, it's important to note the different locations for python installations. The `which` command is helpful here:

```{bash}
#| eval: true
#| echo: true
#| code-fold: show
#| code-summary: 'In Terminal'
which python3
```

`/usr/bin/python3` is the **system-managed Python installation**. It's minimal and less likely to change, and is intended to ensure stability.

### Python via Homebrew 

If you're using Homebrew to install Python, you'll probably notice there are other installations of Python in `/usr/local/bin`.[^usr-local-bin] I display these below using the `tree` command:

[^usr-local-bin]: `/usr/local/bin` is commonly used for user-installed software, separate from the system's default utilities.

```{bash}
#| eval: false
#| echo: true
#| code-fold: show
#| code-summary: 'In Terminal'
tree -P "python*" /usr/local/bin -L 2
# /usr/local/bin
# ├── python3 -> ../Cellar/python@3.12/3.12.3/bin/python3
# ├── python3-config -> ../Cellar/python@3.12/3.12.3/bin/python3-config
# ├── python3.12 -> ../Cellar/python@3.12/3.12.3/bin/python3.12
# └── python3.12-config -> ../Cellar/python@3.12/3.12.3/bin/python3.12-config
# 
# 1 directory, 4 files
```

The output above shows the files and the [symbolic links](https://linuxize.com/post/how-to-create-symbolic-links-in-linux-using-the-ln-command/) they are referencing. The links are pointing to the actual binaries located under the `../Cellar/python@3.12/` directory.[^homebrew-links] 

[^homebrew-links]: This is typical of Homebrew installations on macOS, where Homebrew installs software under `/usr/local/Cellar` and creates symlinks in `/usr/local/bin` for easy execution.

The symbolic links in `/usr/local/bin` are a modular approach to updating python. This is handy for user-installed environments where uninstallation or updates can be managed flexibly without disrupting the system's core functionality.

## Quarto Check

I highly recommend running `quarto check` to confirm Python and the other dependencies have been installed. I've provided the output from my setup and a brief description below: 

**`Quarto installation`** displays the path to the installation of the current Quarto version.

``` sh
Quarto 1.5.28
[✓] Checking versions of quarto binary dependencies...
      Pandoc version 3.1.11: OK
      Dart Sass version 1.70.0: OK
      Deno version 1.41.0: OK
      Typst version 0.10.0: OK
[✓] Checking versions of quarto dependencies......OK
[✓] Checking Quarto installation......OK
      Version: 1.5.28
      Path: /Applications/quarto/bin
```

**`tools`** checks for a [TinyTex](https://yihui.org/tinytex/) installation (and installs it if its not there), `Latex` confirms the installation of [LaTeX](https://www.latex-project.org/) or [TinyTex](https://yihui.org/tinytex/) and displays the path (in this case, the path to the TinyTex installation), and basic markdown rendering is confirmed.

``` sh
[✓] Checking tools....................OK
      TinyTeX: (external install)
      Chromium: 869685

[✓] Checking LaTeX....................OK
      Using: TinyTex
      Path: /Users/username/Library/TinyTeX/bin/universal-darwin
      Version: 2023

[✓] Checking basic markdown render....OK
```

**`Python 3 installation`** returns the python and jupyter versions, the python installation path, and kernels.

``` sh
[✓] Checking Python 3 installation....OK
      Version: 3.11.5 (Conda)
      Path: /Users/username/miniconda3/bin/python
      Jupyter: 5.7.2
      Kernels: python3

[✓] Checking Jupyter engine render....OK
```

Notice Quarto is using the python version installed in `/Users/username/miniconda3/bin/python`, not the `/usr/bin/python3` version above.

**`R installation`** checks all the R stuff (`LibPaths`, `knitr`, `rmarkdown`)

``` sh
[✓] Checking R installation...........OK
      Version: 4.3.2
      Path: /Library/Frameworks/R.framework/Resources
      LibPaths:
        - /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library
      knitr: 1.46
      rmarkdown: 2.26

[✓] Checking Knitr engine render......OK
```

## Python Interpreter

VS Code requires that we select a Python interpreter to run Python code. Do this by using the command palette (<kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd>). Below are the multiple Python interpreters I can select from on my machine:[^py-interpreter]

[^py-interpreter]: The path of the recommended interpreter is `~/pyenv/versions/3.9.15/bin/python`.

![Python interpreter](img/py_interpreter.png){fig-align='center' width='70%'}

If I run `which python3` in the terminal *inside* VS Code, I see the python version is stored in `/Users/username/.pyenv/versions/`:

```{bash}
#| eval: false
#| echo: true
#| code-fold: show 
#| code-summary: 'Inside VS Code Terminal'
which python3
# /Users/username/.pyenv/versions/3.9.15/bin/python3
```

But when I run `which python3` in a Terminal *outside* of VS Code, I see the following: 

```{bash}
#| eval: false
#| echo: true
#| code-fold: show 
#| code-summary: 'Outside VS Code (macOS Terminal)'
which python3
# /Users/username/miniconda3/bin/python3
```

The differences in Python versions when running `which python3` in the VS Code Terminal versus the macOS Terminal are due to distinct Python environments being picked up by each terminal session. This is a common situation caused by different environment settings, specifically the `PATH` environment variable, and potentially Python version management configurations. 

### VS Code (`pyenv`)

In the VS Code Terminal, `which python3` uses Python installed via [`pyenv`](https://github.com/pyenv/pyenv), a popular version management tool used to manage multiple Python versions. [`pyenv`](https://github.com/pyenv/pyenv?tab=readme-ov-file#how-it-works) is a simple Python version management tool that allows you to easily switch between multiple versions of Python. It focuses primarily on managing different versions of the Python interpreter.

Pyenv modifies the `PATH` to prioritize its versions of Python over system-installed versions (like the one stored in `/usr/bin/python3`).

```{bash}
#| eval: false 
#| echo: false
#| code-fold: false
quarto check
# [✓] Checking Python 3 installation....OK
#       Version: 3.9.15
#       Path: /Users/username/.pyenv/versions/3.9.15/bin/python3
#       Jupyter: 5.7.2
#       Kernels: python3
```

- **Python Version**: 3.9.15
- **Source**: Pyenv environment
- **Path**: `/Users/username/.pyenv/versions/3.9.15/bin/python3`

### macOS (`miniconda3`)

The output from `which python3` in the macOS terminal indicates it's using Python from a [Conda environment.](https://docs.anaconda.com/free/distro-or-miniconda/). [Miniconda](https://docs.anaconda.com/free/miniconda/) is a popular package, dependency, and environment management system which is typically used for scientific computing and data science, where managing complex dependencies is crucial. The miniconda environment has its own isolated directory, separate from the system-wide installations.

```{bash}
#| eval: false 
#| echo: false
#| code-fold: false
pwd 
# /Users/username/projects/methods/py-quarto-hello
quarto check
# [✓] Checking Python 3 installation....OK
#       Version: 3.11.5 (Conda)
#       Path: /Users/username/miniconda3/bin/python
#       Jupyter: 5.7.2
#       Kernels: python3
```

- **Python Version**: 3.11.5
- **Source**: Conda environment
- **Path**: `/Users/username/miniconda3/bin/python3`


The primary reason for the differences is how the `PATH` environment variable is set up in each terminal instance. VS Code’s terminal is configured to add the `pyenv` managed Python to the `PATH` ahead of the Conda managed version, resulting in the `pyenv` version being used when `which python3` is executed.

### Key Features 

| Feature                   | Pyenv                        | Miniconda          |
|---------------------------|-----------------------------|---------------------|
| Python Version Management | Yes                         | Yes                 |
| Virtual Environment       | Yes (with pyenv-virtualenv) | Yes                 |
| Package Management        | Basic (via pip)             | Advanced (via Conda)|
| Cross-Language Support    | No                          | Yes                 |
| Dependency Management     | Limited                     | Robust              |
| Ideal for Simple Projects | Yes                         | No                  |
| Ideal for Complex Projects| No                          | Yes                 |
| Multi-Language Support    | No                          | Yes                 |


#### Environment Management

::: {layout-ncol=2 layout-valign="top"}

**`miniconda`**: Generally creates and manages self-contained environments that include Python and other dependencies. It modifies the `PATH` within the shell it's activated in, which might be automatically configured in your standard macOS Terminal.

**`pyenv`**: Manages multiple Python versions by manipulating the PATH environment variable and does not concern itself with non-Python dependencies.

:::

## VS Code + Quarto + Python 

Now I can create the Quarto document (`hello.qmd`) following the introduction on the [Quarto website](https://quarto.org/docs/get-started/hello/vscode.html#render-and-preview), I end up with the following YAML header, python code, and output:

![Hello Quarto](img/vscode_hello_quarto.png){fig-align='center' width='90%'}

## More resources

[Rami Krispin](https://github.com/RamiKrispin) also has a great  [guide](https://github.com/RamiKrispin/vscode-python) for setting up Python and Docker in VS Code. The [Quick Start Guide for Python in VS Code](https://code.visualstudio.com/docs/python/python-quick-start) has a lot of information (and .gifs!). Eric Nantz also has a fantastic and thorough [Setting up my Quarto adventures!](https://youtu.be/XgzcNu-8HeM?si=bswcEvm4qUsni24K) video on the [Shiny Developer Series YouTube channel](https://www.youtube.com/@ShinyDeveloperSeries), too.

[^python-tutorial]: [Getting Started with Python in VS Code](https://code.visualstudio.com/docs/python/python-tutorial).


