<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>@mjfrigaard</title>
<link>https://mjfrigaard.github.io/</link>
<atom:link href="https://mjfrigaard.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Martin Frigaard&#39;s personal website</description>
<image>
<url>https://mjfrigaard.github.io/profile.png</url>
<title>@mjfrigaard</title>
<link>https://mjfrigaard.github.io/</link>
<height>109</height>
<width>144</width>
</image>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Wed, 24 Jan 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>Testing rhino apps</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p5-test-rhino-tests/</link>
  <description><![CDATA[ 





<div class="cell">
<details open="" class="code-fold">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinytest2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rhino)</span></code></pre></div>
</details>
</div>
<p>The <a href="https://appsilon.github.io/rhino/index.html"><code>rhino</code> framework</a> from <a href="https://appsilon.com/">Appsilon</a> introduces a novel method for developing your Shiny application. Unlike the <code>golem</code> and <code>leprechaun</code> frameworks, <code>rhino</code> applications are not built inside R packages.</p>
<p>The example <code>rhino</code> application we‚Äôll be using comes from my <code>moviesApp</code> repo covered in the <a href="https://mjfrigaard.github.io/shiny-app-pkgs/">Shiny App-Packages</a> book (you can access this app using the <a href="https://mjfrigaard.github.io/shinyap/"><code>shinyap</code> package</a> or directly from the <a href="https://github.com/mjfrigaard/moviesApp/branches/all">repo</a>).</p>



 ]]></description>
  <category>shiny</category>
  <category>box</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/p5-test-rhino-tests/</guid>
  <pubDate>Wed, 24 Jan 2024 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p5-test-rhino-tests/rhino.png" medium="image" type="image/png" height="166" width="144"/>
</item>
<item>
  <title>Shiny system tests with shinytest2</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p4-test-system-shiny/</link>
  <description><![CDATA[ 





<div class="cell">
<details open="" class="code-fold">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinytest2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(vdiffr)</span></code></pre></div>
</details>
</div>
<p>This is the fourth post in a <a href="https://mjfrigaard.github.io/series.html#testing-shiny-applications">series on testing</a> shiny applications. My previous posts have covered <a href="https://mjfrigaard.github.io/posts/test-shiny-p1/">unit testing utility functions</a> and <a href="https://mjfrigaard.github.io/posts/test-shiny-p3/">testing module server functions with <code>testServer()</code></a>. In this post, I‚Äôll be covering testing shiny applications using <code>testthat</code> and <code>shinytest2</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/image.svg" class="img-fluid" style="width:70.0%"></p>
</div></div><div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ALERT!
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; font-weight: bold; color: #696969;">
<p>This post is currently under development. Thank you for your patience.</p>
</div>
</div>
</div>
</div>
<section id="set-up" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="set-up">Set up</h2>
<p><a href="https://rstudio.github.io/shinytest2/index.html"><code>shinytest2</code></a> requires a few steps to get up and running, so I‚Äôve included my start up steps below (in hopes that someone might find them useful).</p>
<section id="chromium" class="level3">
<h3 class="anchored" data-anchor-id="chromium">Chromium</h3>
<p>First make sure you have <a href="https://www.chromium.org/chromium-projects/">Chromium headless browser</a> installed. Chromium is the browser used to test and debug shiny apps with <code>shinytest2</code>.</p>
<p>If you‚Äôre using macOS, you can install Chromium using <a href="https://formulae.brew.sh/cask/chromium">homebrew</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> chromium</span></code></pre></div>
</div>
<div class="cell">
<details class="code-fold">
<summary>show/hide output</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Downloading https://download-chromium.appspot.com/dl/Mac<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span>type=snapshots</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Downloading from https://commondatastorage.googleapis.com/chromium-browser-s</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################################################### 100.0%</span></span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Warning:</span> No checksum defined for cask <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromium'</span>, skipping verification.</span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Installing Cask chromium</span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Moving App <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chromium.app'</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Applications/Chromium.app'</span></span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Linking Binary <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromium.wrapper.sh'</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/usr/local/bin/chromium'</span></span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">üç∫</span>  chromium was successfully installed!</span></code></pre></div>
</details>
</div>
</section>
<section id="chromote" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="chromote"><span style="font-size: 1.20em"><code>chromote</code></span></h3>
<p>The <a href="https://rstudio.github.io/chromote/index.html"><code>chromote</code> package</a> allows R to open Chromium. I had to make sure R knew where to find the Chromium application (<a href="https://rstudio.github.io/chromote/#specifying-which-browser-to-use">this section helps</a>) by passing the path to the app to <code>Sys.setenv()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstudio/chromote"</span>, </span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">force =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(chromote)</span></code></pre></div>
</div>
<p>You can use <code>find_chrome()</code> to find your chrome app:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">chromote<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_chrome</span>()</span></code></pre></div>
</div>
<p><em>You can also locate the path to Chromium using by holding command <kbd>‚åò</kbd> and clicking on the application icon</em></p>
<p>Then set the <code>CHROMOTE_CHROME</code> environment variable to the <code>Chromium</code> path (<strong>make sure it‚Äôs not the path to <code>Chrome.app</code></strong>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CHROMOTE_CHROME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Applications/Chromium.app/Contents/MacOS/Chromium"</span>)</span></code></pre></div>
</details>
</div>
<p>Verify the Chromium app/<code>chromote</code> install with <code>ChromoteSession$new()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ChromoteSession<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb7-2">b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>()</span></code></pre></div>
</div>
<div class="page-columns page-full">
<div id="fig-chromium" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-chromium-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-chromium" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-chromium" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-chromium-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/chromium.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-chromium">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-chromium-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Chromium
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-chromium-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Chromium headless browser
</figcaption>
</figure>
</div>
</div>
<p>Great! Going through this step means <code>shinytest2</code>‚Äôs test recorder will (<em>should</em>) deploy when I‚Äôm recording tests.</p>
</section>
</section>
<section id="app-package-contents" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="app-package-contents">App-package contents</h2>
<p>I‚Äôve created <a href="https://github.com/mjfrigaard/msst2ap"><code>msst2ap</code></a> (i.e., <strong>M</strong>astering <strong>S</strong>hiny <strong>s</strong>hiny<strong>t</strong>est<strong>2</strong> <strong>a</strong>pp-<strong>p</strong>ackage) with <a href="https://r-pkgs.org/"><code>devtools</code> and <code>usethis</code></a>. It somewhat resembles an application using the <a href="https://engineering-shiny.org/"><code>golem</code> framework</a>, but with fewer opinions. You can download <code>msst2ap</code> <a href="https://github.com/mjfrigaard/msst2ap/archive/refs/heads/main.zip">here</a> or install it using the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mjfrigaard/msst2ap"</span>,</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">force =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb8-3">)</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(msst2ap)</span></code></pre></div>
</div>
<p>The applications in <code>msst2ap</code> can be run with the their standalone app functions.</p>
<section id="modules-apps" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="modules-apps">Modules &amp; apps</h3>
<p>The modules in <code>msst2ap</code> are from the <a href="https://mastering-shiny.org/scaling-modules.html">Modules chapter of Mastering Shiny</a>, with a few minor adjustments. These modules create namespaces for their inputs and outputs with the <code>shiny::NS()</code> function, which appends a second <code>id</code> string to each <code>inputId</code>/<code>outputId</code>.</p>
<p>Each standalone app also includes the output from <code>shiny::reactiveValuesToList()</code>:</p>
<ul>
<li><p>In the <code>ui</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for printing reactive values in application modules</span></span>
<span id="cb9-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span></code></pre></div>
</div></li>
<li><p>In the <code>server</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for printing reactive values in application modules</span></span>
<span id="cb10-2">output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb10-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb10-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb10-6">}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
</div></li>
</ul>
<section id="dataset-module" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="dataset-module"><span style="font-size: 1.15em"><code>dataset</code></span> module</h4>
<p>The <code>dataset</code> module displays the objects in the <code>datasets</code> package in a <code>selectInput()</code> according to a filter argument (i.e., <code>is.data.frame</code>, <code>is.matrix</code>, etc.).</p>
<p><code>datasetServer()</code> returns the selected object as a reactive value. Read more <a href="https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output">here</a>.</p>
<div class="cell">
<details class="code-fold">
<summary>datasetInput() &amp; datasetServer()</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">datasetInput <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb11-2">  names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(filter)) {</span>
<span id="cb11-5">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(names, get, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb11-6">    names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> names[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb11-7">  }</span>
<span id="cb11-8"></span>
<span id="cb11-9">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb11-10">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>),</span>
<span id="cb11-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pick a dataset"</span>,</span>
<span id="cb11-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> names)</span>
<span id="cb11-13">}</span>
<span id="cb11-14">datasetServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb11-15">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb11-16">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>))</span>
<span id="cb11-17">  })</span>
<span id="cb11-18">}</span></code></pre></div>
</details>
</div>
<section id="datasetapp" class="level5 page-columns page-full">
<h5 class="anchored" data-anchor-id="datasetapp"><span style="font-size: 1.10em"><code>datasetApp()</code></span></h5>
<div class="cell">
<details class="code-fold">
<summary>datasetApp()</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">datasetApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb12-2">  ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.data.frame),</span>
<span id="cb12-4">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>),</span>
<span id="cb12-5">    </span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for printing reactive values in application modules</span></span>
<span id="cb12-7">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb12-8">  )</span>
<span id="cb12-9">  server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb12-10">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>)</span>
<span id="cb12-11">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderTable</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb12-12">    </span>
<span id="cb12-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for printing reactive values in application modules</span></span>
<span id="cb12-14">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb12-15">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb12-16">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb12-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb12-18">    }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb12-19"></span>
<span id="cb12-20">  }</span>
<span id="cb12-21">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span>
<span id="cb12-22">}</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="fig-datasetApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-datasetApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/datasetApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-datasetApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>datasetApp()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: <code>datasetApp()</code> in <code>msst2ap</code>
</figcaption>
</figure>
</div>
</div>
</section>
<section id="reactive-values-vals" class="level5">
<h5 class="anchored" data-anchor-id="reactive-values-vals">Reactive values (<span style="font-size: 1.15em"><code>vals</code></span>)</h5>
<p>Below the table output in <code>datasetApp()</code>, the reactive values displays the <code>inputId</code> from <code>datasetInput()</code> and the namespace value from the shared <code>id</code> argument with <code>datasetServer()</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
</section>
</section>
<section id="selectvar-module" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="selectvar-module"><span style="font-size: 1.15em"><code>selectVar</code></span> module</h4>
<p>The <code>selectVar</code> module <a href="https://mastering-shiny.org/scaling-modules.html#case-study-selecting-a-numeric-variable">selects a numeric variable</a> the <code>data()</code> object returned from <code>datasetServer()</code>.</p>
<p>It has a single utility function (<code>find_vars()</code>) which is used to filter the columns (variables):</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide selectVarInput() &amp; selectVarServer()</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">selectVarInput <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb14-2">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb14-3">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>),</span>
<span id="cb14-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Variable"</span>,</span>
<span id="cb14-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb14-6">  )</span>
<span id="cb14-7">}</span>
<span id="cb14-8">selectVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb14-9">  </span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb14-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(filter))</span>
<span id="cb14-12"></span>
<span id="cb14-13">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb14-14"></span>
<span id="cb14-15">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb14-16">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(</span>
<span id="cb14-17">        session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>,</span>
<span id="cb14-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), filter))</span>
<span id="cb14-19">    }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-20">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>())</span>
<span id="cb14-21"></span>
<span id="cb14-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(</span>
<span id="cb14-23">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb14-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>())) {</span>
<span id="cb14-25">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]</span>
<span id="cb14-26">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb14-27">          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb14-28">        }</span>
<span id="cb14-29">      }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-30">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var)</span>
<span id="cb14-31">    )</span>
<span id="cb14-32"></span>
<span id="cb14-33">  })</span>
<span id="cb14-34">}</span></code></pre></div>
</details>
</div>
<p>I‚Äôve made a few small changes to <code>selectVarServer()</code>:</p>
<ul>
<li><p>In the original version, <code>input$var</code> is returned as a vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]])</span></code></pre></div>
</div></li>
<li><p>I‚Äôve added some validation and return <code>input$var</code> as a single column from <code>data()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb16-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>())) {</span>
<span id="cb16-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]</span>
<span id="cb16-4">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb16-5">        <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb16-6">    }</span>
<span id="cb16-7">  }) </span></code></pre></div>
</div></li>
<li><p>The <code>find_vars()</code> function is also below:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide find_vars()</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.vector) {</span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data))</span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(filter))</span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb17-5">}</span></code></pre></div>
</details>
</div></li>
</ul>
<section id="selectvarapp" class="level5 page-columns page-full">
<h5 class="anchored" data-anchor-id="selectvarapp"><span style="font-size: 1.10em"><code>selectVarApp()</code></span></h5>
<p>The <code>selectVarApp()</code> extends the <code>dataset</code> module by collecting the returned reactive value, passing it to <code>find_vars()</code>, and returning a single column.</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide selectVarApp()</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">selectVarApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb18-2">  ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb18-3">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, is.data.frame),</span>
<span id="cb18-4">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>),</span>
<span id="cb18-5">            shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"out"</span>),</span>
<span id="cb18-6">            shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb18-7">  )</span>
<span id="cb18-8">  server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb18-9"></span>
<span id="cb18-10">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb18-11">    var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> filter)</span>
<span id="cb18-12"></span>
<span id="cb18-13">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderTable</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>()))</span>
<span id="cb18-14"></span>
<span id="cb18-15">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb18-16">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb18-17">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb18-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb18-19">    })</span>
<span id="cb18-20">  }</span>
<span id="cb18-21"></span>
<span id="cb18-22">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span>
<span id="cb18-23">}</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="fig-selectVarApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-selectVarApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/selectVarApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-selectVarApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectVarApp()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: <code>selectVarApp()</code> in <code>msst2ap</code>
</figcaption>
</figure>
</div>
</div>
</section>
<section id="reactive-values-vals-1" class="level5">
<h5 class="anchored" data-anchor-id="reactive-values-vals-1">Reactive values (<span style="font-size: 1.15em"><code>vals</code></span>)</h5>
<p>The reactive values in <code>selectVarApp()</code> are displayed below the table:</p>
<div>

</div>
</section>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<section id="variables" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="variables">Variables</h5>
<ul>
<li><p>the 1st <code>var</code> is from the <code>inputId</code> in <code>selectVarInput()</code></p>
<pre><code>$`-var` </code></pre></li>
<li><p>the 2nd <code>var</code> is the shared namespace <code>id</code> from the <code>selectVar</code> module</p>
<pre><code>$`var-var` </code></pre></li>
</ul>
</section>
<section id="data" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="data">Data</h5>
<ul>
<li><p><code>dataset</code> is from the <code>inputId</code> in <code>datasetInput()</code></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div></li>
<li><p><code>data</code> is the shared namespace <code>id</code> from the <code>dataset</code> module</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div></li>
</ul>
</section>
</div>
</div>
</section>
<section id="selectdatavar-module" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="selectdatavar-module"><span style="font-size: 1.10em"><code>selectDataVar</code></span> module</h4>
<p><code>selectDataVar</code> is from the <a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules">Modules inside of modules</a> section, so true to form, both the <code>dataset</code> and <code>selectVar</code> modules are called inside of the UI and Server modules:</p>
<div class="cell">
<details class="code-fold">
<summary>selectDataVarUI() &amp; selectDataVarServer()</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">selectDataVarUI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb23-2">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetInput</span>(</span>
<span id="cb23-4">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>), </span>
<span id="cb23-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.data.frame),</span>
<span id="cb23-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarInput</span>(</span>
<span id="cb23-7">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>))</span>
<span id="cb23-8">  )</span>
<span id="cb23-9">}</span>
<span id="cb23-10">selectDataVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb23-11"></span>
<span id="cb23-12">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb23-13">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb23-14">    var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> filter)</span>
<span id="cb23-15">    var</span>
<span id="cb23-16"></span>
<span id="cb23-17">  })</span>
<span id="cb23-18">}</span></code></pre></div>
</details>
</div>
<section id="selectdatavarapp" class="level5 page-columns page-full">
<h5 class="anchored" data-anchor-id="selectdatavarapp"><span style="font-size: 1.15em"><code>selectDataVarApp()</code></span></h5>
<p>The <code>selectDataVarApp()</code> places the inputs in the <code>sidebarPanel()</code> and the outputs in the <code>mainPanel()</code>.</p>
<div class="cell">
<details class="code-fold">
<summary>selectDataVarApp()</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">selectDataVarApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb24-2">  ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb24-3">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb24-4">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb24-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarUI</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>)</span>
<span id="cb24-6">        ),</span>
<span id="cb24-7">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb24-8">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"out"</span>),</span>
<span id="cb24-9">        </span>
<span id="cb24-10">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb24-11">        )</span>
<span id="cb24-12">    )</span>
<span id="cb24-13">  )</span>
<span id="cb24-14">  server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb24-15">    var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, filter)</span>
<span id="cb24-16">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderTable</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>()))</span>
<span id="cb24-17"></span>
<span id="cb24-18">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb24-19">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb24-20">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb24-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb24-22">    })</span>
<span id="cb24-23"></span>
<span id="cb24-24">  }</span>
<span id="cb24-25">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span>
<span id="cb24-26">}</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="fig-selectDataVarApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-selectDataVarApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/selectDataVarApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-selectDataVarApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectDataVarApp()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: <code>selectDataVarApp()</code> in <code>msst2ap</code>
</figcaption>
</figure>
</div>
</div>
<p>The reactive values from <code>selectDataVarApp()</code> reflect the nested module structure:</p>
<div>

</div>
</section>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<section id="variables-1" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="variables-1">Variables</h5>
<ul>
<li><p>The first <code>var</code> belongs to the <code>inputId</code> in <code>selectVarInput()</code>,</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> </span></code></pre></div></li>
<li><p>the 2nd <code>var</code> is the shared namespace <code>id</code> from the <code>selectVar</code> module,</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div></li>
<li><p>the 3rd <code>var</code> is the call to the <code>selectVar</code> module <em>inside</em> <code>selectDataVar</code></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> </span>
<span id="cb27-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span></span></code></pre></div></li>
</ul>
</section>
<section id="data-1" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="data-1">Data</h5>
<ul>
<li><p><code>dataset</code> belongs to the <code>inputId</code> in <code>datasetInput()</code>,</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> </span></code></pre></div></li>
<li><p><code>data</code> is the shared namespace <code>id</code> from the <code>dataset</code> module,</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> </span></code></pre></div></li>
<li><p><code>var</code> is the call to the <code>dataset</code> module <em>inside</em> <code>selectDataVar</code></p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> </span>
<span id="cb30-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span></span></code></pre></div></li>
</ul>
</section>
</div>
</div>
</section>
<section id="histogram-module" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="histogram-module"><span style="font-size: 1.10em"><code>histogram</code></span> module</h4>
<p>The final modules and application I‚Äôll use from Mastering Shiny are from the <a href="https://mastering-shiny.org/scaling-modules.html#case-study-histogram">Case study: histogram</a> section. This application uses the existing <code>dataset</code> and <code>selectVar</code> modules to pass a single variable to the render a histogram:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide histogramOutput() &amp; histogramServer()</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">histogramOutput <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb31-2">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb31-3">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(</span>
<span id="cb31-4">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bins"</span>),</span>
<span id="cb31-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bins"</span>,</span>
<span id="cb31-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb31-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb31-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb31-9">    ),</span>
<span id="cb31-10">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plotOutput</span>(</span>
<span id="cb31-11">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>))</span>
<span id="cb31-12">  )</span>
<span id="cb31-13">}</span>
<span id="cb31-14">histogramServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram"</span>)) {</span>
<span id="cb31-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(x))</span>
<span id="cb31-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(title))</span>
<span id="cb31-17"></span>
<span id="cb31-18">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb31-19">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb31-20">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())</span>
<span id="cb31-21">        main <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ["</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>)</span>
<span id="cb31-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>()),</span>
<span id="cb31-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins,</span>
<span id="cb31-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> main</span>
<span id="cb31-25">        )</span>
<span id="cb31-26">      }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>)</span>
<span id="cb31-27"></span>
<span id="cb31-28">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb31-29">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())</span>
<span id="cb31-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>()))</span>
<span id="cb31-31">    })</span>
<span id="cb31-32">  })</span>
<span id="cb31-33">}</span></code></pre></div>
</details>
</div>
<p>I‚Äôve made some changes to the <code>histogramServer()</code> function (to accomodate the changes to the <code>selectVar</code> module).</p>
<ul>
<li><p>The original <code>renderPlot()</code> call in <code>histogramServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb32-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>()))</span>
<span id="cb32-3">    main <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ["</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>)</span>
<span id="cb32-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> main)</span>
<span id="cb32-5">  }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>)</span></code></pre></div>
</div></li>
<li><p>The updated <code>renderPlot()</code> call in <code>histogramServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb33-2">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())</span>
<span id="cb33-3">    main <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [bins ="</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>)</span>
<span id="cb33-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>()),</span>
<span id="cb33-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins,</span>
<span id="cb33-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> main)</span>
<span id="cb33-7">  }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>)</span></code></pre></div>
</div>
<ul>
<li><p>As you can see, <code>req()</code> is verifying <code>x()</code> exists, but doesn‚Äôt check it‚Äôs class with <code>is.numeric()</code>.</p></li>
<li><p><code>x()</code> is also passed to <code>purrr::as_vector()</code> before it‚Äôs plotted with <code>hist()</code></p></li>
</ul></li>
</ul>
<section id="histogramapp" class="level5 page-columns page-full">
<h5 class="anchored" data-anchor-id="histogramapp"><span style="font-size: 1.15em"><code>histogramApp()</code></span></h5>
<div class="cell">
<details class="code-fold">
<summary>histogramApp()</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">histogramApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb34-2">  ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb34-3">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb34-4">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb34-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, is.data.frame),</span>
<span id="cb34-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>),</span>
<span id="cb34-7">      ),</span>
<span id="cb34-8">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb34-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">histogramOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>),</span>
<span id="cb34-10">        </span>
<span id="cb34-11">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb34-12">      )</span>
<span id="cb34-13">    )</span>
<span id="cb34-14">  )</span>
<span id="cb34-15"></span>
<span id="cb34-16">  server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb34-17">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb34-18">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data)</span>
<span id="cb34-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">histogramServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>, x)</span>
<span id="cb34-20"></span>
<span id="cb34-21">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb34-22">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb34-23">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb34-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb34-25">    })</span>
<span id="cb34-26"></span>
<span id="cb34-27">  }</span>
<span id="cb34-28">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span>
<span id="cb34-29">}</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="fig-histogramApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dataStrApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dataStrApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/histogramApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-histogramApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dataStrApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>histogramApp()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: <code>histogramApp()</code> in <code>msst2ap</code>
</figcaption>
</figure>
</div>
</div>
</section>
<section id="reactive-values-vals-2" class="level5">
<h5 class="anchored" data-anchor-id="reactive-values-vals-2">Reactive values (<span style="font-size: 1.15em"><code>vals</code></span>)</h5>
<p>The displayed reactive values in <code>histogramApp()</code> are described below:</p>
<div>

</div>
</section>
<div class="quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<section id="plot" class="level5 quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="plot">Plot</h5>
<ul>
<li><p>The <code>inputId</code> from <code>histogramOutput()</code> and the shared namespace <code>id</code></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb35-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div></li>
</ul>
</section>
<section id="variables-2" class="level5 quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="variables-2">Variables</h5>
<ul>
<li><p>The <code>inputId</code> from <code>selectVarInput()</code> and the shared namespace <code>id</code></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb36-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span></span></code></pre></div></li>
</ul>
</section>
<section id="data-2" class="level5 quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="data-2">Data</h5>
<ul>
<li><p>The <code>inputId</code> from <code>datasetInput()</code> and the shared namespace <code>id</code></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> </span>
<span id="cb37-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span></span></code></pre></div></li>
</ul>
</section>
</div>
</div>
</section>
</section>
</section>
<section id="using-shinytest2" class="level2">
<h2 class="anchored" data-anchor-id="using-shinytest2">Using <span style="font-size: 1.20em"><code>shinytest2</code></span></h2>
<p><code>shinytest2</code> is extremely <a href="https://rstudio.github.io/shinytest2/index.html">well documentation</a>. I highly recommended the <a href="https://rstudio.github.io/shinytest2/articles/shinytest2.html">Get Started vignette</a>. In the next sections, I‚Äôll cover some examples for what I‚Äôve included in the <code>msst2ap</code>.</p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why <code>shinytest2</code>?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<p><strong>What happened to <code>shinytest</code>?</strong></p>
<p><code>shinytest2</code> replaced <code>shinytest</code> on 2022-04-27. If you‚Äôve previously written tests with <code>shinytest</code>‚Äìor are curious how <code>shinytest2</code> if different‚ÄìI recommend going through the <a href="https://cran.r-project.org/web/packages/shinytest2/vignettes/z-migration.html#:~:text">Migrating from <code>shinytest</code></a> vignette.</p>
</div>
</div>
</div>
</div>
<p>Run <code>shinytest2::use_shinytest2()</code> to create the initial files for <code>shinytest2</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">shinytest2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_shinytest2</span>()</span></code></pre></div>
</div>
<div class="cell">
<details class="code-fold">
<summary>show/hide output from use_shinytest2()</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Runner</span> already found: tests/testthat.R</span>
<span id="cb39-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> Adding <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shinytest2::load_app_env()'</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tests/testthat/setup-shinytest2.R'</span></span>
<span id="cb39-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> Adding <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*_.new.png'</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.gitignore'</span></span>
<span id="cb39-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> Adding <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_\\.new\\.png$'</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.Rbuildignore'</span></span>
<span id="cb39-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> Setting active project to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/projects/msst2ap'</span></span>
<span id="cb39-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> Adding <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shinytest2'</span> to Suggests field in DESCRIPTION</span>
<span id="cb39-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> Use <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">requireNamespace</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shinytest2"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> quietly = TRUE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)`</span> to test if package is installed</span>
<span id="cb39-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> Then directly refer to functions with <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinytest2::fun()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb39-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> Setting active project to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;no active project&gt;'</span></span></code></pre></div>
</details>
</div>
<ul>
<li><p><code>use_shinytest2()</code> adds the <code>setup-shinytest2.R</code> script to my <code>tests/testthat/</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/testthat/</span></span>
<span id="cb40-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> _snaps/</span>
<span id="cb40-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> setup-shinytest2.R</span></code></pre></div>
</div></li>
</ul>
<p>The <code>setup-shinytest2.R</code> file contains a single call to <code>shinytest2::load_app_env()</code>, which ‚Äú<em>Executes all <code>./R</code> files and <code>global.R</code> into the current environment</em>‚Äù</p>
</section>
<section id="recording-tests" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="recording-tests">Recording tests</h2>
<p>New tests with <a href="https://rstudio.github.io/shinytest2/index.html"><code>shinytest2</code></a> can be created by launching the test event recorder, which allows us interact with our application, observe it‚Äôs behavior, and record inputs, reactive values, and outputs. To record a test, run <code>shinytest2::record_test()</code>.</p>
<p>The first argument in <code>record_test()</code> is the path to application. If you‚Äôve stored your application in an <code>app.R</code> file, <code>record_test()</code> will automatically load that application.</p>
<ul>
<li><p>If you encounter a message telling you <a href="https://github.com/rstudio/shinytest2/issues/331">Chromium is disconnected</a>, try installing the development version of <code>chromote</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run this in the console to make sure you have dev version of chromote</span></span>
<span id="cb41-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstudio/chromote"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">force =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(chromote)</span></code></pre></div>
</div></li>
</ul>
<p>In <code>msst2ap</code>, the application in <code>app.R</code> is the <code>histogramApp()</code>, so the test recorder will automatically open with this application if I run <code>record_test()</code> (without providing the path to a <code>shiny</code> app).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">shinytest2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">record_test</span>()</span></code></pre></div>
</div>
<section id="in-chromium" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="in-chromium">In Chromium</h3>
<div class="page-columns page-full">
<div id="fig-record_test_histogramApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-record_test_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-record_test_histogramApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-record_test_histogramApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-record_test_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/record_test_histogramApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-record_test_histogramApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-record_test_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) shinytest2::record_test()
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-record_test_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: <code>record_test()</code> with application in <code>app.R</code>
</figcaption>
</figure>
</div>
</div>
<p>The <code>app</code> argument can also be a ‚Äú<em>path to a Shiny application</em>‚Äù. For example, I have ‚Äòdevelopment‚Äô versions of each application in <code>msst2ap</code> in <a href="https://github.com/mjfrigaard/msst2ap/tree/main/inst/dev"><code>inst/dev/</code></a>:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide contents of msst2ap/inst/dev</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">inst/dev</span></span>
<span id="cb43-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> datasetApp</span>
<span id="cb43-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ DESCRIPTION</span>
<span id="cb43-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ R</span>
<span id="cb43-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R</span>
<span id="cb43-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ README.md</span>
<span id="cb43-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ app.R</span>
<span id="cb43-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> histogramApp</span>
<span id="cb43-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ DESCRIPTION</span>
<span id="cb43-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ R</span>
<span id="cb43-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R</span>
<span id="cb43-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ README.md</span>
<span id="cb43-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ app.R</span>
<span id="cb43-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> selectDataVarApp</span>
<span id="cb43-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ DESCRIPTION</span>
<span id="cb43-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ R</span>
<span id="cb43-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îÇ   ‚îî‚îÄ‚îÄ modules.R</span>
<span id="cb43-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ README.md</span>
<span id="cb43-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ app.R</span>
<span id="cb43-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> selectVarApp</span>
<span id="cb43-21">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> DESCRIPTION</span>
<span id="cb43-22">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> R</span>
<span id="cb43-23">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ modules.R</span>
<span id="cb43-24">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> README.md</span>
<span id="cb43-25">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> app.R</span>
<span id="cb43-26"></span>
<span id="cb43-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">9</span> directories, 16 files</span></code></pre></div>
</details>
</div>
<p>I can pass the path to each application to the <code>app</code> argument in <code>record_test()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">shinytest2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">record_test</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inst/dev/histogramApp/"</span>)</span></code></pre></div>
</div>
<p>This opens Chromium with our shiny app:</p>
<div class="page-columns page-full">
<div id="fig-record_test_datasetApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-record_test_datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-record_test_datasetApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-record_test_datasetApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-record_test_datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/record_test_histogramApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-record_test_datasetApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-record_test_datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) record_test(‚Äúinst/dev/histogramApp/‚Äù)
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-record_test_datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: <code>record_test()</code> with app in <code>inst/dev/histogramApp/</code> folder
</figcaption>
</figure>
</div>
</div>
<p>The test event recorder displays the <code>shiny</code> app, but also includes a window for recording each application ‚Äòevent.‚Äô</p>
<section id="expectations" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="expectations">Expectations</h4>
<p>I‚Äôll start by recording a test for <code>histogramApp()</code>. On the right-hand side of the Chromium headless browser, you‚Äôll see the <strong><code>shinytest2</code> expectations</strong> window:</p>
<div class="page-columns page-full">
<div id="fig-shinytest2-expectations" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-shinytest2-expectations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-shinytest2-expectations" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-expectations" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-expectations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/shinytest2-expectations.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-shinytest2-expectations">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-expectations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>shinytest2</code> expectations
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-shinytest2-expectations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: <code>shinytest2</code> expectations in <code>record_test()</code>
</figcaption>
</figure>
</div>
</div>
<p>The initial value in the <strong>Code</strong> window displays the dimensions of the application in Chromium (<code>app$set_window_size(width = , height = )</code>).</p>
</section>
<section id="events" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="events">Events</h4>
<p>When I interact with the application (i.e., make changes to the inputs), each change is an ‚Äòevent‚Äô that is recorded in the test:</p>
<div class="page-columns page-full">
<div id="fig-chromium" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-chromium-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-chromium" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-change-values-shinytest2" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-change-values-shinytest2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/shinytest2-change-inputs.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-chromium">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-change-values-shinytest2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) change inputs
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-chromium-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Changing app inputs
</figcaption>
</figure>
</div>
</div>
</section>
<section id="code" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="code">Code</h4>
<p>All events are recorded as code in the <strong>Code</strong> section of <strong><code>shinytest2</code> expectations</strong>:</p>
<div class="page-columns page-full">
<div id="fig-shinytest2-code-expectations" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-shinytest2-code-expectations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-shinytest2-code-expectations" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-shinytest2-expectations-code" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-shinytest2-expectations-code-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/shinytest2-expectations-code.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-shinytest2-code-expectations">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-shinytest2-expectations-code-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) shinytest2 code expectations
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-shinytest2-code-expectations-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Recorded code for each event
</figcaption>
</figure>
</div>
</div>
</section>
<section id="expect-shiny-values" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="expect-shiny-values">Expect Shiny values</h4>
<p>When I‚Äôve finished interacting with the application, I click on the <strong>Expect Shiny values</strong> button at the top of <strong><code>shinytest2</code> expectations</strong>. This will add <code>app$expect_values()</code> to the <strong>Code</strong> section:</p>
<div class="page-columns page-full">
<div id="fig-expect-shiny-values" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-expect-shiny-values-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-expect-shiny-values" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-expect-shiny-values" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-expect-shiny-values-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/shinytest2-expect-shiny-values.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-expect-shiny-values">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-expect-shiny-values-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) expect-shiny-values
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-expect-shiny-values-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: <strong>Expect Shiny values</strong> in <code>shinytest2</code> expectations
</figcaption>
</figure>
</div>
</div>
</section>
<section id="save-test-and-exit" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="save-test-and-exit">Save test and exit</h4>
<p>Finally, to save the test, enter a <strong>Test name</strong> and click <strong>Save test and exit</strong></p>
<div class="page-columns page-full">
<div id="fig-name-save-exit" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-name-save-exit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-name-save-exit" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-shinytest2-name-save" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-shinytest2-name-save-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/shinytest2-name-save.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-name-save-exit">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-shinytest2-name-save-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) name-save-exit
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-name-save-exit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;12: Name, save and exit <code>record_test()</code>
</figcaption>
</figure>
</div>
</div>
</section>
</section>
<section id="in-console" class="level3">
<h3 class="anchored" data-anchor-id="in-console">In Console</h3>
<p>Back in the <strong>Console</strong>, the <code>shinytest2</code> test recorder is performing the following actions behind the scenes:</p>
<ul>
<li><p>The Chromium headless browser opens with the <code>histogramApp()</code> and <code>shiny</code> is loaded</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb45-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Listening</span> on http://127.0.0.1:7418</span>
<span id="cb45-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">{shiny}</span> R stderr <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span> Loading required package: shiny</span></code></pre></div>
</div></li>
<li><p><span style="font-size: 1.20em"><strong><code>Warning</code></strong></span>: The first warning is a caused by the call to <code>shiny::loadSupport()</code>. It‚Äôs a <a href="https://github.com/rstudio/shinytest2/issues/264#issuecomment-1251422788">known issue</a>, so we can assume the developers are working on it!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb46-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Warning</span> message:</span>
<span id="cb46-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">In</span> shiny::loadSupport<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app_dir,</span> renv = renv, globalrenv = globalrenv<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb46-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loading</span> R/ subdirectory for Shiny application, but this directory appears to</span>
<span id="cb46-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">contain</span> an R package. Sourcing files in R/ may cause unexpected behavior.</span></code></pre></div>
</div></li>
<li><p>We are told the application is being run in <a href="https://rstudio.github.io/shinytest2/reference/AppDriver.html#test-mode"><code>test mode</code></a>, which ‚Äò<em>lets the <code>AppDriver</code> retrieve values</em>‚Äô from the app</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb47-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">{shiny}</span> R stderr <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span> Running application in test mode.</span>
<span id="cb47-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">{shiny}</span> R stdout <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-----------</span> ‚Ñπ Loading msst2ap</span></code></pre></div>
</div></li>
<li><p><span style="font-size: 1.20em"><strong><code>Warning</code></strong></span>: The <code>tests/testthat.R</code> file (i.e., the ‚Äòtest runner‚Äô) was overwritten and tests are now run with <code>shinytest2::test_app()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb48-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Warning:</span> Overwriting test runner tests/testthat.R with <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinytest2::test_app()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb48-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">call</span> to ensure proper a testing environment.</span></code></pre></div>
</div></li>
<li><p>When I clicked ‚Äú<strong>Save test and exit</strong>‚Äù, the changes made to <code>tests/testthat.R</code> and <code>tests/testthat/test-shinytest2.R</code> are saved:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb49-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> Saving test runner: tests/testthat.R</span>
<span id="cb49-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> Saving test file: tests/testthat/test-shinytest2.R</span></code></pre></div>
</div></li>
<li><p>A call to <code>shinytest2::load_app_env()</code> is added to <code>setup-shinytest2.R</code> and the test file (<code>tests/testthat/test-shinytest2.R</code>) is opened:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb50-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> Adding <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shinytest2::load_app_env()'</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tests/testthat/setup-shinytest2.R'</span></span>
<span id="cb50-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> Modify <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/projects/msst2ap/tests/testthat/test-shinytest2.R'</span></span></code></pre></div>
</div></li>
<li><p>The new test is saved in the <code>tests/testthat/test-shinytest2.R</code> file and automatically run.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb51-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> Running recorded test: tests/testthat/test-shinytest2.R</span></code></pre></div>
</div></li>
</ul>
</section>
</section>
<section id="test-contents" class="level2">
<h2 class="anchored" data-anchor-id="test-contents">Test contents</h2>
<p>The contents of the test file generated from the test recorder are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinytest2)</span>
<span id="cb52-2"></span>
<span id="cb52-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2} recording: histogramApp"</span>, {</span>
<span id="cb52-4">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogramApp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">657</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1069</span>)</span>
<span id="cb52-5">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb52-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"privileges"</span>)</span>
<span id="cb52-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb52-8">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb52-9">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb52-10">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb52-11">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb52-12">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_values</span>()</span>
<span id="cb52-13">})</span></code></pre></div>
</div>
<p>The new test file is automatically run when I exit the test recorder (as noted above), but I can also do this by clicking on <strong>Run Test</strong> or by using <code>test_file()</code> from <code>testthat</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-shinytest2.R"</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="WARNING">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
WARNING
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #000000;">
<p>Because <code>msst2ap</code> is a package, running tests with <code>shinytest2</code> will produce the warning below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/run_tests_out.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption><code>shiny::loadSupport()</code> warning</figcaption>
</figure>
</div>
<p>As noted above, this warning is <a href="https://github.com/rstudio/shinytest2/issues/264#issuecomment-1251422788">known by the <code>shinytest2</code> package authors</a> and is being addressed in a future release.</p>
</div>
</div>
</div>
</div>
<p>Now that I know the first <code>shinytest2</code> test is passing, I‚Äôll dive into each line in the test.</p>
<section id="appdriver" class="level3">
<h3 class="anchored" data-anchor-id="appdriver"><span style="font-size: 1.15em"><code>AppDriver</code></span></h3>
<p><code>shinytest2</code> uses the <a href="https://rstudio.github.io/shinytest2/reference/AppDriver.html"><code>AppDriver</code></a> to create ‚Äú<em>a full simulation of a Shiny app</em>‚Äù. When recording tests, this will be the first argument (along with the <code>name</code> of the <code>.png</code> and <code>.json</code> snapshot <code>testthat</code> files, and the <code>height</code> and <code>width</code> of the <a href="https://rstudio.github.io/chromote/reference/ChromoteSession.html"><code>ChromoteSession</code></a>).</p>
<ul>
<li><p>The example from the test above is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"> app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogramApp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">657</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1069</span>)</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="set_inputs" class="level3">
<h3 class="anchored" data-anchor-id="set_inputs"><span style="font-size: 1.15em"><code>set_inputs()</code></span></h3>
<p>When recording <code>shinytest2</code> tests, every change to the applications inputs will result in a call to <code>app$set_inputs()</code>. This function is similar to the <code>testServer()</code> call to <code>session$setInputs()</code> (i.e., the inputs are provided as ‚Äú<em>name-value pairs</em>‚Äù, i.e., <code>inputId</code> = <code>"value"</code>).</p>
<ul>
<li><p>In the <code>histogramApp()</code>, these are provided with the appended namespaces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb55-2">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"privileges"</span>)</span>
<span id="cb55-3">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb55-4">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb55-5">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb55-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb55-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="expect_values" class="level3">
<h3 class="anchored" data-anchor-id="expect_values"><span style="font-size: 1.15em"><code>expect_values()</code></span></h3>
<p><a href="https://rstudio.github.io/shinytest2/articles/in-depth.html#making-expectations">The documentation</a> on <code>expect_values()</code> is definitely worth reading. <code>expect_values()</code> is added to the test file when <strong>Expect Shiny values</strong> is clicked in the test recorder and ‚Äú<em>creates a list of values and compares them to the current values of the application</em>.‚Äù</p>
<ul>
<li><p><code>expect_values()</code> = ‚Äú<em>Expect all <code>input</code>, <code>output</code>, and <code>export</code> values are consistent</em>‚Äù</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_values</span>()</span></code></pre></div>
</div></li>
</ul>
</section>
</section>
<section id="test-results" class="level2">
<h2 class="anchored" data-anchor-id="test-results">Test results</h2>
<p>The results from running the new test file (<code>test-shinytest2.R</code>) are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb57-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> Running recorded test: tests/testthat/test-shinytest2.R</span>
<span id="cb57-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">F</span> W S  OK <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Context</span></span>
<span id="cb57-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úî</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span>     1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shinytest2</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">6.3s</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>                                             </span>
<span id="cb57-4"></span>
<span id="cb57-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span></span>
<span id="cb57-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Warning</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test-shinytest2.R:12:3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> {shinytest2} recording: histogramApp</span>
<span id="cb57-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Adding</span> new file snapshot: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tests/testthat/_snaps/histogramApp-001_.png'</span></span>
<span id="cb57-8"></span>
<span id="cb57-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Warning</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test-shinytest2.R:12:3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> {shinytest2} recording: histogramApp</span>
<span id="cb57-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Adding</span> new file snapshot: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tests/testthat/_snaps/histogramApp-001.json'</span></span>
<span id="cb57-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span></span>
<span id="cb57-12"></span>
<span id="cb57-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚ïê‚ïê</span> Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</span>
<span id="cb57-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Duration:</span> 6.7 s</span>
<span id="cb57-15"></span>
<span id="cb57-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 1 ]</span></code></pre></div>
</div>
<p>Two warnings are displayed because the test adds two new files to the <code>tests/testthat/_snaps/</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb58-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/testthat/_snaps/</span></span>
<span id="cb58-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> shinytest2</span>
<span id="cb58-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> histogramApp-001.json</span>
<span id="cb58-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> histogramApp-001_.png</span>
<span id="cb58-5"></span>
<span id="cb58-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 2 files</span></code></pre></div>
</div>
<p>These are the files new test runs will be compared against (i.e., our ‚Äòbaseline‚Äô snapshots). I‚Äôll briefly cover their contents below:</p>
<section id="snaps" class="level3">
<h3 class="anchored" data-anchor-id="snaps"><span style="font-size: 1.15em"><code>_snaps</code></span></h3>
<p><code>expect_values()</code> generates two snapshot files in the <code>tests/testthat/_snaps/</code> folder: one <code>.png</code> and one <code>.json</code> file:</p>
<section id="png" class="level4">
<h4 class="anchored" data-anchor-id="png"><span style="font-size: 1.20em"><code>.png</code></span></h4>
<p>The image saved in <code>tests/testthat/_snaps/histogramApp-001_.png</code> is below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/histogramApp-001_.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The image is a little grainy and hard to see, but it shows the changed dataset and variable values (<strong><code>attitude</code></strong> and <strong><code>privileges</code></strong>).</p>
</section>
<section id="json" class="level4">
<h4 class="anchored" data-anchor-id="json"><span style="font-size: 1.20em"><code>.json</code></span></h4>
<p>The <code>.json</code> file saved in <code>tests/testthat/_snaps/histogramApp-001.json</code> contains the snapshot <code>input</code>s, <code>output</code>s, and <code>export</code>s:</p>
<ul>
<li><p>The inputs show the three changed values (<code>"data-dataset"</code>, <code>"var-var"</code>, and <code>"hist-bins"</code>).</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide snapshot inputs</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb59-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb59-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb59-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-dataset"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>,</span>
<span id="cb59-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-bins"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 15,</span>
<span id="cb59-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var-var"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"privileges"</span></span>
<span id="cb59-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span></code></pre></div>
</details>
</div></li>
</ul>
<p>The two outputs are stored in <code>"hist-hist"</code> and <code>"vals"</code>:</p>
<ul>
<li><p><code>"hist-hist"</code> holds the updated image (stored in the <code>image data hash</code>), along with various other characteristics of the plot:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide snapshot outputs</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb60-1">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-hist"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-3">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[image data hash: fde4089afc06a814d75c627b823d0806]"</span>,</span>
<span id="cb60-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 682.6640625,</span>
<span id="cb60-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 400,</span>
<span id="cb60-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alt"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plot object"</span>,</span>
<span id="cb60-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coordmap"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panels"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> [</span>
<span id="cb60-9">          <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb60-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"domain"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-11">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 27.8,</span>
<span id="cb60-12">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 87.2,</span>
<span id="cb60-13">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-0.24,</span></span>
<span id="cb60-14">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 6.24</span>
<span id="cb60-15">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb60-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"range"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-17">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 78.79664956011726,</span>
<span id="cb60-18">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 642.3048029692084,</span>
<span id="cb60-19">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 301.08,</span>
<span id="cb60-20">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 77.71999999999998</span>
<span id="cb60-21">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb60-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-23">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> null,</span>
<span id="cb60-24">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> null</span>
<span id="cb60-25">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb60-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mapping"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-27"></span>
<span id="cb60-28">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb60-29">          <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb60-30">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb60-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dims"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb60-32">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 682.6640625,</span>
<span id="cb60-33">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> 400</span>
<span id="cb60-34">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb60-35">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb60-36">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span></span></code></pre></div>
</details>
</div></li>
<li><p><code>"vals"</code> contains the reactive values from <code>reactiveValuesToList()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide snapshot outputs</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb61-1">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">hist-bins</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\n[1] 15\n\n$</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">var-var</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\n[1] </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">privileges</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n$</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">data-dataset</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\n[1] </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">attitude</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\n"</span></span>
<span id="cb61-2">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span></span></code></pre></div>
</details>
</div></li>
<li><p>I didn‚Äôt export any values in this test, so <code>"export"</code> is empty:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide snapshot outputs</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb62-1">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb62-2"></span>
<span id="cb62-3">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb62-4"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
<ul>
<li><em>I‚Äôll cover this in a later test.</em></li>
</ul></li>
</ul>
</section>
<section id="namespaces" class="level4">
<h4 class="anchored" data-anchor-id="namespaces">Namespaces</h4>
<p>The contents of the <code>.json</code> snapshot should look <em>somewhat</em> familiar for the three modules contained in <code>histogramApp()</code>:</p>
<ul>
<li><p>For example, the <code>inputId</code> for <code>"dataset"</code> in the <code>datasetInput/Server</code> module communicates between the UI and server using the shared <code>id</code> argument <code>"data"</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in datasetInput()</span></span>
<span id="cb63-2">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb63-3">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset"</span>),</span>
<span id="cb63-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pick a dataset"</span>,</span>
<span id="cb63-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> names)</span>
<span id="cb63-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in histogramApp()</span></span>
<span id="cb63-7">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb63-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, is.data.frame)</span>
<span id="cb63-9">      )</span></code></pre></div>
</div></li>
<li><p>This creates the <code>$`data-dataset`</code> output we see the <code>verbatimTextOutput()</code> at the bottom of the application:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb64-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">data-dataset</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb64-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span></span></code></pre></div>
</div></li>
<li><p>In the <code>.json</code> snapshot, this <code>inputId</code> is represented in the following <code>"input"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb65-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb65-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb65-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-dataset"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>,</span>
<span id="cb65-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span></code></pre></div>
</div></li>
</ul>
<p>Namespaces and <code>inputId</code>s will come up again if you start writing your own tests, which I‚Äôll cover below.</p>
</section>
</section>
</section>
<section id="writing-tests" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="writing-tests">Writing tests</h2>
<p>The great thing about testing with <code>shinytest2</code> is the ability to interact with the <code>AppDriver</code> as you write tests. I‚Äôll demo writing a test for the <code>datasetApp()</code> by adapting the contents of <code>test-shinytest2.R</code> into a new <code>test-shinytest2-datasetApp.R</code> file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb66-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tests/testthat/</span></span>
<span id="cb66-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> _snaps/</span>
<span id="cb66-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ shinytest2/</span>
<span id="cb66-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îú‚îÄ‚îÄ histogramApp-001.json</span>
<span id="cb66-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îî‚îÄ‚îÄ histogramApp-001_.png</span>
<span id="cb66-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> setup-shinytest2.R</span>
<span id="cb66-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> test-shinytest2-datasetApp.R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>- new test file!</span>
<span id="cb66-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> test-shinytest2.R</span>
<span id="cb66-9"></span>
<span id="cb66-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> directories, 5 files</span></code></pre></div>
</div>
<p>In the new test <code>test-shinytest2-datasetApp.R</code> file, I‚Äôll start with a call to <code>testthat::test_that(),</code> then create a new <code>app</code> object with the Chromium headless browser.</p>
<p>The namespaced standalone app function can be used to create a <code>ds_app</code> object, then <code>ds_app</code> is passed to the first argument of <code>AppDriver$new()</code> (I‚Äôve adjusted the <code>height</code> and <code>weight</code> to fit the <code>datasetApp()</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb67-2">  ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> msst2ap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb67-3">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb67-4">})</span></code></pre></div>
</div>
<p>In the <strong>Console</strong>, I can use <code>app$view()</code> to open the Chromium browser:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>()</span></code></pre></div>
</div>
<div class="page-columns page-full">
<div id="fig-app_view" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/app_view.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-app_view">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;13: View application with <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
<p>Chromium displays the same app I see when I run <code>msst2ap::datasetApp()</code> in the console, but the headless browser has some additional developer tools (<a href="https://www.browserstack.com/guide/difference-between-chrome-and-chromium">read more</a>).</p>
<section id="setting-inputs" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="setting-inputs">Setting inputs</h3>
<p>If I continue to adapt each line in <code>test-shinytest2.R</code> to the <code>datasetApp()</code>, I see that next lines set the <code>inputId</code>s for <code>dataset-dataset</code> to the <code>attitude</code> dataset with <code>app$set_input()</code> (<em>Note that this uses the module notation above (i.e., <code>"id-inputId"</code></em>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb69-2">  ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> msst2ap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb69-3">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb69-4">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb69-5">})</span></code></pre></div>
</div>
<p>If you can see both windows, you‚Äôll see the application values change in the Chromium browser:</p>
<div class="page-columns page-full">
<div id="fig-set_inputs" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-set_inputs" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_set_inputs" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/app_set_inputs.png" class="img-fluid figure-img column-page-right" data-ref-parent="fig-set_inputs">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>app$set_inputs()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-set_inputs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;14: Set application inputs with <code>app$set_inputs()</code>
</figcaption>
</figure>
</div>
</div>
</section>
<section id="checking-inputs" class="level3">
<h3 class="anchored" data-anchor-id="checking-inputs">Checking inputs</h3>
<p>In the previous test, I used the <code>expect_values()</code> to capture a list of all the app values (<code>input</code>, <code>output</code>, <code>export</code>). I can also capture these values in a list <em>inside</em> the test by including a call to <code>app$get_values()</code> and assigning the output to <code>app_values</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb70-2">  ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> msst2ap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb70-3">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb70-4">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb70-5">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb70-6">})</span></code></pre></div>
</div>
<p><code>app_values</code> has a similar structure to the <code>.json</code> snapshot covered above (i.e., with <code>input</code>, <code>output</code>, and <code>export</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(app_values)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb72-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">List</span> of 3</span>
<span id="cb72-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> input :List of 1</span>
<span id="cb72-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">..$</span> dataset-dataset: chr <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span></span>
<span id="cb72-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> output:List of 2</span>
<span id="cb72-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">..$</span> data: chr <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;table  class = 'table shiny-table table- "</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__truncated__</span></span>
<span id="cb72-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">..$</span> vals: chr <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\n[1] </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">attitude</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\n"</span></span>
<span id="cb72-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> export: Named list<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>I can narrow the scope of the test by using <code>app_values</code> to verify only the <code>input</code> that was changed with <code>app$set_inputs()</code>::</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb73-2">  ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> msst2ap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb73-3">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb73-4">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb73-5">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb73-6">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb73-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb73-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb73-9">})</span></code></pre></div>
</div>
<p>At the end of the test, I‚Äôll add a call <a href="https://rstudio.github.io/shinytest2/articles/zzz-faq.html#should-i-manually-shut-down-my-appdriver"><code>app$stop()</code></a> to close the Chromium app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: datasetApp"</span>, {</span>
<span id="cb74-2">  ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> msst2ap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb74-3">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb74-4">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb74-5">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb74-6">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb74-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb74-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attitude"</span>)</span>
<span id="cb74-9">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>()</span>
<span id="cb74-10">})</span></code></pre></div>
</div>
</section>
<section id="running-tests" class="level3">
<h3 class="anchored" data-anchor-id="running-tests">Running tests</h3>
<p>I‚Äôll save the <code>test-shinytest2-datasetApp.R</code> file and run the test with <code>testthat::test_file()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-shinytest2-datasetApp.R"</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="WARNING">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
WARNING
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #000000;">
<p>If you encounter the error message below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb76-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 0 ]</span>
<span id="cb76-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> : Chromote: timed out waiting for response to command Target.createTarget</span>
<span id="cb76-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 0 ]</span>
<span id="cb76-4"></span>
<span id="cb76-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÄ‚îÄ</span> Skipped tests <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span></span>
<span id="cb76-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä¢</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shinytest2::AppDriver</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span> can not be initialized as {chromote} can not be </span>
<span id="cb76-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">started</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> test-shinytest2-selectVarApp.R:4:3</span></code></pre></div>
</div>
<p>Try installing and loading <code>chromote</code> and <code>shinytest2</code> again (this seemed to work for me).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstudio/chromote"</span>, </span>
<span id="cb77-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">force =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb77-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(chromote)</span>
<span id="cb77-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinytest2)</span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<p>In the initial run of the test for <code>datasetApp()</code>, no snapshot files are generated because the test didn‚Äôt include a call to <code>app$export_values()</code>.</p>
<p>I see this initial test passes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb78-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 1 ]</span></code></pre></div>
</div>
</section>
</section>
<section id="exporting-test-values" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="exporting-test-values">Exporting test values</h2>
<p>The <code>shinytest2</code> documentation <a href="https://rstudio.github.io/shinytest2/articles/in-depth.html#exported-values">repeatedly</a> <a href="https://rstudio.github.io/shinytest2/articles/robust.html#exported-values">recommends</a> exporting test values from shiny applications with <code>shiny::exportTestValues()</code>.</p>
<section id="exporttestvalues" class="level3">
<h3 class="anchored" data-anchor-id="exporttestvalues"><span style="font-size: 1.20em"><code>exportTestValues()</code></span></h3>
<p>I‚Äôll demonstrate exporting test values from <code>selectVarApp()</code> by adding the following to the <code>server</code> function in <code>inst/dev/app.R</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">  server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb79-2"></span>
<span id="cb79-3">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb79-4">    var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> filter)</span>
<span id="cb79-5"></span>
<span id="cb79-6">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderTable</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>()))</span>
<span id="cb79-7"></span>
<span id="cb79-8">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb79-9">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb79-10">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb79-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb79-12">    })</span>
<span id="cb79-13"></span>
<span id="cb79-14">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exportTestValues</span>(</span>
<span id="cb79-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(),</span>
<span id="cb79-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()</span>
<span id="cb79-17">    )</span>
<span id="cb79-18">  }</span></code></pre></div>
</div>
</section>
<section id="using-system.file" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="using-system.file">Using <span style="font-size: 1.20em"><code>system.file()</code></span></h3>
<p>After loading, documenting and installing the package, I‚Äôll create a <code>test-shinytest2-selectVarApp.R</code> test file and add the initial contents to create the <code>AppDriver</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="cb80-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="cb80-3">                                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb80-4">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)</span>
<span id="cb80-5">  </span>
<span id="cb80-6">})</span></code></pre></div>
</div>
<p>Note that to test the development version of <code>selectVarApp()</code>, I pass a call to <code>system.file()</code> to the <code>app_dir</code> argument (this is a similar folder structure to apps built with <a href="https://thinkr-open.github.io/golem/articles/a_start.html"><code>golem</code></a> and <a href="https://leprechaun.opifex.org/#/guide/build"><code>leprechaun</code></a> frameworks)</p>
<p>After entering <code>app$view()</code> in the <strong>Console</strong>, the application opens in the Chromium headless browser again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>()</span></code></pre></div>
</div>
<div class="page-columns page-full">
<div id="fig-app_view_selectVarApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view_selectVarApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view_selectVarApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/app_view_selectVarApp.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-app_view_selectVarApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;15: View <code>selectVarApp()</code> application with <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
<p>In the test file, I‚Äôll use <code>app$set_values()</code> to change the <code>$`data-dataset`</code> and <code>$`var-var`</code> inputs:</p>
<ul>
<li><p>Change <code>$`data-dataset`</code> to <code>mtcars</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="cb82-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="cb82-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb82-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)</span>
<span id="cb82-5"></span>
<span id="cb82-6">    app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb82-7"></span>
<span id="cb82-8">})</span></code></pre></div>
</div></li>
</ul>
<div class="page-columns page-full">
<div id="fig-app_view_set_data_selectVarApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_set_data_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view_set_data_selectVarApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view_set_data_selectVarApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_set_data_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/app_view_set_data_selectVarApp.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-app_view_set_data_selectVarApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view_set_data_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Set <code>data-dataset</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view_set_data_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;16: View <code>selectVarApp()</code> after setting <code>data-dataset</code> with <code>app$set_inputs()</code>
</figcaption>
</figure>
</div>
</div>
<ul>
<li><p>Change <code>$`var-var`</code> to <code>wt</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="cb83-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="cb83-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb83-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)</span>
<span id="cb83-5"></span>
<span id="cb83-6">    app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb83-7">    app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>)</span>
<span id="cb83-8"></span>
<span id="cb83-9">})</span></code></pre></div>
</div></li>
</ul>
<div class="page-columns page-full">
<div id="fig-app_view_set_var_selectVarApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_set_var_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view_set_var_selectVarApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view_set_var_selectVarApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_set_var_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/app_view_set_var_selectVarApp.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-app_view_set_var_selectVarApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view_set_var_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Set <code>var-var</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view_set_var_selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;17: View <code>selectVarApp()</code> after setting <code>var-var</code> with <code>app$set_inputs()</code>
</figcaption>
</figure>
</div>
</div>
</section>
<section id="get_values" class="level3">
<h3 class="anchored" data-anchor-id="get_values"><span style="font-size: 1.20em"><code>get_values()</code></span></h3>
<p>I‚Äôll use <code>app$get_values()</code> to store the exported <code>input</code>, <code>output</code>, and <code>export</code> test values in <code>app_values</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="cb84-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="cb84-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb84-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)</span>
<span id="cb84-5">  </span>
<span id="cb84-6">    app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb84-7">    app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>)</span>
<span id="cb84-8">    </span>
<span id="cb84-9">    app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb84-10">    </span>
<span id="cb84-11">})</span></code></pre></div>
</div>
<p><code>app_values</code> is a list (similar to the <code>.json</code> snapshot file), but now we‚Äôve explicitly <code>export</code>ed values from the server in <code>selectVarApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb86-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span> </span></code></pre></div>
</div>
</section>
<section id="exported-expectations" class="level3">
<h3 class="anchored" data-anchor-id="exported-expectations"><span style="font-size: 1.20em"><code>export</code></span>ed expectations</h3>
<p>I can use <code>app_values</code> to verify the structure of each exported object:</p>
<ul>
<li><code>data</code> should be a <code>data.frame()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb87-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data))</span></code></pre></div>
</div>
<ul>
<li><code>var</code> should be a single column <code>data.frame()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb88-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Once again, I end the test with a call to <code>app$stop()</code>. The completed test for <code>selectVarApp()</code> is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: selectVarApp"</span>, {</span>
<span id="cb89-2">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarApp"</span>,</span>
<span id="cb89-3">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb89-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)</span>
<span id="cb89-5"></span>
<span id="cb89-6">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb89-7">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>)</span>
<span id="cb89-8"></span>
<span id="cb89-9">  app_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_values</span>()</span>
<span id="cb89-10"></span>
<span id="cb89-11">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb89-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data))</span>
<span id="cb89-13"></span>
<span id="cb89-14">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb89-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(app_values<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>export<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb89-16"></span>
<span id="cb89-17">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>()</span>
<span id="cb89-18">})</span></code></pre></div>
</div>
<p>I can run the test with <code>testthat::test_file()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-shinytest2-selectVarApp.R"</span>)</span></code></pre></div>
</div>
<p>The results are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb91-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 2 ]</span></code></pre></div>
</div>
</section>
</section>
<section id="testing-complex-outputs" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testing-complex-outputs">Testing complex outputs</h2>
<p>I‚Äôve created an adapted version of the <code>histogramApp()</code> in the <code>inst/dev/gghistApp/</code> folder (view contents <a href="https://github.com/mjfrigaard/msst2ap/tree/main/inst/dev/gghistApp#gghistapp">here</a>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb92-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">inst/dev/gghistApp/</span></span>
<span id="cb92-2">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> DESCRIPTION</span>
<span id="cb92-3">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> R/</span>
<span id="cb92-4">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ modules.R</span>
<span id="cb92-5">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> README.md</span>
<span id="cb92-6">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> app.R</span>
<span id="cb92-7"></span>
<span id="cb92-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 4 files</span></code></pre></div>
</div>
<p><code>gghistApp()</code> renders a <code>ggplot2</code> graph, which makes it easier to demonstrate <a href="https://rstudio.github.io/shinytest2/articles/robust.html#example">this example of checking a plot</a> from the <code>shinytest2</code> package website.</p>
<div class="page-columns page-full">
<div id="fig-sbs_histogramApp_gghistApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-sbs_histogramApp_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row column-page-inset-right">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-sbs_histogramApp_gghistApp" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-sbs_histogramApp" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-sbs_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/sbs_histogramApp.png" class="img-fluid figure-img" data-ref-parent="fig-sbs_histogramApp_gghistApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-sbs_histogramApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>histogramApp()</code>
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-sbs_histogramApp_gghistApp" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-sbs_gghistApp" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-sbs_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/sbs_gghistApp.png" class="img-fluid figure-img" data-ref-parent="fig-sbs_histogramApp_gghistApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-sbs_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) <code>gghistApp()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-sbs_histogramApp_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;18: <code>histogramApp()</code> vs.&nbsp;<code>gghistApp()</code>
</figcaption>
</figure>
</div>
</div>
<p>The <code>gghistApp()</code> is similar to <code>histogramApp()</code>, but instead of using <code>hist()</code> to generate the plot, a reactive <code>plot_obj()</code> is passed to <code>shiny::renderPlot()</code> (like the example above).</p>
<p>Due to the structure of the modules in the application, the <code>exportTestValues()</code> function is placed in the <code>gghistServer()</code> function:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide gghistServer()</summary>
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1">gghistServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram"</span>)) {</span>
<span id="cb93-2"></span>
<span id="cb93-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(x))</span>
<span id="cb93-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(title))</span>
<span id="cb93-5"></span>
<span id="cb93-6">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb93-7">    </span>
<span id="cb93-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create plot object</span></span>
<span id="cb93-9">    plot_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb93-10">                  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())</span>
<span id="cb93-11">                  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())</span>
<span id="cb93-12">                  })</span>
<span id="cb93-13">    </span>
<span id="cb93-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># render plot object</span></span>
<span id="cb93-15">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb93-16">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())</span>
<span id="cb93-17">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb93-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span></span>
<span id="cb93-19">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_obj</span>())) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb93-20">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb93-21">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb93-22">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [bins = "</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>),</span>
<span id="cb93-23">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>,</span>
<span id="cb93-24">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>())) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb93-25">          ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb93-26">    }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb93-27">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(), input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bins),</span>
<span id="cb93-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignoreNULL =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb93-29"></span>
<span id="cb93-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># export app values</span></span>
<span id="cb93-31">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exportTestValues</span>(</span>
<span id="cb93-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(),</span>
<span id="cb93-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot_obj =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_obj</span>()</span>
<span id="cb93-34">    )</span>
<span id="cb93-35"></span>
<span id="cb93-36">  })</span>
<span id="cb93-37">}</span></code></pre></div>
</details>
</div>
<ul>
<li><p><code>gghistServer()</code> is replaces <code>histogramServer()</code> in the standalone app function (<code>gghistApp()</code>):</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide gghistApp()</summary>
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">gghistApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb94-2">  ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb94-3">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb94-4">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb94-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, is.data.frame),</span>
<span id="cb94-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>),</span>
<span id="cb94-7">      ),</span>
<span id="cb94-8">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb94-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">histogramOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>),</span>
<span id="cb94-10">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb94-11">      )</span>
<span id="cb94-12">    )</span>
<span id="cb94-13">  )</span>
<span id="cb94-14"></span>
<span id="cb94-15">  server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb94-16"></span>
<span id="cb94-17">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb94-18"></span>
<span id="cb94-19">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, data)</span>
<span id="cb94-20"></span>
<span id="cb94-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gghistServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist"</span>, x)</span>
<span id="cb94-22"></span>
<span id="cb94-23">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb94-24">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb94-25">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb94-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb94-27">      }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb94-28"></span>
<span id="cb94-29">  }</span>
<span id="cb94-30"></span>
<span id="cb94-31">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span>
<span id="cb94-32">}</span></code></pre></div>
</details>
</div></li>
</ul>
<p>In the <code>test-shinytest2-gghistApp.R</code> test file, I‚Äôll verify the <a href="https://vdiffr.r-lib.org/"><code>vdiffr</code> package</a> is installed with <code>testthat::skip_if_not_installed()</code>, then create the <code>AppDriver</code> object with a call to <code>system.file()</code> and set the <code>height</code> and <code>width</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{shinytest2}: gghistApp"</span>, {</span>
<span id="cb95-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skip_if_not_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vdiffr"</span>)</span>
<span id="cb95-3"></span>
<span id="cb95-4">  app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AppDriver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app_dir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gghistApp"</span>,</span>
<span id="cb95-5">                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"msst2ap"</span>),</span>
<span id="cb95-6">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>)</span>
<span id="cb95-7">})</span></code></pre></div>
</div>
<p>View the application in the Chromium browser by running <code>app$view()</code> in the <strong>Console</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1">app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">view</span>()</span></code></pre></div>
</div>
<div class="page-columns page-full">
<div id="fig-app_view_gghistApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view_gghistApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view_gghistApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/app_view_gghistApp.png" class="img-fluid figure-img column-body-outset-right" data-ref-parent="fig-app_view_gghistApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;19: View <code>gghistApp()</code> application with <code>app$view()</code>
</figcaption>
</figure>
</div>
</div>
<p>I‚Äôll replicate the <a href="https://rstudio.github.io/shinytest2/articles/robust.html#example">example</a> from the website using the <code>gghistApp()</code>:</p>
<section id="verify-initial-input" class="level3">
<h3 class="anchored" data-anchor-id="verify-initial-input">Verify initial <span style="font-size: 1.20em"><code>input</code></span></h3>
<ul>
<li><p>The first expectations in the example test the default <code>input</code> values with <strong><code>app$get_value(input = )</code></strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify initial data</span></span>
<span id="cb97-2">  app_init_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-dataset"</span>)</span>
<span id="cb97-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb97-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_data,</span>
<span id="cb97-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BOD"</span>)</span>
<span id="cb97-6"></span>
<span id="cb97-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify initial variable</span></span>
<span id="cb97-8">  app_init_var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var-var"</span>)</span>
<span id="cb97-9">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb97-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_init_var,</span>
<span id="cb97-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="set-and-verify-export" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="set-and-verify-export">Set and verify <span style="font-size: 1.20em"><code>export</code></span></h3>
<ul>
<li><p>Next, we check the exported values after changing the inputs with <code>app$set_values()</code> and <strong><code>app$get_value(export = )</code></strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb98-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify exported `x()` data</span></span>
<span id="cb98-2">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb98-3">  app_exp_x_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-x"</span>)</span>
<span id="cb98-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb98-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_x_01, </span>
<span id="cb98-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb98-7"></span>
<span id="cb98-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify exported `plot_obj()` data</span></span>
<span id="cb98-9">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>)</span>
<span id="cb98-10">  app_exp_plot_obj_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj"</span>)</span>
<span id="cb98-11">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb98-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_plot_obj_01,</span>
<span id="cb98-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(app_exp_plot_obj_01))</span></code></pre></div>
</div></li>
<li><p>The <code>bins</code> are also set to a new value with <code>app$set_inputs()</code> <em>after</em> verifying the exported values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify `hist-bins` changes</span></span>
<span id="cb99-2">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb99-3">  app_set_bins_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-bins"</span>)</span>
<span id="cb99-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb99-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_set_bins_01,</span>
<span id="cb99-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
</div></li>
</ul>
<div class="page-columns page-full">
<div id="fig-app_view_set_inputs_gghistApp" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_set_inputs_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row page-columns page-full">
<div class="quarto-layout-cell-subref quarto-layout-cell page-columns page-full" data-ref-parent="fig-app_view_set_inputs_gghistApp" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-app_view_set_inputs_gghistApp" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-app_view_set_inputs_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p4-test-system-shiny/app_view_set_inputs_gghistApp.png" class="img-fluid figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-app_view_set_inputs_gghistApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-app_view_set_inputs_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>set_inputs()</code> and <code>get_value()</code> in <code>gghistApp()</code>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-app_view_set_inputs_gghistApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;20: Set <code>input</code>s and get <code>export</code>ed values in <code>gghistApp()</code>
</figcaption>
</figure>
</div>
</div>
</section>
<section id="verify-plot-with-vdiffr" class="level3">
<h3 class="anchored" data-anchor-id="verify-plot-with-vdiffr">Verify plot with <span style="font-size: 1.20em"><code>vdiffr</code></span></h3>
<ul>
<li><p>Now we verify the plot with the exported <code>plot_obj</code> (in the <code>hist</code> module) with <code>expect_doppelganger()</code> from the <code>vdiffr</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify `hist-plot_obj` changes</span></span>
<span id="cb100-2">  plot_obj_15 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj"</span>)</span>
<span id="cb100-3">  vdiffr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_doppelganger</span>(</span>
<span id="cb100-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj-15"</span>,</span>
<span id="cb100-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig =</span> plot_obj_15)</span></code></pre></div>
</div>
<ul>
<li><em>I saved the test file and ran the test to confirm the snapshot file was created in <code>tests/testthat/_snaps/</code></em>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb101-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 6 ]</span>
<span id="cb101-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÄ‚îÄ</span> Warning <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">_test-shinytest2-gghistApp.R:45:3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> {shinytest2}: gghistApp ‚îÄ‚îÄ‚îÄ</span>
<span id="cb101-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Adding</span> new file snapshot: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tests/testthat/_snaps/hist-plot-obj-15.svg'</span></span>
<span id="cb101-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 6 ]</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="set_-get_-expect_" class="level3">
<h3 class="anchored" data-anchor-id="set_-get_-expect_"><span style="font-size: 1.10em"><code>set_</code>, <code>get_</code>, <code>expect_</code></span></h3>
<p>The process above is repeated with new values passed to <strong><code>app$set_inputs()</code></strong> and verified with <strong><code>app$get_value(export = )</code></strong>:</p>
<ul>
<li><p>The <code>x()</code>, <code>plot_obj()</code> and <code>hist-bins</code> are updated again with new values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Update `data` to USArrests</span></span>
<span id="cb102-2">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USArrests"</span>)</span>
<span id="cb102-3">  app_exp_x_02 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-x"</span>)</span>
<span id="cb102-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb102-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_x_02,</span>
<span id="cb102-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> USArrests[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb102-7"></span>
<span id="cb102-8">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Update `var` to UrbanPop</span></span>
<span id="cb102-9">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UrbanPop"</span>)</span>
<span id="cb102-10">  app_exp_plot_obj_02 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj"</span>)</span>
<span id="cb102-11">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb102-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_exp_plot_obj_02,</span>
<span id="cb102-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_vector</span>(app_exp_plot_obj_02))</span>
<span id="cb102-14"></span>
<span id="cb102-15">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Update `bins` to 12</span></span>
<span id="cb102-16">  app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_inputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hist-bins</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb102-17">  app_set_bins_02 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-bins"</span>)</span>
<span id="cb102-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb102-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> app_set_bins_02,</span>
<span id="cb102-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
</div></li>
<li><p>The new plot is verified again with <code>expect_doppelganger()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Verify updates to `hist-plot_obj`</span></span>
<span id="cb103-2">  plot_obj_12 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_value</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">export =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj"</span>)</span>
<span id="cb103-3">  vdiffr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_doppelganger</span>(</span>
<span id="cb103-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hist-plot_obj-12"</span>,</span>
<span id="cb103-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig =</span> plot_obj_12)</span></code></pre></div>
</div>
<ul>
<li><em>This initial run of this test will show a warning again as the snapshot file is saved to <code>tests/testthat/_snaps/</code></em>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb104-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 10 ]</span>
<span id="cb104-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÄ‚îÄ</span> Warning <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">_test-shinytest2-gghistApp.R:77:3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> {shinytest2}: gghistApp ‚îÄ‚îÄ‚îÄ</span>
<span id="cb104-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Adding</span> new file snapshot: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tests/testthat/_snaps/hist-plot-obj-12.svg'</span></span>
<span id="cb104-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 10 ]</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>The final results of the <code>test-shinytest2-gghistApp.R</code> are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb105-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/_test-shinytest2-gghistApp.R"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb106-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 5 ]</span>
<span id="cb106-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">wt1</span>   wt2   wt3   wt4   wt5   wt6   wt7   wt8   wt9  wt10  wt11  wt12  wt13 </span>
<span id="cb106-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2.620</span> 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070 3.730 </span>
<span id="cb106-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">wt14</span>  wt15  wt16  wt17  wt18  wt19  wt20  wt21  wt22  wt23  wt24  wt25  wt26 </span>
<span id="cb106-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3.780</span> 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840 3.845 1.935 </span>
<span id="cb106-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">wt27</span>  wt28  wt29  wt30  wt31  wt32 </span>
<span id="cb106-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2.140</span> 1.513 3.170 2.770 3.570 2.780 </span>
<span id="cb106-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 9 ] </span>
<span id="cb106-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop1</span>  UrbanPop2  UrbanPop3  UrbanPop4  UrbanPop5  UrbanPop6  UrbanPop7 </span>
<span id="cb106-10">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">58</span>         48         80         50         91         78         77 </span>
<span id="cb106-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop8</span>  UrbanPop9 UrbanPop10 UrbanPop11 UrbanPop12 UrbanPop13 UrbanPop14 </span>
<span id="cb106-12">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">72</span>         80         60         83         54         83         65 </span>
<span id="cb106-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop15</span> UrbanPop16 UrbanPop17 UrbanPop18 UrbanPop19 UrbanPop20 UrbanPop21 </span>
<span id="cb106-14">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">57</span>         66         52         66         51         67         85 </span>
<span id="cb106-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop22</span> UrbanPop23 UrbanPop24 UrbanPop25 UrbanPop26 UrbanPop27 UrbanPop28 </span>
<span id="cb106-16">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">74</span>         66         44         70         53         62         81 </span>
<span id="cb106-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop29</span> UrbanPop30 UrbanPop31 UrbanPop32 UrbanPop33 UrbanPop34 UrbanPop35 </span>
<span id="cb106-18">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">56</span>         89         70         86         45         44         75 </span>
<span id="cb106-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop36</span> UrbanPop37 UrbanPop38 UrbanPop39 UrbanPop40 UrbanPop41 UrbanPop42 </span>
<span id="cb106-20">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">68</span>         67         72         87         48         45         59 </span>
<span id="cb106-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop43</span> UrbanPop44 UrbanPop45 UrbanPop46 UrbanPop47 UrbanPop48 UrbanPop49 </span>
<span id="cb106-22">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">80</span>         80         32         63         73         39         66 </span>
<span id="cb106-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">UrbanPop50</span> </span>
<span id="cb106-24">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">60</span> </span>
<span id="cb106-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> FAIL 0 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SKIP</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PASS</span> 10 ]</span></code></pre></div>
</div>
<p>The vector in each <code>plot_obj()</code> test is printed with <code>expect_doppelganger()</code>, but this doesn‚Äôt interfere with the results.</p>
<p>I can run <code>devtools::test()</code> to run all the tests in <code>msst2ap</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb107-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
</div>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has covered creating tests with <code>testthat</code> and <code>shinytest2</code> for an app-package containing a shiny application (with modules!). As you can see, the test recorder makes it easier to test specific app behaviors, and the <code>AppDriver</code> makes it possible to build a set of test expectations iteratively. Other items to consider when writing <code>shinytest2</code> tests include:</p>
<ol type="1">
<li><p><strong>Define What to Test</strong>: Since Shiny apps are interactive, so <code>shinytest2</code> tests should simulate user interaction as much as possible. The tests should focus on key user interactions and the output they should generate. <code>shinytest2</code> provides functions for simulating user clicks, inputs, and other interactions. Not every interaction needs to be tested, but crucial ones and those that handle complex logic should be.</p></li>
<li><p><strong>Organize Your Tests &amp; Use Descriptive Test Names</strong>: Organize your tests into separate files based on what they are testing. Each test should have a descriptive name that clarifies what the test is for. Organizing your test files with unambiguous names will make it easier to manage multiple tests, and it will make it easier to understand what‚Äôs going wrong when a test fails.</p></li>
<li><p><strong>Create snapshots for expected outputs</strong>: Use snapshot files to verify that an app‚Äôs output matches the expected results. <code>AppDriver$expect_values()</code> generates <code>.json</code> and <code>.png</code> snapshot files for the application. The .json file contains <code>input</code>, <code>output</code>, and <code>export</code> values, and the .png file is a <em>debug</em> screenshot, which records how the app looked when the values where captured. These files can then be compared to a baseline snapshot.</p></li>
<li><p><strong>Export app values</strong>: While snapshot files are great for detecting changes, it‚Äôs important to remember that ‚Äú<em>differences in the captured screenshot will never cause test failures.</em>‚Äù Manually inspecting the snapshot .png files during test development can also be time-consuming and tedious. Wherever possible, export app values and compare them against expected reference values.</p></li>
</ol>
<p>In general, <code>shinytest2</code> is designed for end-to-end testing of shiny applications. These tests can capture the state of a shiny app (input, output, and exported values) during user interactions and compare them with a previous state (i.e., snapshots), which is useful for regression testing.</p>
<p><code>shinytest2</code> tests can also simulate user interaction in a way that <code>shiny::testServer()</code> tests can‚Äôt, such as waiting for reactive outputs to update after the input changes, clicking on action buttons, etc. <code>shinytest2</code> can also be resource-intensive, so it‚Äôs recommended to write these tests after you‚Äôve completed the standard <code>testthat</code> unit tests and <code>testServer()</code> tests.</p>


</section>

 ]]></description>
  <category>shiny</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/p4-test-system-shiny/</guid>
  <pubDate>Tue, 04 Jul 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p4-test-system-shiny/image.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Testing Shiny modules</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/</link>
  <description><![CDATA[ 





<p>This is the third post in a <a href="https://mjfrigaard.github.io/series.html">series on testing</a> shiny applications. I‚Äôll cover testing shiny module server functions using the <a href="https://testthat.r-lib.org/"><code>testhat</code> package</a> and shiny‚Äôs <a href="https://shiny.rstudio.com/reference/shiny/1.7.0/testserver"><code>testServer()</code> function</a>.</p>
<section id="testing-shiny-modules" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testing-shiny-modules">Testing shiny modules</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/shiny.png" class="img-fluid" style="width:40.0%"></p>
</div></div><p>Shiny functions pose a couple of unique challenges for testing. First, we can‚Äôt execute shiny <code>server</code> functions in the console. Second, as shiny apps become more complex, it‚Äôs <a href="https://engineering-shiny.org/structuring-project.html#using-shiny-modules">highly</a> <a href="https://mastering-shiny.org/scaling-modules.html#module-motivation">recommended</a> to break up the code base into <a href="https://shiny.posit.co/r/articles/improve/modules/index.html">modules</a>. Modules have additional challenges due to their reactivity being split between interconnected UI and server functions.</p>
<p><code>shiny</code> doesn‚Äôt provide a direct, built-in way to test modules, but the <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/"><code>testServer()</code></a> function addresses these challenges by testing ‚Äú<em>reactive interactions</em>‚Äù in module server functions. <code>testServer()</code> also works with <a href="https://testthat.r-lib.org/"><code>testthat</code></a>, which means we can structure these ‚Äòreactive interaction‚Äô tests just like other unit tests (for non-application functions).</p>
</section>
<section id="shiny-app-package" class="level2">
<h2 class="anchored" data-anchor-id="shiny-app-package">Shiny app-package</h2>
<p><code>testthat</code> is designed to work within an R package, so I‚Äôve put together the <a href="https://mjfrigaard.github.io/mstsap/index.html"><code>mstsap</code></a>, (i.e., a <strong>M</strong>astering <strong>S</strong>hiny <strong>t</strong>est<strong>S</strong>erver <strong>a</strong>pp-<strong>p</strong>ackage) to demonstrate writing tests with <code>testServer()</code>. The functions, modules, and applications in <code>mstsap</code> come from the <a href="https://mastering-shiny.org/scaling-modules.html">Shiny Modules chapter</a> of Mastering Shiny. Specifically, sections <a href="https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs">19.3</a> through <a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules">19.3.4</a>. If you haven‚Äôt read this chapter‚Äìstart there.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to get the mstsap package used in this post:</span></span>
<span id="cb1-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mjfrigaard/mstsap"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prompt =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mstsap)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="Why create an app-package?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why create an app-package?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>A shiny app-package is a shiny application that‚Äôs been developed as (or converted to) an R package. The benefits of storing shiny apps in R packages have been <a href="https://mastering-shiny.org/scaling-packaging.html">well</a> <a href="https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package">documented</a>, but I‚Äôll summarize just a few that are specific to testing:</p>
<ol type="1">
<li><strong>Standardized folder structure</strong>:
<ol type="a">
<li>If unit tests are performed with <code>testthat</code>, minimal setup is required to perform tests.</li>
<li><code>usethis::use_testthat()</code> sets up test files in the tests/testthat/ folder (to test the code in the R/ folder)<br>
</li>
<li><em>Read more about using <code>testthat</code> with R packages <a href="https://r-pkgs.org/testing-basics.html">here.</a></em></li>
</ol></li>
<li><strong>Test extras</strong>:
<ol type="a">
<li>Test data can be placed in <code>tests/testthat/&lt;test dir&gt;/&lt;test_data.rds&gt;</code><br>
</li>
<li>The code used to create the test data should be placed in <code>make_&lt;test_data.rds&gt;</code><br>
</li>
<li>Additional testing functions can be stored in <code>tests/testthat/helpers.R</code><br>
</li>
<li><em>Read more about test helpers <a href="https://r-pkgs.org/testing-design.html#testthat-helper-files">here.</a></em></li>
</ol></li>
<li><strong>Development tools</strong>:
<ol type="a">
<li>If you‚Äôre using RStudio, tests can be run individually (<code>testthat::test_file()</code>) or collectively (<code>devtools::test()</code>), and code helpers and data are loaded using <code>devtools::load_all()</code><br>
</li>
<li>Tests created with <code>testthat</code> remain isolated during development<br>
</li>
<li><em>Read more about developing packages with RStudio in the <a href="https://r-pkgs.org/">R Packages text.</a></em></li>
</ol></li>
</ol>
</div>
</div>
</div>
</div>
</section>
<section id="modules" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="modules">Modules</h2>
<p>Shiny modules are <a href="https://mastering-shiny.org/scaling-modules.html">‚Äò<em>a pair of UI and server functions</em>‚Äô</a> designed to compartmentalize input and output IDs into distinct namespaces (‚Äú<em>a namespace is to an ID as a directory is to a file</em>‚Äù).</p>
<div class="cell">
<pre><code>‚ñà‚îÄshinyApp 
‚îú‚îÄui = ‚ñà‚îÄfluidPage 
‚îÇ      ‚îî‚îÄ‚ñà‚îÄmod_ui 
‚îÇ        ‚îî‚îÄid = "X" 
‚îú‚îÄserver = `function(input, output, session)` 
‚îî‚îÄ‚ñà‚îÄmod_server 
  ‚îî‚îÄid = "X" </code></pre>
</div>
<p>In <a href="https://mjfrigaard.github.io/posts/test-shiny-p1/#unit-tests">a previous post</a>, I used the following definition for unit tests,</p>
<blockquote class="blockquote">
<p>‚Äú<em>A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work.</em>‚Äù - <a href="https://www.manning.com/books/the-art-of-unit-testing-second-edition">The Art of Unit Testing, 2nd edition</a></p>
</blockquote>
<p>Modules can also be broken into discrete ‚Äòunits of work‚Äô with expected ‚Äòend results.‚Äô However, the ‚Äòunit of work‚Äô for a shiny module is usually accomplished using a combination of three functions: a module UI function, a module server function, and any helper/utility functions.</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="Shiny module refresher">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Shiny module refresher
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Module UI functions typically wrap the layout, input, and output functions in <code>tagList()</code>. Module server functions contain the ‚Äòbackend‚Äô code that typically goes in a shiny <code>server</code> function. Both the UI and server module functions are linked by an <code>id</code> argument, which is created using <code>NS()</code> (namespace) in the UI function, and called in the server function with <code>moduleServer()</code>.</p>
<section id="module-ui-functions" class="level3">
<h3 class="anchored" data-anchor-id="module-ui-functions">Module UI functions</h3>
<p>Below is an example module UI function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">mod_fun_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">namespace =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_input"</span>)),</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">namespace =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_out"</span>))</span>
<span id="cb3-5">  )</span>
<span id="cb3-6">}</span></code></pre></div>
</div>
<ul>
<li><p><code>mod_fun_ui</code> creates a dedicated namespace for one <code>inputId</code> and one <code>outputId</code> with <code>shiny::NS()</code>:</p>
<div class="cell">
<pre><code>‚ñà‚îÄmod_fun_ui 
‚îú‚îÄid 
‚îî‚îÄ‚ñà‚îÄtagList 
  ‚îú‚îÄ‚ñà‚îÄnumericInput 
  ‚îÇ ‚îî‚îÄinputId = ‚ñà‚îÄNS 
  ‚îÇ             ‚îú‚îÄnamespace = id 
  ‚îÇ             ‚îî‚îÄid = "num_input" 
  ‚îî‚îÄ‚ñà‚îÄuiOutput 
    ‚îî‚îÄoutputId = ‚ñà‚îÄNS 
                 ‚îú‚îÄnamespace = id 
                 ‚îî‚îÄid = "num_out" </code></pre>
</div></li>
</ul>
</section>
<section id="module-server-functions" class="level3">
<h3 class="anchored" data-anchor-id="module-server-functions">Module server functions</h3>
<p>The corresponding module server function is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mod_fun_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb5-2">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-3">            ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session</span>
<span id="cb5-4">          output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_input)</span>
<span id="cb5-5">      })</span>
<span id="cb5-6">}</span></code></pre></div>
</div>
<ul>
<li><p>The code to render the reactive <code>input$num_input</code> with <code>output$num_out</code> is contained in the nested call to <code>moduleServer()</code></p>
<div class="cell">
<pre><code>‚ñà‚îÄmod_fun_server 
‚îú‚îÄid 
‚îî‚îÄ‚ñà‚îÄmoduleServer 
  ‚îú‚îÄid = id 
  ‚îú‚îÄserver = ‚ñà‚îÄ`function(input, output, session)` 
  ‚îÇ          ‚îú‚îÄ`ns &lt;- session` 
  ‚îÇ          ‚îú‚îÄ`output$num_out &lt;-` 
  ‚îÇ          ‚îî‚îÄ‚ñà‚îÄrenderUI 
  ‚îÇ            ‚îî‚îÄ`input$num_input` 
  ‚îî‚îÄsession = session </code></pre>
</div></li>
</ul>
</section>
<section id="using-modules" class="level3">
<h3 class="anchored" data-anchor-id="using-modules">Using modules</h3>
<p>Both module functions are combined in the <code>ui</code> and <code>server</code> arguments of <code>shinyApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb7-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb7-3">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_fun_ui</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod"</span>)</span>
<span id="cb7-4">        ),</span>
<span id="cb7-5">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) </span>
<span id="cb7-6">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_fun_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod"</span>)</span>
<span id="cb7-7">  )</span></code></pre></div>
</div>
<ul>
<li><p>The <code>id</code> arguments connect the UI and server functions to communicate between the UI and backend of the app:</p>
<div class="cell">
<pre><code>‚ñà‚îÄshinyApp 
‚îú‚îÄui = ‚ñà‚îÄfluidPage 
‚îÇ      ‚îî‚îÄ‚ñà‚îÄmod_fun_ui 
‚îÇ        ‚îî‚îÄid = "mod namespace" 
‚îî‚îÄserver = ‚ñà‚îÄ`function(input, output, session)` 
           ‚îî‚îÄ‚ñà‚îÄmod_fun_server 
             ‚îî‚îÄid = "mod namespace" </code></pre>
</div></li>
</ul>
<p>I recommend creating test files when you create module files (i.e., with <code>usethis::use_r()</code> &amp; <code>usethis::use_test()</code>).</p>
</section>
</div>
</div>
</div>
<section id="modules-in-mstsap" class="level3">
<h3 class="anchored" data-anchor-id="modules-in-mstsap">Modules in <code>mstsap</code></h3>
<p><code>mstsap</code> contains three modules: <code>dataset</code>, <code>selectVar</code>, and <code>selectDataVar</code>. If you‚Äôre like more information on a module, click on the links in the numbered list.</p>
<section id="dataset-module" class="level4">
<h4 class="anchored" data-anchor-id="dataset-module">Dataset module</h4>
<ol type="1">
<li><a href="https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output"><code>datasetInput</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#getting-started-ui-input-server-output"><code>datasetServer</code></a>: loads and returns data object from the <code>datasets</code> package (filtered by data frames or matrices)</li>
</ol>
<div id="fig-dataset" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-dataset-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-dataset" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dataset-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/dataset.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-dataset">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dataset-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>dataset</code> module
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dataset-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <code>dataset</code> module
</figcaption>
</figure>
</div>
<ul>
<li><p>The objects from <code>datasets</code> are filtered in the UI module function with a <code>filter</code> argument that can be used to <em>‚Äúlimit the options to built-in datasets that are either data frames (<code>filter = is.data.frame</code>) or matrices (<code>filter = is.matrix</code>)‚Äù</em>. The <code>names</code> are passed to the <code>choices</code> in the <code>selectInput()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide choices in datasetInput()</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb9-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(filter)) {</span>
<span id="cb9-3">    data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(names, get, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb9-4">    names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> names[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb9-5">  }</span></code></pre></div>
</details>
</div></li>
<li><p>The <code>datasets</code> object is returned with <code>get()</code> (wrapped in <code>reactive()</code>). See below:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide returned data from datasetServer()</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(</span>
<span id="cb10-2">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:datasets"</span>)</span>
<span id="cb10-3">    )</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="selectvar-module" class="level4">
<h4 class="anchored" data-anchor-id="selectvar-module">selectVar module</h4>
<ol start="2" type="1">
<li><a href="https://mastering-shiny.org/scaling-modules.html#case-study-selecting-a-numeric-variable"><code>selectVarInput</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#server-inputs"><code>selectVarServer</code></a>: displays a <code>selectInput()</code> that ‚Äú<em>allows the user to select variables of specified type from a given reactive dataset.</em>‚Äù</li>
</ol>
<div id="fig-selectVar" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectVar" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVar.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-selectVar">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectVar</code> module
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: <code>selectVar</code> module
</figcaption>
</figure>
</div>
<p>The <code>data</code> argument in <code>selectVarServer()</code> is the returned value from <code>datasetServer()</code>:</p>
<ul>
<li><p><code>data()</code> is used with the <code>filter</code> argument in the <code>find_vars()</code> function:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide find_vars()</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb11-2"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I've included the updated version with the 'stopifnot()' checks!</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data))</span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(filter))</span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb11-6">}</span></code></pre></div>
</details>
</div>
<ul>
<li>The filter argument can be used to return variables by class/type (using <code>is.*</code> functions like <code>is.numeric()</code> or <code>is.character()</code>)</li>
</ul></li>
<li><p>When <code>data()</code> changes, the output from <code>find_vars()</code> updates the choices in the variable <code>selectInput()</code> (i.e., <code>input$var</code>) (see below)</p></li>
</ul>
<div id="fig-selectVar_find_vars" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectVar_find_vars-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectVar_find_vars" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectVar_find_vars-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVar_find_vars.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-selectVar_find_vars">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectVar_find_vars-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectVar</code> and <code>find_vars()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectVar_find_vars-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: <code>selectVar</code> module and <code>find_vars()</code> function
</figcaption>
</figure>
</div>
<ul>
<li><code>selectVarServer()</code> also returns the selected variable (<code>input$var</code>) as a reactive value (<code>var()</code>)</li>
</ul>
</section>
<section id="selectdatavar-module" class="level4">
<h4 class="anchored" data-anchor-id="selectdatavar-module">selectDataVar module</h4>
<ol start="3" type="1">
<li><a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><code>selectDataVarUI</code></a>/<a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><code>selectDataVarServer</code></a>: The <code>selectDataVar</code> module is from the section titled, ‚Äú<a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules"><em>Modules inside of modules</em></a>‚Äù, so here we see the <code>dataset</code> and <code>selectVar</code> modules placed <em>inside</em> the <code>selectDataVar</code> module (each with a new namespace (<code>NS()</code>)).</li>
</ol>
<div id="fig-selectDataVar" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectDataVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectDataVar" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectDataVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVar.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-selectDataVar">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectDataVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectDataVar</code> module
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectDataVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: <code>selectDataVar</code> module
</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="Naming modules">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Naming modules
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.15em; color: #063E23;">
<p>When creating an app-packages, modules are stored in the <code>R/</code> folder as a single file, typically following a <a href="https://mastering-shiny.org/scaling-modules.html#naming-conventions">naming convention</a> that differentiates modules from the other package functions. The modules in this post use <a href="https://en.wikipedia.org/wiki/Camel_case">camelCase</a>, with suffix variations (i.e., <code>Input</code>/<code>Server</code> and <code>UI</code>/<code>Server</code>) for each functions. Other options come from the <a href="https://thinkr-open.github.io/golem/"><code>golem</code></a> and <a href="https://leprechaun.opifex.org/#/"><code>leprechaun</code></a> packages.</p>
<p><code>golem</code> modules are created with <a href="https://thinkr-open.github.io/golem/reference/add_module.html"><code>golem::add_module()</code></a></p>
</div>
<div class="cell">
<details class="code-fold">
<summary>expand to see golem::add_module(‚Äúinputs‚Äù)</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mod_inputs_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb12-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb12-4">  )</span>
<span id="cb12-5">}</span>
<span id="cb12-6">mod_inputs_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>( id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session){</span>
<span id="cb12-8">    ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb12-9"> </span>
<span id="cb12-10">  })</span>
<span id="cb12-11">}</span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## To be copied in the UI</span></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mod_inputs_ui("inputs_1")</span></span>
<span id="cb12-14">    </span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## To be copied in the server</span></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mod_inputs_server("inputs_1")</span></span></code></pre></div>
</details>
</div>
<div style="font-size: 1.15em; color: #063E23;">
<p><code>golem</code> modules the following naming convention:</p>
<ol type="1">
<li><p>All new module functions have a <code>mod_</code> prefix</p></li>
<li><p><code>golem</code> module functions are differentiated with either a <code>_ui</code> or <code>_server</code> suffix</p></li>
<li><p>New <code>golem</code> module files are named <code>R/mod_&lt;name&gt;.R</code></p></li>
</ol>
<p><code>leprechaun</code> modules are also created with a <a href="https://leprechaun.opifex.org/#/reference/add_module"><code>leprechaun::add_module()</code></a> function.</p>
</div>
<div class="cell">
<details class="code-fold">
<summary>expand to see leprechaun::add_module(‚Äúinputs‚Äù)</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">inputsUI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb13-2">    ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb13-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs"</span>)</span>
<span id="cb13-5">    )</span>
<span id="cb13-6">}</span>
<span id="cb13-7">inputs_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id){</span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb13-9">                ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb13-10">                send_message <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_send_message</span>(session)</span>
<span id="cb13-11">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb13-12">        }</span>
<span id="cb13-13">    )</span>
<span id="cb13-14">}</span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI</span></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputsUI('id')</span></span>
<span id="cb13-17"></span>
<span id="cb13-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server</span></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputs_server('id')</span></span></code></pre></div>
</details>
</div>
<div style="font-size: 1.15em; color: #063E23;">
<p><code>leprechaun</code> modules have a slightly different naming convention:</p>
<ol type="1">
<li><p>All new UI module functions have a <code>UI</code> suffix</p></li>
<li><p>All new module server functions have a <code>_server</code> suffix</p></li>
<li><p><code>leprechaun</code> module functions <em>do not have a prefix</em></p></li>
<li><p>New <code>leprechaun</code> modules named <code>module_&lt;name&gt;.R</code></p></li>
</ol>
<p>Shiny app-packages often require multiple modules and utility functions, so uniform names will make it easier to manage (and test!) your code.</p>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="standalone-app-functions" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="standalone-app-functions">Standalone app functions</h3>
<p><code>mstsap</code> contains three <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">standalone functions</a> for running each set of module functions.</p>
<p>I‚Äôve made a small change to each standalone app function‚Äìeach app has a call to <code>reactiveValuesToList()</code> that displays in the UI.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>print reactive values</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vals"</span>)</span>
<span id="cb14-2"></span>
<span id="cb14-3">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb14-4">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input,</span>
<span id="cb14-5">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb14-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb14-7">  })</span></code></pre></div>
</details>
</div>
<section id="datasetapp" class="level4">
<h4 class="anchored" data-anchor-id="datasetapp">datasetApp</h4>
<p><code>datasetApp()</code> contains a call to the <code>dataset</code> module, and includes a <code>tableOutput()</code> to render the selected data object:</p>
<div id="fig-datasetApp" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-datasetApp" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-datasetApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>datasetApp</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-datasetApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: <code>datasetApp</code>
</figcaption>
</figure>
</div>
<p>When <code>datasetApp()</code> is run, the app displays the dataset object in the <code>tableOutput()</code>, and the <code>verbatimTextOutput()</code> renders the reactive values as a text:</p>
<div id="fig-datasetApp_run" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-datasetApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-datasetApp_run" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-datasetApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp_run.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-datasetApp_run">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-datasetApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>datasetApp</code> with reactive values
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-datasetApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: <code>datasetApp</code> with <code>reactiveValuesToList()</code>
</figcaption>
</figure>
</div>
<p>The output above shows what <code>NS()</code> does in the <code>dataset</code> module‚Äìit appends the module <code>id</code> argument to the <code>inputId</code> (which is why we see <code>dataset-dataset</code>).</p>
<ul>
<li><p><strong><code>dataset-</code>:</strong> the module id</p></li>
<li><p><strong><code>dataset-dataset</code></strong> the <code>inputId</code> from the <code>selectInput()</code></p></li>
</ul>
</section>
<section id="selectvarapp" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="selectvarapp">selectVarApp</h4>
<p><code>selectVarApp()</code> includes both <code>dataset</code> and <code>selectVar</code> modules, but instead of rendering the output in a table, the UI renders the variable output in a <code>verbatimTextOutput()</code>.</p>
<div id="fig-selectVarApp" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectVarApp" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVarApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-selectVarApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectVarApp</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: <code>selectVarApp</code>
</figcaption>
</figure>
</div>
<p>Note that <code>selectVarApp()</code> contains namespaces for two modules:</p>
<ol type="1">
<li><p><strong><code>"data"</code></strong>: the namespace for the <code>datasetnput()</code> and <code>datasetServer()</code> modules, inheriting the <code>filter</code> argument and creating the data object</p></li>
<li><p><strong><code>"var"</code></strong>: the <code>selectVar</code> modules are linked with the <code>"var"</code> id. <code>selectVarServer()</code> uses the <code>data</code> object created by <code>datasetServer()</code> (and also inherits the <code>filter</code> argument).</p></li>
</ol>
<p>These namespaced IDs are rendered below with <code>reactiveValuesToList()</code>:</p>
<div id="fig-selectVarApp_run" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectVarApp_run" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVarApp_run.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-selectVarApp_run">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectVarApp</code> with reactive values
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: <code>selectVarApp</code> with <code>reactiveValuesToList()</code>
</figcaption>
</figure>
</div>
<p>There‚Äôs a lot happening in <code>selectVarApp()</code>, so I‚Äôve created the figure below to display the code for the modules with their displayed outputs:</p>
<div class="page-columns page-full">
<div id="fig-selectVarApp_schema" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-selectVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-selectVarApp_schema" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-selectVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectVarApp_schema.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-selectVarApp_schema">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectVarApp</code> schema
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: <code>dataset</code> and <code>selectVar</code> modules with rendered outputs
</figcaption>
</figure>
</div>
</div>
<p>As we can see, the <code>data</code> output from the <code>dataset</code> module is used to generate the <code>vars()</code> reactive for the <code>verbatimTextOutput()</code> in <code>selectVarApp()</code>. Note that both <code>dataset</code> and <code>selectVar</code> modules don‚Äôt contain any output functions‚Äìthese have been provided in the UI for both <code>datasetApp()</code> and <code>selectVarApp()</code>.</p>
</section>
<section id="selectdatavarapp" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="selectdatavarapp">selectDataVarApp</h4>
<p>The final app in <code>mstsap</code> is <code>selectDataVarApp()</code>. Here the inputs from <code>dataset</code> and <code>selectVar</code> have been moved into the <code>sidebarPanel()</code>, and the output is rendered in the <code>mainPanel()</code>.</p>
<div id="fig-selectDataVarApp" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectDataVarApp" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-selectDataVarApp">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectDataVarApp</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectDataVarApp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: <code>selectDataVarApp</code>
</figcaption>
</figure>
</div>
<p>The reactive values here show how the <a href="https://mastering-shiny.org/scaling-modules.html#modules-inside-of-modules">‚ÄòModules inside of modules‚Äô</a> work‚Äìby adding the additional call to <code>NS()</code> in the <code>datasetInput()</code> and <code>selectVarInput()</code> functions <em>within</em> <code>selectDataVarUI()</code> and <code>selectDataVarServer()</code>, an additional namespace is appended to the reactive values (<code>input$dataset</code> and <code>input$var</code>):</p>
<div id="fig-selectDataVarApp_run" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-selectDataVarApp_run" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp_run.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-selectDataVarApp_run">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectDataVarApp</code> with reactive values
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectDataVarApp_run-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: <code>selectDataVarApp</code> with <code>reactiveValuesToList()</code>
</figcaption>
</figure>
</div>
<p>Below is a figure that displays the contents of the <code>selectDataVar</code> modules (I‚Äôve removed the <code>tagList()</code> and <code>moduleServer()</code> for simplicity), the <code>selectDataVarApp()</code>, and the rendered outputs:</p>
<div class="page-columns page-full">
<div id="fig-selectDataVarApp_schema" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-selectDataVarApp_schema" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp_schema.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-right" style="width:100.0%" data-ref-parent="fig-selectDataVarApp_schema">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>selectDataVarApp</code> schema
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-selectDataVarApp_schema-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;12: <code>dataset</code> and <code>selectVar</code> modules inside <code>selectDataVar</code> module with rendered outputs
</figcaption>
</figure>
</div>
</div>
</section>
</section>
</section>
<section id="testserver" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="testserver">testServer()</h2>
<p>Module server functions can be tested the same way as a traditional shiny <code>server</code> function, as long as you provide the inputs and verify the correct outputs. Below I‚Äôll cover some general advice on module server tests (and the arguments in <code>testServer()</code>).</p>
<section id="testing-module-server-functions" class="level3">
<h3 class="anchored" data-anchor-id="testing-module-server-functions">Testing module server functions</h3>
<p>Before writing tests, make sure you can answer the following:</p>
<ol type="1">
<li><strong><em>What is the overall purpose of the application?</em></strong>
<ul>
<li>This information is typically referred to as the ‚Äòbusiness logic‚Äô of the application, and should be stored in a specifications or requirements document. If I can‚Äôt answer this question, I‚Äôm probably better off not writing test for code that is likely to undergo major changes.</li>
</ul></li>
<li><strong><em>How does this module fit within that overall purpose?</em></strong>
<ul>
<li>Specifically, how does this module help the application achieve the specifications or requirements? This could also be considered the ‚Äòunit of work‚Äô and ‚Äòend result‚Äô for the module.</li>
</ul></li>
<li><strong><em>What dependencies (i.e., utility functions, data, add-on packages) are required for the module to execute?</em></strong>
<ul>
<li>If the module depends on other functions, data, or packages to perform it‚Äôs expected behavior, those functions should either be included in the <code>testServer()</code> test, or have their own tests (or both).</li>
</ul></li>
</ol>
<section id="what-should-i-test" class="level4">
<h4 class="anchored" data-anchor-id="what-should-i-test">What should I test?</h4>
<p>The items below have been compiled from <a href="https://mastering-shiny.org/scaling-testing.html#basic-workflow">Mastering Shiny</a>, <a href="https://r-pkgs.org/testing-design.html#what-to-test">R Packages</a>, and <a href="https://engineering-shiny.org/build-yourself-safety-net.html#testing-your-app">Engineering Production-Grade Shiny Apps</a>:</p>
<ol type="1">
<li><strong><em>Do the inputs/outputs behave as expected?</em></strong>
<ul>
<li>These tests verify the module server function <code>inputId</code>s and <code>outputId</code>s are properly namespaced and accessible</li>
</ul></li>
<li><strong><em>Does the module contain the expected reactive values/objects?</em></strong>
<ul>
<li>Tests should verify it‚Äôs reactivity‚Äìmodule server functions will automatically recompute the outputs when it‚Äôs inputs change, so tests should verify changes to inputs produce the expected behaviors and outputs. This includes any returned values from the module (and any additional function arguments).</li>
</ul></li>
<li><strong><em>Are the calculations correct?</em></strong>
<ul>
<li>If the module server function performs calculations or data manipulations, the tests should verify the module produces the correct result (ideally for a variety of inputs and edge cases).</li>
</ul></li>
<li><strong><em>How are errors handled in the module?</em></strong>
<ul>
<li>What errors are displayed from the module? Tests should simulate scenarios that can test if the module: 1) returns errors that are informative, 2) fails silently (when appropriate), or 3) falls back to the correct default behavior.</li>
</ul></li>
</ol>
<p>The last piece of advice I‚Äôve found helpful when writing tests comes from <a href="https://r-pkgs.org/testing-design.html#what-to-test">R Packages</a>,</p>
<blockquote class="blockquote">
<p><em>‚Äúfocus your time on code that you‚Äôre not sure about, is fragile, or has complicated interdependencies‚Äù</em></p>
</blockquote>
<p>The quote isn‚Äôt in reference to testing modules or shiny application functions, but I‚Äôve found it‚Äôs easy to fall into the trap of trying to test <em>everything</em> when a targeted approach is more efficient (and equally valid).</p>
<p>The first test I‚Äôll perform is for <code>datasetServer()</code>, the module used to return a data object from the <code>datasets</code> package.</p>
</section>
</section>
<section id="testserver-arguments" class="level3">
<h3 class="anchored" data-anchor-id="testserver-arguments"><code>testServer()</code> arguments</h3>
<ul>
<li><p><code>app</code> can be a module server function (i.e., <code>datasetServer</code>), or any <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html"><code>shiny.appobj</code></a></p></li>
<li><p><code>expr</code> is where I‚Äôll add the <code>testthat</code> expectations and other test code</p></li>
<li><p><code>args</code> is a <code>list()</code> I can use to include any module server function arguments</p></li>
</ul>
</section>
<section id="inputs" class="level3">
<h3 class="anchored" data-anchor-id="inputs">Inputs</h3>
<p>I created the test file with <code>usethis::use_test("datasetServer")</code> and the module server function is the first argument in <code>testServer()</code>.</p>
<p>I‚Äôll start by testing if the initial input value (<code>input$dataset</code>) in <code>datasetServer()</code> is set to <code>NULL</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> datasetServer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb15-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">datasetServer: dataset$input is NULL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4">})</span></code></pre></div>
</div>
<ul>
<li><p>I‚Äôll add a custom message with <code>cat()</code> and the <code>inputId</code> I‚Äôm testing, load, document, and install the package, then run the test with <code>testthat::test_file()</code>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">devtools::load_all()</span>
<span id="cb16-2">‚Ñπ Loading mstsap</span>
<span id="cb16-3">devtools::document()</span>
<span id="cb16-4">‚Ñπ Updating mstsap documentation</span>
<span id="cb16-5">‚Ñπ Loading mstsap</span>
<span id="cb16-6"></span>
<span id="cb16-7">Restarting R session...</span>
<span id="cb16-8"></span>
<span id="cb16-9">library(mstsap)</span></code></pre></div>
<ul>
<li>And run the test with <code>testthat::test_file()</code>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb18-2">datasetServer: dataset$input is NULL </span></code></pre></div></li>
</ul>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Creating test messages with `testServer()`">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Creating test messages with <code>testServer()</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>The <code>testServer()</code> documentation has <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/">examples</a> of using <code>cat()</code> to create custom messages. I put a function for creating <code>testServer()</code> messages (<code>test_cmt()</code>) in the <a href="https://github.com/mjfrigaard/mstsap/blob/main/tests/testthat/helper.R"><code>helper.R</code></a> file (<a href="https://r-pkgs.org/testing-advanced.html">read more about test helpers here</a>).</p>
<p>It has two arguments (<code>test</code> and <code>msg</code>), and makes it easy to print messages to the console while I‚Äôm developing tests.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod_server_function"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test contents"</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3">       mod_server_function<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> test contents </span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<section id="setting-test-inputs" class="level4">
<h4 class="anchored" data-anchor-id="setting-test-inputs">Setting test inputs</h4>
<p><code>testServer()</code> allows us to mimic changing application (or module) <code>inputId</code>s with <code>session$setInputs()</code> like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
</div>
<p>I‚Äôll demonstrate with a test for <code>input$dataset</code> in <code>datasetServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faithful"</span>)</span>
<span id="cb21-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb21-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dataset,</span>
<span id="cb21-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faithful"</span>)</span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset$input"</span>)</span></code></pre></div>
</div>
<p>The results from <code>test_file()</code> are below:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb22-2">       datasetServer: dataset$input</span></code></pre></div>
</section>
</section>
<section id="returned-values" class="level3">
<h3 class="anchored" data-anchor-id="returned-values">Returned values</h3>
<p>Any returned values from module server functions can be accessed in <code>testServer()</code> with <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-return-values"><code>session$returned()</code></a>. I‚Äôll verify <code>input$dataset</code> returns an object from <code>datasetServer()</code> by testing the class of <code>session$returned()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide test with session$returned()</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb23-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb23-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()),</span>
<span id="cb23-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class(session$returned())"</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WorldPhones"</span>)</span>
<span id="cb23-8">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb23-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()))</span>
<span id="cb23-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.matrix(session$returned())"</span>)</span></code></pre></div>
</details>
</div>
<p>Note that both methods above can be used to check the class of the returned object.</p>
<p>The updated results from <code>test_file()</code> are below:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb24-2">       datasetServer: class(session$returned()) </span>
<span id="cb24-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb24-4">       datasetServer: is.matrix(session$returned()) </span></code></pre></div>
<ul>
<li><p>I can also use the <code>typeof(datasets::mtcars)</code> for a direct comparison:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide test with session$returned()</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)</span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb25-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># app value...</span></span>
<span id="cb25-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>()), </span>
<span id="cb25-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...compared to actual output</span></span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars)) </span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typeof(session$returned())"</span>)</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="module-server-arguments" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="module-server-arguments">Module server arguments</h3>
<p>If the module server function has additional arguments beyond <code>id</code>, then it has additional functionality to verify with unit tests. To test additional module server arguments, pass these to <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#modules-with-additional-parameters"><code>testServer(args = list())</code>.</a> The <code>args</code> list should include named arguments from the module server function, i.e., <code>list(arg1 = "param1", arg2 = "param2")</code>.</p>
<p>For example, <code>selectVarServer()</code> has <code>data</code> and <code>filter</code> arguments:</p>
<ul>
<li><p><code>data</code> is the returned reactive object from <code>datasetServer()</code></p></li>
<li><p><code>filter</code> is the function passed to the <code>find_vars()</code> utility function</p></li>
</ul>
<div class="page-columns page-full">
<div id="fig-dataset_selectVar" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dataset_selectVar" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/dataset_selectVar.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-body-outset-right" style="width:100.0%" data-ref-parent="fig-dataset_selectVar">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>dataset()</code> -&gt; <code>selectVar()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dataset_selectVar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;13: Object returned from <code>datasetServer()</code> and passed to <code>selectVarServer()</code>
</figcaption>
</figure>
</div>
</div>
<p>Below is a test for <code>selectVarServer()</code> using <code>args</code> to verify the reactive <code>data()</code> is <code>datasets::mtcars</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb26-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars,</span>
<span id="cb26-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb26-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb26-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb26-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb26-7">})</span></code></pre></div>
</div>
<div style="font-size: 1.05em; color: #A20025;">
<p><strong><em>But this fails with the following error:</em></strong></p>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb28-1">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb28-2">‚îÄ‚îÄ Error (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ‚îÄ‚îÄ‚îÄ</span>
<span id="cb28-3">Error in `(function (id, data, filter = is.numeric) </span>
<span id="cb28-4">{</span>
<span id="cb28-5">    stopifnot(shiny::is.reactive(data))</span>
<span id="cb28-6">    stopifnot(!shiny::is.reactive(filter))</span></code></pre></div>
<div style="font-size: 1.05em; color: #006CD9;">
<p><strong><em>What happened?</em></strong></p>
</div>
<p>I‚Äôve included this example because it‚Äôs not in the <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#testing-shiny-modules"><code>testServer()</code> documentation</a>, and it‚Äôs common to pass values between modules (see <a href="https://engineering-shiny.org/structuring-project.html#a.-returning-values-from-the-module">here in Engineering Production-Grade Shiny Apps</a> and <a href="https://mastering-shiny.org/scaling-modules.html#inputs-and-outputs">here in Mastering Shiny</a>)</p>
<section id="testing-module-communication" class="level4">
<h4 class="anchored" data-anchor-id="testing-module-communication">Testing module communication</h4>
<p>The error message above tells me the issue is originating from the <code>stopifnot()</code> calls in <code>selectVarServer()</code>.</p>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Updating selectVarServer() and find_vars()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>Both <code>selectVarServer()</code> and <code>find_vars()</code> are updated from their original versions to include <code>stopifnot()</code> checks for <code>is.reactive()</code>, <code>is.data.frame()</code> and <code>is.function()</code>:</p>
<ul>
<li><p><a href="https://mastering-shiny.org/scaling-modules.html#server-inputs">Original versions:</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb29-3">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">selectVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), {</span>
<span id="cb30-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(session, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), filter))</span>
<span id="cb30-5">    })</span>
<span id="cb30-6"></span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]])</span>
<span id="cb30-8">  })</span>
<span id="cb30-9">}</span></code></pre></div>
</div></li>
<li><p><a href="https://mastering-shiny.org/scaling-modules.html#server-inputs">Updated versions:</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">selectVarServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric) {</span>
<span id="cb31-2"></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb31-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(filter))</span>
<span id="cb31-5"></span>
<span id="cb31-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb31-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), {</span>
<span id="cb31-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session, </span>
<span id="cb31-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, </span>
<span id="cb31-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), filter)</span>
<span id="cb31-11">        )</span>
<span id="cb31-12">    })</span>
<span id="cb31-13"></span>
<span id="cb31-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var]])</span>
<span id="cb31-15">  })</span>
<span id="cb31-16">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">find_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, filter) {</span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data))</span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(filter))</span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(data, filter, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb32-5">}</span></code></pre></div>
</div></li>
</ul>
</div>
</div>
</div>
</div>
<p>I‚Äôll stop a moment here to address what‚Äôs happening in each module:</p>
<ol type="1">
<li><p>The <code>datasetServer()</code> returns the results of <code>input$dataset</code> as a reactive (<code>data()</code>)</p></li>
<li><p><code>data()</code> enters <code>selectVarServer()</code> in the <code>data</code> argument</p></li>
<li><p><em>Inside</em> <code>selectVarServer()</code>, two <code>stopifnot()</code> functions evaluate the reactivity of <code>data</code> and <code>filter</code> with <code>shiny::is.reactive()</code></p></li>
</ol>
<p>In <code>datasetServer()</code>, the return object is <a href="https://github.com/mjfrigaard/mstsap/blob/f10e497df195cfa188afd031e7d082ed1466989d/R/datasetServer.R#L20">wrapped in the <code>reactive()</code> function</a>, so the items <code>args = list()</code> also need to be wrapped in <code>reactive()</code>.</p>
<p>I‚Äôll re-write the test above to a more basic test using <code>is.reactive()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb33-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars), </span>
<span id="cb33-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb33-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb33-7">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb35-1">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb35-2">       selectVarServer: is.reactive(data()) </span>
<span id="cb35-3">‚îÄ‚îÄ Failure (test-selectVarServer.R:1:1): (code run outside of `test_that()`) ‚îÄ‚îÄ‚îÄ</span>
<span id="cb35-4">is.reactive(data()) is not TRUE</span>
<span id="cb35-5"></span>
<span id="cb35-6">`actual`:   FALSE</span>
<span id="cb35-7">`expected`: TRUE </span></code></pre></div>
<div style="font-size: 1.05em; color: #A20025;">
<p><strong><em>Another failure???</em></strong></p>
</div>
<p>The results of this test might seem confusing given my advice to wrap the <code>args</code> list in <code>reactive()</code>, but some reading of the <code>x</code> argument in <code>is.reactive()</code> will clear up the error:</p>
<blockquote class="blockquote">
<p><em>For <code>is.reactive()</code>, an object to test. For <code>reactive()</code>, an expression.</em></p>
</blockquote>
<p>Removing the parentheses from <code>data()</code> will result in the proper test results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb36-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars), </span>
<span id="cb36-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb36-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb36-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb36-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(data())"</span>)</span>
<span id="cb36-7">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectVarServer.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb38-2">       selectVarServer: is.reactive(data()) </span></code></pre></div>
</section>
</section>
<section id="utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="utility-functions">Utility functions</h3>
<p>Now that I have a reactive <code>data()</code> input, I can explore how this value is used inside <code>selectVarServer()</code>. To update <code>input$var</code>, the <code>data()</code> input is passed to <code>find_vars()</code> (a function that uses a <code>filter</code> argument ‚Äú<em>used to select which variables to list</em>‚Äù). See the example below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">mstsap<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(</span>
<span id="cb39-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts, </span>
<span id="cb39-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.factor)</span>
<span id="cb39-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "feed"</span></span></code></pre></div>
</div>
<p>I‚Äôll write an expectation that captures the behavior of <code>find_vars()</code> in <code>selectVarServer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb40-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts),</span>
<span id="cb40-3">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb40-4">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb40-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), is.factor),</span>
<span id="cb40-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>)</span>
<span id="cb40-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"find_vars()"</span>)</span>
<span id="cb40-8">})</span></code></pre></div>
</div>
<p>The results are below:</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb41-2">       selectVarServer: find_vars()</span></code></pre></div>
<p>To verify that the returned object from <code>selectVarServer()</code> is the selected column, I‚Äôll need to simulate the application behavior in the tests:</p>
<ul>
<li><p>Create a reactive <code>data()</code> input in <code>selectVarServer()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>setting args = list()</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(selectVarServer,</span>
<span id="cb42-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts),</span>
<span id="cb42-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> is.numeric), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb42-4"></span>
<span id="cb42-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># include expectations below...</span></span>
<span id="cb42-6"></span>
<span id="cb42-7">  })</span></code></pre></div>
</details>
</div></li>
<li><p>Set the <code>input$var</code> and verify the <code>input$var</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>verify input$var</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb43-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var,</span>
<span id="cb43-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$var"</span>)</span></code></pre></div>
</details>
</div></li>
<li><p>Set the <code>input$var</code> and verify the <code>session$returned()</code></p>
<div class="cell">
<details open="" class="code-fold">
<summary>verify session$returned()</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>)</span>
<span id="cb44-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">returned</span>(),</span>
<span id="cb44-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feed"</span>]])</span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectVarServer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"session$returned()"</span>)</span></code></pre></div>
</details>
</div></li>
</ul>
<p>The results from these tests are below:</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb45-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb45-2">       selectVarServer: input$var </span>
<span id="cb45-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb45-4">       selectVarServer: session$returned() </span></code></pre></div>
</section>
<section id="module-outputs" class="level3">
<h3 class="anchored" data-anchor-id="module-outputs">Module outputs</h3>
<p>Rendered outputs can be accessed in <code>testServer()</code> just like inputs (i.e., with <code>output$outputId</code>). But the modules in <code>mstsap</code> don‚Äôt have outputs‚Äìthese are included in the standalone app functions (<code>datasetApp()</code>, <code>selectVarApp()</code>, and <code>selectDaraVarApp()</code>).</p>
<p>Fortunately, app functions can also be passed to the <code>app</code> argument of <code>testServer()</code>. I‚Äôll use <code>datasetApp()</code> to demonstrate.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
</figure>
</div>
<p>Testing a standalone app function is similar to testing a module server function, but with a few minor differences. First, the output from the standalone app function is <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#shiny-app-objects">assigned to an object</a> (<code>ds_app</code>), then placed in the <code>app</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb46-2">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb46-3"></span>
<span id="cb46-4">  })</span></code></pre></div>
</div>
<p>To use <code>session$setInputs()</code> need to include the namespace for the <code>inputId</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/datasetApp_reactives.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></p>
</figure>
</div>
<p>The output from <code>reactiveValuesToList()</code> in <code>datasetApp()</code> shows me how to access the <code>inputId</code> in the <code>datasetServer()</code> module (i.e., <code>input$`dataset-dataset`</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb47-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb47-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb47-4"></span>
<span id="cb47-5">})</span></code></pre></div>
</div>
<section id="output-testing-strategy" class="level4">
<h4 class="anchored" data-anchor-id="output-testing-strategy">Output testing strategy</h4>
<p>Testing outputs with <code>testServer()</code> is different than testing outputs in regular unit tests, because shiny outputs are executed in the server, but then rendered in the UI. The <a href="https://shiny.posit.co/r/articles/improve/server-function-testing/#complex-outputs-plots-htmlwidgets"><code>testServer()</code> documentation</a> outlines a testing strategy for complex outputs:</p>
<blockquote class="blockquote">
<p>*The goal for your tests should be to ask ‚Äúis the code that I wrote producing the plot I want?‚Äù There are two components to that question:</p>
<ol type="1">
<li><em>Does the plot generate without producing an error?</em></li>
<li><em>Is the plot visually correct?</em></li>
</ol>
<p><em><code>testServer</code> is great for assessing the first component here. By merely referencing <code>output$plot</code> in your test, you‚Äôll confirm that the plot was generated without an error.</em></p>
</blockquote>
<p>If we replace <em>plot</em> with <em>table</em> in the advice above, the tests for <code>datasetApp()</code> should confirm <code>output$data</code> is generated without producing an error.</p>
<p>Instead of writing an expectation, I‚Äôll use <code>cat()</code> to display the contents of <code>output$data</code> after setting the <code>`dataset-dataset`</code> input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">ds_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datasetApp</span>()</span>
<span id="cb48-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(ds_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb48-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$data:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb48-5">})</span></code></pre></div>
</div>
<p>The results from the test is below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb50-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb50-2">    output$data:</span></code></pre></div>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb51-1"> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">table</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">  class </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table shiny-table table- spacing-s'</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> style </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width:auto;'</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">thead</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb51-3">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb51-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">th</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text-align: right;'</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> weight <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">th</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb51-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">th</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> style</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text-align: left;'</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> feed <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">th</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>  </span>
<span id="cb51-6">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb51-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">thead</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb51-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tbody</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-9">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 179.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-10">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 160.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-11">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 136.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-12">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 227.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 217.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> align</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 168.00 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> horsebean <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">td</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tr</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb51-15">   <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">tbody</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span>
<span id="cb51-16"> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">table</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> </span></code></pre></div>
<p>The output is the HTML used to render the table in the UI. This doesn‚Äôt add a passing test, but it confirms that the table is being generated from the <code>data()</code> reactive.</p>
<p>The tests for <code>datasetApp()</code> will confirm the <code>inputId</code>, and verify the <code>class</code> and <code>names</code> of the <code>data()</code> reactive (which will be passed to the <code>renderTable()</code> function):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb52-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb52-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chickwts"</span>)</span>
<span id="cb52-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`dataset-dataset`"</span>)</span>
<span id="cb52-5"></span>
<span id="cb52-6">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb52-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb52-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.data.frame(data())"</span>)</span>
<span id="cb52-9"></span>
<span id="cb52-10">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb52-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()),</span>
<span id="cb52-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts))</span>
<span id="cb52-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"names(data())"</span>)</span></code></pre></div>
</div>
<p>I can include a test for the <code>class</code> of <code>output$data</code>, but note that this is a character output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb53-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb53-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)</span>
<span id="cb53-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class(output$data)"</span>)</span></code></pre></div>
</div>
<p>The results from <code>test_file()</code> are below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-datasetApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb55-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb55-2">       datasetApp: input$`dataset-dataset` </span>
<span id="cb55-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb55-4">       datasetApp: is.data.frame(data()) </span>
<span id="cb55-5">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb55-6">       datasetApp: names(data()) </span>
<span id="cb55-7">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]</span>
<span id="cb55-8">       datasetApp: class(output$data) </span></code></pre></div>
<p>The same method can be used to test the <code>selectVarApp()</code>, but note this app requires passing both <code>inputId</code>s to <code>session$setInputs()</code>:</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide selectVarApp() tests</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">sv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectVarApp</span>()</span>
<span id="cb56-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> sv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb56-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb56-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb56-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm contents of output$out</span></span>
<span id="cb56-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$out:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-7">  </span>
<span id="cb56-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm var is reactive </span></span>
<span id="cb56-9">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(var))</span>
<span id="cb56-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm var input</span></span>
<span id="cb56-11">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb56-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb56-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>)</span>
<span id="cb56-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm data is reactive</span></span>
<span id="cb56-15">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb56-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm data() is a data.frame</span></span>
<span id="cb56-17">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(</span>
<span id="cb56-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()))</span>
<span id="cb56-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm 'data' can be subsetted with 'var'</span></span>
<span id="cb56-20">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb56-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>()[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>]],</span>
<span id="cb56-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> airquality[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>]])</span>
<span id="cb56-23">})</span></code></pre></div>
</details>
</div>
</section>
<section id="testing-nested-modules" class="level4">
<h4 class="anchored" data-anchor-id="testing-nested-modules">Testing nested modules</h4>
<p>I highly recommend viewing the output of <code>reactiveValuesToList()</code> if your application has nested modules. It‚Äôs easy to lose track of ids if they span multiple layers.</p>
<p>We know <code>selectDataVarApp()</code> contains ‚Äòmodules inside other modules‚Äô, and these layers are reflected in the namespaces:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/selectDataVarApp_reactives.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></p>
</figure>
</div>
<p>To access the <code>inputId</code>s in the nested modules, we need to pass the full ‚Äòappended‚Äô namespace:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">dv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarApp</span>()</span>
<span id="cb57-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> dv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb57-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb57-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb57-5">})</span></code></pre></div>
</div>
<p>After setting the inputs, I can confirm the contents of <code>output$out</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">dv_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectDataVarApp</span>()</span>
<span id="cb58-2">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> dv_app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb58-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>,</span>
<span id="cb58-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb58-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">output$out:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb58-6">})</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb60-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb60-2">    output$out:</span>
<span id="cb60-3">   [1]  41  36  12  18  NA  28  23  19   8  NA   7  16  11  14  18</span>
<span id="cb60-4"> [16]  14  34   6  30  11   1  11   4  32  NA  NA  NA  23  45 115</span>
<span id="cb60-5"> [31]  37  NA  NA  NA  NA  NA  NA  29  NA  71  39  NA  NA  23  NA</span>
<span id="cb60-6"> [46]  NA  21  37  20  12  13  NA  NA  NA  NA  NA  NA  NA  NA  NA</span>
<span id="cb60-7"> [61]  NA 135  49  32  NA  64  40  77  97  97  85  NA  10  27  NA</span>
<span id="cb60-8"> [76]   7  48  35  61  79  63  16  NA  NA  80 108  20  52  82  50</span>
<span id="cb60-9"> [91]  64  59  39   9  16  78  35  66 122  89 110  NA  NA  44  28</span>
<span id="cb60-10">[106]  65  NA  22  59  23  31  44  21   9  NA  45 168  73  NA  76</span>
<span id="cb60-11">[121] 118  84  85  96  78  73  91  47  32  20  23  21  24  44  21</span>
<span id="cb60-12">[136]  28   9  13  46  18  13  24  16  13  23  36   7  14  30  NA</span>
<span id="cb60-13">[151]  14  18  20 </span></code></pre></div>
<p>After confirming <code>output$out</code>, I‚Äôll test the inputs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb61-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-var-var</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb61-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone"</span>)</span>
<span id="cb61-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`var-var-var`"</span>)</span>
<span id="cb61-5"></span>
<span id="cb61-6">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb61-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var-data-dataset</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>,</span>
<span id="cb61-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airquality"</span>)</span>
<span id="cb61-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input$`var-data-dataset`"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb63-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb63-2">       selectDataVarApp: input$`var-var-var` </span>
<span id="cb63-3">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]</span>
<span id="cb63-4">       selectDataVarApp: input$`var-data-dataset`</span></code></pre></div>
<p>I can also verify the contents of the reactive <code>var()</code> inside the test:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(var))</span>
<span id="cb64-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_cmt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectDataVarApp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.reactive(var)"</span>)</span>
<span id="cb64-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">var:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-selectDataVarApp.R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb66-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]</span>
<span id="cb66-2">       selectDataVarApp: is.reactive(var) </span>
<span id="cb66-3"></span>
<span id="cb66-4">    var:</span>
<span id="cb66-5"> 41 36 12 18 NA 28 23 19 8 NA 7 16 11 14 18 14 34 6 30 11 1 11 4 32 NA NA NA 23 </span>
<span id="cb66-6">    45 115 37 NA NA NA NA NA NA 29 NA 71 39 NA NA 23 NA NA 21 37 20 12 13 NA NA NA</span>
<span id="cb66-7">    NA NA NA NA NA NA NA 135 49 32 NA 64 40 77 97 97 85 NA 10 27 NA 7 48 35 61 79 </span>
<span id="cb66-8">    63 16 NA NA 80 108 20 52 82 50 64 59 39 9 16 78 35 66 122 89 110 NA NA 44 28 </span>
<span id="cb66-9">    65 NA 22 59 23 31 44 21 9 NA 45 168 73 NA 76 118 84 85 96 78 73 91 47 32 20 23</span>
<span id="cb66-10">    21 24 44 21 28 9 13 46 18 13 24 16 13 23 36 7 14 30 NA 14 18 20 </span></code></pre></div>
</section>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has shown how shiny‚Äôs <code>testServer()</code> function allows you to isolate and test module server functions, which makes it easier to ensure that your <code>server</code> function behaves as expected (and locate and fix bugs).</p>
<p>I hope you have a better understanding of how you can use <code>testServer()</code> to test a modules inputs/outputs, reactivity, calculations, and errors.</p>
<p>In the next post I‚Äôll cover performing integration tests with <code>shinytest2</code>!</p>


</section>

 ]]></description>
  <category>shiny</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/</guid>
  <pubDate>Tue, 20 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p3-test-shiny-module-tests/image.png" medium="image" type="image/png" height="192" width="144"/>
</item>
<item>
  <title>Debugging in RStudio</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/debugging/</link>
  <description><![CDATA[ 





<p>In this post I‚Äôll cover using the <code>browser()</code> function with RStudio‚Äôs debugger. RStudio‚Äôs debugging tools are built into the IDE, which provides a seamless transition between writing, running, and debugging code.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://mjfrigaard.github.io/posts/debugging/image.png" class="img-fluid" style="width:70.0%"></p>
</div></div><section id="debugging" class="level1 page-columns page-full">
<h1>Debugging</h1>
<p>Debuggers are a critical tool when you‚Äôre programming, and they have several benefits that make them a must-use for any R user. You‚Äôll inevitably encounter an error or unexpected behavior while you‚Äôre programming. Using a debugger allows you to ‚Äòstep through‚Äô your code line-by-line, which makes it easier to find the precise location of bugs and errors and the conditions under which they occur.</p>
<p>But debuggers aren‚Äôt only helpful in dealing with errors. The debugger can also be a great learning tool because it provides an interactive way to see how the code is being executed and the order in which functions are being called. For example, you might know that a function returns a particular object but can‚Äôt determine how that object was created. Debugging lets us get ‚Äòunder the hood‚Äô of our code and see how it‚Äôs really working.</p>
<p>You‚Äôre probably doing some version of debugging already. If you‚Äôve ever dropped a call to <code>print()</code> or <code>return()</code> at some well-placed intermediate point in a function to try and understand its behavior, then you know the challenge debugging tries to solve: <strong>We can‚Äôt see what happens inside the parentheses when code is executed.</strong> When you use <code>print()</code> or <code>return()</code> in this way, it‚Äôs an attempt to indirectly investigate how/if/where the code is performing its intended purpose.</p>
<p>In this post, I‚Äôll cover using the <code>browser()</code> function and RStudio‚Äôs debugger while developing a series of small, modular functions for returning a table of ‚Äòpackage data structures.‚Äô The code for this post comes from <a href="https://github.com/mjfrigaard/dbap"><code>dbap</code></a> (‚Äòdebugging app-package‚Äô).</p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>I want to create a function that returns a table of ‚Äòdata structure‚Äô columns that describe the available <code>data.frame</code> or <code>tibble</code> objects loaded with a package. Below is a small example of the desired return object from this function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 25%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 10%">
<col style="width: 7%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Dataset</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13</td>
<td style="text-align: left;">19066</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">datasets</td>
<td style="text-align: left;">mtcars</td>
<td style="text-align: left;">data.frame</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">32</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">11</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>This table shows the <code>storms</code> data from <code>dplyr</code> and the <code>mtcars</code> data from <code>datasets</code>. The columns include the <code>Package</code> the data came from, the dataset name (<code>Dataset</code>), the data <code>Title</code> from the documentation, the <code>Class</code> of the data object, the total number of <code>Columns</code> and <code>Rows</code>, and the number of columns by type (<code>Logical</code>, <code>Numeric</code>, <code>Character</code>, <code>Factor</code> and <code>List</code>).</p>
<p>One of the first steps for creating this function is to verify a package‚Äôs namespace is loaded. I‚Äôve written the <code>check_pkg_ns()</code> to check this.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>check_pkg_ns()</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">check_pkg_ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(quiet)) {</span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with messages</span></span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(pkg)) {</span>
<span id="cb1-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb1-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loading package: "</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb1-7">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" not available"</span>))</span>
<span id="cb1-9">      }</span>
<span id="cb1-10">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package "</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" loaded</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb1-12">    }</span>
<span id="cb1-13">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without messages</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(pkg)) {</span>
<span id="cb1-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb1-17">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" not available"</span>))</span>
<span id="cb1-19">      }</span>
<span id="cb1-20">    }</span>
<span id="cb1-21">  }</span>
<span id="cb1-22">}</span></code></pre></div>
</details>
</div>
<p><code>check_pkg_ns()</code> checks if a packages‚Äôs namespace is loaded, and if not, loads it. This function assumes the package (<code>pkg</code>) has been installed with <code>install.packages()</code> (I‚Äôve also written <a href="https://github.com/mjfrigaard/dbap/blob/main/R/check_pkg_inst.R"><code>check_pkg_inst()</code></a> to check if the package has been installed.)</p>
<section id="experiment" class="level3">
<h3 class="anchored" data-anchor-id="experiment">Experiment</h3>
<p>Before debugging, I‚Äôll read the documentation and help files to find examples or use cases for ‚Äòmini-experiments.‚Äô These are designed to clarify any function arguments and learn how the code truly works. Experiments should produce predictable, definitive (preferably incompatible) outputs from each function.</p>
<section id="namespace-functions" class="level4">
<h4 class="anchored" data-anchor-id="namespace-functions">Namespace functions</h4>
<p>The help file contains the following helpful statement on <code>isNamespaceLoaded()</code>:</p>
<blockquote class="blockquote">
<p><em>‚Äú<code>isNamespaceLoaded(pkg)</code> is equivalent to but more efficient than <code>pkg %in% loadedNamespaces()</code>‚Äù</em></p>
</blockquote>
<p>First, I‚Äôll check the loaded namespaces with <code>loadedNamespaces()</code>, then look for a package I know <em>isn‚Äôt</em> in the namespace with <code>isNamespaceLoaded()</code>. I‚Äôll use the <code>fs</code> package because it isn‚Äôt loaded or attached to the <code>search()</code> list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what's in the namespace? </span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadedNamespaces</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1"> [1] "compiler"   "rsconnect"  "graphics"  </span>
<span id="cb3-2"> [4] "tools"      "rstudioapi" "utils"     </span>
<span id="cb3-3"> [7] "grDevices"  "stats"      "datasets"  </span>
<span id="cb3-4">[10] "methods"    "base"</span></code></pre></div>
<p>Check if <code>fs</code> is in the loaded namespace:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify fs is not loaded</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">[1] FALSE</span></code></pre></div>
<p>The help file tells me the following about <code>requireNamespace</code>:</p>
<blockquote class="blockquote">
<p><em>‚Äú<code>requireNamespace</code> is a wrapper for <code>loadNamespace</code> analogous to <code>require()</code> that returns a logical value.‚Äù</em></p>
</blockquote>
<p>‚Ä¶and‚Ä¶</p>
<blockquote class="blockquote">
<p><em>‚Äú<code>requireNamespace</code> returns <code>TRUE</code> if it succeeds or <code>FALSE</code>‚Äù</em></p>
</blockquote>
<p>I‚Äôll load a package (<code>"fs"</code>) with <code>requireNamespace()</code> and verify it‚Äôs in the namespace with <code>isNamespaceLoaded()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add "fs" to the namespace</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">Loading required namespace: fs</span>
<span id="cb7-2">[1] TRUE</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify it's been added </span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">[1] TRUE</span></code></pre></div>
<p>Finally, I‚Äôll unload the <code>"fs"</code> package from the namespace so it can be tested in the debugger.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove fs</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify fs has been unloaded</span></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isNamespaceLoaded</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">[1] FALSE</span></code></pre></div>
<p>The great thing about designing these mini experiments is that they can be quickly converted into <a href="https://testthat.r-lib.org/"><code>testthat</code> tests</a>. I‚Äôm now confident I can use the namespace functions to:</p>
<ol type="1">
<li>View loaded packages namespaces<br>
</li>
<li>Check for a specific package in the loaded namespaces<br>
</li>
<li>Require a package namespace is loaded<br>
</li>
<li>Remove a loaded package namespace</li>
</ol>
<p>These are the behaviors I want to confirm in <code>check_pkg_ns()</code> using the <code>browser()</code> function.</p>
</section>
</section>
</section>
<section id="browser" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="browser">browser()</h2>
<p>If I want to explore the behaviors of the namespace functions in <code>check_pkg_ns()</code>, I need to add <code>browser()</code> somewhere I can ‚Äòstep into‚Äô this function and then proceed through line-by-line. In this case, the top of the function makes sense:</p>
<div id="fig-browser_fun" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-browser_fun" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browser_fun.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" data-ref-parent="fig-browser_fun">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>browser()</code> in <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-browser_fun-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <code>browser()</code> placement in <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
<section id="debug-mode" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="debug-mode">Debug mode</h3>
<p>To enter debugging mode, I‚Äôll need to run <code>check_pkg_ns()</code> or source <code>R/check_pkg_ns.R</code> with the package I used in my experiments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="page-columns page-full">
<div id="fig-dbg-debug_mode" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-debug_mode" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-debug_mode.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-debug_mode">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-debug_mode-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: RStudio IDE in debug mode
</figcaption>
</figure>
</div>
</div>
<p>The <code>browser()</code> function is one of the multiple methods for using RStudio debugging tools (see the <strong>TIP</strong> callout box below for more).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TIP: Other debugging methods
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.15em; color: #063E23;">
<p>In this post, I focused on using the <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/browser.html"><code>browser()</code></a> function to enter debug mode, but RStudio has several built-in tools that can help you debug your R code:</p>
<ul>
<li><p><strong>Debug function on error:</strong> You can set R to automatically enter the debugger when an error occurs by using <code>options(error = utils::recover)</code>. Then, when an error occurs, you‚Äôll be given a menu of places to browse, the most recent (the location where the error occurred) first.</p></li>
<li><p><strong>Breakpoints:</strong> Breakpoints can be set in your R scripts to pause execution at a particular line of code. You can add breakpoints by clicking to the left of the line number in the script editor or by pressing Shift+F9 with your cursor on the desired line. Then, run your code. Execution will stop just before the line with the breakpoint, allowing you to inspect the current state of the environment.</p></li>
<li><p><strong><code>debug()</code>:</strong> You can use <code>debug(function_name)</code> to flag a function for ‚Äúdebug‚Äù mode. When you call the function, the debugger will open and stop at the first line of the function, where you can step through the function line by line, inspect the environment, and see what‚Äôs happening at each step.</p></li>
<li><p><strong><code>traceback()</code></strong>: When an error occurs, you can call <code>traceback()</code> to get a stack trace that shows you the sequence of calls that led up to the error.</p></li>
<li><p><strong>Code Diagnostics</strong>: RStudio provides real-time notifications about potential issues in your code, like syntax errors or unused variables. These are not technically part of the debugger, but diagnostics will help you avoid bugs before you run your code.</p></li>
</ul>
<p>You should read <a href="https://support.posit.co/hc/en-us/articles/205612627-Debugging-with-the-RStudio-IDE">this blog post</a> and <a href="https://adv-r.hadley.nz/debugging.html">this chapter</a> of Advanced R, 2nd Ed. for more information on the various debugging methods.</p>
</div>
</div>
</div>
</div>
</section>
<section id="console" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="console">Console</h3>
<p>When the <code>browser()</code> function is called, the <strong>Console</strong> enters the ‚Äòreactive browser environment,‚Äô tells me where the debugging function was called from, and changes the prompt to <code>Browse[1]&gt;</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">Called from: check_pkg_ns("fs")</span>
<span id="cb13-2">Browse[1]&gt; </span></code></pre></div>
<p>I can use the <strong>Console</strong> to inspect variables and ‚Äòstep through‚Äô the function code.</p>
<div class="page-columns page-full">
<div id="fig-console" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-console" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-console.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:80.0%" data-ref-parent="fig-console">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode in <strong>Console</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Debug mode with <code>browser()</code> in Console
</figcaption>
</figure>
</div>
</div>
<p>The debugger toolbar is also placed at the top of the <strong>Console</strong>:</p>
<div id="fig-browser_toolbar" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-browser_toolbar" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browser_toolbar.png" class="img-fluid figure-img" style="width:100.0%" data-ref-parent="fig-browser_toolbar">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug toolbar <strong>Console</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-browser_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Debug toolbar in Console
</figcaption>
</figure>
</div>
<p>I can use the toolbar or enter the following commands in the <strong>Console</strong>:</p>
<ul>
<li><p><code>n</code> (next): execute the next step in the function</p></li>
<li><p><code>s</code> (step into): step into the function call on the current line</p></li>
<li><p><code>c</code> (continue): continue normal execution without stepping</p></li>
<li><p><code>f</code> (finish): execute the rest of the current loop or function</p></li>
<li><p><code>Q</code> (Quit): quit the debugger</p></li>
</ul>
<p>I‚Äôll return to the <strong>Console</strong> in a bit (this is where most of the debugging is done), but let‚Äôs view the other changes to the IDE first.</p>
</section>
<section id="source" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="source">Source</h3>
<p>In the <strong>Source</strong> pane, we can see the line with <code>browser()</code> has been highlighted with an arrow:</p>
<div class="page-columns page-full">
<div id="fig-source" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-source" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-source.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:80.0%" data-ref-parent="fig-source">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode in <strong>Source</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Debug mode with <code>browser()</code> in Source
</figcaption>
</figure>
</div>
</div>
<p>The <strong>Source</strong> pane will continually update and highlight my execution position (i.e., what‚Äôs going to be executed next) as I ‚Äòstep through‚Äô the code.</p>
<p>*<em>After we‚Äôve finished debugging, it‚Äôs important to remember to remove the <code>browser()</code> function so it isn‚Äôt triggered the next time it is executed.</em></p>
</section>
<section id="environment" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="environment">Environment</h3>
<p>The <em>(Environment)</em> pane is changed from the global environment to the environment of the function that‚Äôs currently being executed in the <strong>Console</strong>:</p>
<div class="page-columns page-full">
<div id="fig-env" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-env" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-env.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:80.0%" data-ref-parent="fig-env">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Debug mode in <strong>Environment</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Debug mode with <code>browser()</code> in Environment
</figcaption>
</figure>
</div>
</div>
<p>In the case of <code>check_pkg_ns()</code>, I can see the <strong>Values</strong> section contains the <code>pkg</code> (<code>"fs"</code>) and <code>quiet</code> (<code>FALSE</code>) arguments.</p>
<section id="other-environments" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="other-environments">Other environments</h4>
<p>The drop-down list of environments above the <strong>Values</strong> is arranged in reverse hierarchical order: The <strong>Global Environment</strong> is listed under the drop-down list, but it‚Äôs above the <code>check_pkg_ns()</code> environment in the search path:</p>
<div class="page-columns page-full">
<div id="fig-env" class="quarto-layout-panel page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div class="quarto-layout-row column-page-inset-right">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-env" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-env-list" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-env-list.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-env">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Items in <strong>Environment</strong> debug mode
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-env" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-env-list" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/search-path.png" title="Source: https://adv-r.hadley.nz/environments.html#search-path" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-env">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-env-list-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) <a href="https://adv-r.hadley.nz/environments.html#search-path">Package environments and the search path</a>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-env-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Environments with debugger
</figcaption>
</figure>
</div>
</div>
</section>
<section id="traceback" class="level4">
<h4 class="anchored" data-anchor-id="traceback">Traceback</h4>
<p>The traceback (or ‚Äòcall stack‚Äô) is the ‚Äòstack‚Äô of functions that have been run thus far:</p>
<div id="fig-traceback" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-traceback" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-traceback.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-traceback">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Traceback in <strong>Environment</strong>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-traceback-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Environment Traceback viewer
</figcaption>
</figure>
</div>
<p>Clicking on an item in traceback will display the environment contents in the function‚Äôs code. Right now, it includes the call to <code>source("R/check_pkg_ns.R")</code>, and ‚ÄòDebug source‚Äô call to <code>check_pkg_ns("fs")</code>.</p>
<p>If the <strong><em>Show internals</em></strong> option is selected, the internal functions are shown (slightly subdued in gray).</p>
<div id="fig-traceback-internals" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-traceback-internals" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-browse-traceback-internals.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-traceback-internals">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Traceback internals
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-traceback-internals-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Traceback internals
</figcaption>
</figure>
</div>
</section>
</section>
<section id="arguments" class="level3">
<h3 class="anchored" data-anchor-id="arguments">Arguments</h3>
<p>The <code>pkg</code> argument can be printed to verify it‚Äôs contents.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">Browse[1]&gt; pkg</span>
<span id="cb14-2">[1] "fs"</span></code></pre></div>
<p>The debugger lets me view the state of a function‚Äôs values or variables at each execution step, which helps me understand any incorrect or unexpected values.</p>
<p>Based on the help files and my experiments, <code>check_pkg_ns()</code> should be looking through the namespace to see if a <code>pkg</code> is loaded; if it isn‚Äôt, that <code>pkg</code> is loaded in the namespace.</p>
<p>I can also check the code from the mini experiments inside the debugger <strong>Console</strong> to see if the <code>fs</code> namespace has been loaded:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">Browse[1]&gt; isNamespaceLoaded("fs")</span>
<span id="cb15-2">[1] FALSE</span></code></pre></div>
<p>At my current location in <code>check_pkg_ns()</code>, the <code>fs</code> package hasn‚Äôt been loaded.</p>
</section>
<section id="stepping-through" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="stepping-through">Stepping through</h3>
<p>I can begin ‚Äòstepping through‚Äô <code>check_pkg_ns()</code> by entering <strong><code>n</code></strong> in the <strong>Console</strong>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">Browse[1]&gt; n</span></code></pre></div>
<p>Notice after the entering <strong><code>n</code></strong> in the <strong>Console</strong>, the debugger tells me where the <code>browser()</code> function has paused execution (<code>debug at /path/to/function/file.R</code>), the line number (<code>#27</code>), and the <code>check_pkg_ns()</code> function is printed to console (I‚Äôve omitted it here):</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">Browse[1]&gt; n</span>
<span id="cb17-2">debug at ~/projects/apps/dbap/R/check_pkg_ns.R#27:</span>
<span id="cb17-3"></span>
<span id="cb17-4">&lt;...check_pkg_ns() function...&gt;</span>
<span id="cb17-5"></span>
<span id="cb17-6">Browse[2]&gt;</span></code></pre></div>
<p>The prompt also changes from <code>Browse[1]&gt;</code> to <code>Browse[2]&gt;</code> to let me know I‚Äôm inside the <code>check_pkg_ns()</code> function.</p>
<p>I‚Äôll use <strong><code>n</code></strong> (or Next) to continue following the path <code>pkg</code> takes through the function:</p>
<div class="page-columns page-full">
<div id="fig-dbg-next-console" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-next-console" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-next-console.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-next-console">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Use Console to step through function
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-next-console-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Use <code>n</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>When I land on the line <em>after</em> the call to <code>requireNamespace()</code>, I can check to see if the <code>fs</code> namespace has been loaded with <code>isNamespaceLoaded("fs")</code></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">Browse[2]&gt; isNamespaceLoaded("fs")</span>
<span id="cb18-2">[1] TRUE</span></code></pre></div>
</section>
<section id="inspect-values" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="inspect-values">Inspect values</h3>
<p>Now that I‚Äôve confirmed <code>check_pkg_ns()</code> works with <code>fs</code>, I should also confirm it works with a development package (i.e., not on CRAN). I can test this with the <a href="https://github.com/csgillespie/roxygen2Comment"><code>roxygen2Comment</code> package</a>‚Äìit contains an addin for pasting <code>roxygen2</code> comment blocks.</p>
<p>To quit debug mode, I can enter <strong><code>Q</code></strong> in the <strong>Console</strong> or click on the red square (<strong><em>Stop</em></strong>) icon in the toolbar.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1">Browse[2]&gt; Q</span></code></pre></div>
<p>I‚Äôll confirm <code>roxygen2Comment</code> is not loaded with <code>isNamespaceLoaded()</code>, then change the <code>pkg</code> argument in <code>check_pkg_ns()</code> and re-run the function</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb20-1">isNamespaceLoaded("roxygen2Comment")</span>
<span id="cb20-2">[1] FALSE</span></code></pre></div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">&gt; check_pkg_ns("roxygen2Comment")</span>
<span id="cb21-2">Called from: check_pkg_ns("roxygen2Comment")</span>
<span id="cb21-3">Browse[1]&gt; </span></code></pre></div>
<p>This time, when I step through <code>check_pkg_ns()</code>, I notice <code>pkg</code> takes an alternative path:</p>
<div class="page-columns page-full">
<div id="fig-dbg-next-console-02" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-next-console-02" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-next-console-02.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-next-console-02">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Alternative path through function
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-next-console-02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: Development package in <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>When the <strong>Source</strong> pane highlights the <code>stop()</code> function, I can check to confirm this package wasn‚Äôt loaded:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb22-1">Browse[2]&gt; isNamespaceLoaded("roxygen2Comment")</span>
<span id="cb22-2">[1] FALSE</span></code></pre></div>
<p>If I enter <strong><code>n</code></strong> one more time in the <strong>Console</strong>, I see the <code>stop()</code> error from the function is returned:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">Browse[2]&gt; n</span>
<span id="cb23-2">Error in check_pkg_ns("roxygen2Comment") : </span>
<span id="cb23-3">  roxygen2Comment not available</span></code></pre></div>
<p>I‚Äôll perform one last check on <code>check_pkg_ns()</code>: what if I want to pass multiple packages to <code>pkg</code>? I‚Äôll check this with <a href="https://fs.r-lib.org/"><code>fs</code></a> and <a href="https://klmr.me/box/index.html"><code>box</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First make sure these aren't loaded...</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unloadNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>)</span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now combine into vector</span></span>
<span id="cb24-5">pkgs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>)</span>
<span id="cb24-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(pkgs)</span></code></pre></div>
</div>
<p>After entering debug mode, I want to proceed to the control flow and verify the <code>pkgs</code> variable:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb25-1">&gt; check_pkg_ns(pkgs)</span>
<span id="cb25-2">Called from: check_pkg_ns(pkgs)</span>
<span id="cb25-3">Browse[1]&gt; n</span>
<span id="cb25-4">Browse[2]&gt; pkgs</span>
<span id="cb25-5">[1] "fs"  "box"</span></code></pre></div>
<p>This confirms both packages are in the <code>pkg</code> variable. If I use <strong><code>n</code></strong> to proceed through to end of <code>check_pkg_ns()</code>, I see the final line returns the successful loading message twice:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb26-1">Browse[2]&gt; n</span>
<span id="cb26-2">Loading package: fs</span>
<span id="cb26-3">Loading package: box</span></code></pre></div>
</section>
<section id="browser-recap" class="level3">
<h3 class="anchored" data-anchor-id="browser-recap"><em>browser() recap</em></h3>
<p>Once execution is paused with <code>browser()</code>, using the <strong><code>n</code></strong> command in the <strong>Console</strong> (or in the debugging toolbar at the top-right of the pane) lets me step through the code line-by-line.</p>
<div id="fig-next_toolbar" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-next_toolbar" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-next_toolbar.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:75.0%" data-ref-parent="fig-next_toolbar">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step through/over
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;12: Step through/over code
</figcaption>
</figure>
</div>
<p>This allows me to inspect the state of the variables at various points within a function.</p>
</section>
</section>
<section id="nested-functions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="nested-functions">Nested functions</h2>
<p>The <code>check_pkg_ns()</code> function is fairly basic in that it performs a single ‚Äòunit of work‚Äô (i.e., <em>check if add-on packages package have been loaded and attached; if not, load and attach them</em>). When functions become more complex, it‚Äôs more efficient to use nested functions‚Äìi.e., functions within other functions‚Äìwhich allow me to execute multiple commands simultaneously.</p>
<p>An example of this is the <code>pkg_data_results()</code> function below:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>pkg_data_results()</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)</span>
<span id="cb27-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 5 √ó 3</span></span>
<span id="cb27-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Package Item              Title              </span></span>
<span id="cb27-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt;              </span></span>
<span id="cb27-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dplyr   band_instruments  Band membership    </span></span>
<span id="cb27-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dplyr   band_instruments2 Band membership    </span></span>
<span id="cb27-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dplyr   band_members      Band membership    </span></span>
<span id="cb27-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dplyr   starwars          Starwars characters</span></span>
<span id="cb27-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dplyr   storms            Storm tracks data</span></span></code></pre></div>
</details>
</div>
<p><code>pkg_data_results()</code> returns a <code>data.frame</code> with three columns: <code>Package</code>, <code>Item</code>, and <code>Title</code>.</p>
<p>The output from <code>pkg_data_results()</code> comes from the <code>data(package = "pkg")</code> output:</p>
<div id="fig-next_toolbar" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-dbg-data_output" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dbg-data_output-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-data_output.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-next_toolbar">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-data_output-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Output from <code>data(package = )</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-next_toolbar-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;13: <code>data(package = "dplyr")</code>
</figcaption>
</figure>
</div>
<p>This output is normally opened in a separate window, but it‚Äôs created as a matrix.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>structure of data(package =)</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>))</span>
<span id="cb28-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 4</span></span>
<span id="cb28-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ title  : chr "Data sets"</span></span>
<span id="cb28-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ header : NULL</span></span>
<span id="cb28-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ results: chr [1:5, 1:4] "dplyr" "dplyr" "dplyr" "dplyr" ...</span></span>
<span id="cb28-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "dimnames")=List of 2</span></span>
<span id="cb28-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..$ : NULL</span></span>
<span id="cb28-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..$ : chr [1:4] "Package" "LibPath" "Item" "Title"</span></span>
<span id="cb28-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ footer : NULL</span></span>
<span id="cb28-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "class")= chr "packageIQR"</span></span></code></pre></div>
</details>
</div>
<p><code>pkg_data_results()</code> converts the matrix output into a <code>data.frame</code> three columns in (<code>Package</code>, <code>Title</code>, <code>Item</code>).</p>
<p>I‚Äôve placed <code>browser()</code> at the top of <code>pkg_data_results()</code> and run it with the <a href="https://fivethirtyeight-r.netlify.app/"><code>fivethirtyeight</code> package</a>.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb29-1">pkg_data_results("fivethirtyeight")</span></code></pre></div>
<div id="fig-pkg_data_results_538" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-dbg-pkg_data_results_538" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dbg-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-pkg_data_results_538.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%" data-ref-parent="fig-pkg_data_results_538">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) browser() in pkg_data_results(‚Äúfivethirtyeight‚Äù)
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pkg_data_results_538-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;14: <code>browser()</code> in <code>pkg_data_results("fivethirtyeight")</code>
</figcaption>
</figure>
</div>
<section id="step-into" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="step-into">Step into</h3>
<p>When the debugger lands on <code>check_pkg_ns()</code>, I can follow the <code>fivethirtyeight</code> package through this function by ‚Äòstepping into‚Äô this function by entering <strong><code>s</code></strong> in the <strong>Console</strong> (or the toolbar icon):</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_toolbar.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Step into a function</figcaption>
</figure>
</div>
</div></div><div id="fig-step_into_pkg_data_results" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-dbg-step_into_pkg_data_results" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dbg-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_pkg_data_results.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%" data-ref-parent="fig-step_into_pkg_data_results">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) browser() in pkg_data_results(‚Äúfivethirtyeight‚Äù)
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-step_into_pkg_data_results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;15: Step into in <code>pkg_data_results("fivethirtyeight")</code>
</figcaption>
</figure>
</div>
</section>
<section id="debugging-at-vs-in" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="debugging-at-vs-in">Debugging ‚Äòat‚Äô vs ‚Äòin‚Äô</h3>
<p>In the <strong>Console</strong>, there are now <code>debugging in</code> and <code>debug at</code> locations:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">Browse[2]&gt; s</span>
<span id="cb30-2">debugging in: check_pkg_ns(pkg = pkg, quiet = TRUE)</span>
<span id="cb30-3">debug at /apps/dbap/R/check_pkg_ns.R#25: </span></code></pre></div>
<p>The <code>debug at</code> location is the the we location of the initial call to <code>browser()</code>, and <code>debugging in</code> is the function I <em>stepped into</em>.</p>
<p>The prompt has also changed from <code>Browse[2]&gt;</code> to <code>Browse[3]&gt;</code>:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb31-1">Browse[3]&gt;</span></code></pre></div>
<div class="page-columns page-full">
<div id="fig-dbg-step_into_01" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-step_into_01" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_01.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-step_into_01">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Use <code>s</code> to step into check_pkg_ns()
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-step_into_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;16: Use <code>s</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>The <code>R/check_pkg_ns.R</code> file will open with the highlighted function. I can proceed through <code>check_pkg_ns()</code> using <strong><code>n</code></strong> until I reach <code>requireNamespace()</code>:</p>
<div class="page-columns page-full">
<div id="fig-dbg-step_into_02" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-step_into_02" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_02.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:70.0%" data-ref-parent="fig-dbg-step_into_02">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Use <code>n</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-step_into_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;17: Use <code>n</code> to step through <code>check_pkg_ns()</code>
</figcaption>
</figure>
</div>
</div>
<p>When I reach the final line in <code>check_pkg_ns()</code>, I can use either method below verify the <code>pkg</code> namespace is loaded:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">Browse[3]&gt; pkg %in% loadedNamespaces()</span>
<span id="cb32-2">[1] TRUE</span>
<span id="cb32-3">Browse[3]&gt; isNamespaceLoaded(pkg)</span>
<span id="cb32-4">[1] TRUE</span></code></pre></div>
<p>After the last line of <code>check_pkg_ns()</code> has been evaluated, the debugger will automatically return to the <code>pkg_data_results()</code> function. The <strong>Source</strong> pane will highlight the final step (and the prompt returns to <code>Browse[2]&gt;</code>):</p>
<div class="page-columns page-full">
<div id="fig-dbg-step_into_03" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-step_into_03" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-step_into_03.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-step_into_03">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step into/through <code>check_pkg_ns()</code> from <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-step_into_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;18: Step into and through <code>check_pkg_ns()</code> from <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<p>A final <strong><code>n</code></strong> command in the <strong>Console</strong> will return the output table:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">Browse[2]&gt; n</span>
<span id="cb33-2">### A tibble: 129 √ó 3</span>
<span id="cb33-3">##    Package         Item                Title</span>
<span id="cb33-4">##    &lt;chr&gt;           &lt;chr&gt;               &lt;chr&gt;</span>
<span id="cb33-5">##  1 fivethirtyeight US_births_1994_2003 Some People Are Too Superstitious To ‚Ä¶</span>
<span id="cb33-6">##  2 fivethirtyeight US_births_2000_2014 Some People Are Too Superstitious To ‚Ä¶</span>
<span id="cb33-7">##  3 fivethirtyeight ahca_polls          American Health Care Act Polls</span>
<span id="cb33-8">##  4 fivethirtyeight airline_safety      Should Travelers Avoid Flying Airline‚Ä¶</span>
<span id="cb33-9">##  5 fivethirtyeight antiquities_act     Trump Might Be The First President To‚Ä¶</span>
<span id="cb33-10">##  6 fivethirtyeight august_senate_polls How Much Trouble Is Ted Cruz Really  ‚Ä¶</span>
<span id="cb33-11">##  7 fivethirtyeight avengers            Joining The Avengers Is As Deadly As</span>
<span id="cb33-12">##  8 fivethirtyeight bachelorette        Bachelorette / Bachelor</span>
<span id="cb33-13">##  9 fivethirtyeight bad_drivers         Dear Mona, Which State Has The Worst ‚Ä¶</span>
<span id="cb33-14">## 10 fivethirtyeight bechdel             The Dollar-And-Cents Case Against Hol‚Ä¶</span>
<span id="cb33-15">## # ‚Ñπ 119 more rows</span>
<span id="cb33-16">## # ‚Ñπ Use `print(n = ...)` to see more rows</span></code></pre></div>
</section>
</section>
<section id="put-it-all-together" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="put-it-all-together">Put it all together</h2>
<p>The initial <code>pkg_data_str()</code> function for returning a table of ‚Äòpackage data structures‚Äô is below.</p>
<div class="cell">
<details class="code-fold">
<summary>expand to see initial pkg_data_str()</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">pkg_data_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb34-2"></span>
<span id="cb34-3">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span>
<span id="cb34-4"></span>
<span id="cb34-5">  ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb34-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]], </span>
<span id="cb34-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb34-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb34-9">  )</span>
<span id="cb34-10"></span>
<span id="cb34-11">  cols_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb34-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-13">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-15">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-17">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span></span>
<span id="cb34-21">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span></span>
<span id="cb34-25">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span></span>
<span id="cb34-29">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span></span>
<span id="cb34-33">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb34-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb34-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span></span>
<span id="cb34-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb34-38">  )</span>
<span id="cb34-39"></span>
<span id="cb34-40">  pkg_tbls_dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cols_tbl,</span>
<span id="cb34-41">    stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb34-42">  )</span>
<span id="cb34-43"></span>
<span id="cb34-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pkg_tbls_dfs)</span>
<span id="cb34-45">}</span></code></pre></div>
</details>
</div>
<p><code>pkg_data_str()</code> uses nested functions to create the following intermediate objects I can check while developing with <code>browser()</code> (the example below uses the <a href="https://forcats.tidyverse.org/"><code>forcats</code> package</a>)</p>
<section id="data-results" class="level3">
<h3 class="anchored" data-anchor-id="data-results">Data results</h3>
<p>The output from <code>pkg_data_results()</code> is stored in <code>data_results</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">Browse[2]&gt; data_results</span>
<span id="cb36-2"># A tibble: 1 √ó 3</span>
<span id="cb36-3">  Package Item    Title                                                           </span>
<span id="cb36-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                                                           </span>
<span id="cb36-5">1 forcats gss_cat A sample of categorical variables from the General Social su...</span></code></pre></div>
</section>
<section id="package-data-objects" class="level3">
<h3 class="anchored" data-anchor-id="package-data-objects">Package data objects</h3>
<p>After extracting the <code>Package</code>, <code>Title</code>, and <code>Type</code> columns from <code>pkg_data_results()</code>, I use <code>purrr:map2()</code> to iterate over each <code>Item</code> and <code>Package</code>, which builds a list of datasets (<code>ds_list</code>). The <code>.f</code> argument is a <a href="https://github.com/mjfrigaard/dbap/blob/main/R/pkg_data_object.R">nested <code>pkg_data_object()</code> function</a>, which calls <code>base::get()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb37-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]],</span>
<span id="cb37-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb37-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb37-5">)</span></code></pre></div>
</div>
<p>I‚Äôll view the contents of the list with <code>str()</code></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">Browse[2]&gt; str(ds_list)</span>
<span id="cb38-2">List of 1</span>
<span id="cb38-3"> $ : tibble [21,483 √ó 9] (S3: tbl_df/tbl/data.frame)</span>
<span id="cb38-4">  ..$ year   : int [1:21483] 2000 2000 2000 2000 2000 2000 2000 2000 ...</span>
<span id="cb38-5">  ..$ marital: Factor w/ 6 levels "No answer","Never married",..: 2 4 ...</span>
<span id="cb38-6">  ..$ age    : int [1:21483] 26 48 67 39 25 25 36 44 44 47 ...</span>
<span id="cb38-7">  ..$ race   : Factor w/ 4 levels "Other","Black",..: 3 3 3 3 3 3 3 3 3 3 ...</span>
<span id="cb38-8">  ..$ rincome: Factor w/ 16 levels "No answer","Don't know",..: 8 8 16 16 ...</span>
<span id="cb38-9">  ..$ partyid: Factor w/ 10 levels "No answer","Don't know",..: 6 5 7 6  ...</span>
<span id="cb38-10">  ..$ relig  : Factor w/ 16 levels "No answer","Don't know",..: 15 15 15 ...</span>
<span id="cb38-11">  ..$ denom  : Factor w/ 30 levels "No answer","Don't know",..: 25 23 3 ...</span>
<span id="cb38-12">  ..$ tvhours: int [1:21483] 12 NA 2 4 1 NA 3 NA 0 3 ...</span></code></pre></div>
</section>
<section id="column-counts" class="level3">
<h3 class="anchored" data-anchor-id="column-counts">Column counts</h3>
<p>The <code>ds_list</code> created above is used to add the <code>Class</code>, <code>Columns</code>, and <code>Rows</code> columns to <code>data_results</code> using the <code>class()</code>, <code>ncol()</code>, <code>nrow()</code>. The column counts are added with the <a href="https://github.com/mjfrigaard/dbap/blob/main/R/col_type_count.R"><code>col_type_count()</code> function</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">  cols_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb39-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-5">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-7">      purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span></span>
<span id="cb39-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span></span>
<span id="cb39-15">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span></span>
<span id="cb39-19">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span></span>
<span id="cb39-23">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb39-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb39-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span></span>
<span id="cb39-27">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb39-28">  )</span></code></pre></div>
</div>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb40-1">Browse[2]&gt; cols_tbl</span>
<span id="cb40-2"># A tibble: 1 √ó 11</span>
<span id="cb40-3">  Package Item    Title          Class Columns Rows  Logical Numeric Character Factor  List</span>
<span id="cb40-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt;   &lt;int&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt;</span>
<span id="cb40-5">1 forcats gss_cat A sample of c‚Ä¶ tbl_‚Ä¶ 9 colu‚Ä¶ 2148‚Ä¶       0       3         0      6     0</span></code></pre></div>
</section>
<section id="rectangular-objects" class="level3">
<h3 class="anchored" data-anchor-id="rectangular-objects">Rectangular objects</h3>
<p>Finally, <code>cols_tbl</code> is filtered to only those objects with a <code>class()</code> containing the string ‚Äò<code>data.frame</code>‚Äô.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">pkg_tbls_dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> cols_tbl,</span>
<span id="cb41-2">                  stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>))</span></code></pre></div>
</div>
<p>This is exactly the same as the previous tibble because forcats has only one data object (<code>gss_cat</code>), and it‚Äôs a tibble:</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb42-1">Browse[2]&gt; pkg_tbls_dfs</span>
<span id="cb42-2"># A tibble: 1 √ó 11</span>
<span id="cb42-3">  Package Item    Title          Class Columns Rows  Logical Numeric Character Factor  List</span>
<span id="cb42-4">  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt;   &lt;int&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt;</span>
<span id="cb42-5">1 forcats gss_cat A sample of c‚Ä¶ tbl_‚Ä¶ 9 colu‚Ä¶ 2148‚Ä¶       0       3         0      6     0</span></code></pre></div>
<p>I‚Äôm explicitly returning <code>pkg_tbls_dfs</code> to view it in the debugger. When I‚Äôm confident it‚Äôs behaving as expected, I‚Äôll remove this final object and ‚Äò<a href="https://style.tidyverse.org/functions.html#return">rely on R to return the result of the last evaluated expression</a>.‚Äô</p>
</section>
<section id="error" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="error">Error!</h3>
<p>When I tried using the initial <code>pkg_data_str()</code> with a package that had zero data objects (<code>fs</code>), I get the following error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fs"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb44-1">Error in `dplyr::filter()` at dbap/R/pkg_data_str.R:78:2:</span>
<span id="cb44-2">‚Ñπ In argument: `stringr::str_detect(Class, "data.frame")`.</span>
<span id="cb44-3">Caused by error in `vctrs::vec_size_common()`:</span>
<span id="cb44-4">! object 'Class' not found</span>
<span id="cb44-5">Run `rlang::last_trace()` to see where the error occurred.</span></code></pre></div>
<p>In the debugger, I was able to pinpoint the source of this error (and the underlying condition causing it to occur).</p>
<section id="replicate-the-error" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="replicate-the-error">Replicate the error</h4>
<p>The <code>browser()</code> beings at the top of <code>pkg_data_str()</code>, where I‚Äôll step into <code>pkg_data_results()</code></p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_01" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_01" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_01.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_01">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>pkg_data_results()</code> from <code>pkg_data_str()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_01-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;19: Step into <code>pkg_data_results()</code> from <code>pkg_data_str()</code>
</figcaption>
</figure>
</div>
</div>
<p>When I‚Äôm inside <code>pkg_data_results()</code>, I‚Äôll use <strong><code>n</code></strong> to verify the <code>fs</code> package namespace was loaded and the <code>tibble</code> was created:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_02" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_02" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_02.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_02">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step through <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_02-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;20: Step through <code>pkg_data_results()</code> (from <code>pkg_data_str()</code>)
</figcaption>
</figure>
</div>
</div>
<p>Back in <code>pkg_data_str()</code>, the output from <code>pkg_data_results()</code> is stored as <code>data_results</code>. I can check the contents of <code>data_results</code> in the <strong>Console</strong>.</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb45-1">Browse[2]&gt; data_results</span>
<span id="cb45-2"># A tibble: 0 √ó 3</span>
<span id="cb45-3"># ‚Ñπ 3 variables: Package &lt;chr&gt;, Item &lt;chr&gt;, Title &lt;chr&gt;</span></code></pre></div>
<p>I see it‚Äôs empty. An empty <code>data_results</code> results in an empty list output from <code>purrr::map2()</code>:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_03" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_03" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_03.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_03">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Step out of <code>pkg_data_results()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_03-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;21: Step out of <code>pkg_data_results()</code> back into <code>pkg_data_str()</code>
</figcaption>
</figure>
</div>
</div>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb46-1">Browse[2]&gt; ds_list</span>
<span id="cb46-2">list()</span></code></pre></div>
<p>The empty <code>ds_list</code> results in <code>dplyr::mutate()</code> being unable to create the <code>Class</code> column in <code>cols_tbl</code>:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_04" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_04" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_04.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:65.0%" data-ref-parent="fig-dbg-all_together_04">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>dplyr::mutate()</code> call in <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_04-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;22: Create <code>Class</code> column in <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb47-1">Browse[2]&gt; cols_tbl</span>
<span id="cb47-2"># A tibble: 0 √ó 3</span>
<span id="cb47-3"># ‚Ñπ 3 variables: Package &lt;chr&gt;, Item &lt;chr&gt;, Title &lt;chr&gt;</span></code></pre></div>
<p>Which triggers the error in <code>dplyr::filter()</code></p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb48-1">Browse[2]&gt; n</span>
<span id="cb48-2">Error in `dplyr::filter()` at dbap/R/get_ds_str.R:60:2:</span>
<span id="cb48-3">‚Ñπ In argument: `stringr::str_detect(Class, "data.frame")`.</span>
<span id="cb48-4">Caused by error in `vctrs::vec_size_common()`:</span>
<span id="cb48-5">! object 'Class' not found</span>
<span id="cb48-6">Run `rlang::last_trace()` to see where the error occurred.</span></code></pre></div>
<p>The full path for the <code>fs</code> package through the initial <code>get_ds_str()</code> is outlined in the figure below:</p>
<div class="page-columns page-full">
<div id="fig-dbg-all_together_05" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<div id="fig-dbg-all_together_05" class="quarto-figure quarto-figure-center quarto-float anchored page-columns page-full" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure page-columns page-full">
<div aria-describedby="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://mjfrigaard.github.io/posts/debugging/dbg-all_together_05.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-page-inset-right" style="width:100.0%" data-ref-parent="fig-dbg-all_together_05">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Error path in <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dbg-all_together_05-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;23: Replicate the error from <code>get_ds_strs()</code>
</figcaption>
</figure>
</div>
</div>
</section>
</section>
<section id="solution" class="level3">
<h3 class="anchored" data-anchor-id="solution">Solution</h3>
<p>To fix this error, I had to make some changes to <em>both</em> <code>pkg_data_results()</code> <em>and</em> <code>pkg_data_str()</code>:</p>
<p>In <code>pkg_data_results()</code>, I added control flow to return a <code>tibble</code> of logical columns (all <code>NA</code>) if the package doesn‚Äôt have any data objects:</p>
<div class="cell">
<details class="code-fold">
<summary>Expand to view the updated pkg_data_results()</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">pkg_data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb49-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load packages</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_pkg_ns</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb49-4"></span>
<span id="cb49-5">  results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb49-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb49-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Package =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>],</span>
<span id="cb49-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Item =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>],</span>
<span id="cb49-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> pkg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>results[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>],</span>
<span id="cb49-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb49-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb49-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb49-13">    )</span>
<span id="cb49-14">  )</span>
<span id="cb49-15"></span>
<span id="cb49-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(results) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb49-17"></span>
<span id="cb49-18">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb49-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb49-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb49-21">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb49-22">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb49-23">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb49-24">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>,</span>
<span id="cb49-25">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rows"</span>,</span>
<span id="cb49-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numeric"</span>, </span>
<span id="cb49-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Character"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>, </span>
<span id="cb49-28">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span>))</span>
<span id="cb49-29">                ),</span>
<span id="cb49-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>))</span>
<span id="cb49-31"></span>
<span id="cb49-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb49-33"></span>
<span id="cb49-34"></span>
<span id="cb49-35">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb49-36"></span>
<span id="cb49-37">    results</span>
<span id="cb49-38"></span>
<span id="cb49-39">  }</span>
<span id="cb49-40"></span>
<span id="cb49-41">}</span></code></pre></div>
</details>
</div>
<p>In <code>pkg_data_str()</code>, I added two <code>if</code> statements:</p>
<ul>
<li><p>the first <code>if</code> statement identifies the logical <code>NA</code> columns (indicating the results from <code>data(package = pkg)</code> didn‚Äôt have any data objects)</p></li>
<li><p>the second <code>if</code> statement creates the <code>Class</code> column <em>first</em>, then filters the rows to only those containing a <code>data.frame</code> string pattern. If none of the data objects have the <code>data.frame</code> string pattern in their class, an empty <code>data_results</code> table is returned</p></li>
</ul>
<div class="cell">
<details class="code-fold">
<summary>Expand to view the updated pkg_data_str()</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">pkg_data_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb50-2">  </span>
<span id="cb50-3">  data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_results</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg)</span>
<span id="cb50-4">  </span>
<span id="cb50-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]])) {</span>
<span id="cb50-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_results contains data objects</span></span>
<span id="cb50-7">    ds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb50-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>]], </span>
<span id="cb50-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> data_results[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>]],</span>
<span id="cb50-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> pkg_data_object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb50-11">    )</span>
<span id="cb50-12"></span>
<span id="cb50-13">    class_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(data_results,</span>
<span id="cb50-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Class =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-15">        purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>()</span>
<span id="cb50-16">    )</span>
<span id="cb50-17"></span>
<span id="cb50-18">    df_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb50-19">      class_tbl,</span>
<span id="cb50-20">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb50-21">    )</span>
<span id="cb50-22"></span>
<span id="cb50-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df_tbl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb50-24">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_tbl does not contain 'data.frame' classes</span></span>
<span id="cb50-25">      data_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(</span>
<span id="cb50-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb50-27">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb50-28">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,</span>
<span id="cb50-29">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb50-30">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb50-31">              <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb50-32">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb50-33">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Item"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>,</span>
<span id="cb50-34">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rows"</span>,</span>
<span id="cb50-35">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Character"</span>,</span>
<span id="cb50-36">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span></span>
<span id="cb50-37">              )</span>
<span id="cb50-38">            )</span>
<span id="cb50-39">          ),</span>
<span id="cb50-40">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb50-41">        )</span>
<span id="cb50-42">      )</span>
<span id="cb50-43"></span>
<span id="cb50-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb50-45">      </span>
<span id="cb50-46">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb50-47">      </span>
<span id="cb50-48">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_tbl contains 'data.frame' classes</span></span>
<span id="cb50-49">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(df_tbl,</span>
<span id="cb50-50">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Columns =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> ncol) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-51">          purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" columns"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-52">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rows =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nrow) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-53">          purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(paste0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" rows"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-54">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Logical =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-55">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-56">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-57">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Numeric =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-58">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-59">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-60">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Character =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-61">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-62">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-63">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Factor =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-64">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-65">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(),</span>
<span id="cb50-66">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">List =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb50-67">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ds_list,</span>
<span id="cb50-68">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> col_type_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>())</span>
<span id="cb50-69">      </span>
<span id="cb50-70">    }</span>
<span id="cb50-71">    </span>
<span id="cb50-72">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb50-73">    </span>
<span id="cb50-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_results does not contains data objects</span></span>
<span id="cb50-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_results)</span>
<span id="cb50-76">    </span>
<span id="cb50-77">  }</span>
<span id="cb50-78">  </span>
<span id="cb50-79">}</span></code></pre></div>
</details>
</div>
<p>Rather than go through the debugger process again, I‚Äôll go through each of the the mini experiments I used to check the updated <code>pkg_data_results()</code> and <code>pkg_data_str()</code> functions:</p>
<ul>
<li><p>Check single package without any data objects (<code>box</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check single package with data objects, but none with classes that contain <code>data.frame</code> (<code>stringr</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: left;">Logical</th>
<th style="text-align: left;">Numeric</th>
<th style="text-align: left;">Character</th>
<th style="text-align: left;">Factor</th>
<th style="text-align: left;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check single package with multiple data objects (<code>dplyr</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb53-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 6%">
<col style="width: 13%">
<col style="width: 15%">
<col style="width: 18%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 5%">
<col style="width: 3%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: right;">Logical</th>
<th style="text-align: right;">Numeric</th>
<th style="text-align: right;">Character</th>
<th style="text-align: right;">Factor</th>
<th style="text-align: right;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments2</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_members</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">Starwars characters</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">14 columns</td>
<td style="text-align: left;">87 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">storms</td>
<td style="text-align: left;">Storm tracks data</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">19537 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div></li>
<li><p>Check multiple packages with multiple data objects (<code>dplyr</code>, <code>forcats</code> and <code>lubridate</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_data_str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forcats"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lubridate"</span>)))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 5%">
<col style="width: 10%">
<col style="width: 36%">
<col style="width: 13%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 3%">
<col style="width: 2%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Title</th>
<th style="text-align: left;">Class</th>
<th style="text-align: left;">Columns</th>
<th style="text-align: left;">Rows</th>
<th style="text-align: right;">Logical</th>
<th style="text-align: right;">Numeric</th>
<th style="text-align: right;">Character</th>
<th style="text-align: right;">Factor</th>
<th style="text-align: right;">List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">forcats</td>
<td style="text-align: left;">gss_cat</td>
<td style="text-align: left;">A sample of categorical variables from the General Social survey</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">9 columns</td>
<td style="text-align: left;">21483 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">lubridate</td>
<td style="text-align: left;">lakers</td>
<td style="text-align: left;">Lakers 2008-2009 basketball data set</td>
<td style="text-align: left;">data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">34624 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_instruments2</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">band_members</td>
<td style="text-align: left;">Band membership</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">2 columns</td>
<td style="text-align: left;">3 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">starwars</td>
<td style="text-align: left;">Starwars characters</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">14 columns</td>
<td style="text-align: left;">87 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">storms</td>
<td style="text-align: left;">Storm tracks data</td>
<td style="text-align: left;">tbl_df, tbl, data.frame</td>
<td style="text-align: left;">13 columns</td>
<td style="text-align: left;">19537 rows</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div></li>
</ul>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>RStudio‚Äôs debugger is a powerful tool that can save tons of time when you‚Äôre developing new functions, discovering how a function‚Äôs code is executed, or dealing with errors. When you‚Äôve finished debugging, remember to remove the <code>browser()</code> call from your function.</p>
<p>The steps above should help get you started, and if you‚Äôd like to learn more, check out the <a href="https://adv-r.hadley.nz/debugging.html">debugging chapter of Advanced R</a>, and the documentation for <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/browser.html"><code>browser()</code></a>, <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/debug.html"><code>debug()</code>/<code>debugonce()</code>/<code>undebug()</code></a>, and <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/traceback.html"><code>traceback()</code></a> functions.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>debugging</category>
  <guid>https://mjfrigaard.github.io/posts/debugging/</guid>
  <pubDate>Thu, 01 Jun 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/debugging/image.png" medium="image" type="image/png" height="168" width="144"/>
</item>
<item>
  <title>Using testthat with Shiny</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p2-tests-nonpkg-unit-tests/</link>
  <description><![CDATA[ 





<div class="cell">
<details open="" class="code-fold">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(vdiffr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shinytest2)</span></code></pre></div>
</details>
</div>
<p>This post is the second in a series on testing shiny applications. I‚Äôll cover testing shiny module server functions using the <a href="https://testthat.r-lib.org/"><code>testhat</code> package</a> <em>outside</em> an R package. This application is stored in the <a href="https://github.com/mjfrigaard/noap"><code>noap</code></a> GitHub repo if you‚Äôd like to follow along.</p>
<section id="testing-module-server-functions" class="level2">
<h2 class="anchored" data-anchor-id="testing-module-server-functions">Testing module server functions</h2>
<div style="font-size: 1.10em;">
<p><em>‚Ä¶the ABCs of testing shiny server modules‚Ä¶</em></p>
</div>
<p>This post covers how <code>shiny::testServer()</code> works using the <a href="https://github.com/mjfrigaard/noap/blob/main/app.R">abcApp() shiny app.</a>. The code for <code>abcApp()</code> is an RStudio project (i.e., there is a <code>noap.Rproj</code> file in the parent folder), but it‚Äôs not part of an R package. Developing shiny applications as R packages is <a href="https://mastering-shiny.org/scaling-packaging.html">highly</a> <a href="https://engineering-shiny.org/structuring-project.html#shiny-app-as-a-package">recommended</a>, but it‚Äôs <em>possible</em> to begin writing unit tests before your application is a fully developed shiny app-package.</p>
<p>For more information regarding performing tests outside of the package environment, see <a href="https://github.com/r-lib/testthat/issues/659">this issue on GitHub</a>.</p>
<section id="abcapp" class="level3">
<h3 class="anchored" data-anchor-id="abcapp">abcApp()</h3>
<p>The <code>abcApp()</code> application has been written using <a href="https://shiny.posit.co/r/articles/improve/modules/">shiny modules</a> and a single <a href="https://github.com/mjfrigaard/noap/blob/main/utils.R">utility function</a>.</p>
<p><code>testthat</code> is designed to perform unit tests for R packages, but for the sake of simplicity,<code>abcApp()</code> has not been developed as part of a package. This will allow us to focus on the files involved in testing (and not all the other files that accompany R packages).</p>
<p>The standalone application function (<code>abcApp()</code>) is stored in <code>app.R</code>, the modules are contained in <code>modules.R</code>, and the single utility function is stored in <code>utils.R</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">‚îú‚îÄ‚îÄ README.md</span>
<span id="cb2-2">‚îú‚îÄ‚îÄ app.R</span>
<span id="cb2-3">‚îú‚îÄ‚îÄ app.Rproj</span>
<span id="cb2-4">‚îú‚îÄ‚îÄ modules.R</span>
<span id="cb2-5">‚îú‚îÄ‚îÄ tests</span>
<span id="cb2-6">‚îî‚îÄ‚îÄ utils.R</span>
<span id="cb2-7"></span>
<span id="cb2-8">2 directories, 5 files</span></code></pre></div>
<ul>
<li><p>The <code>tests</code> folder contains the following:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">tests</span>
<span id="cb3-2">‚îú‚îÄ‚îÄ testthat</span>
<span id="cb3-3">‚îÇ   ‚îî‚îÄ‚îÄ test-mod_abc_server.R</span>
<span id="cb3-4">‚îî‚îÄ‚îÄ testthat.R</span>
<span id="cb3-5"></span>
<span id="cb3-6">2 directories, 2 files</span></code></pre></div>
<ul>
<li><code>tests/</code> has a <code>testthat.R</code> file<br>
</li>
<li>New test files should be placed in <code>tests/testthat/</code> (see example <code>test-mod_abc_server.R</code> below):</li>
</ul></li>
</ul>
<section id="ui-module-function" class="level4">
<h4 class="anchored" data-anchor-id="ui-module-function">UI module function</h4>
<p>In this small example app, both ui and server modules are stored in the <code>modules.R</code> file.</p>
<ul>
<li><p>UI module:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>mod_abc_ui() (example ui module function)</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ui module</span></span>
<span id="cb4-2">mod_abc_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb4-3"></span>
<span id="cb4-4">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb4-5"></span>
<span id="cb4-6">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb4-7">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(</span>
<span id="cb4-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>),</span>
<span id="cb4-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h4</span>(</span>
<span id="cb4-10">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alphabet number"</span>)),</span>
<span id="cb4-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span></span>
<span id="cb4-12">    ),</span>
<span id="cb4-13">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(</span>
<span id="cb4-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"txt"</span>))</span>
<span id="cb4-15">  )</span>
<span id="cb4-16">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="server-module-function" class="level4">
<h4 class="anchored" data-anchor-id="server-module-function">Server module function</h4>
<p>The counterpart to <code>mod_abc_ui()</code> is <code>mod_abc_server()</code>:</p>
<ul>
<li><p>Server module:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>mod_abc_server() (example server module function)</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server module</span></span>
<span id="cb5-2">mod_abc_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb5-3"></span>
<span id="cb5-4">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reactive </span></span>
<span id="cb5-6">    letter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({ LETTERS[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num] })</span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># super script</span></span>
<span id="cb5-8">    sup_scrpt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({ </span>
<span id="cb5-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">num_super_script</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num)</span>
<span id="cb5-10">    })</span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output</span></span>
<span id="cb5-12">    output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb5-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The "</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), </span>
<span id="cb5-14">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" letter in the alphabet is: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>())</span>
<span id="cb5-15">    })</span>
<span id="cb5-16"></span>
<span id="cb5-17">  })</span>
<span id="cb5-18">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="module-utility-function" class="level4">
<h4 class="anchored" data-anchor-id="module-utility-function">Module utility function</h4>
<p>The <code>mod_abc_server()</code> function uses the <code>num_super_script()</code> function stored in <code>utils.R</code>:</p>
<ul>
<li><p>Utility function:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>num_super_script() (example utility function)</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># utility function</span></span>
<span id="cb6-2">num_super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-3">      num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x)</span>
<span id="cb6-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb6-5">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"st"</span></span>
<span id="cb6-6">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb6-7">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nd"</span></span>
<span id="cb6-8">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb6-9">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rd"</span></span>
<span id="cb6-10">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb6-11">        super_script <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"th"</span></span>
<span id="cb6-12">      }</span>
<span id="cb6-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(super_script)</span>
<span id="cb6-14">}</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="standalone-app-function" class="level4">
<h4 class="anchored" data-anchor-id="standalone-app-function">Standalone app function</h4>
<ul>
<li><p>Standalone app functions include a call to <code>shiny::shinyApp()</code>:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>abcApp() (example app with modules)</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standalone shiny app function</span></span>
<span id="cb7-2">abcApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb7-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb7-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_abc_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb7-6">    ), </span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) { </span>
<span id="cb7-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_abc_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb7-9">    }</span>
<span id="cb7-10">  )</span>
<span id="cb7-11">}</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abcApp</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li><p>The call to <code>shiny::shinyApp()</code> is placed inside the <code>abcApp()</code> function</p></li>
<li><p>The <code>ui</code> argument is wrapped in <code>shiny::fluidPage()</code> and the ui module function (<code>mod_abc_ui()</code>) is placed inside</p></li>
<li><p>The <code>server</code> argument includes the standard <code>function(input, output, session)</code> and the module server companion function‚Äì<code>mod_abc_server()</code>‚Äìwith a matching <code>id</code> arguments</p></li>
<li><p>The <code>abcApp()</code> function is stored in the <code>app.R</code> file</p></li>
</ul></li>
</ul>
<p>Because <code>abcApp()</code> is not part of a package, <code>shiny</code> and <code>testthat</code> are loaded and the modules and utility function are sourced in the top of the <code>app.R</code> file.</p>
<div class="cell">
<details open="" class="code-fold">
<summary>source utils.R and modules.R in app.R</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># packages --------------------------------------------------------</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># utils ------------------------------------------------------------------</span></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils.R"</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modules ------------------------------------------------------------------</span></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"modules.R"</span>)</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="using-testserver" class="level3">
<h3 class="anchored" data-anchor-id="using-testserver">Using <code>testServer()</code></h3>
<p>In the <code>test-mod_abc_server.R</code> file, I‚Äôll add <code>testServer()</code> and include the module server function as the first argument:</p>
<ul>
<li><p><code>app</code> is the module server function (<code>mod_abc_server</code>) or any <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/shiny.appobj.html"><code>shiny.appobj</code></a></p>
<div class="cell">
<details open="" class="code-fold">
<summary>app = shiny.appobj</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> mod_abc_server, {</span>
<span id="cb9-2"></span>
<span id="cb9-3">})</span></code></pre></div>
</details>
</div></li>
</ul>
<section id="testing-inputs" class="level4">
<h4 class="anchored" data-anchor-id="testing-inputs">Testing <code>input$</code>s</h4>
<ul>
<li><p>The first test I‚Äôll add will check the initial value of <code>input$num</code></p>
<ul>
<li>I‚Äôll also include a custom message with <code>cat()</code></li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>test initial value with custom message</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 1: check initial value</span></span>
<span id="cb10-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 1 initial input$num = NULL: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-5">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb11-2">Test 1 initial input$num = NULL:  TRUE </span></code></pre></div>
<ul>
<li><p><code>testServer()</code> allows me to set new <code>input</code> values with <code>session$setInputs()</code></p>
<ul>
<li><p>Use <code>session$setInputs()</code> to set <code>input$num</code> to <code>3</code></p></li>
<li><p>Test 2 confirms <code>input$num</code> has changed</p></li>
<li><p>Add another custom message with <code>cat()</code></p></li>
</ul></li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>setInputs() and test inputs</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set inputs</span></span>
<span id="cb12-3">  session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 2: check set inputs</span></span>
<span id="cb12-5">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 2 setInputs(num = 3):"</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-7">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb13-2"> Test 2 setInputs(num = 3): 3 </span></code></pre></div></li>
</ul>
</section>
<section id="testing-reactive-values" class="level4">
<h4 class="anchored" data-anchor-id="testing-reactive-values">Testing reactive values</h4>
<ul>
<li><p>The module‚Äôs reactive values are also available to in <code>testServer()</code></p>
<ul>
<li><p>Test 3 adds a test for <code>sup_scrpt()</code> (given the changed value of <code>input$num</code>)</p>
<ul>
<li>The <code>expected</code> value is what I‚Äôm expecting <code>num_super_script()</code> to return.</li>
</ul></li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>Check sup_scrpt() reactive value with expect_equal()</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb14-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 3: check super script</span></span>
<span id="cb14-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rd"</span>)</span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 3 sup_scrpt(): = 'rd':"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sup_scrpt</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-5">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb15-2"> Test 3 sup_scrpt(): = 'rd': rd  </span></code></pre></div>
<ul>
<li>For completeness I‚Äôll add a test for <code>letter()</code></li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>Check letter() reactive value with expect_equal()</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb16-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 4: check letter</span></span>
<span id="cb16-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>)</span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 4 letter() = C:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">letter</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-5">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb17-2"> Test 4 letter() = C: C </span></code></pre></div></li>
</ul>
</section>
<section id="testing-outputs" class="level4">
<h4 class="anchored" data-anchor-id="testing-outputs">Testing <code>output$</code>s</h4>
<ul>
<li><p>The module output values are also available as <code>output$&lt;value&gt;</code></p>
<ul>
<li>Test 5 will verify the <code>output$txt</code> (given the updated <code>input$num</code>)</li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>Check module output values</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb18-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 5: check output</span></span>
<span id="cb18-3">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt,</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The 3rd letter in the alphabet is: C"</span>)</span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb18-6">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-7">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1"> FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span>
<span id="cb19-2"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span>
<span id="cb19-3"> [1] "The 3rd letter in the alphabet is: C" </span>
<span id="cb19-4"></span>
<span id="cb19-5">‚îÄ- Failure (test-mod_abc_server.R:1:1): (code run outside of `test_that()`) ‚îÄ‚îÄ</span>
<span id="cb19-6">output$txt (`actual`) not equal to "The 3rd letter in the alphabet is: C" (`expected`).</span>
<span id="cb19-7"></span>
<span id="cb19-8">`actual`:   "[1] \"The 3rd letter in the alphabet is: C\""</span>
<span id="cb19-9">`expected`: "The 3rd letter in the alphabet is: C"        </span>
<span id="cb19-10">Backtrace:</span>
<span id="cb19-11">  1. shiny::testServer(...)</span>
<span id="cb19-12">       at test-mod_abc_server.R:1:0</span>
<span id="cb19-13"> 22. testthat::expect_equal(object = output$txt, </span>
<span id="cb19-14">   expected = "The 3rd letter in the alphabet is: C")</span>
<span id="cb19-15">       at test-mod_abc_server.R:17:4</span>
<span id="cb19-16"></span>
<span id="cb19-17">[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]</span></code></pre></div>
<ul>
<li><strong>What happened?</strong> I forgot to add the escape characters (<code>\"</code>) and line number (<code>[1]</code>) for the output
<ul>
<li>I‚Äôll change the <code>expected</code> value and re-run the test:</li>
</ul></li>
</ul>
<div class="cell">
<details open="" class="code-fold">
<summary>Check module output values (again)</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testServer</span>(mod_abc_server, {</span>
<span id="cb20-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test 5: check output</span></span>
<span id="cb20-3">testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt,</span>
<span id="cb20-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The 3rd letter in the alphabet is: C"</span>)</span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-6">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>txt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-7">})</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]</span>
<span id="cb21-2"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span>
<span id="cb21-3"> [1] "The 3rd letter in the alphabet is: C" </span></code></pre></div>
<ul>
<li>Finally, I‚Äôll run the tests with <code>test_dir()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_dir</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/app/tests/testthat/"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">‚úî | F W S  OK | Context</span>
<span id="cb23-2">‚†è |         0 | mod_abc_server         </span>
<span id="cb23-3"></span>
<span id="cb23-4"> Test 1 initial input$num = NULL:  TRUE </span>
<span id="cb23-5"></span>
<span id="cb23-6"> Test 2 setInputs(num = 3): 3 </span>
<span id="cb23-7"></span>
<span id="cb23-8"> Test 3 sup_scrpt(): = 'rd': rd </span>
<span id="cb23-9"></span>
<span id="cb23-10"> Test 4 letter() = C: C </span>
<span id="cb23-11"></span>
<span id="cb23-12"> Test 5 output$ = 'The 3rd letter in the alphabet is: C': </span>
<span id="cb23-13"> [1] "The 3rd letter in the alphabet is: C" </span>
<span id="cb23-14">‚úî |         5 | mod_abc_server</span>
<span id="cb23-15">‚ïê‚ïê Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</span>
<span id="cb23-16">Duration: 0.2 s</span>
<span id="cb23-17"> [ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]</span>
<span id="cb23-18">üåà Your tests are over the rainbow üåà</span></code></pre></div></li>
</ul>
<p>The results show the tests passed! Now I am confident inputs, reactive values (<code>sup_scrpt()</code> &amp; <code>letter()</code>), outputs behave as expected.</p>
</section>
</section>
<section id="recap" class="level3">
<h3 class="anchored" data-anchor-id="recap">Recap</h3>
<p>The example above provides a workflow for using <code>testServer()</code> with <code>testthat</code> <em>outside</em> a package environment. The checklist below summarizes the steps required to test your application‚Äôs module server functions:</p>
<ol type="1">
<li><p>Create test files (in <code>tests/testthat/</code>)</p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">All test files should have the <code>test-</code> prefix</label></li>
</ul></li>
<li><p>Verify inputs with <code>session$setInputs(inputId = &lt;value&gt;)</code></p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">All <code>input$</code> values should initially be <code>NULL</code></label></li>
</ul></li>
<li><p>Test reactive values by referring to them as you would in the module server</p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">Compare expected values after changing inputs with <code>session$setInputs()</code></label></li>
</ul></li>
<li><p>Test outputs using <code>output$&lt;value&gt;</code> to check changes to the inputs and reactives</p>
<ul class="task-list">
<li><label><input type="checkbox" checked="">Check output values with <code>output$txt</code></label></li>
</ul></li>
</ol>
<p>This concludes running tests on <code>abcApp()</code>. Ideally, shiny applications are developed as an R package (which I‚Äôll cover in a future post), but now you know how to perform tests if this isn‚Äôt the case. The files for this demonstration are located <a href="https://github.com/mjfrigaard/noap">here.</a></p>
<p>For a more comprehensive review of testing, check out the chapters on testing in <a href="https://r-pkgs.org/testing-basics.html">R packages</a> and <a href="https://mastering-shiny.org/scaling-testing.html">Mastering Shiny</a>.</p>


</section>
</section>

 ]]></description>
  <category>shiny</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/p2-tests-nonpkg-unit-tests/</guid>
  <pubDate>Sun, 07 May 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p2-tests-nonpkg-unit-tests/image.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Behavior Driven Unit Tests</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/p1-tests-unit-tests/</link>
  <description><![CDATA[ 





<div class="cell">
<details open="" class="code-fold">
<summary>packages</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lobstr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(covr)</span></code></pre></div>
</details>
</div>
<p>This post is the first in a series on testing Shiny applications. We‚Äôll cover developing and testing a set of utility functions for a Shiny app-package using <a href="https://testthat.r-lib.org/"><code>testhat</code></a>. If you‚Äôd like to follow along, all the code we‚Äôll be using is contained in the <a href="https://github.com/mjfrigaard/sapkgs/tree/utap"><code>utap</code> branch</a> of the <code>sapkgs</code> repo on GitHub.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renv::install("mjfrigaard/utap")</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(utap)</span></code></pre></div>
</div>
<p>Testing the code in Shiny app-packages can be more complicated than testing the code in a typical R package, because app-packages contain two types of code:</p>
<ol type="1">
<li><p><strong>Application code</strong>: functions designed to run the application (i.e., the <code>ui</code> and <code>server</code> functions, modules, standalone app functions will a call to <code>shinyApp()</code>, etc.)</p></li>
<li><p><strong>Everything else</strong>: functions or code used for connecting to databases, uploading, importing, or manipulating data, building visualizations and/or tables, generating custom HTML layouts, etc. The non-application code and functions in app-packages are typically referred to as ‚Äò<a href="https://engineering-shiny.org/build-app-golem.html?#submodules-and-utility-functions">utility</a>‚Äô or ‚Äò<a href="https://mastering-shiny.org/scaling-functions.html#file-organisation">helper</a>‚Äô functions</p></li>
</ol>
<p>These two types of code require different types of tests. Utility functions are usually accompanied by unit tests similar to the tests you‚Äôd find in a standard R package<sup>1</sup>, while the application‚Äôs reactive code can be tested using Shiny‚Äôs <a href="https://shiny.posit.co/r/reference/shiny/1.7.0/testserver"><code>testServer()</code></a> function, and the system tests can be built using the <a href="https://rstudio.github.io/shinytest2/"><code>shinytest2</code> package</a>.</p>
<p>This post will cover writing unit tests for a set of utility functions using <a href="https://testthat.r-lib.org/"><code>testthat</code></a> and <a href="https://covr.r-lib.org/"><code>covr</code></a>. Any tips or time-savers I‚Äôve found will be in green callout boxes:</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">TIP!</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>This is a tip!</p>
</div>
</div>
</div>
</div>
<section id="what-are-unit-tests" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-are-unit-tests">What are unit tests?</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat.png" class="img-fluid" style="width:40.0%"></p>
</div></div><blockquote class="blockquote">
<p>‚Äú<em>A unit test is a piece of code that invokes a unit of work and checks one specific end result of that unit of work. If the assumptions on the end result turn out to be wrong, the unit test has failed. A unit test‚Äôs scope can span as little as a method or as much as multiple classes.</em>‚Äù - <a href="https://www.manning.com/books/the-art-of-unit-testing-second-edition">The Art of Unit Testing, 2nd edition</a></p>
</blockquote>
<p>Thinking of functions as ‚Äòunits of work‚Äô and their desired behavior as an ‚Äòend results‚Äô provides a useful mental model (especially during <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">behavior-driven development</a>. These terms also align nicely with the testing advice offered by <a href="https://r-pkgs.org/testing-design.html#sec-testing-design-principles"><code>testthat</code></a>:</p>
<blockquote class="blockquote">
<p><em>Strive to test each behaviour in one and only one test. Then if that behaviour later changes you only need to update a single test.</em></p>
</blockquote>
<p>In app-packages, the <code>testthat</code> package provides a comprehensive and flexible framework for performing unit tests.</p>
<section id="testthat" class="level3">
<h3 class="anchored" data-anchor-id="testthat">testthat</h3>
<p>Get started with <code>testthat</code> by running <a href="https://usethis.r-lib.org/reference/use_testthat.html"><code>usethis::use_testthat()</code></a>. This function will create following files and folders:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">tests/</span>
<span id="cb3-2">  ‚îú‚îÄ‚îÄ testthat/</span>
<span id="cb3-3">  ‚îî‚îÄ‚îÄ testthat.R</span></code></pre></div>
<p>To create new tests, we‚Äôll run <code>usethis::use_test("&lt;name&gt;")</code> (with <code>"select_class"</code> being the name of the function we‚Äôd like to test).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_test</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">‚úî Setting active project to '/projects/apps/utap'</span>
<span id="cb5-2">‚úî Writing 'tests/testthat/test-select_class.R'</span>
<span id="cb5-3">‚Ä¢ Modify 'tests/testthat/test-select_class.R'</span></code></pre></div>
<section id="test-files" class="level4">
<h4 class="anchored" data-anchor-id="test-files">Test files</h4>
<p>New test files are be created and opened from the <code>tests/testthat/</code> folder (with a <code>test-</code> prefix). Each function we‚Äôre testing should have it‚Äôs own <code>.R</code> file the <code>R/</code> folder and a corresponding <code>test-</code> file in the <code>tests/testthat/</code> folder (we‚Äôll see how this helps with interactive testing in the IDE below). The initial contents of a new test file contains the boilerplate code below:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50, 50]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiplication works"</span>, {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb6-3">})</span></code></pre></div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-test-file.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>testthat test file</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="test-structure" class="level4">
<h4 class="anchored" data-anchor-id="test-structure">Test structure</h4>
<p><code>test_that()</code> sets the test ‚Äúscope‚Äù or ‚Äúexecution environment‚Äù, and encapsulates the test code and expectations. Note the use of curly brackets after the <code>code</code> argument:</p>
<div id="fig-tests" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-tests-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-tests.png" class="img-fluid figure-img" style="width:90.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-tests-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <code>testthat</code> test
</figcaption>
</figure>
</div>
</section>
<section id="expectations" class="level4">
<h4 class="anchored" data-anchor-id="expectations">Expectations</h4>
<p>Test expectations are the code that comes into direct contact with the <em>unit of work</em> and <em>end result</em> for each function. It‚Äôs likely we‚Äôll have multiple expectations for any given function, so we store these in <strong>tests</strong> and use the <code>desc</code> to describe the test context (all <code>testthat</code> expectations have an <code>expect_*</code> prefix):</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[50, 50]">
<div class="quarto-layout-row quarto-layout-valign-center">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-test-expectations.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption><code>expect_*</code> functions</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/testthat-expectation.png" style="width:50.0%;height:50.0%" class="figure-img"></p>
<figcaption>expectations</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="keyboard-shortcuts" class="level3">
<h3 class="anchored" data-anchor-id="keyboard-shortcuts">Keyboard shortcuts</h3>
<p>I <strong>highly</strong> recommend using a shortcut while developing tests because it will improve your ability to iterate quickly.<sup>2</sup></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[54, -1, 45]">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<section id="devtools-function" class="level4 quarto-layout-cell" style="flex-basis: 54.0%;justify-content: flex-start;">
<h4 class="anchored" data-anchor-id="devtools-function"><strong><code>devtools</code> function</strong></h4>
<p><span style="font-weight: bold; font-size: 0.95em"><code>test()</code></span></p>
</section>
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 1.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<section id="keyboard-shortcut" class="level4 quarto-layout-cell" style="flex-basis: 45.0%;justify-content: flex-start;">
<h4 class="anchored" data-anchor-id="keyboard-shortcut"><strong>Keyboard shortcut</strong></h4>
<p><span style="font-weight: bold; font-size: 0.80em"><kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></span></p>
</section>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[54, -1, 45]">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<div class="quarto-layout-cell" style="flex-basis: 54.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.95em"><code>test_active_file()</code></span></p>
</div>
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 1.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 45.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.80em"><kbd>Ctrl/Cmd</kbd> + <kbd>T</kbd></span></p>
</div>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[54, -1, 45]">
<div class="quarto-layout-row quarto-layout-valign-bottom">
<div class="quarto-layout-cell" style="flex-basis: 54.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.95em"><code>test_coverage_active_file()</code></span></p>
</div>
<div class="quarto-figure-spacer quarto-layout-cell" style="flex-basis: 1.0%;justify-content: flex-start;">
<p>&nbsp;</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 45.0%;justify-content: flex-start;">
<p><span style="font-weight: bold; font-size: 0.80em"><kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></span></p>
</div>
</div>
</div>
</section>
</section>
<section id="behavior-driven-development" class="level2">
<h2 class="anchored" data-anchor-id="behavior-driven-development">Behavior-Driven Development</h2>
<p>Behavior-driven development (or behavior-driven testing) is helpful if you find yourself communicating with users and/or stakeholders while developing Shiny apps. BDD centers around ‚Äú<em>conversation and examples to specify how you expect a system to behave</em>‚Äù<sup>3</sup> and it‚Äôs supported with <code>testthat</code>s <code>describe()</code> and <code>it()</code> functions.<sup>4</sup></p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">BDD features &amp; scenarios</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>In BDD, requirements are written plain language ‚Äòfeature files‚Äô using a series of keywords:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Feature:</span>  </span>
<span id="cb7-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">As</span> a </span>
<span id="cb7-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">I</span> want </span>
<span id="cb7-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">So</span> that</span>
<span id="cb7-5">  </span>
<span id="cb7-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Background:</span></span>
<span id="cb7-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Given</span> </span>
<span id="cb7-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">And</span>  </span>
<span id="cb7-9">    </span>
<span id="cb7-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scenario:</span>  </span>
<span id="cb7-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">When</span> </span>
<span id="cb7-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">And</span>  </span>
<span id="cb7-13">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Then</span> </span>
<span id="cb7-14">    </span></code></pre></div>
<p>The <code>Feature</code> is a high-level description (usually with a title <em>and</em> description). <code>As a</code> describes the end user the feature is intended for, their needs (<code>I want</code>), and the desired result (<code>So that</code>).</p>
<p>The <code>Background</code> can include any steps or conditions that exist <em>before</em> each scenario.</p>
<p>A <code>Scenario</code> is a series of steps outlining a concrete examples that illustrates a feature. <code>When</code> is used to describe an event, or an action. <code>Then</code> describes what will verify the expected outcome is observable by the user. <code>And</code> combines <code>Given</code> with <code>When</code> or <code>Then</code>.</p>
<p>Read more about Gherkin on the <a href="https://cucumber.io/docs/gherkin/reference/">Cucumber website.</a>.</p>
</div>
</div>
</div>
</div>
<section id="specifications" class="level3">
<h3 class="anchored" data-anchor-id="specifications">Specifications</h3>
<p>In <a href="https://r-pkgs.org/testing-basics.html#run-tests">R packages</a>, micro-iteration is defined as, ‚Äú<em>the interactive phase where you initiate and refine a function and its tests in tandem.</em>‚Äù In app development, this stage might after you‚Äôve received needs or specifications by an end-user or stakeholder.</p>
<p>If we‚Äôre using <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>, we‚Äôll translate these specifications into functional requirements, then start writing test(s). After outlining the tests, we‚Äôll write the function(s) to pass the test.</p>
<p><code>testthat</code>‚Äôs <code>describe()</code> and <code>it()</code> functions and Gherkin syntax can clarify this process because we can <em>describe</em> what <em>it</em> is we want to test before getting stuck writing any test code.</p>
<p>Let‚Äôs assume we‚Äôve been asked to design an application that automatically to populates the user drop-downs with variables based on their format: binary, numeric, categorical, and‚Äìa subset of categorical‚Äìfacet.<sup>5</sup></p>
<ol type="1">
<li><strong>Features &amp; Background</strong>: use the <code>description</code> (entered as a character string in the first argument of <code>describe()</code>) to capture the ‚Äúunit of work‚Äù for each function. <code>Feature</code> and <code>Background</code> information can be included in nested <code>describe()</code> blocks.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb8-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Feature: Pull column names by type from a data frame or tibble</span></span>
<span id="cb8-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Background: Given a data frame or tibble </span></span>
<span id="cb8-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    And it has binary, character, and numeric columns"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb8-5">  </span>
<span id="cb8-6">})</span></code></pre></div>
</div>
<ol start="2" type="1">
<li><strong>Scenario</strong>: Every new <code>Scenario</code> keyword should have a corresponding <code>it()</code> or <code>test_that()</code> call.<sup>6</sup> Try to be as specific as possible (while staying short and sweet) when describing the scenarios.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Feature: Pull column names by type from a data frame or tibble</span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Background: Given a data frame or tibble </span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    And it has binary, character, and numeric columns"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb9-5">  </span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scenario: Given a data frame with a mix of columns</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      When I call pull_cols() with type 'binary'</span></span>
<span id="cb9-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      Then I should receive a list of 'binary' column names"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb9-9">      </span>
<span id="cb9-10">    })</span>
<span id="cb9-11">  </span>
<span id="cb9-12">})</span></code></pre></div>
</div>
<ol start="3" type="1">
<li><strong>Expectations</strong>: The <code>Then</code> keywords capture our expectations (and <code>expect_*()</code> function). In this case, it‚Äôs the ‚Äò<em>list of column names that match the <code>"&lt;type&gt;"</code> criteria</em>‚Äô</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Feature: Pull column names by type from a data frame or tibble</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Background: Given a data frame or tibble </span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    And it has binary, character, and numeric columns"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb10-5">  </span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scenario: Given a data frame with a mix of columns</span></span>
<span id="cb10-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      When I call pull_cols() with type 'binary'</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      Then I should receive a list of 'binary' column names"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb10-9">      </span>
<span id="cb10-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(object))</span>
<span id="cb10-11">      </span>
<span id="cb10-12">    })</span>
<span id="cb10-13">  </span>
<span id="cb10-14">})</span></code></pre></div>
</div>
<p>It‚Äôs worth noting that, at least conceptually, scenarios and expectations arise first. We‚Äôre usually working backwards from a desired ‚Äúend result‚Äù a function is supposed to produce (i.e., compute a value, download a file, create a column, etc.).</p>
<section id="requirements" class="level4">
<h4 class="anchored" data-anchor-id="requirements">Requirements</h4>
<p>For example, calling <code>pull_cols(df, "bin")</code> would ‚Äòpull‚Äô all the binary columns from an input <code>data.frame</code> or <code>tibble</code> (the example below uses <code>palmerpenguins::penguins</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_cols</span>(palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bin"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  sex </span></span>
<span id="cb12-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "sex" </span></span></code></pre></div>
</div>
<p>The return values can be passed to <code>updateSelectInput()</code> in the <code>server</code> to provide column names by <code>type</code> (i.e., numeric, binary, etc). <code>pull_colls()</code> can be used to quickly group variables into groups for data visualizations or table displays.</p>
<p>For example, categorical variables with 3-5 levels can be mapped to a facet layer (if using <code>ggplot2</code>). See the hypothetical UI output example below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI code</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facet"</span>),</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select Facet Column"</span>,</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb13-6">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pull facet columns from data</span></span>
<span id="cb14-2">facet_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_cols</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ds</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facet"</span>)</span>
<span id="cb14-4">})</span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update facet inputs</span></span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateSelectInput</span>(</span>
<span id="cb14-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb14-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facet"</span>,</span>
<span id="cb14-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_cols</span>()</span>
<span id="cb14-11">  )</span>
<span id="cb14-12">}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_cols</span>())</span></code></pre></div>
</div>
<p>In the example above, <code>pull_cols()</code> is passed a reactive dataset (<code>data()</code>), and the output is used to update the <code>selectInput()</code>:</p>
<div class="cell">
<div class="cell-output-display no-overflow-x">
<div class="form-group shiny-input-container">
<label class="control-label" id="num_cols-label" for="num_cols">Select Facet Column</label>
<div>
<select id="num_cols" class="shiny-input-select"><option value="species" selected="">species</option>
<option value="island">island</option></select>
<script type="application/json" data-for="num_cols" data-nonempty="">{"plugins":["selectize-plugin-a11y"]}</script>
</div>
</div>
</div>
</div>
<p><br></p>
<p>The first step of <code>pull_cols()</code> will be to identify and extract columns based on their class, so we‚Äôll create a test for <code>select_class()</code>, a function with a <code>class</code> parameter that supports multiple column types. The <code>roxygen2</code> documentation for <code>select_class()</code> is below:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide roxygen2 documentation</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Select Column Class</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' `select_class()` selects columns from a data.frame based on the specified</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' `class`. Options include logical, integer, double, character, factor, ordered,</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' and list column types.</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param df A `data.frame` from which columns will be selected.</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param class Character vector specifying the class(es) of columns to select.</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   Supported values are:</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "logical" ("lo")  </span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "integer" ("in")  </span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "double" ("do")  </span></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "character" ("ch")  </span></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "factor" ("fa")   </span></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "ordered" ("or")   </span></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   * "list" ("li")</span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   </span></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param return_tbl Logical indicating whether to return the result as a</span></span>
<span id="cb15-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `data.frame`. If `FALSE`, a vector of selected column names is returned.</span></span>
<span id="cb15-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb15-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A `data.frame` or vector of column names, depending on `return_tbl`.</span></span></code></pre></div>
</details>
</div>
<p>We‚Äôve also included a <code>return_tbl</code> argument that allows <code>select_class()</code> to return the column names.</p>
</section>
<section id="abstract-folder-trees" class="level4">
<h4 class="anchored" data-anchor-id="abstract-folder-trees">Abstract folder trees</h4>
<p>While developing R functions, I‚Äôve found the <code>ast()</code> function from the <a href="https://lobstr.r-lib.org/reference/ast.html"><code>lobstr</code> package</a> can be great for keeping track of nested function calls.</p>
<p><code>select_class()</code> will have a nested <code>is_class()</code> function, which contains a series of test for objects (i.e., <code>is.logical()</code>, <code>is.integer()</code>, etc.). To keep track of nested functions in <code>R/</code> files, sometimes I‚Äôll outline the function in an abstract function tree and store this in a <a href="https://github.com/mjfrigaard/sapkgs/blob/utap/vignettes/utap.Rmd">vignette</a>.<sup>7</sup></p>
<p>Below is an example tree for <code>select_class()</code>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[25,75]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: flex-start;">
<p><strong>Syntax</strong>:</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 75.0%;justify-content: flex-start;">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(</span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_class</span>(</span>
<span id="cb16-3">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_class</span>()</span>
<span id="cb16-4">      )</span>
<span id="cb16-5">)</span></code></pre></div>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: flex-start;">
<p><strong>Output</strong>:</p>
</div>
<div class="cell quarto-layout-cell" style="flex-basis: 75.0%;justify-content: flex-start;">
<div class="cell-output cell-output-stdout">
<pre><code>‚ñà‚îÄselect_class 
‚îî‚îÄ‚ñà‚îÄis_class </code></pre>
</div>
</div>
</div>
</div>
<p>The tree above is simple‚Äìit only has two functions so far‚Äìbut as packages grow these abstract displays become more important for tracking function calls (and tests!).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">TIP! Function Names</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>Coming up with names for functions can be challenging. I like to follow the <a href="https://style.tidyverse.org/syntax.html#object-names"><code>tidyverse</code> style guide</a> and use short verbs as a prefix (<code>make_</code>, <code>get_</code>, <code>check_</code> etc.) that will give ‚Äòfuture‚Äô me hints as to their behavior.</p>
<p>I like to stick to naming conventions I‚Äôm familiar with. For example, <code>select_class()</code> has similar behavior to <code>dplyr::select()</code>, and <code>pull_cols()</code> is more like <code>dplyr::pull()</code>.</p>
</div>
</div>
</div>
</div>
<p>Outlining functions with <code>lobstr::ast()</code> can helpful if we plan on iterating multiple, smaller functions. For example, before making a binary vector of column names, we need to verify the column has only two values. Binary variables can come in multiple flavors (logical, integer, character, factor, ordered, etc.), so <code>check_binary_vec()</code> will have a series of ‚Äòchecks‚Äô for each column type.</p>
<p>Below is an abstract folder tree outlining <code>pull_binary_cols()</code>, the function called to extract a named character vector of binary column names:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>‚ñà‚îÄpull_binary_cols 
‚îú‚îÄ‚ñà‚îÄselect_class 
‚îÇ ‚îî‚îÄ‚ñà‚îÄis_class 
‚îî‚îÄ‚ñà‚îÄmake_binary_vec 
  ‚îî‚îÄ‚ñà‚îÄcheck_binary_vec 
    ‚îú‚îÄ‚ñà‚îÄcheck_log_binary 
    ‚îú‚îÄ‚ñà‚îÄcheck_int_binary 
    ‚îú‚îÄ‚ñà‚îÄcheck_chr_binary 
    ‚îú‚îÄ‚ñà‚îÄcheck_fct_binary 
    ‚îî‚îÄ‚ñà‚îÄcheck_ord_binary </code></pre>
</div>
</div>
<p><code>pull_binary_cols()</code> calls <code>select_class()</code> then passes the selected columns to <code>make_binary_vec()</code>, where <code>check_binary_vec()</code> determines if it‚Äôs one of the five types of possible binary variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(palmerpenguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins)</span>
<span id="cb19-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   sex </span></span>
<span id="cb19-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "sex"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>starwars)</span>
<span id="cb20-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   gender </span></span>
<span id="cb20-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "gender"</span></span></code></pre></div>
</div>
<p>The <code>pull_facet_cols()</code> outline is similar, except that it calls the <code>pull_binary_cols()</code> first, then selects the columns and determines if any remaining have 3-5 categorical levels:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>‚ñà‚îÄpull_facet_cols 
‚îú‚îÄ‚ñà‚îÄpull_binary_cols 
‚îú‚îÄ‚ñà‚îÄselect_class 
‚îÇ ‚îî‚îÄ‚ñà‚îÄis_class 
‚îî‚îÄ‚ñà‚îÄmake_facet_vec 
  ‚îî‚îÄ‚ñà‚îÄcheck_facet_vec 
    ‚îú‚îÄ‚ñà‚îÄcheck_chr_facet 
    ‚îî‚îÄ‚ñà‚îÄcheck_fct_facet </code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="test-tools" class="level2">
<h2 class="anchored" data-anchor-id="test-tools">Test tools</h2>
<p>Before we can start developing the tests for <code>pull_cols()</code>, we‚Äôll need data. We can define test data inside the <code>it()</code> call for <code>select_class()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() returned objects"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df returned"</span>, {</span>
<span id="cb22-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define test data</span></span>
<span id="cb22-4">    test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb22-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb22-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L),</span>
<span id="cb22-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbl_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span>),</span>
<span id="cb22-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item:"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb22-9">  })</span>
<span id="cb22-10">})</span></code></pre></div>
</div>
<p>This is helpful because it‚Äôs clear what <code>test_data</code> contains, and many times a small dataset will suffice. However, larger, more complex test data should be stored as a test fixture.</p>
<section id="test-fixtures" class="level3">
<h3 class="anchored" data-anchor-id="test-fixtures">Test fixtures</h3>
<p>Creating test fixtures is covered in <a href="https://r-pkgs.org/testing-design.html#storing-test-data">R packages</a>, but I‚Äôll summarize the key points:</p>
<ol type="1">
<li><p>Test data (and other objects) can either be created within a test, or as a persistent <a href="https://r-pkgs.org/testing-advanced.html#sec-testing-advanced-concrete-fixture">test fixture</a></p></li>
<li><p>Test data fixtures should be stored in <code>tests/testthat/fixtures/&lt;test_data.rds&gt;</code></p></li>
<li><p>The code used to create any test data fixtures should be stored in the same folder with a <code>make_</code> prefix (i.e., <code>tests/testthat/fixtures/&lt;make_test_data.R&gt;</code>)</p></li>
</ol>
<p>This is easier to picture with a demonstration: In the <code>tests/testthat/</code> folder, I‚Äôll create a new <code>fixtures</code> folder, and add a <code>make_test_data.R</code> file.<sup>8</sup></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">tests/testthat/</span>
<span id="cb23-2">        ‚îî‚îÄ‚îÄ fixtures/</span>
<span id="cb23-3">                ‚îî‚îÄ‚îÄ make_test_data.R</span></code></pre></div>
<p>In <code>make_test_data.R</code>, I‚Äôll create <code>test_data</code> using the code above and save <code>test_data</code> in <code>tests/testthat/fixtures/</code> as <code>test_data.rds</code>:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">tests/testthat/</span>
<span id="cb24-2">        ‚îî‚îÄ‚îÄ fixtures/</span>
<span id="cb24-3">                ‚îú‚îÄ‚îÄ make_test_data.R</span>
<span id="cb24-4">                ‚îî‚îÄ‚îÄ test_data.rds</span></code></pre></div>
<p>To load the data into my test, I‚Äôll add the following to the top of the test context:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() returned objects"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb25-2">  </span>
<span id="cb25-3">  test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_data.rds"</span>))</span>
<span id="cb25-4">  </span>
<span id="cb25-5">})</span></code></pre></div>
</div>
<p><code>testthat::test_path()</code> will load the data from the testing directory when I‚Äôm ready to run my test.</p>
<p>The <code>select_class()</code> function should also be able to return a data.frame/tibble of the specified class, or a named vector of the column names. <code>testthat</code>‚Äôs <code>expect_</code>* functions have a lot of options for writing very specific tests.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() returned objects"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb26-2">  </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df returned"</span>, {</span>
<span id="cb26-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(object, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb26-6">  })</span>
<span id="cb26-7">  </span>
<span id="cb26-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tibble returned"</span>, {</span>
<span id="cb26-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(object,</span>
<span id="cb26-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl_df"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb26-12">    )</span>
<span id="cb26-13">  })</span>
<span id="cb26-14">  </span>
<span id="cb26-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string returned"</span>, {</span>
<span id="cb26-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_type</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)</span>
<span id="cb26-18">  })</span>
<span id="cb26-19">  </span>
<span id="cb26-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"named vector returned"</span>, {</span>
<span id="cb26-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define/load test data</span></span>
<span id="cb26-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_named</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_var"</span>)</span>
<span id="cb26-23">  })</span>
<span id="cb26-24">})</span></code></pre></div>
</div>
<p><code>select_class()</code> should also return the columns according to the <code>class</code> argument. For the logical, integer, double, character, and list columns, we can assess each returned object with <code>expect_type()</code>. However, with the factor and ordered columns, we‚Äôll use the <code>expect_s3_class()</code>.</p>
<div class="cell">
<details class="code-fold">
<summary>show/hide select_class() tests</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check classes ----</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_class() return classes"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb27-3">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check logical ----</span></span>
<span id="cb27-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical works"</span>, {</span>
<span id="cb27-5">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_data.rds"</span>))</span>
<span id="cb27-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define obj</span></span>
<span id="cb27-7">      obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_class</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> test_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>)</span>
<span id="cb27-8">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test type</span></span>
<span id="cb27-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_type</span>(obj[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>)</span>
<span id="cb27-10">    })</span>
<span id="cb27-11">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check integer ----</span></span>
<span id="cb27-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer works"</span>, {</span>
<span id="cb27-13">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># integer test code</span></span>
<span id="cb27-14">      })</span>
<span id="cb27-15">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check double ----</span></span>
<span id="cb27-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double works"</span>, {</span>
<span id="cb27-17">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># double test code</span></span>
<span id="cb27-18">    })</span>
<span id="cb27-19">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check character ----</span></span>
<span id="cb27-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character works"</span>, {</span>
<span id="cb27-21">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># character test code</span></span>
<span id="cb27-22">    })</span>
<span id="cb27-23">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check list ----</span></span>
<span id="cb27-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list works"</span>, {</span>
<span id="cb27-25">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list test code</span></span>
<span id="cb27-26">    })</span>
<span id="cb27-27">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check factor ----</span></span>
<span id="cb27-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor works"</span>, {</span>
<span id="cb27-29">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fixtures"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_data.rds"</span>))</span>
<span id="cb27-30">      obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_class</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> test_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>)</span>
<span id="cb27-31">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s3_class</span>(obj[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>)</span>
<span id="cb27-32">    })</span>
<span id="cb27-33">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## check factor (ordered) ----</span></span>
<span id="cb27-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ordered works"</span>, {</span>
<span id="cb27-35">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ordered factor test code</span></span>
<span id="cb27-36">    })</span>
<span id="cb27-37"></span>
<span id="cb27-38">})</span></code></pre></div>
</details>
</div>
<p>Using <code>describe()</code> and <code>it()</code> allows us to outline tests for <code>select_class()</code>, and including test fixtures makes it easier to test all possible classes returned.</p>
<p>When we‚Äôve covered my intended ‚Äòend results‚Äô for <code>select_class()</code> (i.e., what we expect to happen when it works and we expect to happen when it doesn‚Äôt), we cam write the function:</p>
<div class="cell">
<details class="code-fold">
<summary>select_column_class()</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">select_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">return_tbl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb28-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(df)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df must be a dataframe"</span>)</span>
<span id="cb28-3"></span>
<span id="cb28-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define classes</span></span>
<span id="cb28-5">  valid_classes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"double"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb28-6">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ordered"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>)</span>
<span id="cb28-7">  class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.arg</span>(class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> valid_classes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">several.ok =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb28-8"></span>
<span id="cb28-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function to check classes</span></span>
<span id="cb28-10">  is_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, cls) {</span>
<span id="cb28-11">    cls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(cls, valid_classes)</span>
<span id="cb28-12">    cls_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> valid_classes[cls]</span>
<span id="cb28-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(cls_name,</span>
<span id="cb28-14">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">logical =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(x),</span>
<span id="cb28-15">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">integer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x),</span>
<span id="cb28-16">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">double =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(x),</span>
<span id="cb28-17">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numeric =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x),</span>
<span id="cb28-18">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">character =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x),</span>
<span id="cb28-19">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.factor</span>(x),</span>
<span id="cb28-20">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.ordered</span>(x),</span>
<span id="cb28-21">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(x),</span>
<span id="cb28-22">           <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb28-23">  }</span>
<span id="cb28-24"></span>
<span id="cb28-25">  selected_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(df, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(class, is_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x)))</span>
<span id="cb28-26"></span>
<span id="cb28-27">  col_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df)[selected_cols]</span>
<span id="cb28-28"></span>
<span id="cb28-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (return_tbl) {</span>
<span id="cb28-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df[, col_names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>])</span>
<span id="cb28-31">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb28-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> col_names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nm =</span> col_names))</span>
<span id="cb28-33">  }</span>
<span id="cb28-34">}</span></code></pre></div>
</details>
</div>
<p>Below is a summary of tips for adding data your tests.</p>
<div id="fig-unit_test_dep_data" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-unit_test_dep_data" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/unit_test_dep_data.png" class="img-fluid figure-img" style="width:90.0%" data-ref-parent="fig-unit_test_dep_data">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Unit test fixtures
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-unit_test_dep_data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Unit test fixtures
</figcaption>
</figure>
</div>
</section>
<section id="test-helpers" class="level3">
<h3 class="anchored" data-anchor-id="test-helpers">Test helpers</h3>
<p>Test helpers can be stored in <code>tests/testthat/helper.R</code>. Test helpers are functions or code that 1) is too long to repeat with each test, and 2) doesn‚Äôt take too much time or memory to run. Read more about test helpers <a href="https://r-pkgs.org/testing-advanced.html#sec-testing-advanced-fixture-helper">here.</a>.</p>
<p>For this application, I‚Äôve created a <a href="https://github.com/mjfrigaard/utap/blob/main/tests/testthat/helper.R">set of test helpers</a> to make different forms of test data (because we‚Äôll be repeatedly defining columns with <em>slightly</em> different attributes).</p>
<p>For example, <code>col_maker()</code> can be used to create a <code>tibble</code> with columns based on the <code>col_type</code>, <code>size</code>, and <code>missing</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbl"</span>, </span>
<span id="cb29-2">                       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fct"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ord"</span>),</span>
<span id="cb29-3">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb29-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb29-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 √ó 6</span></span>
<span id="cb29-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   log_var int_var dbl_var chr_var fct_var ord_var</span></span>
<span id="cb29-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;lgl&gt;     &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;fct&gt;   &lt;ord&gt;  </span></span>
<span id="cb29-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 TRUE          1     0.1 item:1  group 1 level 1</span></span>
<span id="cb29-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 FALSE        20    NA   &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   </span></span>
<span id="cb29-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 NA           NA     0.1 item:1  group 1 level 1</span></span></code></pre></div>
</div>
<p>I can also create tibbles with custom columns using individual helper <code>_maker()</code> functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb30-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb30-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chr_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lvls =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ord_var =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ord_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lvls =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-5">)</span>
<span id="cb30-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 √ó 3</span></span>
<span id="cb30-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   log_var chr_var ord_var</span></span>
<span id="cb30-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;lgl&gt;   &lt;chr&gt;   &lt;ord&gt;  </span></span>
<span id="cb30-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 TRUE    item:1  level 1</span></span>
<span id="cb30-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 FALSE   item:2  level 2</span></span>
<span id="cb30-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 TRUE    item:3  level 1</span></span></code></pre></div>
</div>
<p>These helpers make it easier to iterate through the test expectations <em>and</em> function development, because <code>tibble</code>s like the one above can be developed <em>inside</em> each test.</p>
<p>Below is an example for testing if <code>pull_binary_cols()</code> will correctly identify the <code>logical</code> columns (for both return objects):</p>
<div class="cell">
<details open="" class="code-fold">
<summary>using test helpers</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pull_binary_cols() works"</span>, {</span>
<span id="cb31-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical tibble (with missing)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb31-3">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb31-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb31-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>))</span>
<span id="cb31-6">    })</span>
<span id="cb31-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical tibble"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb31-8">      test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_maker</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">missing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span>
<span id="cb31-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb31-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>))</span>
<span id="cb31-11">    })</span>
<span id="cb31-12">})</span></code></pre></div>
</details>
</div>
<p>Sometimes it will still make sense to create the test data inside the test scope (i.e.&nbsp;inside the <code>it()</code> or <code>test_that()</code> call). For example, I was <code>pull_binary_cols()</code> to identify integer columns with binary values (<code>0</code>, <code>1</code>). I should make these test data explicit:</p>
<div class="cell">
<details open="" class="code-fold">
<summary>using test helpers</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test integer with binary values (0, 1, NA)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb32-2">  test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L))</span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>))</span>
<span id="cb32-5">})</span>
<span id="cb32-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test integer with binary values and missing (0, 1, NA)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code =</span> {</span>
<span id="cb32-7">  test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_integer_</span>))</span>
<span id="cb32-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_binary_cols</span>(test_data),</span>
<span id="cb32-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>))</span>
<span id="cb32-10">})</span></code></pre></div>
</details>
</div>
<p>When I‚Äôm confident with the <code>pull_binary_cols()</code> function and it‚Äôs tests, I‚Äôll run <code>devtools:::test_active_file()</code>.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb33-1">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 9 ]</span></code></pre></div>
</section>
<section id="test-coverage" class="level3">
<h3 class="anchored" data-anchor-id="test-coverage">Test coverage</h3>
<p><em>How many tests should I write?</em></p>
<p>In <code>testthat</code> code coverage measures the extent to which the tests in the <code>tests/testthat/</code> folder cover the possible execution paths of the functions in the <code>R/</code> folder.</p>
<p>Code test coverage is a way to confirm that the unit tests are robust enough to verify that your code behaves as expected. In R packages, code coverage is discussed in the <a href="https://r-pkgs.org/testing-design.html#sec-testing-design-coverage">testing chapter</a> using the <a href="https://covr.r-lib.org/"><code>covr</code> package</a>.</p>
<p>During development, check the code coverage of a test file with <code>devtools::test_coverage_active_file()</code>. Sometimes this function can be temperamental, so I use the combination of <code>covr</code> functions below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">covr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_coverage</span>(</span>
<span id="cb34-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_files =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R/&lt;function_file.R&gt;"</span>, </span>
<span id="cb34-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test_files =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tests/testthat/test-&lt;function_file.R&gt;"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-4">  covr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report</span>()</span></code></pre></div>
</div>
<p>Below is the test coverage for <code>make_binary_vec()</code>‚Äìa smaller helper function for <code>pull_binary_cols()</code>‚Äìin the <strong>Viewer</strong> when <code>devtools::test_coverage_active_file()</code> is entered in the <strong>Console</strong>:</p>
<div id="fig-make_binary_vec_coverage" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-make_binary_vec_coverage" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/make_binary_vec_coverage.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-make_binary_vec_coverage">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Test coverage
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-make_binary_vec_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Unit test coverage interactively
</figcaption>
</figure>
</div>
<p>We can see from the output we don‚Äôt have 100% test coverage for <code>make_binary_vec()</code>. When we click on the file path in the table we can se what execution paths aren‚Äôt being tested:</p>
<div id="fig-make_binary_vec_coverage_source" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-make_binary_vec_coverage_source" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/make_binary_vec_coverage_source.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-make_binary_vec_coverage_source">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Behavior not tested in <code>make_binary_vec()</code>
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-make_binary_vec_coverage_source-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: The area in red is the untested portion of <code>make_binary_vec()</code>
</figcaption>
</figure>
</div>
<p>It‚Äôs probably not worth chasing down the remaining 17% on this function because I‚Äôve outlined it‚Äôs primary requirements in the BDD functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"make_binary_vec() works"</span>, {</span>
<span id="cb35-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>, {</span>
<span id="cb35-3">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-4">    })</span>
<span id="cb35-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>, {</span>
<span id="cb35-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-7">    })</span>
<span id="cb35-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>, {</span>
<span id="cb35-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-10">    })</span>
<span id="cb35-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">it</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>, {</span>
<span id="cb35-12">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test code</span></span>
<span id="cb35-13">    })</span>
<span id="cb35-14">})</span></code></pre></div>
</div>
<p>Striving for a high percentage of coverage is a good practice, it doesn‚Äôt guarantee that the function always behaves as expected. Unit tests might execute a line of code, but still not catch a bug due to the design of the test (it‚Äôs easy to have high coverage if the unit tests are shallow and don‚Äôt check for any potential <a href="https://en.wikipedia.org/wiki/Edge_case">edge cases</a>).</p>
<p>After developing the functions in <code>utap</code>, the files in the <code>R/</code> folder are organized into names <a href="https://r-pkgs.org/code.html#sec-code-organising">based on the</a> ‚Äò<em>main function and its supporting helpers</em>‚Äô:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">R/</span>
<span id="cb36-2">‚îú‚îÄ‚îÄ check_binary_vec.R</span>
<span id="cb36-3">‚îú‚îÄ‚îÄ check_facet_vec.R</span>
<span id="cb36-4">‚îú‚îÄ‚îÄ make_binary_vec.R</span>
<span id="cb36-5">‚îú‚îÄ‚îÄ make_facet_vec.R</span>
<span id="cb36-6">‚îú‚îÄ‚îÄ nin.R</span>
<span id="cb36-7">‚îú‚îÄ‚îÄ pull_binary_cols.R</span>
<span id="cb36-8">‚îú‚îÄ‚îÄ pull_cat_cols.R</span>
<span id="cb36-9">‚îú‚îÄ‚îÄ pull_cols.R</span>
<span id="cb36-10">‚îú‚îÄ‚îÄ pull_facet_cols.R</span>
<span id="cb36-11">‚îú‚îÄ‚îÄ pull_numeric_cols.R</span>
<span id="cb36-12">‚îú‚îÄ‚îÄ select_class.R</span>
<span id="cb36-13">‚îî‚îÄ‚îÄ utap-package.R</span></code></pre></div>
<p>The <code>tests/testthat/</code> folder file names have identical names as the files in the <code>R/</code> folder.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb37-1">tests</span>
<span id="cb37-2">‚îú‚îÄ‚îÄ testthat</span>
<span id="cb37-3">‚îÇ   ‚îú‚îÄ‚îÄ _snaps</span>
<span id="cb37-4">‚îÇ   ‚îú‚îÄ‚îÄ fixtures</span>
<span id="cb37-5">‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ make_test_data.R</span>
<span id="cb37-6">‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ test_data.rds</span>
<span id="cb37-7">‚îÇ   ‚îú‚îÄ‚îÄ helper.R</span>
<span id="cb37-8">‚îÇ   ‚îú‚îÄ‚îÄ test-check_binary_vec.R</span>
<span id="cb37-9">‚îÇ   ‚îú‚îÄ‚îÄ test-check_facet_vec.R</span>
<span id="cb37-10">‚îÇ   ‚îú‚îÄ‚îÄ test-make_binary_vec.R</span>
<span id="cb37-11">‚îÇ   ‚îú‚îÄ‚îÄ test-nin.R</span>
<span id="cb37-12">‚îÇ   ‚îú‚îÄ‚îÄ test-pull_binary_cols.R</span>
<span id="cb37-13">‚îÇ   ‚îú‚îÄ‚îÄ test-pull_cat_cols.R</span>
<span id="cb37-14">‚îÇ   ‚îú‚îÄ‚îÄ test-pull_cols.R</span>
<span id="cb37-15">‚îÇ   ‚îú‚îÄ‚îÄ test-pull_facet_cols.R</span>
<span id="cb37-16">‚îÇ   ‚îú‚îÄ‚îÄ test-pull_numeric_cols.R</span>
<span id="cb37-17">‚îÇ   ‚îî‚îÄ‚îÄ test-select_class.R</span>
<span id="cb37-18">‚îî‚îÄ‚îÄ testthat.R</span>
<span id="cb37-19"></span>
<span id="cb37-20">4 directories, 14 files</span></code></pre></div>
<p>It‚Äôs common for R packages to have a general <code>R/utils.R</code> file that defines the ‚Äòutility‚Äô functions, but these files <em>can</em> become a catch-all for any functions that don‚Äôt have a clear home (read more <a href="https://rud.is/b/2018/04/08/dissecting-r-package-utility-belts/">here</a>).</p>
<p>For example, I could stored the <code>%nin%</code> operator in <code>R/utils.R</code> (but it removes the ability to run <code>test_coverage_active_file()</code>:</p>
<p>When I‚Äôve completed a set of test files, I can use <code>devtools::test()</code> to check if they‚Äôre passing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb39-1">==&gt; devtools::test()</span>
<span id="cb39-2"></span>
<span id="cb39-3">‚Ñπ Testing utap</span>
<span id="cb39-4">‚úî | F W  S  OK | Context</span>
<span id="cb39-5">‚úî |         23 | check_binary_vec</span>
<span id="cb39-6">‚úî |          3 | check_facet_vec</span>
<span id="cb39-7">‚úî |          4 | make_binary_vec</span>
<span id="cb39-8">‚úî |          3 | nin          </span>
<span id="cb39-9">‚úî |          9 | pull_binary_cols</span>
<span id="cb39-10">‚úî |          4 | pull_cat_cols</span>
<span id="cb39-11">‚úî |          4 | pull_cols    </span>
<span id="cb39-12">‚úî |         15 | pull_facet_cols</span>
<span id="cb39-13">‚úî |          2 | pull_numeric_cols</span>
<span id="cb39-14">‚úî |         14 | select_class </span>
<span id="cb39-15"></span>
<span id="cb39-16">‚ïê‚ïê Results ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</span>
<span id="cb39-17">[ FAIL 0 | WARN 0 | SKIP 0 | PASS 81 ]</span>
<span id="cb39-18"></span>
<span id="cb39-19">üéØ Your tests hit the mark üéØ</span></code></pre></div>
<p>The output above shows all tests are passing (and some helpful words of encouragement!). To check the code coverage for the utap package, I can run <code>devtools::test_coverage()</code> to view the output in the <strong>Viewer</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_coverage</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">‚Ñπ Computing test coverage for utap</span></code></pre></div>
<div id="fig-utap_coverage" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-utap_coverage" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/utap_coverage.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%" data-ref-parent="fig-utap_coverage">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>test_coverage()</code> for entire package
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-utap_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: <code>devtools::test_coverage()</code>
</figcaption>
</figure>
</div>
<p>Clicking on any of the <strong>Files</strong> will open the <strong>Source</strong> tab and give a summary like the one above from <code>test_coverage_active_file()</code>. I can also use <code>covr::package_coverage()</code> in the <strong>Console</strong> for simpler output:</p>
<div id="fig-covr_package_coverage" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div id="fig-covr_package_coverage" class="quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/covr_package_coverage.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:75.0%" data-ref-parent="fig-covr_package_coverage">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) <code>package_coverage()</code> for entire package
</figcaption>
</figure>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-covr_package_coverage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: <code>covr::package_coverage()</code>
</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span style="font-weight: bold; font-size: 1.15em;">TIPS: Unit tests</span>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #282b2d;">
<p>The advice on unit tests below (in <strong>bold</strong>) comes from <a href="https://www.manning.com/books/effective-software-testing">Effective Software Testing, 2022</a>. I‚Äôve included descriptions of how <code>testthat</code> satisfies each recommendation:</p>
<ol type="1">
<li><p><strong>Unit tests should be fast</strong>: the text recommends unit tests take a ‚Äò<em>couple of milliseconds</em>‚Äô to execute. <code>testthat</code> tests typically fall within this threshold (and provide time measurements to identify bottlenecks).</p></li>
<li><p><strong>Unit tests are easy to control</strong>: i.e., ‚Äò<em>input values and the expected result value are easy to adapt or modify in the test</em>.‚Äô <code>testthat</code> expectations give us ample access to 1) the <code>expected</code> result and 2) the <code>observed</code> result.</p></li>
<li><p><strong>Unit tests are easy to write</strong>: i.e., ‚Äò<em>do not require a complicated setup or additional work</em>‚Äô. When used combination with <code>usethis</code>, <code>testthat</code> unit tests can be set up, created, written, and run with a few lines of code.</p></li>
</ol>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="other-code-metrics" class="level2">
<h2 class="anchored" data-anchor-id="other-code-metrics">Other code metrics</h2>
<p>Sometimes it‚Äôs interesting to view the relationship between function size and number of tests using the <a href="https://github.com/hrbrmstr/cloc"><code>cloc</code> package.</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cloc)</span></code></pre></div>
</div>
<p><code>cloc</code> stands for <em>Count Lines of Code</em>, and it‚Äôs a rough metric used to gauge code complexity. It‚Äôs simple, but apparently provides ‚Äú<em>just as much predictive power as more elaborate constructs like cyclomatic complexity.</em>‚Äù<a href="https://www.oreilly.com/library/view/software-design-x-rays/9781680505795/">source</a></p>
<p>Below is a count of the lines of code in each file in the <code>R</code> folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">cloc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cloc_by_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb44-1"># A tibble: 13 √ó 6</span>
<span id="cb44-2">   source filename                language   loc blank_lines comment_lines</span>
<span id="cb44-3">   &lt;chr&gt;  &lt;chr&gt;                   &lt;chr&gt;    &lt;int&gt;       &lt;int&gt;         &lt;int&gt;</span>
<span id="cb44-4"> 1 R      "R/select_class.R"      R           27           5            31</span>
<span id="cb44-5"> 2 R      "R/check_binary_vec.R"  R           24           0            14</span>
<span id="cb44-6"> 3 R      "R/make_facet_vec.R"    R           19           0            19</span>
<span id="cb44-7"> 4 R      "R/pull_numeric_cols.R" R           19           1            23</span>
<span id="cb44-8"> 5 R      "R/pull_binary_cols.R"  R           14           0            19</span>
<span id="cb44-9"> 6 R      "R/pull_facet_cols.R"   R           14           0            37</span>
<span id="cb44-10"> 7 R      "R/check_facet_vec.R"   R           13           0            14</span>
<span id="cb44-11"> 8 R      "R/pull_cat_cols.R"     R           13           0            18</span>
<span id="cb44-12"> 9 R      "R/make_binary_vec.R"   R           10           0            19</span>
<span id="cb44-13">10 R      "R/pull_cols.R"         R            8           0            15</span>
<span id="cb44-14">11 R      "R/nin.R"               R            3           0             9</span>
<span id="cb44-15">12 R      "R/utap-package.R"      R            2           0             6</span>
<span id="cb44-16">13 R      ""                      SUM        166           6           224</span></code></pre></div>
<p>This output also confirms the relationship between lines of code and tests.</p>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>This post has been an introduction to unit testing utility functions in a Shiny app-package. When I‚Äôm confident the utility functions are working, I‚Äôll start adding them into modules (and testing with <code>testServer()</code> or <code>shinytest2</code>). Files names can change a lot throughout the course of developing a Shiny app-package, so it‚Äôs helpful to adopt (or create) a naming convention.<sup>9</sup></p>
<p>Which particular file naming convention you choose isn‚Äôt as important as adopting a convention and implementing it.</p>
<!--



```{.default}
test-column_classes.R:
            ‚îÇ
            ‚îî‚îÄ‚îÄ select_column_class()
                  ‚îÇ
                  ‚îî‚îÄ‚îÄ get_column_class() 
```


```{.default}
tree/
  ‚îÇ
  ‚îî‚îÄ‚îÄ get_column_class()
        ‚îÇ     ‚îÇ
        ‚îÇ     ‚îî‚îÄ‚îÄ select_column_class()
        ‚îÇ
        ‚îú‚îÄ‚îÄ pull_binary_cols()
        ‚îÇ
        ‚îú‚îÄ‚îÄ pull_facet_cols()
        ‚îÇ
        ‚îú‚îÄ‚îÄ pull_cat_cols()
        ‚îÇ
        ‚îî‚îÄ‚îÄ pull_numeric_cols()
```


```{.default}
tree/
  ‚îÇ
  ‚îî‚îÄ‚îÄ get_column_class() # used in all pull_[type]_cols()
        ‚îÇ     ‚îÇ
        ‚îÇ     ‚îî‚îÄ‚îÄ select_column_class()
        ‚îÇ
        ‚îú‚îÄ‚îÄ pull_binary_cols()
        ‚îÇ        ‚îÇ
        ‚îÇ        ‚îú‚îÄ‚îÄ check_binary_vec()
        ‚îÇ        ‚îÇ      ‚îÇ
        ‚îÇ        ‚îÇ      ‚îú‚îÄ‚îÄ check_log_binary()
        ‚îÇ        ‚îÇ      ‚îú‚îÄ‚îÄ check_int_binary()
        ‚îÇ        ‚îÇ      ‚îî‚îÄ‚îÄ check_fct_binary()
        ‚îÇ        ‚îÇ
        ‚îÇ        ‚îî‚îÄ‚îÄ make_binary_vec()
        ‚îÇ
        ‚îú‚îÄ‚îÄ pull_facet_cols() # custom definition
        ‚îÇ        ‚îÇ
        ‚îÇ        ‚îú‚îÄ‚îÄ check_facet_vec()
        ‚îÇ        ‚îÇ      ‚îÇ
        ‚îÇ        ‚îÇ      ‚îú‚îÄ‚îÄ check_chr_facet()
        ‚îÇ        ‚îÇ      ‚îî‚îÄ‚îÄ check_fct_facet()
        ‚îÇ        ‚îÇ
        ‚îÇ        ‚îî‚îÄ‚îÄ make_facet_vec()
        ‚îÇ
        ‚îú‚îÄ‚îÄ pull_cat_cols() # is.character & is.factor
        ‚îÇ
        ‚îî‚îÄ‚îÄ pull_numeric_cols() # is.integer & is.double
```


-->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Learn more about R packages in <a href="https://r-pkgs.org/testing-basics.html">R Packages, 2ed</a>‚Ü©Ô∏é</p></li>
<li id="fn2"><p>R Packages, 2ed also <a href="https://r-pkgs.org/testing-basics.html#run-tests">suggests</a> binding <code>test_active_file()</code> and <code>test_coverage_active_file()</code> to keyboard shortcuts.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>Read more about behavior-driven development in <a href="https://www.manning.com/books/bdd-in-action-second-edition">BDD in Action, 2ed</a>‚Ü©Ô∏é</p></li>
<li id="fn4"><p><code>describe()</code> and <code>it()</code> are discussed in the <a href="https://testthat.r-lib.org/reference/describe.html"><code>testthat</code> documentation.</a>‚Ü©Ô∏é</p></li>
<li id="fn5"><p>The variable names would automatically populate the <code>choices</code> argument for a <code>selectInput()</code>‚Ü©Ô∏é</p></li>
<li id="fn6"><p><code>testthat</code>‚Äôs <code>it()</code> function is essentially identical to <a href="https://testthat.r-lib.org/reference/describe.html#details"><code>test_that()</code></a>.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Both functions are placed in <code>R/select_class.R</code>, and both unit tests are also in the <code>tests/testthat/test-select_class.R</code> file.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>The <code>fixtures</code> name is not required, but it always make sense to keep folder names explicit.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>If you‚Äôre using the <code>golem</code> framework to develop your shiny app-package, the <code>utils_</code> and <code>fct_</code> prefixes are used to define two different types of <a href="https://engineering-shiny.org/structuring-project.html#conventions-matter">utility/helper functions</a>. <code>utils_</code> files contain ‚Äò<em>small helper functions</em> and‚Äô<em>top-level functions defining your user interface and your server function</em>‚Äô. <code>fct_</code> files contain ‚Äò<em>the business logic, which are potentially large functions</em>‚Ä¶<em>the backbone of the application and may not be specific to a given module</em>‚Äô.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>shiny</category>
  <category>testing</category>
  <guid>https://mjfrigaard.github.io/posts/p1-tests-unit-tests/</guid>
  <pubDate>Mon, 01 May 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/p1-tests-unit-tests/image.png" medium="image" type="image/png" height="192" width="144"/>
</item>
<item>
  <title>Writing modular code with box</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/box/</link>
  <description><![CDATA[ 





<!--
https://mjfrigaard.github.io/posts/vanilla-shiny/

https://mjfrigaard.github.io/posts/my-pkg-app/

https://mjfrigaard.github.io/posts/my-golem-app/

https://mjfrigaard.github.io/posts/my-leprechaun-app/

https://mjfrigaard.github.io/posts/my-rhino-app/
-->
<section id="what-is-box" class="level2">
<h2 class="anchored" data-anchor-id="what-is-box">What is <code>box</code>?</h2>
<p><a href="https://klmr.me/box/index.html"><code>box</code></a> provides a precise and concise method for using add-on packages and functions. <code>box</code> also doesn‚Äôt require bundling your code into R packages to make it reusable. This post covers tackling some common workflow steps to demonstrate how <code>box</code> modules work.</p>
</section>
<section id="packages-functions-and-namespaces" class="level2">
<h2 class="anchored" data-anchor-id="packages-functions-and-namespaces">Packages, functions, and namespaces</h2>
<p>To understand the problem <code>box</code> solves, we‚Äôll review the typical process for using add-on package functions in a standard R sesson and when developing R packages:</p>
<section id="r-sessions" class="level3">
<h3 class="anchored" data-anchor-id="r-sessions">R sessions</h3>
<ol type="1">
<li><p>Assume I want to use the <code>glue()</code> function from the <code>glue</code> package. The first step is to install it with <code>install.packages("glue")</code></p>
<ul>
<li><p>I‚Äôll use the example from the <a href="https://glue.tidyverse.org/"><code>glue</code> package website</a>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glue"</span>)</span>
<span id="cb1-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb1-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The downloaded binary packages are in</span></span>
<span id="cb1-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  /var/folders/0x/x5wkbhmx0k74tncn9swz7xpr0000gn/T//RtmpFOcxyI/downloaded_packages</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul></li>
<li><p>To use the functions from <code>glue</code>, I‚Äôll need to run <code>library(glue)</code> in the same R session.</p>
<ul>
<li><p>If I try to use a function from a package but it hasn‚Äôt been attached with <code>library</code> or <code>require</code>, I see the following:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb2-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error in glue("My name is {name}."): could not find function "glue"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>The error above can be confusing, because it doesn‚Äôt tell us if the package hasn‚Äôt been <em>installed</em>, or if the package hasn‚Äôt been <em>attached</em>.</p></li>
<li><p>However, after installing <code>glue</code>, I can get around using <code>library</code> by explicitly calling the function from the package namespace (i.e., <code>pkg::foo()</code>):</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span></span>
<span id="cb3-2">glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb3-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## My name is Fred.</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>While this method works, it doesn‚Äôt attach the package to the search list (which I check with <code>search()</code>)</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()</span>
<span id="cb4-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] ".GlobalEnv"        "package:stats"     "package:graphics" </span></span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "package:grDevices" "package:utils"     "package:datasets" </span></span>
<span id="cb4-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "package:methods"   "Autoloads"         "package:base"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><code>library()</code> attaches the <code>glue</code> package in the search list and makes the glue() function available to use (without the <code>package::</code> prefix)</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb5-2">base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>()</span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] ".GlobalEnv"        "package:glue"      "package:stats"    </span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [4] "package:graphics"  "package:grDevices" "package:utils"    </span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [7] "package:datasets"  "package:methods"   "Autoloads"        </span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [10] "package:base"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>Unfortunately, <code>library()</code> also attaches <strong>all</strong> the objects from the <code>glue</code> package to the <code>search()</code> list, even though I‚Äôm only using a single function.</p></li>
</ul></li>
</ol>
<p>Read more about namespaces in <a href="https://adv-r.hadley.nz/environments.html#namespaces">Advanced R</a> and <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace-motivation">R packages</a>.</p>
</section>
<section id="r-packages" class="level3">
<h3 class="anchored" data-anchor-id="r-packages">R packages</h3>
<p>If I want to make the code I write using <code>glue</code> reusable, I can bundle it into an R package. Including <code>glue</code> as an add-on package (i.e., packages not loaded automatically with R) is done with the <code>NAMESPACE</code> file (created and edited via <code>roxygen2</code> tags), and by listing these packages under <code>Imports</code> in the <code>DESCRIPTION</code> file.</p>
<section id="in-r-files" class="level4">
<h4 class="anchored" data-anchor-id="in-r-files">In <code>R/</code> files:</h4>
<p>All <code>.R</code> files in R packages are placed in the <code>R/</code> folder. If these files use add-on packages (i.e., <code>library()</code> or <code>package::fun()</code>), I include the <code>@import</code> or <code>@importFrom</code> tag. If I‚Äôd like to include and make <code>my_name()</code> available to users, I use the <code>@export</code> tag:</p>
<ul>
<li><p>I‚Äôve converted the use of <code>glue()</code> into a small function below:</p>
<ul>
<li><p><code>my_name()</code> is saved as <code>R/my_name.R</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-2">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb6-3">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb6-4">}</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_name</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fred"</span>)</span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## My name is Fred.</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>Below is a default <code>roxygen2</code> skeleton:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Introduce yourself </span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x a name </span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return An glued introduction to R</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export my_name</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_name("Fred")</span></span>
<span id="cb7-10">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb7-11">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb7-12">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb7-13">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul></li>
</ul>
<p>As we can see, the default <code>roxygen2</code> skeleton doesn‚Äôt include <code>@import</code> or <code>@importFrom</code>. The general advice is to prefer <code>@importFrom</code> over <code>@import</code>, because <strong><code>@import</code> imports the entire package namespace</strong> (only use this in ‚Äò<em>very special situations</em>‚Äô such as ‚Äò<em>heavy use</em>‚Äô of a package functions).</p>
<ul>
<li><p>Below is an example of using <code>@importFrom</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Introduce yourself </span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x a name </span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return An glued introduction to R</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export my_name</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_name("Fred")</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom glue glue</span></span>
<span id="cb8-12">my_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb8-13">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb8-14">  glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My name is {name}.'</span>)</span>
<span id="cb8-15">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
<section id="namespace" class="level4">
<h4 class="anchored" data-anchor-id="namespace">NAMESPACE</h4>
<p>While developing my R package, I‚Äôll run <code>devtools::load_all()</code> and <code>devtools::document()</code> frequently, and each time the imported functions are available in the current session and the tags are converted into <a href="https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-NAMESPACE-file"><strong>directives</strong></a> in the <code>NAMESPACE</code> file</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb9-1">import(package)</span>
<span id="cb9-2">importFrom(package,function) </span></code></pre></div>
</section>
<section id="description" class="level4">
<h4 class="anchored" data-anchor-id="description">DESCRIPTION</h4>
<p>A package <code>DESCRIPTION</code> file is managed completely independent of it‚Äôs <code>NAMESPACE</code> file. This can be confusing during package development, because it‚Äôs easy to assume some kind of connection between the <code>roxygen2</code> tags, the <code>NAMESPACE</code> file, and the <code>DESCRIPTION</code> file:</p>
<ul>
<li><p>However, this is not the case:</p>
<ul>
<li><p>To include <code>glue</code> in the <code>DESCRIPTION</code> under <code>Imports</code>, I also need to use <code>usethis::use_package("glue")</code></p></li>
<li><p>As noted in <a href="https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports">R packages</a>, ‚Äú<em>The <code>Imports</code> field</em> [in the <code>DESCRIPTION</code> file] <em>makes sure that the packages listed there are installed when your package is installed.</em>‚Äù The <code>DESCRIPTION</code> file does not make functions available to the package developer (or the user).</p></li>
</ul></li>
</ul>
<p>The recommended practices for add-on packages are 1) use the namespace-qualified calls in the <code>R/</code> scripts (i.e., <code>package::function()</code> with an accompanying <code>@importFrom package function</code> tag), and 2) list these packages in the <code>DESCRIPTION</code> file under <code>Imports</code> or <code>Suggests</code> to make sure a package is installed whenever your package is installed (i.e., with <code>usethis::use_package("package")</code>)</p>
<p>The table below shows the connection between <code>roxygen2</code> tags, the resulting <code>NAMESPACE</code> entry, and what should be listed in the <code>DESCRIPTION</code> (this is also covered in <a href="https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports-r-code">R packages</a>)</p>
<p><br></p>
<div style="font-size: 0.70em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Refresher on <code>roxygen2</code>, <code>NAMESPACE</code> &amp; <code>DESCRPTION</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 0.90em; color: #696969;">
<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
roxygen2 tag
</th>
<th style="text-align:left;">
NAMESPACE directive
</th>
<th style="text-align:right;">
DESCRIPTION
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="importFrom">@importFrom</span>
</td>
<td style="text-align:left;">
importFrom() : import selected object from another namespace
</td>
<td style="text-align:right;">
Consider listing under ‚ÄòSuggests‚Äô
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="import">@import</span>
</td>
<td style="text-align:left;">
import(): import all objects from another package‚Äôs namespace
</td>
<td style="text-align:right;">
List under ‚ÄòImports‚Äô
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="export">@export</span>
</td>
<td style="text-align:left;">
export() : export the function, method, generic, or class so it‚Äôs available outside of the package (in the namespace)
</td>
<td style="text-align:right;">
Nothing to list
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
</section>
</section>
</section>
<section id="how-box-is-different" class="level2">
<h2 class="anchored" data-anchor-id="how-box-is-different">How <code>box</code> is different</h2>
<p><code>box</code> doesn‚Äôt require installing or attaching add-on packages. Instead, it uses modules to make package functions available. I‚Äôll demonstrate with a simplified example using the <a href="https://glue.tidyverse.org/"><code>glue()</code> package</a>. Assume I have a project folder <code>pkg/</code>,</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb10-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> pkg.Rproj</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> directory, 1 file</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li><p>Projects in RStudio have a hidden folder, <code>.Rproj.user/</code>:</p>
<ul>
<li><p>The the following contents are automatically created with a new <code>.Rproj</code> file:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details class="code-fold">
<summary>contents of .Rproj</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb11-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> .Rproj.user</span>
<span id="cb11-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îú‚îÄ‚îÄ 8CC5F70E</span>
<span id="cb11-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îú‚îÄ‚îÄ bibliography-index</span>
<span id="cb11-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îú‚îÄ‚îÄ ctx</span>
<span id="cb11-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îú‚îÄ‚îÄ explorer-cache</span>
<span id="cb11-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îú‚îÄ‚îÄ presentation</span>
<span id="cb11-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îú‚îÄ‚îÄ profiles-cache</span>
<span id="cb11-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îú‚îÄ‚îÄ sources</span>
<span id="cb11-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îÇ      ‚îî‚îÄ‚îÄ session-16ca0811</span>
<span id="cb11-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îÇ          ‚îî‚îÄ‚îÄ lock_file</span>
<span id="cb11-12">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îú‚îÄ‚îÄ tutorial</span>
<span id="cb11-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îÇ      ‚îî‚îÄ‚îÄ viewer-cache</span>
<span id="cb11-14">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>      ‚îî‚îÄ‚îÄ shared</span>
<span id="cb11-15">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>          ‚îî‚îÄ‚îÄ notebooks</span>
<span id="cb11-16">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>              ‚îî‚îÄ‚îÄ patch-chunk-names</span>
<span id="cb11-17">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> pkg.Rproj</span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">14</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div></li>
<li><p>None of these contents deal with installing or loading packages, but I‚Äôve included it here for full transparency</p></li>
</ul></li>
</ul>
<section id="create-a-box-module" class="level3">
<h3 class="anchored" data-anchor-id="create-a-box-module">Create a box module</h3>
<p>I‚Äôll put the modules in a <code>box/fun.R</code> file, which I‚Äôll create from the command-line:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> box </span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> box/fun.R</span></code></pre></div>
</details>
</div>
</div>
<p>Now my <code>pkg</code> folder looks like this:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pkg/</span></span>
<span id="cb13-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> box</span>
<span id="cb13-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>    ‚îî‚îÄ‚îÄ fun.R</span>
<span id="cb13-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> pkg.Rproj</span>
<span id="cb13-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> use.R</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>pkg/box/fun.R</code> I‚Äôll add the following:</p>
<ol type="1">
<li><p>a brief comment with the path to the module</p></li>
<li><p>the <code>@export</code> tag from <code>roxygen2</code></p></li>
<li><p>a call to <code>box::use(glue[glue])</code></p></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/fun.R</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb14-3">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb14-4">  glue[glue]</span>
<span id="cb14-5">  )</span></code></pre></div>
</details>
</div>
</div>
<p>In the parent folder, create another file named <code>use.R</code>.</p>
<p>In <code>use.R</code>, use the <code>fun</code> module by calling <code>box::use(box/fun)</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fun)</span></code></pre></div>
</details>
</div>
</div>
<p>View <code>fun</code> by printing it to the console:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print</span></span>
<span id="cb16-2">fun</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>module: <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/fun</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>This confirms the module has been created.</p>
</section>
<section id="using-modules" class="level3">
<h3 class="anchored" data-anchor-id="using-modules">Using modules</h3>
<p>The <code>glue</code> function is available from <code>fun</code> using the <code>$</code> (like a column in a <code>data.frame</code> or <code>tibble</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use </span></span>
<span id="cb18-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span></span>
<span id="cb18-3">fun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is a box {x}.'</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> is a box module.</span></code></pre></div>
</details>
</div>
</div>
<p><code>box</code> modules are combinations of named folders and files, but unlike R packages, these folders and files can be <em>nested</em>. The <code>folder/file</code> structure is used for separating modules, the same way we might separate files in a project (i.e., <code>project/data/file.csv</code> and <code>project/code/analysis.R</code>)</p>
<ul>
<li><p><code>box</code> makes the function and package namespacing <strong>explicit</strong> by using <code>box::use(package[fun])</code></p></li>
<li><p><code>box</code> also simplifies using module by calling the same function when building/using modules <code>box::use(folder/file)</code>:</p></li>
</ul>
<div style="font-size: 1.0em;">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CREATE MODULE</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/fun.R</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb20-4">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb20-5">  glue[glue]</span>
<span id="cb20-6">  )</span></code></pre></div>
</div>
<div style="font-size: 1.0em;">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># USE MODULE</span></span>
<span id="cb21-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fun)</span></code></pre></div>
</div>
<p>Below is a slightly more involved example:</p>
</section>
</section>
<section id="module-workflow" class="level2">
<h2 class="anchored" data-anchor-id="module-workflow">Module workflow</h2>
<p>Below I‚Äôm going to create a module that imports, wrangles, and visualizes data from the <a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins package.</a> (<strong>which is installed, but not loaded</strong>).</p>
<section id="boximport" class="level3">
<h3 class="anchored" data-anchor-id="boximport"><code>box/import</code></h3>
<p>This workflow starts with an <code>import</code> module in a <code>pengbox</code> project. The code below is stored in <code>pengbox/box/import.R</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>import module</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/import.R</span></span>
<span id="cb22-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb22-3">  readr[read_csv],</span>
<span id="cb22-4">)</span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb22-6">get_raw_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb22-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb22-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(raw_csv_url)</span>
<span id="cb22-9">}</span></code></pre></div>
</details>
</div>
</div>
<p>In a the master <code>pengbox/run.R</code> file, I‚Äôll use <code>import</code> like so:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb23-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_raw_csv</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.75em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 √ó 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb24-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb24-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb24-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb24-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb24-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb24-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb24-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb24-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb24-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb24-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb24-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb24-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb24-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb24-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb24-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb24-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb24-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div>
<p>I‚Äôll re-write this module in <code>box/import.R</code> using an alias for <code>readr</code>s <code>read_csv()</code> function (<code>rcsv</code>) and include the <code>readr::cols()</code> function to remove the lengthy message.</p>
<p>This code is stored in the <code>box/import.R</code> file:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>import module with alias</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/import.R</span></span>
<span id="cb25-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb25-3">  readr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rcsv =</span> read_csv, cols]</span>
<span id="cb25-4">)</span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb25-6">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb25-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb25-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use alias for read_csv()</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rcsv</span>(raw_csv_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols</span>())</span>
<span id="cb25-10">}</span></code></pre></div>
</details>
</div>
</div>
<p>Using import with the new module is more concise:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb26-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb26-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raw</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.75em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 √ó 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb27-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb27-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb27-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb27-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb27-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb27-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb27-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb27-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb27-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb27-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb27-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb27-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb27-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb27-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb27-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb27-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb27-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="boxprep" class="level3">
<h3 class="anchored" data-anchor-id="boxprep"><code>box/prep</code></h3>
<p>After importing the raw penguins data, I‚Äôll write a module for wrangling the data (that also imports the <code>import</code> module).</p>
<p>This module takes the following steps:</p>
<ul>
<li>Reset the <code>box.path</code><br>
</li>
<li>Import the <code>box/import</code> module<br>
</li>
<li>Load all the functions from <code>dplyr</code> using <code>[...]</code><br>
</li>
<li>Load aliases for <code>stringr::str_extract()</code> and <code>janitor::clean_names()</code><br>
</li>
<li>Compose <code>prep()</code> with the wrangling steps</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>prep module with import</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/prep.R</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb28-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import alias import module</span></span>
<span id="cb28-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import)</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle packages, functions, and aliases</span></span>
<span id="cb28-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb28-11">  dplyr[...],</span>
<span id="cb28-12">  stringr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str_ext =</span> str_extract],</span>
<span id="cb28-13">  janitor[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fix_cols =</span> clean_names]</span>
<span id="cb28-14">)</span>
<span id="cb28-15"></span>
<span id="cb28-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb28-17">prep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb28-18">  raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raw</span>()</span>
<span id="cb28-19">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fix_cols</span>(raw)</span>
<span id="cb28-20">  vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(clean_cols, </span>
<span id="cb28-21">    species, </span>
<span id="cb28-22">    island, </span>
<span id="cb28-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> culmen_length_mm,</span>
<span id="cb28-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mm =</span> culmen_depth_mm,</span>
<span id="cb28-25">    flipper_length_mm,</span>
<span id="cb28-26">    body_mass_g,</span>
<span id="cb28-27">    sex)</span>
<span id="cb28-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(vars, </span>
<span id="cb28-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_ext</span>(species, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([[:alpha:]]+)"</span>),</span>
<span id="cb28-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex))</span>
<span id="cb28-31">}</span></code></pre></div>
</details>
</div>
</div>
<p>We can now the <code>prep</code> module to access the import module for the wrangled dataset.</p>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prepare</span></span>
<span id="cb29-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>prep)</span>
<span id="cb29-3">peng_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> prep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>()</span>
<span id="cb29-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(peng_clean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tibble</span> [344 √ó 7] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> species          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb30-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> island           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> ...</span>
<span id="cb30-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_length_mm   : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...</span>
<span id="cb30-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_depth_mm    : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...</span>
<span id="cb30-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> flipper_length_mm: num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 190 ...</span>
<span id="cb30-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> body_mass_g      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb30-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sex              : Factor w/ 2 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span>: 2 1 1 NA 1 2 1 2 NA NA ...</span></code></pre></div>
</div>
</div>
<p>These data look like they‚Äôre ready for graphing! Time to write another module‚Ä¶</p>
</section>
<section id="boxplot" class="level3">
<h3 class="anchored" data-anchor-id="boxplot"><code>box/plot</code></h3>
<p>I will build my visualization with <code>ggplot2</code> (in the <code>box/plot.R</code> module) and <code>dplyr::filter()</code>:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>plot module with prep</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pengbox/plot.R</span></span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb31-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import prep module</span></span>
<span id="cb31-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>prep)</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import ggplot2</span></span>
<span id="cb31-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb31-11">  dplyr[filter],</span>
<span id="cb31-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ggplot2 =</span> ggplot2[ggplot, aes, geom_point, </span>
<span id="cb31-13">                    facet_wrap, labs, theme_minimal])</span>
<span id="cb31-14"></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb31-16">scatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb31-17">  prepped <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> prep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>()</span>
<span id="cb31-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove missing sex</span></span>
<span id="cb31-19">  filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prepped, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex)) </span>
<span id="cb31-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot filtered data</span></span>
<span id="cb31-21">  plotted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> filtered, </span>
<span id="cb31-22">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb31-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm,</span>
<span id="cb31-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g,</span>
<span id="cb31-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> sex</span>
<span id="cb31-26">    )</span>
<span id="cb31-27">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-28">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb31-29">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> island)</span>
<span id="cb31-30">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-31">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sex) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-32">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body Mass (g)"</span>, </span>
<span id="cb31-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper vs. Body Mass"</span>, </span>
<span id="cb31-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-35">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb31-36">  plotted</span>
<span id="cb31-37">}</span></code></pre></div>
</details>
</div>
</div>
<p>Check our scatter plot with <code>plot$scatter()</code></p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot</span></span>
<span id="cb32-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>plot)</span>
<span id="cb32-3">plot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>()</span></code></pre></div>
</details>
</div>
</div>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/box/scatter.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
</div>
</div>
<p>And there you have it! A complete pipeline using <code>box</code> modules! And the total project size (files and folders) is much smaller than building an R package:</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/</span></span>
<span id="cb33-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> box</span>
<span id="cb33-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ import.R</span>
<span id="cb33-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ plot.R</span>
<span id="cb33-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ prep.R</span>
<span id="cb33-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> penguins.Rproj</span>
<span id="cb33-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> run.R</span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span> directories, 5 files</span></code></pre></div>
</details>
</div>
</div>
<p>Below are the various ways to include packages and functions in <code>box</code> modules:</p>
<div style="font-size: 0.70em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Options for creating <code>box</code> modules:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 0.90em; color: #696969;">
<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
Inside box::use()
</th>
<th style="text-align:left;">
Action
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
box::use( pkg )
</td>
<td style="text-align:left;">
imports ‚Äòpkg‚Äô, does not attach any function names
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( p = pkg )
</td>
<td style="text-align:left;">
imports ‚Äòpkg‚Äô with alias (‚Äòp‚Äô), does not attach any function names
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( pkg = pkg[foo, bar] )
</td>
<td style="text-align:left;">
imports ‚Äòpkg‚Äô and attaches the function names ‚Äòpkg::foo()‚Äô and ‚Äòpkg::bar()‚Äô
</td>
</tr>
<tr>
<td style="text-align:left;">
box::use( pkg[my_foo = foo, ‚Ä¶] )
</td>
<td style="text-align:left;">
imports ‚Äòpkg‚Äô with alias for ‚Äòfoo‚Äô (‚Äòmy_foo‚Äô) and attaches all exported function names
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="nesting-modules" class="level2">
<h2 class="anchored" data-anchor-id="nesting-modules">Nesting modules</h2>
<p>The same workflow could be re-written as nested modules, with folders separating logical steps in an analysis workflow (or application). Consider the folder structure below:</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/</span></span>
<span id="cb34-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> box</span>
<span id="cb34-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ graph</span>
<span id="cb34-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îú‚îÄ‚îÄ wrangle</span>
<span id="cb34-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îÇ   ‚îú‚îÄ‚îÄ clean</span>
<span id="cb34-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ import</span>
<span id="cb34-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ raw.R</span>
<span id="cb34-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cols.R</span>
<span id="cb34-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îÇ   ‚îî‚îÄ‚îÄ vars.R</span>
<span id="cb34-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>       ‚îî‚îÄ‚îÄ scatter.R</span>
<span id="cb34-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> penguins.Rproj</span>
<span id="cb34-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> run.R</span>
<span id="cb34-13"></span>
<span id="cb34-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> directories, 6 files</span></code></pre></div>
</details>
</div>
</div>
<section id="import" class="level3">
<h3 class="anchored" data-anchor-id="import"><code>import</code></h3>
<p>With this structure, the <code>raw</code> module is in the <code>import</code> folder:</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pengbox/box/graph/wrangle/clean/import</span></span>
<span id="cb35-2">                                    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> raw.R</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span> directory, 1 file</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li><p>The <code>raw</code> module‚Äìthe first step‚Äìis nested in the <code>box/graph/wrangle/clean/import/raw.R</code> file</p>
<ul>
<li>The <code>raw</code> module imports the raw <code>.csv</code> data with an aliass for <code>readr</code>‚Äôs <code>read_csv()</code></li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>raw module</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/clean/import/raw.R</span></span>
<span id="cb36-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb36-3">  readr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rcsv =</span> read_csv, cols]</span>
<span id="cb36-4">)</span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb36-6">csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb36-7">  raw_csv_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://bit.ly/3SQJ6E3"</span></span>
<span id="cb36-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use alias for read_csv()</span></span>
<span id="cb36-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rcsv</span>(raw_csv_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols</span>())</span>
<span id="cb36-10">}</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<section id="raw" class="level4">
<h4 class="anchored" data-anchor-id="raw"><code>raw</code></h4>
<ul>
<li><p>In <code>run.R</code>, I run <code>box/graph/wrangle/clean/import/raw</code> to import the <code>raw</code> module</p>
<ul>
<li>The <code>csv()</code> function imports the raw data</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in use.R</span></span>
<span id="cb37-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw)</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">give.attr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details class="code-fold">
<summary>raw module output</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb38-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spc_tbl_</span> [344 √ó 17] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> spec_tbl_df/tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> studyName          : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PAL0708"</span> ...</span>
<span id="cb38-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sample Number      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 1 2 3 4 5 6 7 8 9 10 ...</span>
<span id="cb38-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Species            : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie Penguin (Pygoscelis adeliae)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> ...</span>
<span id="cb38-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Region             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anvers"</span> ...</span>
<span id="cb38-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Island             : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Torgersen"</span> </span>
<span id="cb38-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Stage              : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult, 1 Egg Stage"</span> </span>
<span id="cb38-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Individual ID      : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N1A2"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A1"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N2A2"</span> ...</span>
<span id="cb38-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Clutch Completion  : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span> ...</span>
<span id="cb38-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Date Egg           : Date<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>, format: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-11-11"</span> ...</span>
<span id="cb38-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 NA 36.7 39.3 38.9 ...</span>
<span id="cb38-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Culmen Depth <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 ...</span>
<span id="cb38-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Flipper Length <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mm</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 NA 193 190 181 195 193 ...</span>
<span id="cb38-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Body Mass <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 NA 3450 ...</span>
<span id="cb38-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Sex                : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span> NA ...</span>
<span id="cb38-16"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 15 N <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA 8.95 8.37 NA 8.77 ...</span>
<span id="cb38-17"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Delta 13 C <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">o/oo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-24.7</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> NA <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-25.3</span> ...</span>
<span id="cb38-18"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> Comments           : chr <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:344</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not enough blood for isotopes."</span> NA NA ...</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="clean" class="level3">
<h3 class="anchored" data-anchor-id="clean"><code>clean</code></h3>
<p>The <code>clean</code> folder contains the <code>cols</code> module and the <code>snakes()</code> function</p>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/graph/wrangle/</span></span>
<span id="cb39-2">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> clean</span>
<span id="cb39-3">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import</span></span>
<span id="cb39-4">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îÇ   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îî‚îÄ‚îÄ raw.R</span></span>
<span id="cb39-5">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ cols.R</span>
<span id="cb39-6">              <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> vars.R</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<section id="snakes" class="level4">
<h4 class="anchored" data-anchor-id="snakes"><code>snakes</code></h4>
<ul>
<li><p>The <code>box/graph/wrangle/clean/cols</code> module standardizes the column names</p>
<ul>
<li><code>cols</code> calls the <code>snakes()</code> function, which converts all the column names to <code>lower_snake_case</code> with an alias for <code>janitor::clean_names()</code>, then it imports <code>select</code> from <code>dplyr</code> to subset the columns</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>cols module</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/clean/cols.R</span></span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb40-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use import raw module</span></span>
<span id="cb40-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>import<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>raw)</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># columns</span></span>
<span id="cb40-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb40-11">  dplyr[select],</span>
<span id="cb40-12">  janitor[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fix_cols =</span> clean_names]</span>
<span id="cb40-13">)</span>
<span id="cb40-14"></span>
<span id="cb40-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb40-16">snakes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb40-17">  raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csv</span>()</span>
<span id="cb40-18">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fix_cols</span>(raw)</span>
<span id="cb40-19">  vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(clean_cols, </span>
<span id="cb40-20">    species, </span>
<span id="cb40-21">    island, </span>
<span id="cb40-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_length_mm =</span> culmen_length_mm,</span>
<span id="cb40-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bill_depth_mm =</span> culmen_depth_mm,</span>
<span id="cb40-24">    flipper_length_mm,</span>
<span id="cb40-25">    body_mass_g,</span>
<span id="cb40-26">    sex)</span>
<span id="cb40-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(vars)</span>
<span id="cb40-28">}</span></code></pre></div>
</details>
</div>
</div>
<ul>
<li>Back in <code>run.R</code>, we call the <code>cols</code> module to convert the columns names with <code>snakes()</code>:</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean columns</span></span>
<span id="cb41-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cols)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(cols<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snakes</span>())</span></code></pre></div>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>cols module output</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb42-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"island"</span>            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_length_mm"</span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bill_depth_mm"</span>                  </span>
<span id="cb42-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[5]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flipper_length_mm"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span> </span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="wrangle" class="level3">
<h3 class="anchored" data-anchor-id="wrangle"><code>wrangle</code></h3>
<ul>
<li>Now that I have standardized columns and the subset of the variables to plot, I can call the <code>vars</code> module to wrangle the plot variables</li>
</ul>
<div style="font-size: 1.10em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/graph/wrangle/</span></span>
<span id="cb43-2">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#clean</span></span>
<span id="cb43-3">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îú‚îÄ‚îÄ #import</span></span>
<span id="cb43-4">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îÇ   #‚îî‚îÄ‚îÄ raw.R</span></span>
<span id="cb43-5">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îî‚îÄ‚îÄ cols.R</span></span>
<span id="cb43-6">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> vars.R</span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> directories, 3 files</span></code></pre></div>
</details>
</div>
</div>
<section id="vars" class="level4">
<h4 class="anchored" data-anchor-id="vars"><code>vars</code></h4>
<ul>
<li><p><code>vars</code> is nested in the <code>wrangle</code> folder, and imports the <code>raw</code> and <code>cols</code> modules</p>
<ul>
<li>The <code>vars</code> module imports <code>mutate</code> and <code>filter</code> from <code>dplyr</code> and an alias for <code>stringr::str_extract()</code></li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>vars module</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/wrangle/vars.R</span></span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb44-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use clean names module</span></span>
<span id="cb44-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>clean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cols)</span>
<span id="cb44-8"></span>
<span id="cb44-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle packages/functions</span></span>
<span id="cb44-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(dplyr[mutate, filter],</span>
<span id="cb44-11">  stringr[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str_ext =</span> str_extract])</span>
<span id="cb44-12"></span>
<span id="cb44-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb44-14">scatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb44-15">  clean_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cols<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snakes</span>()</span>
<span id="cb44-16">  plot_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> clean_cols <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_ext</span>(species, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([[:alpha:]]+)"</span>),</span>
<span id="cb44-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(species),</span>
<span id="cb44-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">island =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(island),</span>
<span id="cb44-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex)</span>
<span id="cb44-22">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove missing sex</span></span>
<span id="cb44-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sex))</span>
<span id="cb44-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plot_vars)</span>
<span id="cb44-26">}</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>run.R</code>, we check the structure of the output from <code>vars$scatter()</code></p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in run.R</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle variables </span></span>
<span id="cb45-3">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>vars)</span>
<span id="cb45-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(vars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>())</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>vars module output</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb46-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tibble</span> [333 √ó 7] <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">S3:</span> tbl_df/tbl/data.frame<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span>                                                     </span>
<span id="cb46-2"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> species          : Factor w/ 3 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span>,..: 1 1 1 1 1 1 1 1 1 1 ...</span>
<span id="cb46-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> island           : Factor w/ 3 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Biscoe"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dream"</span>,..: 3 3 3 3 3 3 3 3 3 3 ...</span>
<span id="cb46-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_length_mm   : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 39.1 39.5 40.3 36.7 39.3 38.9 39.2 41.1 38.6 34.6 ...</span>
<span id="cb46-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> bill_depth_mm    : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 18.7 17.4 18 19.3 20.6 17.8 19.6 17.6 21.2 21.1 ...</span>
<span id="cb46-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> flipper_length_mm: num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 181 186 195 193 190 181 195 182 191 198 ...</span>
<span id="cb46-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> body_mass_g      : num <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1:333</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> 3750 3800 3250 3450 3650 ...</span>
<span id="cb46-8"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sex              : Factor w/ 2 levels <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEMALE"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MALE"</span>: 2 1 1 1 2 1 2 1 2 2 ...</span></code></pre></div>
</details>
</div>
</div></li>
</ul>
</section>
</section>
<section id="graph" class="level3">
<h3 class="anchored" data-anchor-id="graph"><code>graph</code></h3>
<p>Finally, we get to the <code>graph</code> module. This module import all preceding modules.</p>
<div style="font-size: 1.10em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb47-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">box/</span></span>
<span id="cb47-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> graph</span>
<span id="cb47-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#wrangle</span></span>
<span id="cb47-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îú‚îÄ‚îÄ #clean</span></span>
<span id="cb47-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îÇ   #‚îú‚îÄ‚îÄ #import</span></span>
<span id="cb47-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îÇ   #‚îÇ   #‚îî‚îÄ‚îÄ raw.R</span></span>
<span id="cb47-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îÇ   #‚îî‚îÄ‚îÄ cols.R</span></span>
<span id="cb47-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#‚îî‚îÄ‚îÄ vars.R</span></span>
<span id="cb47-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> scatter.R</span>
<span id="cb47-10"></span>
<span id="cb47-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">5</span> directories, 4 files</span></code></pre></div>
</div>
</div>
<section id="scatter" class="level4">
<h4 class="anchored" data-anchor-id="scatter"><code>scatter</code></h4>
<ul>
<li><p>The <code>scatter</code> module imports the <code>vars</code> module with the data that‚Äôs been imported, cleaned, and wrangled.</p>
<ul>
<li>The <code>ggp2()</code> function includes the <code>ggplot2</code> functions to build a scatter plot.</li>
</ul>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>scatter module</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># box/graph/scatter.R</span></span>
<span id="cb48-2"></span>
<span id="cb48-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset the path</span></span>
<span id="cb48-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">box.path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>())</span>
<span id="cb48-5"></span>
<span id="cb48-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import plot vars module</span></span>
<span id="cb48-7">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wrangle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>vars)</span>
<span id="cb48-8"></span>
<span id="cb48-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import ggplot2</span></span>
<span id="cb48-10">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(</span>
<span id="cb48-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ggplot2 =</span> ggplot2[ggplot, aes, geom_point, </span>
<span id="cb48-12">                    facet_wrap, labs, theme_minimal]</span>
<span id="cb48-13">)</span>
<span id="cb48-14"></span>
<span id="cb48-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb48-16">ggp2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb48-17">  scatter_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter</span>()</span>
<span id="cb48-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot prepped data</span></span>
<span id="cb48-19">  ggp2_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> scatter_vars, </span>
<span id="cb48-20">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb48-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm,</span>
<span id="cb48-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_length_mm,</span>
<span id="cb48-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> island</span>
<span id="cb48-24">    )</span>
<span id="cb48-25">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-26">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb48-27">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species)</span>
<span id="cb48-28">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-29">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> island) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-30">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb48-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper Length (mm)"</span>, </span>
<span id="cb48-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill length (mm)"</span>, </span>
<span id="cb48-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>,</span>
<span id="cb48-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Island"</span>,</span>
<span id="cb48-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper vs. Bill Length"</span>, </span>
<span id="cb48-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span></span>
<span id="cb48-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-38">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb48-39">  ggp2_plot</span>
<span id="cb48-40">}</span></code></pre></div>
</details>
</div>
</div>
<p>In <code>run.R</code>, the final module call produces the plot.</p>
<div style="font-size: 1.0em;">
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># graph</span></span>
<span id="cb49-2">box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(box<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>graph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>scatter)</span>
<span id="cb49-3">scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggp2</span>()</span></code></pre></div>
</div>
</div></li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/box/nested-scatter.png" class="img-fluid figure-img" style="width:100.0%"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this post I‚Äôve covered how the <code>box</code> package uses modules to separate your analysis and workflow into small, <em>modular</em> scripts. Nesting modules also adds a flexibility R packages do not have (because everything has to be contained in the <code>R/</code> folder).</p>
<p>Both versions of the projects created in this example ended up with very few lines of code, and didn‚Äôt require a creating a <code>NAMESPACE</code> or <code>DESCRIPTION</code> file.</p>
<p>View the final <a href="https://github.com/mjfrigaard/penguins">project here.</a></p>
<!--

-->


</section>

 ]]></description>
  <category>packages</category>
  <category>code</category>
  <guid>https://mjfrigaard.github.io/posts/box/</guid>
  <pubDate>Fri, 21 Apr 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/box/image.png" medium="image" type="image/png" height="139" width="120"/>
</item>
<item>
  <title>purrr updates (v1.0.0)</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/purrr1.0/</link>
  <description><![CDATA[ 





<!--
https://mjfrigaard.github.io/posts/vanilla-shiny/

https://mjfrigaard.github.io/posts/my-pkg-app/

https://mjfrigaard.github.io/posts/my-golem-app/

https://mjfrigaard.github.io/posts/my-leprechaun-app/

https://mjfrigaard.github.io/posts/my-rhino-app/
-->
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_github("tidyverse/purrr", </span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                   force = TRUE, quiet = TRUE)</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sloop)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(snakecase)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(waldo)</span></code></pre></div>
</details>
</div>
</div>
<p>This post is going to cover the recent updates to the <a href="https://purrr.tidyverse.org/"><code>purrr</code> package</a>. The release of <a href="https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/">version 1.0.0</a> (and dev version <a href="https://github.com/tidyverse/purrr/blob/main/NEWS.md#purrr-101">v1.0.1</a>) had some breaking changes, which I will cover below. But first, I‚Äôll dive into some attributes of R‚Äôs functions and objects that make <code>purrr</code> particularly useful, and I‚Äôll work through iteration problems I‚Äôve encountered (and solved with <code>purrr</code>).</p>
<section id="refresher-functions-and-objects" class="level1">
<h1><strong>Refresher</strong>: functions and objects</h1>
<p>If you‚Äôre like me, you‚Äôve never been a big fan of <code>for</code> loops. They‚Äôre an important concept to grasp, but if you‚Äôve ever had to debug what‚Äôs happening in multiple nested <code>for</code> loops, you‚Äôve probably found yourself asking if there‚Äôs a better way to iterate.</p>
<p>In a functional programming language like R, it‚Äôs nice when to have functions perform a lot of the work I‚Äôd have to write into a <code>for</code> loop.</p>
<section id="generic-functions-s3-objects" class="level2">
<h2 class="anchored" data-anchor-id="generic-functions-s3-objects">Generic functions &amp; S3 objects</h2>
<p>R‚Äôs syntax avoids explicit iteration by allowing certain <em>generic</em> functions to be used across different types (or objects). For example, the base <code>plot()</code> and <code>summary()</code> functions are S3 generic function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(plot)</span>
<span id="cb2-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"      "generic"</span></span>
<span id="cb2-3">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(summary)</span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"      "generic"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Which means <code>plot()</code> can be applied to S3 objects, like time-series (<code>ts</code>) and rectangular datasets (<code>data.frame</code>):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">otype</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb3-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "ts"</span></span>
<span id="cb3-5">sloop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">otype</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "S3"</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "data.frame"</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb4-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   576.0   578.1   579.1   579.0   579.9   581.9</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span>
<span id="cb4-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      weight             feed   </span></span>
<span id="cb4-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Min.   :108.0   casein   :12  </span></span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1st Qu.:204.5   horsebean:10  </span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Median :258.0   linseed  :12  </span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Mean   :261.3   meatmeal :11  </span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3rd Qu.:323.5   soybean  :14  </span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Max.   :423.0   sunflower:12</span></span></code></pre></div>
</details>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>LakeHuron)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>chickwts)</span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<details open="" class="code-fold">
<summary>show/hide</summary>
</details>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/purrr1.0/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
<figcaption>Time-series plot</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<details open="" class="code-fold">
<summary>show/hide</summary>
</details>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/purrr1.0/index_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid figure-img" width="672"></p>
<figcaption>Scatter Plot</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
<p><code>summary()</code> is a particularly versatile function, because it can be used on <code>data.frame</code>s, a single column in a <code>data.frame</code>, model outputs, and more.</p>
<div style="font-size: 0.90em; color: #696969;">
<p><em>Click <strong>Code</strong> below to view an example using <code>summary()</code></em></p>
</div>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get summary of columns ----------------------------------------------------</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hp)</span>
<span id="cb6-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    52.0    96.5   123.0   146.7   180.0   335.0</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg)</span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   10.40   15.43   19.20   20.09   22.80   33.90</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store model output  -------------------------------------------------------</span></span>
<span id="cb6-10">lm_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> hp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb6-11">lm_mod</span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Call:</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## lm(formula = mpg ~ hp, data = mtcars)</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Coefficients:</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept)           hp  </span></span>
<span id="cb6-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    30.09886     -0.06823</span></span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get summary of model output -----------------------------------------------</span></span>
<span id="cb6-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_mod)</span>
<span id="cb6-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Call:</span></span>
<span id="cb6-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## lm(formula = mpg ~ hp, data = mtcars)</span></span>
<span id="cb6-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Residuals:</span></span>
<span id="cb6-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     Min      1Q  Median      3Q     Max </span></span>
<span id="cb6-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## -5.7121 -2.1122 -0.8854  1.5819  8.2360 </span></span>
<span id="cb6-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Coefficients:</span></span>
<span id="cb6-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##             Estimate Std. Error t value Pr(&gt;|t|)    </span></span>
<span id="cb6-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept) 30.09886    1.63392  18.421  &lt; 2e-16 ***</span></span>
<span id="cb6-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## hp          -0.06823    0.01012  -6.742 1.79e-07 ***</span></span>
<span id="cb6-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ---</span></span>
<span id="cb6-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</span></span>
<span id="cb6-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb6-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Residual standard error: 3.863 on 30 degrees of freedom</span></span>
<span id="cb6-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Multiple R-squared:  0.6024, Adjusted R-squared:  0.5892 </span></span>
<span id="cb6-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## F-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07</span></span>
<span id="cb6-40"></span>
<span id="cb6-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the output from one S3 generic to another S3 generic -----------------</span></span>
<span id="cb6-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(lm_mod))</span>
<span id="cb6-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                Estimate Std. Error   t value     Pr(&gt;|t|)</span></span>
<span id="cb6-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept) 30.09886054  1.6339210 18.421246 6.642736e-18</span></span>
<span id="cb6-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## hp          -0.06822828  0.0101193 -6.742389 1.787835e-07</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="fp-oop" class="level2">
<h2 class="anchored" data-anchor-id="fp-oop">FP + OOP</h2>
<blockquote class="blockquote">
<p><em>Functional programming is complementary to object-oriented programming, which has been the dominant programming paradigm for the last several decades.</em> - Advanced R, 2nd edition</p>
</blockquote>
<p><code>plot()</code> and <code>summary()</code> are parametric polymorphic (generic) functions, which means they have slightly different behaviors based on the objects passed into them.</p>
<p>As I can see, generic functions are flexible and efficient because of not having to re-define a new function for each input object‚Äìoutputs from generic functions will automatically change (in part) depending on the structure of the object provided to them.</p>
<p>The relationship between functions and objects is what makes <code>purrr</code> (and other tools for iteration) extremely helpful for solving iteration problems we commonly encounter when working with data. Similar to generic functions, these functions allow us to express iterative behavior using a complete and consistent set of tools.</p>
</section>
<section id="iteration-problems" class="level2">
<h2 class="anchored" data-anchor-id="iteration-problems">Iteration problems</h2>
<p>In programming, iteration refers to defining an input and applying an operation over every part of it. Some examples of problems that iteration can solve include:</p>
<ol type="1">
<li><p>You have a list of objects and you‚Äôd like to apply a function (or a series of functions) over the elements in the list</p></li>
<li><p>You have a folder full of files you‚Äôd like to rename or copy to a new directory</p></li>
<li><p>You‚Äôd like to download a collection of files from separate URLS</p></li>
<li><p>You have several years of data, and each year is contained in separate file. You‚Äôd like to read these data into R, combine them into a single dataset</p></li>
<li><p>You have a non-rectangular (i.e., list) of datasets you‚Äôd like to split into individual <code>data.frame</code>s, then export these into separate file paths.</p></li>
</ol>
<p>These are all problems I‚Äôve personally encountered that required a variety of iteration tools to tackle. I‚Äôll start with the first example because the principles remain the same (regardless of the size/scope of the problem):</p>
</section>
</section>
<section id="the-for-loop" class="level1">
<h1><strong>The <code>for</code> loop</strong></h1>
<p><code>for</code> loops are ubiquitous in programming, and (for the most part) they describe the types of problems they‚Äôre solving:</p>
<blockquote class="blockquote">
<p>‚Äú<em>for each <code>item</code> in <code>object</code>, do <code>operation</code></em>‚Äù</p>
</blockquote>
<p>I have a list (<code>my_list</code>), with items in various cases:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">my_list</span>
<span id="cb7-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb7-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "MOvE"     "tHURsDAy" "SISter"   "jOiN"     "lASt"    </span></span>
<span id="cb7-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb7-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "THe tHefT oF the Pearl PIN WaS kePT SEcrEt."    </span></span>
<span id="cb7-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "iT snOWed, RAINEd, AND HaIled ThE samE MOrNiNG."</span></span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "IT caUght iTs HINd pAw in a ruSTY tRaP."        </span></span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "W" "G" "T" "q" "X" "S" "O" "P" "u" "L"</span></span></code></pre></div>
</details>
</div>
</div>
<p>If I try to use the <code>tolower()</code> on <code>my_list</code>, it returns a vector.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>()</span>
<span id="cb8-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  chr [1:3] "c(\"move\", \"thursday\", \"sister\", \"join\", \"last\")" ...</span></span></code></pre></div>
</details>
</div>
</div>
<p>How can I apply the <code>tolower()</code> function to each item in <code>my_list</code>, and return the original object type? I‚Äôll use <code>my_list</code> and <code>tolower()</code> to demonstrate how I was taught to write <code>for</code> loops:</p>
<ul>
<li><p><strong>First</strong>: define the sequence, ‚Äò<em>for <code>[item]</code> in <code>[items in object]</code></em>‚Äô</p>
<ul>
<li>In this case, <code>x</code> is the abstracted <code>[item]</code> taking on the values returned by <code>seq_along(my_list)</code> (the <code>[items in object]</code>)</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)</span>
<span id="cb9-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1 2 3</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take single value of 'x'</span></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use this to get 'items in object'</span></span>
<span id="cb9-7">my_list[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]]</span>
<span id="cb9-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "MOvE"     "tHURsDAy" "SISter"   "jOiN"     "lASt"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><strong>Second</strong>: write the operations the for loop will perform per iteration (i.e.&nbsp;the first iteration is <code>x</code> = <code>tolower(my_list[[1]])</code>; the second iteration is <code>x</code> = <code>tolower(my_list[[2]])</code>; etc.)</p>
<ul>
<li>Test this with a few values if you like</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb10-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb10-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb10-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p><strong>Third</strong>: define an (optional) object to capture the results of the loop (<code>lc_list</code>), and make sure it‚Äôs the correct size</p>
<ul>
<li>Two methods for creating empty lists</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb11-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[2]]</span></span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[3]]</span></span>
<span id="cb11-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb11-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb11-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[2]]</span></span>
<span id="cb11-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span>
<span id="cb11-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb11-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[3]]</span></span>
<span id="cb11-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## NULL</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<p>Finally, we put it all together in a <code>for</code> loop</p>
<div style="font-size: 1.0em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define capture object</span></span>
<span id="cb12-2">lc_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write sequence</span></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(my_list)) {        </span>
<span id="cb12-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write operations/capture in object</span></span>
<span id="cb12-6">  lc_list[[x]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_list[[x]])</span>
<span id="cb12-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean up container</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(lc_list) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentences"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"letters"</span>)</span>
<span id="cb12-9">}</span>
<span id="cb12-10">lc_list</span>
<span id="cb12-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb12-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb12-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb12-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb12-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb12-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb12-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb12-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
<p>This was a simple example, but it demonstrates the basic components in a <code>for</code> loop:</p>
<ol type="1">
<li>The sequence to index
<ul>
<li><code>for (x in seq_along(my_list))</code><br>
</li>
</ul></li>
<li>The operations to iterate
<ul>
<li><code>tolower(my_list[[x]])</code><br>
</li>
</ul></li>
<li>The object to capture the results
<ul>
<li><code>lc_list &lt;- vector(mode = "list", length = 3)</code> and<br>
</li>
<li><code>lc_list[[x]]</code></li>
</ul></li>
</ol>
</section>
<section id="base-r" class="level1">
<h1><strong>Base R</strong></h1>
<p>base R has the <code>_apply</code> family of functions (<code>apply()</code>, <code>lapply()</code>, <code>sapply()</code>, <code>vapply()</code>, etc.) that remove a lot of the ‚Äòbook keeping‚Äô code we had to write in the <code>for</code> loop.</p>
<section id="lapply" class="level2">
<h2 class="anchored" data-anchor-id="lapply"><code>lapply()</code></h2>
<p>Sticking with the <code>my_list</code> and <code>tolower()</code> example, the <code>apply</code> function I want is <code>lapply()</code> (pronounced ‚Äòl-apply‚Äô), and the <code>l</code> stands for list.</p>
<p><code>lapply()</code> has only two required arguments:</p>
<ul>
<li><p><code>X</code> the object we want to iterate over</p></li>
<li><p><code>FUN</code> being the function we want iterated</p></li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb13-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb13-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb13-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb13-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb13-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb13-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb13-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb13-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb13-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb13-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="sapply" class="level2">
<h2 class="anchored" data-anchor-id="sapply"><code>sapply()</code></h2>
<p><code>sapply()</code> attempts to simplify the result depending on the <code>X</code> argument. If <code>X</code> is a list containing vectors where every element has the same length (and it‚Äôs greater than 1), then <code>sapply()</code> returns a matrix:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb14-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 1</span></span>
<span id="cb14-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ words: chr [1:5] "MOvE" "tHURsDAy" "SISter" "jOiN" ...</span></span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb14-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      words     </span></span>
<span id="cb14-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1,] "move"    </span></span>
<span id="cb14-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2,] "thursday"</span></span>
<span id="cb14-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3,] "sister"  </span></span>
<span id="cb14-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4,] "join"    </span></span>
<span id="cb14-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5,] "last"</span></span></code></pre></div>
</details>
</div>
</div>
<p>If a vector is passed to <code>X</code> where every element is length 1, then a vector is returned:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb15-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  chr [1:5] "MOvE" "tHURsDAy" "SISter" "jOiN" "lASt"</span></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower) </span>
<span id="cb15-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       MOvE   tHURsDAy     SISter       jOiN       lASt </span></span>
<span id="cb15-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     "move" "thursday"   "sister"     "join"     "last"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Finally, if <code>X</code> is a list where elements have a length greater than 1, then a list is returned (making it identical to <code>lapply()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower), </span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower)</span>
<span id="cb16-4">)</span>
<span id="cb16-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚úî No differences</span></span></code></pre></div>
</details>
</div>
</div>
<p>This is because <code>sapply</code> is a wrapper around <code>lapply</code>, but has <code>simplify</code> and <code>USE.NAMES</code> set to <code>FALSE</code> (see what happens below when I change them to <code>TRUE</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb17-2">  </span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower), </span>
<span id="cb17-4">  </span>
<span id="cb17-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> tolower, </span>
<span id="cb17-6">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">USE.NAMES =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb17-7">  </span>
<span id="cb17-8">  )</span>
<span id="cb17-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `old` is a list</span></span>
<span id="cb17-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `new` is a character vector ('move', 'thursday', 'sister', 'join', 'last')</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="anonmymous-functions" class="level2">
<h2 class="anchored" data-anchor-id="anonmymous-functions">Anonmymous functions</h2>
<p>The <code>FUN</code> argument can also take anonymous (undefined) functions. For example, if I wanted to access the second elements in <code>my_list</code>, I could pass an anonymous function the <code>FUN</code> (with the index):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb18-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb18-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "tHURsDAy"</span></span>
<span id="cb18-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb18-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb18-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "iT snOWed, RAINEd, AND HaIled ThE samE MOrNiNG."</span></span>
<span id="cb18-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb18-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb18-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "G"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="vapply" class="level2">
<h2 class="anchored" data-anchor-id="vapply"><code>vapply()</code></h2>
<p>Finally <code>vapply()</code> is unique in that it always simplifies the returned output. If we repeat the example above, we see the returned value is character vector:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list, </span>
<span id="cb19-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]], </span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb19-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                             words </span></span>
<span id="cb19-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                        "tHURsDAy" </span></span>
<span id="cb19-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                         sentences </span></span>
<span id="cb19-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "iT snOWed, RAINEd, AND HaIled ThE samE MOrNiNG." </span></span>
<span id="cb19-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                           letters </span></span>
<span id="cb19-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                                               "G"</span></span></code></pre></div>
</details>
</div>
</div>
<p>The <code>apply</code> functions get us much further than writing <code>for</code> loops because we can 1) iterate over vectors and lists, 2) control the output objects, and 3) <strong>write less code.</strong> Unlike generic functions, <code>apply</code> functions are designed to work with specific object types, and return values depending on these objects.</p>
<p>One downside of apply functions is they don‚Äôt play well with <code>data.frame</code>s or <code>tibble</code>s. However, we can control their return values (and manually supply these to <code>tibble::tibble()</code> or <code>data.frame()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb20-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">words =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb20-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sentences =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-6">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-7">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb20-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">letters =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> my_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb20-9">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, </span>
<span id="cb20-10">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
</details>
</div>
</div>
<p>Another downside of the <code>apply</code> functions is they‚Äôre not very uniform. Each function has slight variations in their arguments and rules for return values. This is where <code>purrr</code> comes in‚Ä¶</p>
</section>
</section>
<section id="purrr" class="level1">
<h1><strong><code>purrr</code></strong></h1>
<p>If you‚Äôre new to <code>purrr</code>, a great way to start using it‚Äôs functions is with a recipe covered in <a href="https://posit.co/resources/videos/happy-r-users-purrr-tutorial/">Charlotte Wickham‚Äôs tutorial</a></p>
<ol type="1">
<li><p>Do it for one element</p></li>
<li><p>Turn it into a recipe</p></li>
<li><p>Use <code>purrr::map()</code> to do it for all elements</p></li>
</ol>
<p>I‚Äôll work through these three steps below using <code>my_list</code> and <code>tolower()</code></p>
<section id="do-it-for-one-element" class="level2">
<h2 class="anchored" data-anchor-id="do-it-for-one-element">1. Do it for one element</h2>
<p>The goal with the first step is to get a minimal working example with a single element from the object I want to iterate over (with the function I want to iterate with).</p>
<p>For this example, I need to subset <code>my_list</code> for a single element at position <code>[[1]]</code>, <code>[[2]]</code>, or <code>[[3]]</code> (or using one of the vector names).</p>
<p>I‚Äôll then pass this element to <code>tolower()</code> and make sure it‚Äôs the desired behavior:</p>
<div style="font-size: 0.90em;">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset an element from the list</span></span>
<span id="cb21-2">? <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_list[[?]]</span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply a function to extracted element</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(?)</span></code></pre></div>
</div>
<ul>
<li><p><code>? &lt;- my_list[[?]]</code> = subset element from the list (<code>my_list</code>)</p></li>
<li><p><code>tolower(?)</code> = apply operation (i.e., function) to extracted element.</p></li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">my_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_list[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'words'</span>]]</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(my_words)</span>
<span id="cb22-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that I have a working example for one element, in the next step I‚Äôll abstract these parts into the function arguments.</p>
</section>
<section id="turn-it-into-a-recipe" class="level2">
<h2 class="anchored" data-anchor-id="turn-it-into-a-recipe">2. Turn it into a recipe</h2>
<p>A standard <code>purrr</code> recipe defines <code>.x</code> (the object) and <code>.f</code> (the function), followed by any additional function arguments.</p>
<ul>
<li><p><code>.x</code> = a list or atomic vector</p></li>
<li><p><code>.f</code> = the function we want to apply over every element in <code>.x</code></p></li>
</ul>
<div style="font-size: .90em;">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">.x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> my_list, .f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> tolower</span></code></pre></div>
</div>
</section>
<section id="map-it-across-all-elements" class="level2">
<h2 class="anchored" data-anchor-id="map-it-across-all-elements">3. <code>map()</code> it across all elements</h2>
<p>In <code>purrr::map()</code>, the <code>.x</code> argument is the object (list or atomic vector) I want to iterate over, and <code>.f</code> is the function (i.e., operation) I want applied to every element of <code>.x</code></p>
<p>If I want to convert the case of every element in <code>my_list</code> to lowercase with <code>tolower()</code> I would use the following standard <code>purrr::map()</code> format:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower)</span>
<span id="cb24-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb24-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb24-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb24-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb24-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb24-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb24-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb24-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb24-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb24-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
<p>And there you have it! <code>map()</code> is the core function and workhorse of the <code>purrr</code> package. It‚Äôs important to note that <code>purrr::map()</code> always returns a list, regardless of the object supplied to <code>.x</code>.</p>
</section>
</section>
<section id="version-1.0.0-updates" class="level1">
<h1><strong>Version 1.0.0 updates</strong></h1>
<p>Now I‚Äôll cover some of the updates in <code>purrr</code> 1.0.0. I‚Äôll be using <code>mixed_list</code>, a list with five different types of vectors.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">mixed_list</span>
<span id="cb25-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $booleans</span></span>
<span id="cb25-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1]  TRUE FALSE  TRUE FALSE</span></span>
<span id="cb25-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $integers</span></span>
<span id="cb25-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1]  4  7  8  1 10</span></span>
<span id="cb25-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $doubles</span></span>
<span id="cb25-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 2.909 2.938 2.853 2.755 2.990</span></span>
<span id="cb25-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $strings</span></span>
<span id="cb25-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "second" "commit" "red"    "except" "fire"  </span></span>
<span id="cb25-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb25-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $dates</span></span>
<span id="cb25-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "2023-12-06" "2023-10-27" "2023-09-07"</span></span></code></pre></div>
</details>
</div>
</div>
<section id="map-updates" class="level2">
<h2 class="anchored" data-anchor-id="map-updates"><code>map()</code> updates</h2>
<p>As noted above, by default <code>purrr::map()</code> returns a list. If I‚Äôd like to return a vector, I can use one of the <code>map_</code> variations (there‚Äôs one for each vector type).</p>
<ul>
<li><p>By mapping the <code>is.&lt;type&gt;()</code> functions the elements in <code>mixed_list</code>, I can test which elements in <code>mixed_list</code> return <code>TRUE</code>:</p>
<ul>
<li><code>map_lgl()</code>: returns a logical vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.logical</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
    TRUE    FALSE    FALSE    FALSE    FALSE </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_int()</code>: returns an integer vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
       0        1        0        0        0 </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_dbl()</code>: returns a double vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
       0        0        1        0        1 </code></pre>
</div>
</div>
</div>
<ul>
<li><code>map_chr()</code>: returns a character vector</li>
</ul>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Automatic coercion from logical to character was deprecated in purrr 1.0.0.
‚Ñπ Please use an explicit call to `as.character()` within `map_chr()` instead.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>booleans integers  doubles  strings    dates 
 "FALSE"  "FALSE"  "FALSE"   "TRUE"  "FALSE" </code></pre>
</div>
</div>
</div></li>
</ul>
<p>When we test for characters in <code>mixed_list</code>, we see the following warning:</p>
<div style="font-size: 0.90em;">
<blockquote class="blockquote">
<p><code>Warning: Automatic coercion from logical to character was deprecated in purrr</code> <code>1.0.0. Please use an explicit call to as.character() within map_chr() instead</code></p>
</blockquote>
</div>
<p>As we can see from the output above, the logical return values from <code>is.character()</code> are coerced to characters (this behavior is now deprecated).</p>
<section id="map_vec" class="level3">
<h3 class="anchored" data-anchor-id="map_vec"><code>map_vec()</code></h3>
<p><br></p>
<p>However, the previous <code>purrr::map_raw()</code> function has been replaced with <code>purrr::map_vec()</code>, which ‚Äú<em>simplifies to the common type of the output.</em>‚Äù I‚Äôll demonstrate below with the characters in <code>mixed_list</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x))</span>
<span id="cb35-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## booleans integers  doubles  strings    dates </span></span>
<span id="cb35-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    FALSE    FALSE    FALSE     TRUE    FALSE</span></span></code></pre></div>
</details>
</div>
</div>
<p>Notice the difference in output? The results are the same as above, but output is not commented (<code>##</code>). The same is true when I test the dates in <code>mixed_list</code> using <code>lubridate::is.Date()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">mixed_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(\(x) lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>(x))</span>
<span id="cb36-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## booleans integers  doubles  strings    dates </span></span>
<span id="cb36-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    FALSE    FALSE    FALSE    FALSE     TRUE</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="anonymous-functions" class="level2">
<h2 class="anchored" data-anchor-id="anonymous-functions">Anonymous functions</h2>
<p>R introduced the shorthand anonymous function syntax in version <a href="https://cran.r-project.org/doc/manuals/r-devel/NEWS.html">4.1.0</a>:</p>
<blockquote class="blockquote">
<p>‚Äú<em><code>\(x) x + 1</code> is parsed as <code>function(x) x + 1</code>.</em>‚Äù</p>
</blockquote>
<p>Below is a comparison of an anonymous (unnamed) function and the updated shorthand syntax:</p>
<ul>
<li><p>Standard anonymous function</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pIrAtES Ship"</span>)</span>
<span id="cb37-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "pirates ship"</span></span></code></pre></div>
</details>
</div>
</div></li>
<li><p>The updated anonymous syntax is below:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pIrAtES Ship"</span>)</span>
<span id="cb38-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "pirates ship"</span></span></code></pre></div>
</details>
</div>
</div></li>
</ul>
<p>Writing the code above using an anonymous function would look like this:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))</span>
<span id="cb39-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $words</span></span>
<span id="cb39-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "move"     "thursday" "sister"   "join"     "last"    </span></span>
<span id="cb39-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb39-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $sentences</span></span>
<span id="cb39-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "the theft of the pearl pin was kept secret."    </span></span>
<span id="cb39-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "it snowed, rained, and hailed the same morning."</span></span>
<span id="cb39-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "it caught its hind paw in a rusty trap."        </span></span>
<span id="cb39-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb39-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $letters</span></span>
<span id="cb39-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] "w" "g" "t" "q" "x" "s" "o" "p" "u" "l"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Anonymous functions make it <em>easier to understand which arguments belong to which function and will tend to yield better error messages.</em></p>
<p>I‚Äôll confirm the outputs from both methods are identical using <code>waldo::compare()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb40-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower), </span>
<span id="cb40-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x)))</span>
<span id="cb40-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚úî No differences</span></span></code></pre></div>
</details>
</div>
</div>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The formula (<code>~ .x + 1</code>)
</div>
</div>
<div class="callout-body-container callout-body">
<p><br></p>
<div style="font-size: 1.10em;">
<p>Prior to <code>purrr</code> v1.0.0, I could also use the formula syntax, but now it‚Äôs ‚Äú<em>only recommended if you require backward compatibility with older versions of R.</em>‚Äù I‚Äôll cover the formula syntax briefly because you‚Äôre likely to encounter it.</p>
</div>
<div style="font-size: 1.10em;">
<p>The formula syntax is typically used with pipes, so the contents of <code>purrr::map()</code> become the right-hand side of the formula, with the function we want to iterate (<code>&lt;FUNCTION&gt;</code>) and a placeholder (<code>.x</code>) in the appropriate argument.</p>
</div>
<div style="font-size: 1.20em;">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>OBJECT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> purrr::map<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>FUNCTION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<div style="font-size: 1.10em;">
<p>For the example above, <code>my_list</code> is ‚Äòpiped‚Äô to <code>purrr::map()</code>, where the formula maps the <code>tolower()</code> function (using the <code>.x</code> placeholder).</p>
</div>
<div style="font-size: 1.00em;">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># written as normal expression</span></span>
<span id="cb42-2"> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x))</span></code></pre></div>
</div>
<div style="font-size: 1.10em;">
<p>Jenny Bryan offers a great description on <a href="https://jennybc.github.io/purrr-tutorial/ls03_map-function-syntax.html#anonymous_function,_formula">her <code>purrr</code> tutorial</a>,</p>
<blockquote class="blockquote">
<p>‚Äú<em>[formula syntax] should start with the <code>~</code> symbol and then look like a typical top-level expression, as you might write in a script. Use <code>.x</code> to refer to the input, i.e.&nbsp;an individual element of the primary vector or list.</em>‚Äù</p>
</blockquote>
<p>I can double-check to see that the output from two variations are identical using <code>waldo::compare()</code>.</p>
</div>
<div style="font-size: 1.00em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb43-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x)), </span>
<span id="cb43-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x)))</span>
<span id="cb43-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚úî No differences</span></span></code></pre></div>
</details>
</div>
</div>
</div>
</div>
<!--
# map for `data.frame` and `tibble`s

::: {style="font-size: 0.90em;"}

::: {.cell}

```{.r .cell-code}
swdata <- dplyr::select(dplyr::starwars, !where(is.list))
purrr::map_df(.x = swdata, .f = tolower)
## # A tibble: 87 √ó 11
##    name     height mass  hair_color skin_color eye_color birth_year sex   gender
##    <chr>    <chr>  <chr> <chr>      <chr>      <chr>     <chr>      <chr> <chr> 
##  1 luke sk‚Ä¶ 172    77    blond      fair       blue      19         male  mascu‚Ä¶
##  2 c-3po    167    75    <NA>       gold       yellow    112        none  mascu‚Ä¶
##  3 r2-d2    96     32    <NA>       white, bl‚Ä¶ red       33         none  mascu‚Ä¶
##  4 darth v‚Ä¶ 202    136   none       white      yellow    41.9       male  mascu‚Ä¶
##  5 leia or‚Ä¶ 150    49    brown      light      brown     19         fema‚Ä¶ femin‚Ä¶
##  6 owen la‚Ä¶ 178    120   brown, gr‚Ä¶ light      blue      52         male  mascu‚Ä¶
##  7 beru wh‚Ä¶ 165    75    brown      light      blue      47         fema‚Ä¶ femin‚Ä¶
##  8 r5-d4    97     32    <NA>       white, red red       <NA>       none  mascu‚Ä¶
##  9 biggs d‚Ä¶ 183    84    black      light      brown     24         male  mascu‚Ä¶
## 10 obi-wan‚Ä¶ 182    77    auburn, w‚Ä¶ fair       blue-gray 57         male  mascu‚Ä¶
## # ‚Ñπ 77 more rows
## # ‚Ñπ 2 more variables: homeworld <chr>, species <chr>
```
:::

:::
-->
</section>
</section>
<section id="worked-examples" class="level1">
<h1>Worked Examples</h1>
<p>In this section, I‚Äôll be working through some of the uses I‚Äôve for <code>purrr</code>‚Äôs functions. I‚Äôve tried to choose tasks that are common across <em>most</em> projects so my code can be easily copied and adapted.</p>
<section id="downloading-files" class="level2">
<h2 class="anchored" data-anchor-id="downloading-files">Downloading files</h2>
<blockquote class="blockquote">
<p><em>You‚Äôd like to download a collection of files from separate URLS</em></p>
</blockquote>
<p>I have a collection of 30 .csv files from <a href="https://github.com/oreillymedia/doing_data_science">Doing Data Science</a> by Cathy O‚ÄôNeil and Rachel Schutt (O‚ÄôReilly Media) in a <a href="https://github.com/mjfrigaard/dds-data">GitHub repo</a>. Let‚Äôs assume I want to download one week of these files into my RStudio session (without downloading the repo).</p>
<p>I‚Äôll navigate to the raw url for the first data file (<code>nyt1.csv</code>), then paste this into a character vector:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">nyt_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Knowing that all of the files on GitHub with have a similar sheme and domain, I can use <code>nyt_url</code> to generate urls for each of the 7 files.</p>
<ol type="1">
<li>First I get the folder of the files on GitHub with <code>fs::path_dir()</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file urls </span></span>
<span id="cb45-2">nyt_dir_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_dir</span>(nyt_url)</span>
<span id="cb45-3">nyt_dir_url</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main"</code></pre>
</div>
</div>
</div>
<ol start="2" type="1">
<li>I create a vector with the 7 file names</li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file names for 7th through 13th</span></span>
<span id="cb47-2">nyt_file_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nyt"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>)</span>
<span id="cb47-3">nyt_file_nms</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "nyt7.csv"  "nyt8.csv"  "nyt9.csv"  "nyt10.csv" "nyt11.csv" "nyt12.csv"
[7] "nyt13.csv"</code></pre>
</div>
</div>
</div>
<ol start="3" type="1">
<li>I combine the directory portion of the url with file name in <code>nyt_file_urls</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine</span></span>
<span id="cb49-2">nyt_file_urls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(nyt_dir_url, nyt_file_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb49-3">nyt_file_urls</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt7.csv" 
[2] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt8.csv" 
[3] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt9.csv" 
[4] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt10.csv"
[5] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt11.csv"
[6] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt12.csv"
[7] "https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt13.csv"</code></pre>
</div>
</div>
</div>
<p>I‚Äôll need another vector of destination file names on my local machine, which I can do by combining the file names (<code>nyt_file_nms</code>) with the local destination folder (<code>dds-nyt</code>).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">nyt_local_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, nyt_file_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb51-2">nyt_local_pths</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "dds-nyt/nyt7.csv"  "dds-nyt/nyt8.csv"  "dds-nyt/nyt9.csv" 
[4] "dds-nyt/nyt10.csv" "dds-nyt/nyt11.csv" "dds-nyt/nyt12.csv"
[7] "dds-nyt/nyt13.csv"</code></pre>
</div>
</div>
</div>
<p>After creating the destination folder, I‚Äôll use the <code>download.file()</code> function to test downloading a single <code>.csv</code> files into my local folder (<code>dds-nyt/</code>). <code>download.file()</code> has a progress bar which tells me if the file downloaded successfully.</p>
<div style="font-size: 0.90em;">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb53-2">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>)</span>
<span id="cb53-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> nyt_file_urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">destfile =</span> nyt_local_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb54-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">trying</span> URL <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https:/raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv'</span></span>
<span id="cb54-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Content</span> type <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text/plain; charset=utf-8'</span> length 4920381 bytes <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4.7</span> MB<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb54-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">==================================================</span></span>
<span id="cb54-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">downloaded</span> 4.7 MB</span></code></pre></div>
</div>
<p><code>download.file()</code> takes two inputs (<code>url</code> and <code>destfile</code>), which changes the recipe a bit, because I need a <code>purrr</code> function with the following:</p>
<ol type="1">
<li><p><code>.x</code> the input vector of existing url paths</p></li>
<li><p><code>.y</code> the output vector of destination file paths</p></li>
<li><p>Additional arguments passed from <code>download.file()</code> (like <code>quiet = TRUE</code>)</p></li>
</ol>
<p>In this case, I don‚Äôt need <code>purrr</code> to return value‚ÄìI just need the <code>purrr</code> function to iterate over the items and write them to the new location.</p>
<p><code>walk()</code> is ideal for this circumstance:</p>
<blockquote class="blockquote">
<p>‚Äú<em><code>walk()</code> returns the input <code>.x</code> (invisibly)</em>‚Äù and ‚Äú<em>The return value of <code>.f()</code> is ignored</em>‚Äù</p>
</blockquote>
<p><strong><em>What do ‚Äòreturn <code>.x</code> invisibly‚Äô and ‚Äòthe side-effect of <code>.f</code>‚Äô mean?</em></strong></p>
<section id="return-invisibly" class="level3">
<h3 class="anchored" data-anchor-id="return-invisibly">Return invisibly</h3>
<p>The previous <code>purrr</code> functions I covered varied in the kinds of values they returned (lists vs.&nbsp;vectors), but for some operations I won‚Äôt need a return value. If I‚Äôm ever curious about whether I should be using <code>map()</code> or <code>walk()</code>, I‚Äôll ask myself, <em>‚Äúwould it make sense to assign the output from this function to an object?</em>‚Äù</p>
<p>If the answer is no, then I probably need to be thinking <code>walk()</code> instead of <code>map()</code></p>
</section>
<section id="side-effects" class="level3">
<h3 class="anchored" data-anchor-id="side-effects">Side-effects</h3>
<p>In the help documentation <code>walk()</code>‚Äôs description states, ‚Äú<em>calls .f for its side-effect</em>‚Äù, which can be generally interpreted as, ‚Äú<em>there‚Äôs nothing to assign the output from that function to.</em>‚Äù</p>
</section>
<section id="purrr-progress-bars" class="level3">
<h3 class="anchored" data-anchor-id="purrr-progress-bars"><code>purrr</code> progress bars</h3>
<p>I‚Äôll use <code>walk2()</code> below and add <code>.progress = TRUE</code> to view the <code>purrr</code> progress bar (and <code>quiet = TRUE</code> to silence the <code>download.file()</code> progress bar).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> nyt_file_urls, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> nyt_local_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span>  download.file, </span>
<span id="cb55-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p><br></p>
<div class="cell" data-layout-align="center" data-fig.asp="0.618">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/purrr1.0/purrr-progress.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>I can confirm the download using <code>fs::dir_tree()</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>)</span>
<span id="cb56-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb56-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt10.csv</span></span>
<span id="cb56-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt11.csv</span></span>
<span id="cb56-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt12.csv</span></span>
<span id="cb56-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt13.csv</span></span>
<span id="cb56-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt7.csv</span></span>
<span id="cb56-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt8.csv</span></span>
<span id="cb56-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îî‚îÄ‚îÄ nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="copying-a-directory-of-files" class="level2">
<h2 class="anchored" data-anchor-id="copying-a-directory-of-files">Copying a directory of files</h2>
<blockquote class="blockquote">
<p><em>You have a folder of files you‚Äôd like to rename or copy to a new directory</em></p>
</blockquote>
<p>The collection of 7 .csv files from <a href="https://github.com/oreillymedia/doing_data_science">Doing Data Science</a> by Cathy O‚ÄôNeil and Rachel Schutt (O‚ÄôReilly Media) are now in the <code>dds-nyt/</code> folder.</p>
<p>As with any project, I don‚Äôt want to alter the raw data, so I‚Äôm going to copy these files into <code>dds-nyt-raw/</code> and <code>dds-nyt-processed/</code>. I also want the processed file names to have a date stamp prefix.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">file_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>)</span>
<span id="cb57-2">file_pths</span>
<span id="cb57-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/nyt10.csv" "dds-nyt/nyt11.csv" "dds-nyt/nyt12.csv"</span></span>
<span id="cb57-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/nyt13.csv" "dds-nyt/nyt7.csv"  "dds-nyt/nyt8.csv" </span></span>
<span id="cb57-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "dds-nyt/nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>I‚Äôll start with the raw data folder. I need to create a vector of the new raw file paths and names: <code>raw_file_pths</code> (the raw data paths will have the original file names)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb58-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>,</span>
<span id="cb58-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>,</span>
<span id="cb58-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb58-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/raw/nyt10.csv"</span></span>
<span id="cb58-6"></span>
<span id="cb58-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write the recipe</span></span>
<span id="cb58-8">file_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(x, </span>
<span id="cb58-9">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>, </span>
<span id="cb58-10">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span>
<span id="cb58-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/raw/nyt10.csv" "dds-nyt/raw/nyt11.csv" "dds-nyt/raw/nyt12.csv"</span></span>
<span id="cb58-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/raw/nyt13.csv" "dds-nyt/raw/nyt7.csv"  "dds-nyt/raw/nyt8.csv"</span></span>
<span id="cb58-13"></span>
<span id="cb58-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map it across all</span></span>
<span id="cb58-15">raw_file_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> file_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-16">                  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(x, </span>
<span id="cb58-17">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^dds-nyt"</span>, </span>
<span id="cb58-18">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>Before copying the files, I need to create the destination folder for the raw data (<code>dds-nyt/raw</code>). Then, I‚Äôll make sure I can copy the first element from <code>file_pths</code> into the path in the first element of <code>raw_file_pths</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>)</span>
<span id="cb59-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for one</span></span>
<span id="cb59-3">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_copy</span>(</span>
<span id="cb59-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb59-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_path =</span> raw_file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb59-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb59-7">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>)</span>
<span id="cb59-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/raw</span></span>
<span id="cb59-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îî‚îÄ‚îÄ nyt10.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>I can see this is working, so I can use <code>purrr::walk2()</code> to move all the files from <code>dds-nyt/</code> to <code>dds-nyt/raw/</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> file_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> raw_file_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_copy, </span>
<span id="cb60-2">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb60-3">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>)</span>
<span id="cb60-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/raw</span></span>
<span id="cb60-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt10.csv</span></span>
<span id="cb60-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt11.csv</span></span>
<span id="cb60-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt12.csv</span></span>
<span id="cb60-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt13.csv</span></span>
<span id="cb60-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt7.csv</span></span>
<span id="cb60-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ nyt8.csv</span></span>
<span id="cb60-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îî‚îÄ‚îÄ nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that I‚Äôve copied the files into their respective folders, I‚Äôll need to remove the files from their original location in the parent <code>dds-nyt</code> folder.</p>
<p>Fortunately, I have a vector of these files in <code>file_pths</code>, and I can test removal with <code>fs::file_delete()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_delete</span>(file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
</div>
</div>
<p>Great! Now that I know this will work, I‚Äôll use <code>walk()</code> because I want <code>.x</code> returned invisibly and the side-effect of <code>.f</code>.</p>
<p>But I‚Äôve also deleted the first element in <code>file_pths</code>, so when <code>fs::file_delete()</code> goes looking for that file, it will find nothing and returned an error.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb62-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error</span> in <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span>:</span>
<span id="cb62-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ñπ</span> In index: 1.</span>
<span id="cb62-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Caused</span> by error:</span>
<span id="cb62-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[ENOENT]</span> Failed to remove <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dds-nyt/nyt10.csv'</span>: no such file or directory</span></code></pre></div>
</details>
</div>
</div>
<p>I can protect against this by supplying the output from <code>list.files()</code> directly to <code>purrr::walk2()</code>, but include a <code>pattern</code> so it only matches the <code>.csv</code> files.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(</span>
<span id="cb63-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list CURRENT files </span></span>
<span id="cb63-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(</span>
<span id="cb63-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>,</span>
<span id="cb63-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>,</span>
<span id="cb63-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb63-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map function</span></span>
<span id="cb63-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_delete)</span></code></pre></div>
</details>
</div>
</div>
<p>And confirm the new folder contents and structure</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb64-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb64-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îî‚îÄ‚îÄ raw</span></span>
<span id="cb64-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt10.csv</span></span>
<span id="cb64-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt11.csv</span></span>
<span id="cb64-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt12.csv</span></span>
<span id="cb64-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt13.csv</span></span>
<span id="cb64-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt7.csv</span></span>
<span id="cb64-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt8.csv</span></span>
<span id="cb64-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îî‚îÄ‚îÄ nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="import-multiple-datasets" class="level2">
<h2 class="anchored" data-anchor-id="import-multiple-datasets">Import multiple datasets</h2>
<blockquote class="blockquote">
<p><em>You have several days of data, and each day is contained in separate file. You‚Äôd like to read these data into R, and combine them into a single dataset</em></p>
</blockquote>
<p>Now that I have separate raw and processed folders, I can import the NYT data into R. Below I‚Äôve imported a single file from the <code>raw</code> data folder to examine it‚Äôs contents:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">nyt1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> raw_file_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb65-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, </span>
<span id="cb65-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb65-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nyt1)</span>
<span id="cb65-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## spc_tbl_ [452,766 √ó 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb65-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb65-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb65-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb65-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb65-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb65-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "spec")=</span></span>
<span id="cb65-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. cols(</span></span>
<span id="cb65-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Age = col_double(),</span></span>
<span id="cb65-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Gender = col_double(),</span></span>
<span id="cb65-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Impressions = col_double(),</span></span>
<span id="cb65-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Clicks = col_double(),</span></span>
<span id="cb65-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Signed_In = col_double(),</span></span>
<span id="cb65-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   .delim = ","</span></span>
<span id="cb65-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. )</span></span>
<span id="cb65-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>Each <code>nyt</code> file contains daily ads shown and clicks recorded on the New York Times home page. The rows represent users, and the variables are: <code>Age</code>, <code>Gender</code> (0 = female, 1 = male), <code>Impressions</code> (number impressions), <code>Clicks</code> (number clicks), and a binary indicator for signed in or not <code>Signed_in</code>.</p>
<p>I‚Äôll add some hypothetical wrangling steps to make this example more realistic.</p>
<ol type="1">
<li><p>Create <code>age_group</code>, an ordered factor which contains six levels of Age (‚Äú&lt;18‚Äù, ‚Äú18-24‚Äù, ‚Äú25-34‚Äù, ‚Äú35-44‚Äù, ‚Äú45-54‚Äù, ‚Äú55-64‚Äù, and ‚Äú65+‚Äù)</p></li>
<li><p>Create <code>ctr_rate</code> or click-through rate, calculated as the number of clicks / the number of impressions. Round it to 3 digits.</p></li>
<li><p>Create <code>female</code>, a factor version of <code>Gender</code>, where when <code>Gender</code> = <code>0</code>, then <code>female</code> = <code>"yes"</code>, and when <code>Gender</code> = <code>1</code>, then <code>female</code> = <code>"no"</code></p></li>
<li><p>Create <code>signed_in</code>, a factor variable with levels <code>"no"</code> and <code>"yes"</code> from the <code>Signed_In</code> = <code>0</code> and <code>1</code></p></li>
</ol>
<p>I‚Äôve bundled all of these steps into a function (<code>nyt_data_processing()</code>) that I can pass each dataset through:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">nyt_data_processing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(nyt_csv) {</span>
<span id="cb66-2">  orig_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Impressions"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clicks"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Signed_In"</span>)</span>
<span id="cb66-3">  nyt_nms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt_csv)</span>
<span id="cb66-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> orig_nms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> nyt_nms))) {</span>
<span id="cb66-5">    cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"these data don't have the correct columns!"</span>)</span>
<span id="cb66-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb66-7">    nyt_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nyt_csv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-8">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb66-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create age_group variable</span></span>
<span id="cb66-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-11">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;18"</span>,</span>
<span id="cb66-12">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"18-24"</span>,</span>
<span id="cb66-13">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"25-34"</span>,</span>
<span id="cb66-14">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"35-44"</span>,</span>
<span id="cb66-15">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"45-54"</span>,</span>
<span id="cb66-16">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"55-64"</span>,</span>
<span id="cb66-17">          Age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"65+"</span></span>
<span id="cb66-18">        ),</span>
<span id="cb66-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor age_group (ordered)</span></span>
<span id="cb66-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(age_group,</span>
<span id="cb66-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb66-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;18"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"18-24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"25-34"</span>,</span>
<span id="cb66-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"35-44"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"45-54"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"55-64"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"65+"</span></span>
<span id="cb66-24">          ),</span>
<span id="cb66-25">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb66-26">        ),</span>
<span id="cb66-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create CTR variable</span></span>
<span id="cb66-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ctr_rate =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Clicks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Impressions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb66-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create new Female variable</span></span>
<span id="cb66-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-31">          Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>,</span>
<span id="cb66-32">          Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>,</span>
<span id="cb66-33">          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb66-34">        ),</span>
<span id="cb66-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor female (un-ordered)</span></span>
<span id="cb66-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(female,</span>
<span id="cb66-37">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>)</span>
<span id="cb66-38">        ),</span>
<span id="cb66-39">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Signed_In =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb66-40">          Signed_In <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, </span>
<span id="cb66-41">          Signed_In <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>, </span>
<span id="cb66-42">          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>),</span>
<span id="cb66-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># factor Signed_In (un-ordered) </span></span>
<span id="cb66-44">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Signed_In =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(Signed_In, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-45">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format columns</span></span>
<span id="cb66-46">      janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span>
<span id="cb66-47">  }</span>
<span id="cb66-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(nyt_proc)</span>
<span id="cb66-49">}</span></code></pre></div>
</details>
</div>
</div>
<p>I‚Äôll do some quick checks to make sure it only works with the raw data columns:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">nyt1_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nyt_data_processing</span>(nyt1)</span>
<span id="cb67-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nyt1_proc)</span>
<span id="cb67-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## spc_tbl_ [452,766 √ó 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb67-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb67-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb67-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb67-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb67-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ signed_in  : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 1 2 ...</span></span>
<span id="cb67-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 6 1 2 4 3 3 4 4 1 2 ...</span></span>
<span id="cb67-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ ctr_rate   : num [1:452766] 0 0.143 0 0 0 0 0 0 0.111 0 ...</span></span>
<span id="cb67-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ female     : Factor w/ 2 levels "no","yes": 1 2 2 1 1 1 2 2 2 1 ...</span></span>
<span id="cb67-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "spec")=</span></span>
<span id="cb67-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. cols(</span></span>
<span id="cb67-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Age = col_double(),</span></span>
<span id="cb67-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Gender = col_double(),</span></span>
<span id="cb67-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Impressions = col_double(),</span></span>
<span id="cb67-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Clicks = col_double(),</span></span>
<span id="cb67-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   Signed_In = col_double(),</span></span>
<span id="cb67-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..   .delim = ","</span></span>
<span id="cb67-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. )</span></span>
<span id="cb67-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  - attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>I‚Äôll run <code>nyt_data_processing()</code> against a processed data file (<code>nyt1_proc</code>)</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nyt_data_processing</span>(nyt1_proc)</span>
<span id="cb68-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error in `nyt_data_processing()`:</span></span>
<span id="cb68-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ! these data don't have the correct columns!</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now I‚Äôm ready to write the import step. First I‚Äôll store the raw file paths in <code>raw_data_pths</code></p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">raw_data_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/raw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p>We‚Äôll test <code>purrr::map()</code> and <code>vroom::vroom()</code> to import the <code>.csv</code> files in <code>raw_data_pths</code> into a list. I also add <code>utils::head()</code> and <code>dplyr::glimpse()</code> to limit the output.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import</span></span>
<span id="cb70-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb70-4">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb70-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-6">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-7">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb70-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb70-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ : spc_tbl_ [452,766 √ó 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb70-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb70-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb70-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb70-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb70-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb70-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb70-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb70-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb70-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb70-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb70-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb70-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb70-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb70-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb70-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb70-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ : spc_tbl_ [478,066 √ó 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb70-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb70-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb70-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb70-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb70-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:478066] 1 1 1 1 1 0 1 1 1 1 ...</span></span>
<span id="cb70-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb70-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb70-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb70-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb70-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb70-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb70-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb70-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb70-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb70-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>This returns a list, but you may have noticed I don‚Äôt have a great way for keeping track of the data files in the list‚Äìthis is where <code>purrr::set_names()</code> comes in handy.</p>
<p><code>purrr::set_names()</code> works a lot like <code>names()</code>, but <code>purrr::set_names()</code> will automatically set the names of <code>x</code> to <code>as.character(x)</code> if no names are provided to <code>nm</code>. See below:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>()</span>
<span id="cb71-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   dds-nyt/raw/nyt10.csv   dds-nyt/raw/nyt11.csv   dds-nyt/raw/nyt12.csv </span></span>
<span id="cb71-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "dds-nyt/raw/nyt10.csv" "dds-nyt/raw/nyt11.csv" "dds-nyt/raw/nyt12.csv" </span></span>
<span id="cb71-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   dds-nyt/raw/nyt13.csv    dds-nyt/raw/nyt7.csv    dds-nyt/raw/nyt8.csv </span></span>
<span id="cb71-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## "dds-nyt/raw/nyt13.csv"  "dds-nyt/raw/nyt7.csv"  "dds-nyt/raw/nyt8.csv" </span></span>
<span id="cb71-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    dds-nyt/raw/nyt9.csv </span></span>
<span id="cb71-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  "dds-nyt/raw/nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now the imported file will have their file path and name associated with the dataset:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb72-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import  </span></span>
<span id="cb72-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb72-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb72-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-8">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb72-9">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb72-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb72-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt10.csv: spc_tbl_ [452,766 √ó 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb72-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb72-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb72-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb72-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb72-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:452766] 1 0 1 1 1 1 1 1 0 1 ...</span></span>
<span id="cb72-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb72-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb72-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb72-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb72-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb72-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb72-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb72-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb72-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb72-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb72-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt11.csv: spc_tbl_ [478,066 √ó 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb72-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb72-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb72-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb72-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb72-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ Signed_In  : num [1:478066] 1 1 1 1 1 0 1 1 1 1 ...</span></span>
<span id="cb72-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb72-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb72-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb72-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb72-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb72-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb72-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb72-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb72-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb72-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<p>To add the wrangling function, I can pipe in another call to <code>purrr::map()</code>, and add <code>nyt_data_processing()</code>.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb73-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb73-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb73-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb73-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb73-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-10">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb73-11">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb73-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 2</span></span>
<span id="cb73-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt10.csv: spc_tbl_ [452,766 √ó 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb73-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age        : num [1:452766] 59 0 19 44 30 33 41 41 0 23 ...</span></span>
<span id="cb73-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ gender     : num [1:452766] 1 0 0 1 1 1 0 0 0 1 ...</span></span>
<span id="cb73-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ impressions: num [1:452766] 4 7 5 5 4 3 1 3 9 1 ...</span></span>
<span id="cb73-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ clicks     : num [1:452766] 0 1 0 0 0 0 0 0 1 0 ...</span></span>
<span id="cb73-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ signed_in  : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 1 2 ...</span></span>
<span id="cb73-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 6 1 2 4 3 3 4 4 1 2 ...</span></span>
<span id="cb73-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ ctr_rate   : num [1:452766] 0 0.143 0 0 0 0 0 0 0.111 0 ...</span></span>
<span id="cb73-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ female     : Factor w/ 2 levels "no","yes": 1 2 2 1 1 1 2 2 2 1 ...</span></span>
<span id="cb73-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb73-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb73-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb73-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb73-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb73-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb73-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb73-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb73-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb73-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt; </span></span>
<span id="cb73-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ dds-nyt/raw/nyt11.csv: spc_tbl_ [478,066 √ó 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)</span></span>
<span id="cb73-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age        : num [1:478066] 28 51 29 20 19 0 58 42 35 44 ...</span></span>
<span id="cb73-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ gender     : num [1:478066] 1 0 1 1 0 0 0 0 1 0 ...</span></span>
<span id="cb73-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ impressions: num [1:478066] 8 5 2 4 5 3 5 6 8 4 ...</span></span>
<span id="cb73-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ clicks     : num [1:478066] 0 0 0 0 0 1 1 0 0 0 ...</span></span>
<span id="cb73-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ signed_in  : Factor w/ 2 levels "no","yes": 2 2 2 2 2 1 2 2 2 2 ...</span></span>
<span id="cb73-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ age_group  : Ord.factor w/ 7 levels "&lt;18"&lt;"18-24"&lt;..: 3 5 3 2 2 1 6 4 4 4 ...</span></span>
<span id="cb73-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ ctr_rate   : num [1:478066] 0 0 0 0 0 0.333 0.2 0 0 0 ...</span></span>
<span id="cb73-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ female     : Factor w/ 2 levels "no","yes": 1 2 1 1 2 2 2 2 1 2 ...</span></span>
<span id="cb73-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "spec")=</span></span>
<span id="cb73-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. cols(</span></span>
<span id="cb73-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Age = col_double(),</span></span>
<span id="cb73-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Gender = col_double(),</span></span>
<span id="cb73-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Impressions = col_double(),</span></span>
<span id="cb73-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Clicks = col_double(),</span></span>
<span id="cb73-47"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   Signed_In = col_double(),</span></span>
<span id="cb73-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..   .delim = ","</span></span>
<span id="cb73-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. .. )</span></span>
<span id="cb73-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..- attr(*, "problems")=&lt;externalptr&gt;</span></span></code></pre></div>
</details>
</div>
</div>
<section id="list_rbind" class="level3">
<h3 class="anchored" data-anchor-id="list_rbind"><code>list_rbind()</code></h3>
<p>For the final step, I‚Äôll bind all the data into a <code>data.frame</code> with the updated <code>purrr::list_rbind()</code> function (set <code>names_to = "id"</code>).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb74-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb74-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb74-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb74-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb74-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bind</span></span>
<span id="cb74-11">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb74-12">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span>
<span id="cb74-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 3,488,345</span></span>
<span id="cb74-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 9</span></span>
<span id="cb74-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id          &lt;chr&gt; "dds-nyt/raw/nyt10.csv", "dds-nyt/raw/nyt10.csv", "dds-nyt‚Ä¶</span></span>
<span id="cb74-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age         &lt;dbl&gt; 59, 0, 19, 44, 30, 33, 41, 41, 0, 23, 28, 34, 0, 17, 33, 6‚Ä¶</span></span>
<span id="cb74-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender      &lt;dbl&gt; 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0‚Ä¶</span></span>
<span id="cb74-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions &lt;dbl&gt; 4, 7, 5, 5, 4, 3, 1, 3, 9, 1, 4, 4, 7, 3, 7, 6, 6, 2, 7, 2‚Ä¶</span></span>
<span id="cb74-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks      &lt;dbl&gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0‚Ä¶</span></span>
<span id="cb74-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in   &lt;fct&gt; yes, no, yes, yes, yes, yes, yes, yes, no, yes, yes, yes, ‚Ä¶</span></span>
<span id="cb74-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group   &lt;ord&gt; 55-64, &lt;18, 18-24, 35-44, 25-34, 25-34, 35-44, 35-44, &lt;18,‚Ä¶</span></span>
<span id="cb74-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate    &lt;dbl&gt; 0.000, 0.143, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.‚Ä¶</span></span>
<span id="cb74-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female      &lt;fct&gt; no, yes, yes, no, no, no, yes, yes, yes, no, no, no, yes, ‚Ä¶</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now that we have a complete recipe, I store the result in <code>nyt_data_proc</code>. I can also confirm all files were imported and wrangled by checking the <code>count()</code> of <code>id</code>.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">nyt_data_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw_data_pths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># names </span></span>
<span id="cb75-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import </span></span>
<span id="cb75-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb75-6">      vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom, </span>
<span id="cb75-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrangle </span></span>
<span id="cb75-9">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> nyt_data_processing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb75-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bind</span></span>
<span id="cb75-11">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) </span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(id)</span>
<span id="cb76-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 √ó 2</span></span>
<span id="cb76-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   id                         n</span></span>
<span id="cb76-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;                  &lt;int&gt;</span></span>
<span id="cb76-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dds-nyt/raw/nyt10.csv 452766</span></span>
<span id="cb76-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dds-nyt/raw/nyt11.csv 478066</span></span>
<span id="cb76-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dds-nyt/raw/nyt12.csv 396308</span></span>
<span id="cb76-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dds-nyt/raw/nyt13.csv 786044</span></span>
<span id="cb76-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dds-nyt/raw/nyt7.csv  452493</span></span>
<span id="cb76-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 dds-nyt/raw/nyt8.csv  463196</span></span>
<span id="cb76-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 dds-nyt/raw/nyt9.csv  459472</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
<section id="export-multiple-datasets" class="level2">
<h2 class="anchored" data-anchor-id="export-multiple-datasets">Export multiple datasets</h2>
<blockquote class="blockquote">
<p><em>You have a dataset you‚Äôd like to split into individual <code>data.frame</code>s, then export these into separate file paths</em></p>
</blockquote>
<p>I have a processed dataset with seven data files (<code>nyt_data_proc</code>), and I want to export these into seven processed data files in a <code>dds-nyt/processed/</code> folder.</p>
<p>Creating a vector of processed data file paths is a little more involved because I wanted to add a date prefix to the exported files, and because I want to add this path as a variable <em>in the <code>nyt_data_proc</code> dataset</em>.</p>
<p>Below I create a new <code>file_nm</code> and <code>proc_file_pth</code> column to <code>nyt_data_proc</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create file names </span></span>
<span id="cb77-2">nyt_data_proc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> nyt_data_proc,</span>
<span id="cb77-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_nm =</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(id)),</span>
<span id="cb77-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">proc_file_pth =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>, </span>
<span id="cb77-5">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>()), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, </span>
<span id="cb77-6">                        file_nm))</span>
<span id="cb77-7">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(proc_file_pth)</span>
<span id="cb77-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 √ó 2</span></span>
<span id="cb77-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   proc_file_pth                           n</span></span>
<span id="cb77-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;                               &lt;int&gt;</span></span>
<span id="cb77-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dds-nyt/processed/2023-12-16-nyt10 452766</span></span>
<span id="cb77-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dds-nyt/processed/2023-12-16-nyt11 478066</span></span>
<span id="cb77-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dds-nyt/processed/2023-12-16-nyt12 396308</span></span>
<span id="cb77-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dds-nyt/processed/2023-12-16-nyt13 786044</span></span>
<span id="cb77-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 dds-nyt/processed/2023-12-16-nyt7  452493</span></span>
<span id="cb77-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 dds-nyt/processed/2023-12-16-nyt8  463196</span></span>
<span id="cb77-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 dds-nyt/processed/2023-12-16-nyt9  459472</span></span></code></pre></div>
</details>
</div>
</div>
<p>Note that I don‚Äôt include the file extension in <code>proc_file_pth</code>, because I might want to use different file types when I‚Äôm exporting.</p>
<p>I‚Äôll cover two methods for exporting datasets from a list.</p>
<p>In this first method, I‚Äôll use the <code>base::split()</code> function to split <code>nyt_data_proc</code> by the <code>proc_file_pth</code> variable into a list of data frames. I‚Äôll also use <code>utils::head()</code>, <code>purrr::walk()</code>, and <code>dplyr::glimpse()</code> to view the output.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> nyt_data_proc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb78-2">  utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb78-3">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> glimpse)</span>
<span id="cb78-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 452,766</span></span>
<span id="cb78-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt10.csv", "dds-nyt/raw/nyt10.csv", "dds-n‚Ä¶</span></span>
<span id="cb78-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 59, 0, 19, 44, 30, 33, 41, 41, 0, 23, 28, 34, 0, 17, 33,‚Ä¶</span></span>
<span id="cb78-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,‚Ä¶</span></span>
<span id="cb78-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 4, 7, 5, 5, 4, 3, 1, 3, 9, 1, 4, 4, 7, 3, 7, 6, 6, 2, 7,‚Ä¶</span></span>
<span id="cb78-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,‚Ä¶</span></span>
<span id="cb78-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, no, yes, yes, yes, yes, yes, yes, no, yes, yes, yes‚Ä¶</span></span>
<span id="cb78-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 55-64, &lt;18, 18-24, 35-44, 25-34, 25-34, 35-44, 35-44, &lt;1‚Ä¶</span></span>
<span id="cb78-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.000, 0.143, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, ‚Ä¶</span></span>
<span id="cb78-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; no, yes, yes, no, no, no, yes, yes, yes, no, no, no, yes‚Ä¶</span></span>
<span id="cb78-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt10", "nyt10", "nyt10", "nyt10", "nyt10", "nyt10", "n‚Ä¶</span></span>
<span id="cb78-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-12-16-nyt10", "dds-nyt/processed‚Ä¶</span></span>
<span id="cb78-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 478,066</span></span>
<span id="cb78-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt11.csv", "dds-nyt/raw/nyt11.csv", "dds-n‚Ä¶</span></span>
<span id="cb78-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 28, 51, 29, 20, 19, 0, 58, 42, 35, 44, 62, 20, 0, 0, 43,‚Ä¶</span></span>
<span id="cb78-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,‚Ä¶</span></span>
<span id="cb78-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 8, 5, 2, 4, 5, 3, 5, 6, 8, 4, 6, 4, 5, 4, 4, 5, 3, 2, 5,‚Ä¶</span></span>
<span id="cb78-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,‚Ä¶</span></span>
<span id="cb78-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, yes, yes, yes, yes, no, yes, yes, yes, yes, yes, ye‚Ä¶</span></span>
<span id="cb78-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 25-34, 45-54, 25-34, 18-24, 18-24, &lt;18, 55-64, 35-44, 35‚Ä¶</span></span>
<span id="cb78-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.000, 0.000, 0.000, 0.000, 0.000, 0.333, 0.200, 0.000, ‚Ä¶</span></span>
<span id="cb78-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; no, yes, no, no, yes, yes, yes, yes, no, yes, yes, yes, ‚Ä¶</span></span>
<span id="cb78-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt11", "nyt11", "nyt11", "nyt11", "nyt11", "nyt11", "n‚Ä¶</span></span>
<span id="cb78-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-12-16-nyt11", "dds-nyt/processed‚Ä¶</span></span>
<span id="cb78-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Rows: 396,308</span></span>
<span id="cb78-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 11</span></span>
<span id="cb78-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ id            &lt;chr&gt; "dds-nyt/raw/nyt12.csv", "dds-nyt/raw/nyt12.csv", "dds-n‚Ä¶</span></span>
<span id="cb78-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age           &lt;dbl&gt; 29, 0, 27, 0, 69, 0, 0, 39, 53, 27, 0, 13, 26, 63, 79, 0‚Ä¶</span></span>
<span id="cb78-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ gender        &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,‚Ä¶</span></span>
<span id="cb78-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ impressions   &lt;dbl&gt; 4, 1, 2, 5, 9, 1, 6, 4, 7, 3, 1, 1, 2, 5, 6, 7, 3, 1, 5,‚Ä¶</span></span>
<span id="cb78-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ clicks        &lt;dbl&gt; 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,‚Ä¶</span></span>
<span id="cb78-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ signed_in     &lt;fct&gt; yes, no, yes, no, yes, no, no, yes, yes, yes, no, yes, y‚Ä¶</span></span>
<span id="cb78-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ age_group     &lt;ord&gt; 25-34, &lt;18, 25-34, &lt;18, 65+, &lt;18, &lt;18, 35-44, 45-54, 25-‚Ä¶</span></span>
<span id="cb78-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ctr_rate      &lt;dbl&gt; 0.250, 0.000, 0.000, 0.200, 0.111, 0.000, 0.000, 0.000, ‚Ä¶</span></span>
<span id="cb78-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ female        &lt;fct&gt; yes, yes, yes, yes, no, yes, yes, no, yes, no, yes, no, ‚Ä¶</span></span>
<span id="cb78-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ file_nm       &lt;chr&gt; "nyt12", "nyt12", "nyt12", "nyt12", "nyt12", "nyt12", "n‚Ä¶</span></span>
<span id="cb78-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ proc_file_pth &lt;chr&gt; "dds-nyt/processed/2023-12-16-nyt12", "dds-nyt/processed‚Ä¶</span></span></code></pre></div>
</details>
</div>
</div>
<p>I can see this is returning a list of data frames as expected, so now I need to pass this list into <code>purrr::walk2()</code> so I can iterate <code>vroom::vroom_write()</code> over the processed data paths in <code>proc_file_pth</code>.</p>
<ol type="1">
<li>First I create the processed data folder (<code>dds-nyt/processed/</code>)</li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>)</span></code></pre></div>
</details>
</div>
</div>
<ol start="2" type="1">
<li>Second, I create the <code>.x</code> argument, which is the split list of <code>nyt_data_proc</code> by <code>proc_file_pth</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split nyt_data_proc (.x)</span></span>
<span id="cb80-2">by_proc_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb80-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth)</span></code></pre></div>
</details>
</div>
</div>
<ol start="3" type="1">
<li>Third, I get the unique processed data paths in the <code>proc_file_pth</code> column and store it as a vector for the <code>.y</code></li>
</ol>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get unique processed paths in nyt_data_proc (.y) with .csv extension</span></span>
<span id="cb81-2">proc_pths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>)</span>
<span id="cb81-3">proc_pths</span>
<span id="cb81-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "dds-nyt/processed/2023-12-16-nyt10.csv"</span></span>
<span id="cb81-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "dds-nyt/processed/2023-12-16-nyt11.csv"</span></span>
<span id="cb81-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "dds-nyt/processed/2023-12-16-nyt12.csv"</span></span>
<span id="cb81-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "dds-nyt/processed/2023-12-16-nyt13.csv"</span></span>
<span id="cb81-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5] "dds-nyt/processed/2023-12-16-nyt7.csv" </span></span>
<span id="cb81-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [6] "dds-nyt/processed/2023-12-16-nyt8.csv" </span></span>
<span id="cb81-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "dds-nyt/processed/2023-12-16-nyt9.csv"</span></span></code></pre></div>
</details>
</div>
</div>
<p>Now I can perform <code>purrr::walk2()</code> on <code>by_proc_pths</code> using <code>proc_pths</code> and <code>vroom::vroom_write()</code>:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate with .f</span></span>
<span id="cb82-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> by_proc_pths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> proc_pths, </span>
<span id="cb82-3">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vroom_write, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)</span>
<span id="cb82-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or as an anonymous function </span></span></code></pre></div>
</details>
</div>
</div>
<p>Or I could write this as an an anonymous function:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb83-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(nyt_data_proc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb83-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> proc_pths, </span>
<span id="cb83-4">    \(x, y)</span>
<span id="cb83-5">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb83-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> y,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>I‚Äôll want to perform a sanity check on this output with the first exported item in <code>dds-nyt/processed</code> and check it against the <code>nyt1_proc</code> data to evaluate the differences.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">nyt1_proc_check_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> proc_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the first file</span></span>
<span id="cb84-2">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<p>I‚Äôll check the differences with <code>diffobj::diffStr()</code>. Click on Code below to view the differences:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb85-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc),</span>
<span id="cb85-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_01), </span>
<span id="cb85-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_diffs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb85-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     old           | new                 </span></span>
<span id="cb85-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "age"         - "id"            [1] </span></span>
<span id="cb85-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [2] "gender"      - "age"           [2] </span></span>
<span id="cb85-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [3] "impressions" - "gender"        [3] </span></span>
<span id="cb85-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [4] "clicks"      - "impressions"   [4] </span></span>
<span id="cb85-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [5] "signed_in"   - "clicks"        [5] </span></span>
<span id="cb85-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [6] "age_group"   - "signed_in"     [6] </span></span>
<span id="cb85-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "ctr_rate"    - "age_group"     [7] </span></span>
<span id="cb85-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [8] "female"      - "ctr_rate"      [8] </span></span>
<span id="cb85-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "female"        [9] </span></span>
<span id="cb85-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "file_nm"       [10]</span></span>
<span id="cb85-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   - "proc_file_pth" [11]</span></span></code></pre></div>
</details>
</div>
</div>
<p>These are differences I‚Äôd expect, given the two data frames will have <em>slightly</em> different columns (<code>id</code>, <code>file_nm</code>, and <code>proc_file_pth</code>)</p>
<section id="group_walk" class="level3">
<h3 class="anchored" data-anchor-id="group_walk"><code>group_walk()</code></h3>
<p>Another option involves the <code>group_walk()</code> function from <code>dplyr</code> (<strong>WARNING:</strong> this is experimental). But I need to remove the processed folder so I‚Äôm not confusing myself:</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed"</span>, </span>
<span id="cb86-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb86-3">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv$"</span>),</span>
<span id="cb86-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>file_delete)</span>
<span id="cb86-5">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb86-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt</span></span>
<span id="cb86-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ processed</span></span>
<span id="cb86-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îî‚îÄ‚îÄ raw</span></span>
<span id="cb86-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt10.csv</span></span>
<span id="cb86-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt11.csv</span></span>
<span id="cb86-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt12.csv</span></span>
<span id="cb86-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt13.csv</span></span>
<span id="cb86-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt7.csv</span></span>
<span id="cb86-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îú‚îÄ‚îÄ nyt8.csv</span></span>
<span id="cb86-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     ‚îî‚îÄ‚îÄ nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>The <a href="https://dplyr.tidyverse.org/reference/group_map.html">help file on <code>group_walk()</code></a> gives an example with <code>purrr</code>‚Äôs formula syntax (which I‚Äôve adapted below):</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb87-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>   </span>
<span id="cb87-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_walk</span>( <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .x, </span>
<span id="cb87-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(.y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>),</span>
<span id="cb87-5">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>))</span></code></pre></div>
</details>
</div>
</div>
<p>I‚Äôve also re-written this as an anonymous function (which is more stable, since the formula syntax is no longer recommended).</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now re-create</span></span>
<span id="cb88-2">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>)</span>
<span id="cb88-3">nyt_data_proc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb88-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(proc_file_pth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>   </span>
<span id="cb88-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_walk</span>(\(x, y) </span>
<span id="cb88-6">    vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom_write</span>(</span>
<span id="cb88-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb88-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>proc_file_pth, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>),</span>
<span id="cb88-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb88-10">    )</span>
<span id="cb88-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check</span></span>
<span id="cb88-12">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dds-nyt/processed/"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv$"</span>)</span>
<span id="cb88-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## dds-nyt/processed/</span></span>
<span id="cb88-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ 2023-12-16-nyt10.csv</span></span>
<span id="cb88-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ 2023-12-16-nyt11.csv</span></span>
<span id="cb88-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ 2023-12-16-nyt12.csv</span></span>
<span id="cb88-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ 2023-12-16-nyt13.csv</span></span>
<span id="cb88-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ 2023-12-16-nyt7.csv</span></span>
<span id="cb88-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îú‚îÄ‚îÄ 2023-12-16-nyt8.csv</span></span>
<span id="cb88-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ‚îî‚îÄ‚îÄ 2023-12-16-nyt9.csv</span></span></code></pre></div>
</details>
</div>
</div>
<p>Once again, I‚Äôll import the first file in the new processed data folder and check it against the columns <code>nyt1_proc_check_01</code> data to evaluate the differences.</p>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now re-check</span></span>
<span id="cb89-2">nyt1_proc_check_02 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vroom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> proc_pths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the first file</span></span>
<span id="cb89-3">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</details>
</div>
</div>
<div style="font-size: 0.90em;">
<div class="cell">
<details open="" class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">waldo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare</span>(</span>
<span id="cb90-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_01),</span>
<span id="cb90-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(nyt1_proc_check_02), </span>
<span id="cb90-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_diffs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb90-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `old[8:11]`: "ctr_rate" "female" "file_nm" "proc_file_pth"</span></span>
<span id="cb90-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `new[8:10]`: "ctr_rate" "female" "file_nm"</span></span></code></pre></div>
</details>
</div>
</div>
</section>
</section>
</section>
<section id="recap-purrr-and-iteration" class="level1">
<h1>Recap: <code>purrr</code> and iteration</h1>
<p>In this post I‚Äôve covered iteration and some of the new additions to the <code>purrr</code> version 1.0. These include:</p>
<ol type="1">
<li><p><code>purrr::map_vec()</code> (replaces <code>map_raw()</code>)</p></li>
<li><p>Progress bars</p></li>
<li><p><code>purrr::list_rbind()</code> (replaces <code>map_dfr()</code>)</p></li>
<li><p>The experimental <code>dplyr::group_walk()</code> function</p></li>
</ol>
<p>For more information, check out the following:</p>
<ul>
<li><p><a href="https://purrr.tidyverse.org/"><code>purrr</code> package website</a></p></li>
<li><p><a href="https://r4ds.hadley.nz/iteration.html">Iteration chapter in R for data science</a></p></li>
<li><p><a href="https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/"><code>purrr</code> version 1.0 blog post</a> and <a href="https://www.youtube.com/watch?v=EGAs7zuRutY">video from Posit</a></p></li>
</ul>
<div style="font-size: 1.10em;">
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
REACP: <code>purrr</code> syntax variations
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em;">
<p><strong>Standard</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define .x and .f</span></span>
<span id="cb91-2">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> my_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> tolower)</span></code></pre></div>
</div>
<div style="font-size: 1.25em;">
<p><strong>Anonymous function</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># anonymous shorthand notation</span></span>
<span id="cb92-2">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x))</span></code></pre></div>
</div>
<div style="font-size: 1.25em;">
<p><strong>Formula (deprecated)</strong></p>
</div>
<div style="font-size: 1.10em;">
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># written as normal expression</span></span>
<span id="cb93-2">my_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(.x))</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>iteration</category>
  <category>code</category>
  <guid>https://mjfrigaard.github.io/posts/purrr1.0/</guid>
  <pubDate>Wed, 05 Apr 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/purrr1.0/image.png" medium="image" type="image/png" height="139" width="120"/>
</item>
<item>
  <title>Creating Shiny app-packages</title>
  <dc:creator>Martin Frigaard</dc:creator>
  <link>https://mjfrigaard.github.io/posts/duap/</link>
  <description><![CDATA[ 





<p>In this post, I‚Äôll be using <a href="https://devtools.r-lib.org/"><code>devtools</code></a> and <a href="https://usethis.r-lib.org/"><code>usethis</code></a> to develop <a href="https://github.com/mjfrigaard/duap"><code>duap</code></a>, an R package that <em>contains</em> a shiny application (i.e., <em><code>devtools</code>/<code>usethis</code> app-package</em>).</p>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; font-weight: bold; color: #696969;">
<p><em>This is a long post because I cover many of the steps used to build R packages. If you‚Äôd prefer to more information on developing R packages, I suggest starting with <a href="https://r-pkgs.org/whole-game.html">the whole game section</a>.</em></p>
</div>
</div>
</div>
</div>
<p>The R package development workflow is well documented in <a href="https://r-pkgs.org/whole-game.html">R Packages</a> and <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">Mastering Shiny</a>. I‚Äôve written this post because I frequently encountered R developers who were comfortable with Shiny application development, but had never developed an R package.</p>
<p>This post walks through converting an existing Shiny application into an app-package <em>in detail</em> because R package development differs from creating a standalone Shiny application. My hope is that by reading this will prevent you from having to rebuild your application entirely from scratch.</p>
<p>I‚Äôve organized the app-package development process into three areas: <strong>Start</strong>, <strong>Build</strong>, and <strong>Use</strong>.</p>
<ul>
<li><p><strong>Start</strong> covers the steps required to begin building a Shiny app withing a package framework (from the console and IDE).</p></li>
<li><p><strong>Build</strong> covers the development process, which includes writing and storing code, data, external resources (i.e., data), documentation, and testing.</p></li>
<li><p><strong>Use</strong> shows how developers can launch their application using the given framework/package locally (i.e., within the RStudio (Posit) IDE).</p></li>
</ul>
<p>The GitHub repo with the code for <code>duap</code> is located <a href="https://github.com/mjfrigaard/duap">here</a> if you‚Äôd like to follow along.</p>
<section id="duap" class="level1">
<h1><code>duap</code></h1>
<p>Building a Shiny app as a package is <a href="https://mastering-shiny.org/scaling-packaging.html?q=highly%20recommend#scaling-packaging">highly recommended</a>. Both the <a href="https://thinkr-open.github.io/golem/"><code>golem</code></a> and <a href="https://leprechaun.opifex.org/#/"><code>leprechaun</code></a> frameworks convert your Shiny application into an R package, and while this might seem like overkill, when you consider the additional development tools accessible to R packages, I think you‚Äôll see why the advice makes sense.</p>
</section>
<section id="start" class="level1">
<h1>Start</h1>
<p>To create a shiny app package, I install <a href="https://devtools.r-lib.org/"><code>devtools</code></a> (which also installs <a href="https://usethis.r-lib.org/"><code>usethis</code></a>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devtools"</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(devtools)</span></code></pre></div>
</div>
<section id="from-console" class="level2">
<h2 class="anchored" data-anchor-id="from-console">From Console</h2>
<p>If I am creating a package from the console, the function for building a new package is <code>usethis::create_package()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_package</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duap"</span>)</span></code></pre></div>
</div>
<p>A new RStudio session will open (and the name of the project‚Äìi.e., the name of the <code>.Rproj</code> file‚Äìwill be identical to the package name).</p>
</section>
<section id="from-project-wizard" class="level2">
<h2 class="anchored" data-anchor-id="from-project-wizard">From Project Wizard</h2>
<p>If I am using RStudio‚Äôs <strong>New Project Wizard</strong> to create a new Shiny app package, I‚Äôd see the following defaults:</p>
<div id="fig-rpkg-setup" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-rpkg-setup-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/rpkg-setup.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rpkg-setup-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Default <code>usethis::create_package</code> project setup
</figcaption>
</figure>
</div>
<p>The new package built from the console will have the following folder and files:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">duap/</span>
<span id="cb3-2">  ‚îú‚îÄ‚îÄ DESCRIPTION</span>
<span id="cb3-3">  ‚îú‚îÄ‚îÄ NAMESPACE</span>
<span id="cb3-4">  ‚îú‚îÄ‚îÄ R/</span>
<span id="cb3-5">  ‚îî‚îÄ‚îÄ duap.Rproj</span>
<span id="cb3-6">  </span>
<span id="cb3-7">1 directory, 3 files</span></code></pre></div>
<p>Packages built from the <strong>New Project Wizard</strong> will have a few additional folders and files:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">duap/</span>
<span id="cb4-2">  ‚îú‚îÄ‚îÄ DESCRIPTION</span>
<span id="cb4-3">  ‚îú‚îÄ‚îÄ NAMESPACE</span>
<span id="cb4-4">  ‚îú‚îÄ‚îÄ R/</span>
<span id="cb4-5">  ‚îÇ   ‚îî‚îÄ‚îÄ hello.R</span>
<span id="cb4-6">  ‚îú‚îÄ‚îÄ man/</span>
<span id="cb4-7">  ‚îÇ   ‚îî‚îÄ‚îÄ hello.Rd</span>
<span id="cb4-8">  ‚îú‚îÄ‚îÄ myRPkg.Rproj</span>
<span id="cb4-9">  ‚îî‚îÄ‚îÄ renv/</span>
<span id="cb4-10">      ‚îú‚îÄ‚îÄ activate.R</span>
<span id="cb4-11">      ‚îú‚îÄ‚îÄ sandbox/</span>
<span id="cb4-12">      ‚îÇ   ‚îî‚îÄ‚îÄ R-4.2</span>
<span id="cb4-13">      ‚îî‚îÄ‚îÄ settings.dcf</span>
<span id="cb4-14"></span>
<span id="cb4-15">4 directories, 7 files</span></code></pre></div>
<p>These additional files are:</p>
<ul>
<li><code>hello.R</code> in the <code>R/</code> folder<br>
</li>
<li><code>hello.Rd</code> in the <code>man/</code> folder<br>
</li>
<li>a <code>renv/</code> folder for package management</li>
</ul>
<p><code>R/hello.R</code> and <code>man/hello.Rd</code> are boilerplate files and can be deleted, but both package setups have a <code>DESCRIPTION</code>, <code>NAMESPACE</code>, <code>R/</code> folder, and <code>.Rproj</code> file. These four items can be thought of as the ‚Äòminimal package‚Äô setup required to access RStudio‚Äôs <strong>Build</strong> tools.</p>
</section>
</section>
<section id="build" class="level1">
<h1>Build</h1>
<p>I‚Äôll work through a ‚Äôminimum viable product (MVP) using the app code in the <a href="https://github.com/mjfrigaard/shiny-app-setups/tree/main/vanilla-shiny"><code>vanilla-shiny</code></a> repo.</p>
<section id="metadata-files" class="level2">
<h2 class="anchored" data-anchor-id="metadata-files">Metadata files</h2>
<p>R packages have two metadata files: <code>DESCRIPTION</code> and <code>NAMESPACE</code>. Neither of these files have extensions, and both contain vital information for your package to function properly.</p>
<p>We‚Äôll manually edit the <code>DESCRIPTION</code> file, but the <code>NAMESPACE</code> file is automatically generated during the development process.</p>
<section id="description" class="level3">
<h3 class="anchored" data-anchor-id="description">DESCRIPTION</h3>
<p>The <code>DESCRIPTION</code> file plays an important role in R packages‚Äìthat‚Äôs why creating this file is the first step when <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">converting an existing app</a> (and when creating a <a href="https://thinkr-open.github.io/golem/articles/a_start.html#fill-the-description">new <code>golem</code> apps</a>).</p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>DESCRIPTION</code> files
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://mjfrigaard.github.io/posts/duap/desc.png" class="quarto-figure quarto-figure-left figure-img" style="width:15.0%;height:15.0%"></p>
</figure>
</div>
<p><em>‚ÄòRStudio and <code>devtools</code> consider any directory containing <code>DESCRIPTION</code> to be a package‚Äô</em> - <a href="https://r-pkgs.org/description.html#the-description-file">R Packages</a></p>
</div>
</div>
</div>
</div>
<p>The initial <code>DESCRIPTION</code> file in <code>duap</code> is below:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">Package: duap</span>
<span id="cb5-2">Title: What the Package Does (One Line, Title Case)</span>
<span id="cb5-3">Version: 0.0.0.9000</span>
<span id="cb5-4">Authors@R: </span>
<span id="cb5-5">    person("First", "Last", , "first.last@example.com", </span>
<span id="cb5-6">    role = c("aut", "cre"),</span>
<span id="cb5-7">    comment = c(ORCID = "YOUR-ORCID-ID"))</span>
<span id="cb5-8">Description: What the package does (one paragraph).</span>
<span id="cb5-9">License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a</span>
<span id="cb5-10">    license</span>
<span id="cb5-11">Encoding: UTF-8</span>
<span id="cb5-12">Roxygen: list(markdown = TRUE)</span>
<span id="cb5-13">RoxygenNote: 7.2.3</span></code></pre></div>
<p>The package name is automatically added, but the remaining fields need to be completed (consult <a href="https://r-pkgs.org/description.html#the-description-file">R packages</a> for more information on filling out the <code>DESCRIPTION</code> file).</p>
<p>The <code>DESCRIPTION</code> file in the <code>duap</code> prompts the RStudio IDE to activate the <strong>Build</strong> tools pane (see below):</p>
<div id="fig-rpkg-ide" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-rpkg-ide-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/rpkg-ide.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rpkg-ide-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Package <strong>Build</strong> tools
</figcaption>
</figure>
</div>
</section>
</section>
<section id="application-code" class="level2">
<h2 class="anchored" data-anchor-id="application-code">Application code</h2>
<p>The contents of the <code>app.R</code> and <code>utils.R</code> need to be moved into the <code>R/</code> folder. When developing R packages, new <code>.R</code> files are created with <code>usethis::use_r()</code>.</p>
<section id="use_r" class="level3">
<h3 class="anchored" data-anchor-id="use_r">use_r()</h3>
<p>I‚Äôm going to create <code>duap</code> using <a href="https://mastering-shiny.org/scaling-modules.html#module-motivation">modules</a> to separate the app into the following digestible mental ‚Äòchunks‚Äô:</p>
<ul>
<li><p>The app collects the inputs in the <code>shiny::sidebarPanel()</code></p></li>
<li><p>These values are then used to create a plot in the <code>shiny::mainPanel()</code></p></li>
</ul>
<p>Based on this layout, I‚Äôll create one module to collect and return the user-inputs (<code>mod_var_input</code>), and another module to display the plot (<code>mod_display_plot</code>).</p>
<p>I‚Äôll create these files using <a href="https://usethis.r-lib.org/reference/use_r.html"><code>usethis::use_r()</code></a> below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod_var_input"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb7-1">‚úî Setting active project to '/Users/mjfrigaard/projects/duap'</span>
<span id="cb7-2">‚Ä¢ Modify 'R/mod_var_input.R'</span>
<span id="cb7-3">‚Ä¢ Call `use_test()` to create a matching test file</span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mod_display_plot"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">‚Ä¢ Modify 'R/mod_display_plot.R'</span>
<span id="cb9-2">‚Ä¢ Call `use_test()` to create a matching test file</span></code></pre></div>
<p>The display module also relies on a utility function (<code>plot_points()</code>), so I need to create a script for the utility function, which I put in a file with a name similar to the module it belongs to (i.e., <code>utils_display_plot</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils_display_plot"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">‚Ä¢ Modify 'R/utils_display_plot.R'</span>
<span id="cb11-2">‚Ä¢ Call `use_test()` to create a matching test file</span></code></pre></div>
<p>Finally, I‚Äôll place the modules into basic ui and server arguments in a call to <code>shiny::shinyApp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_r</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moviesApp"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">‚Ä¢ Modify 'R/moviesApp.R'</span>
<span id="cb13-2">‚Ä¢ Call `use_test()` to create a matching test file</span></code></pre></div>
<p>Modules consist of two functions; one in the UI (with a <code>_ui</code> suffix), and another in the server (with a <code>_server</code> suffix), but it‚Äôs common practice to combine them in a single file.</p>
<p>Below is the <code>mod_var_input</code> module:</p>
<ul>
<li><p>The ui function is stored in <code>mod_var_input_ui</code>:</p>
<div style="font-size: 0.80em; ; color: #696969;">
<p><em>Click on Code to view the UI function in <code>R/mod_var_input/R</code></em></p>
</div>
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mod_var_input_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb14-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb14-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb14-4">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb14-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb14-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y-axis:"</span>,</span>
<span id="cb14-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb14-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_rating"</span>,</span>
<span id="cb14-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB number of votes"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_num_votes"</span>,</span>
<span id="cb14-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Critics Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"critics_score"</span>,</span>
<span id="cb14-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audience Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_score"</span>,</span>
<span id="cb14-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Runtime"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runtime"</span></span>
<span id="cb14-13">      ),</span>
<span id="cb14-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_score"</span></span>
<span id="cb14-15">    ),</span>
<span id="cb14-16">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb14-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>),</span>
<span id="cb14-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X-axis:"</span>,</span>
<span id="cb14-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb14-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_rating"</span>,</span>
<span id="cb14-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IMDB number of votes"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_num_votes"</span>,</span>
<span id="cb14-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Critics Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"critics_score"</span>,</span>
<span id="cb14-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audience Score"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_score"</span>,</span>
<span id="cb14-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Runtime"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runtime"</span></span>
<span id="cb14-25">      ),</span>
<span id="cb14-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imdb_rating"</span></span>
<span id="cb14-27">    ),</span>
<span id="cb14-28">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb14-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>),</span>
<span id="cb14-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Color by:"</span>,</span>
<span id="cb14-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb14-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title Type"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title_type"</span>,</span>
<span id="cb14-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Genre"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre"</span>,</span>
<span id="cb14-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MPAA Rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpaa_rating"</span>,</span>
<span id="cb14-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Critics Rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"critics_rating"</span>,</span>
<span id="cb14-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audience Rating"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audience_rating"</span></span>
<span id="cb14-37">      ),</span>
<span id="cb14-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpaa_rating"</span></span>
<span id="cb14-39">    ),</span>
<span id="cb14-40">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sliderInput</span>(</span>
<span id="cb14-41">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>),</span>
<span id="cb14-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alpha:"</span>,</span>
<span id="cb14-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb14-44">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb14-45">    ),</span>
<span id="cb14-46">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sliderInput</span>(</span>
<span id="cb14-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>),</span>
<span id="cb14-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Size:"</span>,</span>
<span id="cb14-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb14-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-51">    ),</span>
<span id="cb14-52">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(</span>
<span id="cb14-53">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot_title"</span>),</span>
<span id="cb14-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plot title"</span>,</span>
<span id="cb14-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">placeholder =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter plot title"</span></span>
<span id="cb14-56">    )</span>
<span id="cb14-57">  )</span>
<span id="cb14-58">}</span></code></pre></div>
</details>
</div></li>
<li><p>The server function is stored in <code>mod_var_input_server</code>:</p>
<div style="font-size: 0.80em; ; color: #696969;">
<p><em>Click on Code to view the server function in <code>R/mod_var_input/R</code></em></p>
</div>
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">mod_var_input_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb15-2"></span>
<span id="cb15-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(id, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(</span>
<span id="cb15-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb15-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-7">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb15-8">        }),</span>
<span id="cb15-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-10">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb15-11">        }),</span>
<span id="cb15-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-13">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z</span>
<span id="cb15-14">        }),</span>
<span id="cb15-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-16">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>alpha</span>
<span id="cb15-17">        }),</span>
<span id="cb15-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-19">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>size</span>
<span id="cb15-20">        }),</span>
<span id="cb15-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot_title"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb15-22">          input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plot_title</span>
<span id="cb15-23">        })</span>
<span id="cb15-24">      )</span>
<span id="cb15-25">    )</span>
<span id="cb15-26">  })</span>
<span id="cb15-27">}</span></code></pre></div>
</details>
</div>
<ul>
<li>View the display module <a href="https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/mod_display_plot.R">here.</a></li>
</ul></li>
</ul>
</section>
<section id="standalone-app-function" class="level3">
<h3 class="anchored" data-anchor-id="standalone-app-function">Standalone app function</h3>
<p>After I‚Äôve written the modules and utility functions, I need to add these into a <a href="https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app">standalone app function</a> <code>moviesApp()</code> (stored in <code>R/moviesApp.R</code>).</p>
<ul>
<li><p>This file contains a call to <code>shiny::shinyApp()</code> and includes the module functions (in their relative positions)</p>
<ul>
<li>Note the <code>id</code>s in each module function pair must match to create the shared namespace.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">moviesApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb16-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># call to shinyApp()</span></span>
<span id="cb16-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(</span>
<span id="cb16-4"></span>
<span id="cb16-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI ----</span></span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb16-7">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb16-8">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb16-9">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI input module ----</span></span>
<span id="cb16-10">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_var_input_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vars"</span>)</span>
<span id="cb16-11">        ),</span>
<span id="cb16-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI display module ----</span></span>
<span id="cb16-13">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb16-14">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_display_plot_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span>)</span>
<span id="cb16-15">        )</span>
<span id="cb16-16">      )</span>
<span id="cb16-17">    ),</span>
<span id="cb16-18"></span>
<span id="cb16-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb16-20">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server input module (capturing inputs) ----</span></span>
<span id="cb16-21">      selected_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_var_input_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vars"</span>)</span>
<span id="cb16-22">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># server display module (rendering outputs) ----</span></span>
<span id="cb16-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_display_plot_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot"</span>, </span>
<span id="cb16-24">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var_inputs =</span> selected_vars)</span>
<span id="cb16-25">    }</span>
<span id="cb16-26">  )</span>
<span id="cb16-27">}</span></code></pre></div>
</div></li>
</ul>
</section>
<section id="roxygen2" class="level3">
<h3 class="anchored" data-anchor-id="roxygen2">roxygen2</h3>
<p>When I‚Äôm confident my code works (and the app renders), I want to make sure these functions are properly documented by describing each function with <a href="https://roxygen2.r-lib.org/"><code>roxygen2</code></a> tags. To quickly insert a <code>roxygen2</code> skeleton, use the RStudio IDE (or the keyboard shortcut: <code>Option</code> + <code>Shift</code> + <code>Command</code> + <code>R</code>)</p>
<p>The standard <code>roxygen2</code> skeleton tags include <code>@param</code>, <code>@return</code>, <code>@export</code>, and <code>@examples</code></p>
<ul>
<li><p><code>@param</code> lists the existing arguments (or variables) for the function</p></li>
<li><p><code>@return</code> should be a description of the object/side-effect/thing the function produces (and any warnings or errors if used incorrectly)</p></li>
</ul>
<p>The following <a href="https://roxygen2.r-lib.org/"><code>roxygen2</code></a> tags will be used to update the <code>NAMESPACE</code> file (which you should never edit manually!)</p>
<ul>
<li><p><code>@export</code> will make the function available to other people when they use your package</p></li>
<li><p><code>@importFrom</code> vs.&nbsp;<code>@import</code></p>
<ul>
<li>it‚Äôs always a good idea to be explicit about the external functions and packages you‚Äôre using, so most of the time you should use <code>@importFrom</code> (there‚Äôs even a handy helper <code>usethis::use_import_from("package", "function")</code>)<br>
</li>
<li><code>@import</code> should only be used when <a href="https://r-pkgs.org/dependencies-in-practice.html#in-code-below-r">‚Äú<em>you make such heavy use of so many functions from another package that you want to import its entire namespace. This should be relatively rare.</em>‚Äù</a></li>
</ul></li>
</ul>
<p><code>roxygen2</code> imports and exports are covered in more depth <a href="https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports">in R packages.</a>.</p>
<p>You can see the full code for <code>point_plot()</code> below (or follow <a href="https://github.com/mjfrigaard/shiny-app-setups/blob/main/duap/R/">this link</a> to view all the modules in the <code>R/</code> folder):</p>
<div style="font-size: 0.80em; ; color: #696969;">
<p><em>Click on Code to view</em></p>
</div>
<div class="cell">
<details class="code-fold">
<summary>show/hide</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Plot points (shiny)</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param df input dataset (tibble or data.frame)</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param x_var x variable</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param y_var y variable</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param col_var color variable</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param alpha_var alpha value</span></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param size_var size value</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return plot object</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export point_plot</span></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom ggplot2 ggplot aes geom_point</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @examples</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' require(duap)</span></span>
<span id="cb17-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' movies &lt;- duap::movies</span></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' point_plot(df = movies,</span></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   x_var = "critics_score",</span></span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   y_var = "imdb_rating",</span></span>
<span id="cb17-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   col_var = "critics_rating",</span></span>
<span id="cb17-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   alpha_var = 1/3,</span></span>
<span id="cb17-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   size_var = 2)</span></span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' }</span></span>
<span id="cb17-25">point_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, x_var, y_var, col_var, alpha_var, size_var) {</span>
<span id="cb17-26">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df,</span>
<span id="cb17-27">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .data[[x_var]],</span>
<span id="cb17-28">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .data[[y_var]],</span>
<span id="cb17-29">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> .data[[col_var]])) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-30">      ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha_var, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size_var)</span>
<span id="cb17-31"></span>
<span id="cb17-32">}</span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip: <code>roxygen2</code> skeleton
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; font-weight: bold; color: #696969;">
<p><em>As well as generating <code>.Rd</code> files, <code>roxygen</code> will also create a <code>NAMESPACE</code> for you, and will manage the <code>Collate</code> field in <code>DESCRIPTION</code></em></p>
<div id="fig-roxygen2-tags" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-roxygen2-tags-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/ide-roxygen-skeleton.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-roxygen2-tags-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Standard <code>roxygen2</code> skeleton
</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="test-drive" class="level2">
<h2 class="anchored" data-anchor-id="test-drive">Test drive</h2>
<div style="font-size: 1.10em; font-weight: bold;">
<blockquote class="blockquote">
<p>‚ÄúThe <code>load_all()</code> function is arguably the most important part of the devtools workflow.‚Äù - <a href="https://r-pkgs.org/workflow101.html#sec-workflow101-load-all">R Packages, 2ed</a></p>
</blockquote>
</div>
<p>You‚Äôll use the <code>devtools::load_all()</code> function frequently while you‚Äôre developing your app-package. <code>load_all()</code> simulates how your functions will work when someone else uses your package. This removes the need to define them in the global workspace. It also gives you access to the functions from any add-on packages you‚Äôve imported into your <code>NAMESPACE</code> (i.e., you won‚Äôt need to run <code>library()</code>).</p>
<p>I highly recommend using the keyboard shortcuts:</p>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="`devtools::load_all()` keyboard shortcuts">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>devtools::load_all()</code> keyboard shortcuts
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em; font-weight: bold;">
<ul>
<li><p>macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p></li>
<li><p>Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p></li>
</ul>
</div>
</div>
</div>
<p>The full benefits of using <code>load_all()</code> are covered in <a href="https://r-pkgs.org/workflow101.html#benefits-of-load_all">R packages.</a></p>
<section id="load_all" class="level3">
<h3 class="anchored" data-anchor-id="load_all">load_all()</h3>
<p>After documenting everything with <code>roxygen2</code>, I want to make sure none of the functions are in my <strong>Environment</strong> (remove with <code>rm()</code> if necessary) and load the functions with <a href="https://r-pkgs.org/whole-game.html#sec-whole-game-load-all"><code>devtools::load_all()</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1">‚Ñπ Loading duap</span></code></pre></div>
</section>
</section>
<section id="namespace-help-files" class="level2">
<h2 class="anchored" data-anchor-id="namespace-help-files">NAMESPACE &amp; Help files</h2>
<p><code>devtools::document()</code> processes the <code>roxygen2</code> tags to generate the <code>NAMESPACE</code> and the <code>.Rd</code> files in the <code>man/</code> folder. The <code>.Rd</code> files are used to access the help files (i.e., <code>package::function()</code> can be accessed with <code>??function</code>).</p>
<p>Managing your package <a href="https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-NAMESPACE-workflow">NAMESPACE file</a> is not something you do directly: it‚Äôs handled with the <code>roxygen2</code> tags we covered above. The keyboard shortcuts for <code>devtools::document()</code> are below:</p>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="`devtools::document()` keyboard shortcuts">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>devtools::document()</code> keyboard shortcuts
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em; font-weight: bold;">
<ul>
<li><p>macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd></p></li>
<li><p>Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd></p></li>
</ul>
</div>
</div>
</div>
<section id="document" class="level3">
<h3 class="anchored" data-anchor-id="document">document()</h3>
<p>Run <code>devtools::document()</code> when you‚Äôve written a new function with <code>roxygen2</code> tags or included a package in the <code>DESCRIPTION</code> file under <code>Imports:</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">document</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb21-1">‚Ñπ Updating duap documentation</span>
<span id="cb21-2">First time using roxygen2. Upgrading automatically...</span>
<span id="cb21-3">Setting `RoxygenNote` to "7.2.3"</span>
<span id="cb21-4">‚Ñπ Loading duap</span>
<span id="cb21-5">Writing NAMESPACE</span>
<span id="cb21-6">Writing mod_plot_ui.Rd</span>
<span id="cb21-7">Writing mod_plot_server.Rd</span>
<span id="cb21-8">Writing point_plot.Rd</span>
<span id="cb21-9">Writing mod_var_input_ui.Rd</span>
<span id="cb21-10">Writing mod_var_input_server.Rd</span>
<span id="cb21-11">Writing moviesApp.Rd</span></code></pre></div>
<section id="namespace-description" class="level4">
<h4 class="anchored" data-anchor-id="namespace-description"><strong><em>NAMESPACE != DESCRIPTION</em></strong></h4>
<p>It‚Äôs important to understand that <code>devtools::document()</code> will use the <code>roxygen2</code> tags to create the <code>man/*.Rd</code> files and update the <code>NAMESPACE</code>, but <strong><code>devtools::document()</code> does not update the <code>Imports:</code> section in the <code>DESCRIPTION</code>.</strong></p>
<p>To add packages dependencies to the <code>DESCRIPTION</code>, you‚Äôll need to use the <a href="https://usethis.r-lib.org/reference/use_package.html"><code>usethis::use_package()</code> function</a>. Read more on this topic in <a href="https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports">Confusion about <code>Imports</code></a>.</p>
<p>The table below shows the connection between <code>roxygen2</code> tags, the resulting <code>NAMESPACE</code> entry, and what should be listed in the <code>DESCRIPTION</code>.</p>
<div style="font-size: 0.80em;">
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>roxygen2</code>, <code>NAMESPACE</code> &amp; <code>DESCRPTION</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<table class="table" style="margin-left: auto; margin-right: auto;">
<thead>
<tr>
<th style="text-align:left;">
R/ code files
</th>
<th style="text-align:left;">
NAMESPACE
</th>
<th style="text-align:right;">
DESCRIPTION
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
pkg::fun()
</td>
<td style="text-align:left;">
Nothing
</td>
<td style="text-align:right;">
Imports
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="importFrom">@importFrom</span>
</td>
<td style="text-align:left;">
importFrom() : import selected object from another NAMESPACE.
</td>
<td style="text-align:right;">
Imports
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="import">@import</span>
</td>
<td style="text-align:left;">
import(): import all objects from another package‚Äôs NAMESPACE.
</td>
<td style="text-align:right;">
Imports
</td>
</tr>
<tr>
<td style="text-align:left;">
<span class="citation" data-cites="export">@export</span>
</td>
<td style="text-align:left;">
export() : export the function, method, generic, or class so it‚Äôs available to users.
</td>
<td style="text-align:right;">
Nothing
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="checking-installation" class="level2">
<h2 class="anchored" data-anchor-id="checking-installation">Checking installation</h2>
<p>After loading and documenting the <code>duap</code> package, I want to make sure I can install the package into my library with <a href="https://r-pkgs.org/whole-game.html#install"><code>devtools::install()</code></a>. The keyboard shortcut for <code>devtools::install()</code> is below:</p>
<div class="callout callout-style-default callout-important no-icon callout-titled" title="`devtools::document()` keyboard shortcuts">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>devtools::document()</code> keyboard shortcuts
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.25em; font-weight: bold;">
<ul>
<li><p>macOS: <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></p></li>
<li><p>Windows/Linux: <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></p></li>
</ul>
</div>
</div>
</div>
<section id="install" class="level3">
<h3 class="anchored" data-anchor-id="install">install()</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb23-1">‚îÄ‚îÄ R CMD build ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span>
<span id="cb23-2">‚úî  checking for file ‚Äò/Users/mjfrigaard/projects/duap/DESCRIPTION‚Äô ...</span>
<span id="cb23-3">‚îÄ  preparing ‚Äòduap‚Äô: (1.8s)</span>
<span id="cb23-4">‚úî  checking DESCRIPTION meta-information</span>
<span id="cb23-5">‚îÄ  checking for LF line-endings in source and make files and shell scripts (520ms)</span>
<span id="cb23-6">‚îÄ  checking for empty or unneeded directories</span>
<span id="cb23-7">   Omitted ‚ÄòLazyData‚Äô from DESCRIPTION</span>
<span id="cb23-8">‚îÄ  building ‚Äòduap_0.1.0.tar.gz‚Äô</span>
<span id="cb23-9">   </span>
<span id="cb23-10">Running /Library/Frameworks/R.framework/Resources/bin/R CMD INSTALL </span>
<span id="cb23-11">  --install-tests </span>
<span id="cb23-12">* installing to library ...</span>
<span id="cb23-13">* installing *source* package ‚Äòduap‚Äô ...</span>
<span id="cb23-14">** using staged installation ...</span>
<span id="cb23-15">** R</span>
<span id="cb23-16">** byte-compile and prepare package for lazy loading</span>
<span id="cb23-17">** help</span>
<span id="cb23-18">*** installing help indices</span>
<span id="cb23-19">** building package indices</span>
<span id="cb23-20">** testing if installed package can be loaded from temporary location</span>
<span id="cb23-21">** testing if installed package can be loaded from final location</span>
<span id="cb23-22">** testing if installed package keeps a record of temporary installation path</span>
<span id="cb23-23">* DONE (duap)</span></code></pre></div>
<p>Restart your R session and ensure you have a clean workspace:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb24-1">   Restarting R session...</span>
<span id="cb24-2"></span>
<span id="cb24-3">* Project '~/projects/duap' loaded. [renv 0.16.0]</span></code></pre></div>
<p>Then load your package with <code>library()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(duap)</span></code></pre></div>
</div>
<p>You can also use <strong>Install</strong> icon in the <strong>Build</strong> pane, which installs the package, restarts the R session, and loads the package all with one click!</p>
<div id="fig-build-install" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-build-install-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/build-install.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-build-install-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: <strong>Build</strong> install package
</figcaption>
</figure>
</div>
<div id="fig-build-restart" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-build-restart-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/build-restart.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-build-restart-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: <strong>Build</strong> restart and load
</figcaption>
</figure>
</div>
<section id="recap-the-r-folder" class="level4">
<h4 class="anchored" data-anchor-id="recap-the-r-folder"><strong>Recap: the <code>R/</code> folder</strong></h4>
<p>The sequence I‚Äôve demonstrated above (create <code>.R</code> file, write function, document with <code>roxygen2</code>, load, document, install) is the ‚Äòminimal version‚Äô of the <a href="https://r-pkgs.org/whole-game.html">full development workflow</a>.</p>
<p>Once a ‚Äòbeta‚Äô version of the app is deployed, you will want to come back to the app to refactor, write tests, and make sure all the items in <code>devtools::check()</code> pass.</p>
<p>Storing the application‚Äôs code in the <code>R/</code> folder and (using RStudio‚Äôs build tools) keeps files organized, well documented, and self-contained:</p>
<ul>
<li><p>All the code is stored in the <code>R/</code> folder</p></li>
<li><p>I‚Äôve separated my code into smaller pieces (modules) that can be tested independently (more on this later)</p></li>
<li><p>My dependencies are being managed by <code>roxygen2</code> and <code>devtools::document()</code>, which will update the <code>NAMESPACE</code> with any functions tagged with <code>@importFrom</code> (or <code>@import</code>)</p>
<ul>
<li>I can also access functions I‚Äôve written <em>outside</em> by adding <code>@export</code></li>
</ul></li>
</ul>
<div id="fig-pkg-man" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pkg-man-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/pkg-man.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:70.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pkg-man-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Function documentation in <code>man/</code> folder
</figcaption>
</figure>
</div>
<p>Now that I have the R version/package management being tracked and stored with <code>renv/</code> &amp; <code>renv.lock</code>, function documentation in the <code>.Rd</code> files, the <code>DESCRIPTION</code> and <code>NAMESPACE</code>, I can move onto adding and using <strong>data</strong> in a shiny app package.</p>
</section>
</section>
</section>
<section id="additional-package-files" class="level2">
<h2 class="anchored" data-anchor-id="additional-package-files">Additional package files</h2>
<p>Most app-packages will require files beyond the <code>.R</code> files in the <code>R/</code> folder. Apps will often use data files when they‚Äôre deployed, which we‚Äôll cover next.</p>
<section id="use_data_raw" class="level3">
<h3 class="anchored" data-anchor-id="use_data_raw">use_data_raw()</h3>
<p><a href="https://usethis.r-lib.org/reference/use_data.html"><code>usethis::use_data()</code> or <code>usethis::use_data_raw()</code></a> make it simple to add data to the application package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data_raw</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"movies"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb27-1">‚úî Creating 'data-raw/'</span>
<span id="cb27-2">‚úî Writing 'data-raw/movies.R'</span>
<span id="cb27-3">‚Ä¢ Modify 'data-raw/movies.R'</span>
<span id="cb27-4">‚Ä¢ Finish the data preparation script in 'data-raw/movies.R'</span>
<span id="cb27-5">‚Ä¢ Use `usethis::use_data()` to add prepared data to package</span></code></pre></div>
<p>In the <code>data-raw/movies.R</code> script, I want to import the <code>movies.RData</code> file, but where should I import it from? It depends. In R packages, data is stored in either <a href="https://r-pkgs.org/data.html"><code>data/</code> or <code>data-raw/</code></a>. To access a copy of the <code>movies</code> dataset in <code>duap</code> (i.e., with <code>duap::movies</code>), I can place the <code>movies.RData</code> file in <code>data-raw/</code> and import it by adding the following to <code>data-raw/movies.R</code>:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb28-1">## code to prepare `movies` dataset goes here</span>
<span id="cb28-2">load("data-raw/movies.RData")</span>
<span id="cb28-3">usethis::use_data(movies, overwrite = TRUE)</span></code></pre></div>
<p>Note <code>data-raw/movies.R</code> includes a call to <code>usethis::use_data()</code>, and when it‚Äôs executed, I can see a <code>data/</code> folder is created and <code>movies</code> is saved as <code>movies.rda</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-raw/movies.RData"</span>)</span>
<span id="cb29-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data</span>(movies, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb30-1">‚úî Adding 'R' to Depends field in DESCRIPTION</span>
<span id="cb30-2">‚úî Creating 'data/'</span>
<span id="cb30-3">‚úî Saving 'movies' to 'data/movies.rda'</span>
<span id="cb30-4">‚Ä¢ Document your data (see 'https://r-pkgs.org/data.html')</span></code></pre></div>
</section>
</section>
<section id="installed-package-files" class="level2">
<h2 class="anchored" data-anchor-id="installed-package-files">Installed package files</h2>
<p>The <code>inst/</code> folder plays a special role when developing R packages:</p>
<div style="font-size: 1.10em; font-weight: bold;">
<blockquote class="blockquote">
<p>‚Äú<em>When a package is installed, everything in <code>inst/</code> is copied into the top-level directory of the installed package</em>‚Äù - <a href="https://r-pkgs.org/misc.html#sec-misc-inst">R Packages, 2ed</a></p>
</blockquote>
</div>
<p>Consider the example folder and files below: <code>file.txt</code>, <code>CITATION</code>, and <code>extdata/my_data.csv</code>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<section id="source-development-form" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="source-development-form">Source (development) form</h5>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb31-1">inst/</span>
<span id="cb31-2">  ‚îú‚îÄ‚îÄ file.txt</span>
<span id="cb31-3">  ‚îú‚îÄ‚îÄ CITATION</span>
<span id="cb31-4">  ‚îî‚îÄ‚îÄ extdata/</span>
<span id="cb31-5">        ‚îî‚îÄ‚îÄ my_data.csv</span></code></pre></div>
</section>
<section id="binary-installed-form" class="level5 quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<h5 class="anchored" data-anchor-id="binary-installed-form">Binary (installed) form</h5>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb32-1">file.txt</span>
<span id="cb32-2">CITATION</span>
<span id="cb32-3">extdata/</span>
<span id="cb32-4">  ‚îî‚îÄ‚îÄ my_data.csv</span></code></pre></div>
</section>
</div>
</div>
<p>The neat thing about the <code>inst/</code> folder is that after we‚Äôve loaded and installed our package, we can access the files in <code>inst/extdata/</code> with the <a href="https://pkgload.r-lib.org/reference/system.file.html"><code>system.file()</code> function</a>:</p>
<p>If I want to test functions in <code>duap</code> using <code>movies.RData</code> (or another dataset), those should be placed in <code>inst/extdata/</code></p>
<section id="inst" class="level3">
<h3 class="anchored" data-anchor-id="inst">inst/</h3>
<p>A great way to understand what files are available in <code>inst/</code> when your package is to pass <code>system.file()</code> to <code>fs::dir_tree()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrap this in a folder tree</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duap"</span>))</span></code></pre></div>
</div>
<div class="cell">
<details class="code-fold">
<summary>expand to see inst/ folder contents</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/path/to/installed/package/duap</span></span>
<span id="cb34-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> DESCRIPTION</span>
<span id="cb34-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> INDEX</span>
<span id="cb34-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> LICENSE</span>
<span id="cb34-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> Meta</span>
<span id="cb34-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ Rd.rds</span>
<span id="cb34-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ data.rds</span>
<span id="cb34-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ features.rds</span>
<span id="cb34-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ hsearch.rds</span>
<span id="cb34-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ links.rds</span>
<span id="cb34-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ nsInfo.rds</span>
<span id="cb34-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ package.rds</span>
<span id="cb34-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> NAMESPACE</span>
<span id="cb34-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> R</span>
<span id="cb34-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ duap</span>
<span id="cb34-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ duap.rdb</span>
<span id="cb34-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ duap.rdx</span>
<span id="cb34-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> data</span>
<span id="cb34-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ Rdata.rdb</span>
<span id="cb34-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ Rdata.rds</span>
<span id="cb34-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ Rdata.rdx</span>
<span id="cb34-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> extdata</span>
<span id="cb34-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ movies.RData</span>
<span id="cb34-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> help</span>
<span id="cb34-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ AnIndex</span>
<span id="cb34-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ aliases.rds</span>
<span id="cb34-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ duap.rdb</span>
<span id="cb34-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ duap.rdx</span>
<span id="cb34-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îú‚îÄ‚îÄ figures</span>
<span id="cb34-30"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îÇ</span>   ‚îî‚îÄ‚îÄ paths.rds</span>
<span id="cb34-31"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> html</span>
<span id="cb34-32">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îú‚îÄ‚îÄ</span> 00Index.html</span>
<span id="cb34-33">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚îî‚îÄ‚îÄ</span> R.css</span></code></pre></div>
</details>
</div>
<p>The <code>system.file()</code> function will show me the path to the locally installed version of the package (hence the <code>/path/to/installed/package/</code> at the beginning of the path).</p>
<p>The <code>inst/exdata/</code> folder comes in handy for adding example data, but it‚Äôs also useful for application development (more on that later).</p>
<div class="callout callout-style-default callout-tip no-icon callout-titled" title="The `inst/` folder">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The <code>inst/</code> folder
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em;">
<p>Take a look at the <code>inst/extdata/</code> folder <a href="https://github.com/tidyverse/readr/blob/5ac729aa9a70fef297a634d2332ff8ff1af874fb/R/example.R"><code>readr::readr_example()</code></a> function to understand more about how this works.</p>
</div>
</div>
</div>
<section id="recap-data-and-installed-files" class="level4">
<h4 class="anchored" data-anchor-id="recap-data-and-installed-files"><strong>Recap: data and installed files</strong></h4>
<p>R Packages have a consistent and standardized way of storing data, and have designated locations for internal and external data.</p>
<div id="fig-pkg-data" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pkg-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/pkg-data.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pkg-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Package data folders
</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="documentation" class="level2">
<h2 class="anchored" data-anchor-id="documentation">Documentation</h2>
<p>Function documentation is handled with the <code>R/</code> folder and <code>roxygen2</code> comments/tags, but <code>duap</code> needs a <code>README</code> file, and a place for long-form documentation. Fortuntely, <a href="https://rmarkdown.rstudio.com/">RMarkdown</a> handles each of these well:</p>
<section id="use_readme_rmd" class="level3">
<h3 class="anchored" data-anchor-id="use_readme_rmd">use_readme_rmd()</h3>
<p>I can create a <code>README</code> file using <a href="https://usethis.r-lib.org/reference/use_readme_rmd.html"><code>usethis::use_readme_md()</code></a> or <a href="https://usethis.r-lib.org/reference/use_readme_rmd.html"><code>usethis::use_readme_rmd()</code></a></p>
<ul>
<li><p>I prefer the <code>.Rmd</code> file because it comes with executable code chunks.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_readme_rmd</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb36-1">‚úî Setting active project to '/Users/mjfrigaard/projects/duap'</span>
<span id="cb36-2">‚úî Writing 'README.Rmd'</span>
<span id="cb36-3">‚úî Adding '^README\\.Rmd$' to '.Rbuildignore'</span>
<span id="cb36-4">‚Ä¢ Modify 'README.Rmd'</span>
<span id="cb36-5">‚Ä¢ Update 'README.Rmd' to include installation instructions.</span>
<span id="cb36-6">‚úî Writing '.git/hooks/pre-commit'</span></code></pre></div>
<ul>
<li>When I knit <code>README.Rmd</code>, it automatically generates the <code>README.md</code> for the package.</li>
</ul></li>
</ul>
</section>
<section id="use_vignette" class="level3">
<h3 class="anchored" data-anchor-id="use_vignette">use_vignette()</h3>
<p>For long-form documentation I can use <a href="https://r-pkgs.org/vignettes.html#introduction">vignettes.</a></p>
<ul>
<li><p>Vignettes can be created with <a href="https://usethis.r-lib.org/reference/use_vignette.html"><code>usethis::use_vignette()</code></a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_vignette</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duap"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb38-1">‚úî Adding 'knitr' to Suggests field in DESCRIPTION</span>
<span id="cb38-2">‚úî Setting VignetteBuilder field in DESCRIPTION to 'knitr'</span>
<span id="cb38-3">‚úî Adding 'inst/doc' to '.gitignore'</span>
<span id="cb38-4">‚úî Creating 'vignettes/'</span>
<span id="cb38-5">‚úî Adding '*.html', '*.R' to 'vignettes/.gitignore'</span>
<span id="cb38-6">‚úî Adding 'rmarkdown' to Suggests field in DESCRIPTION</span>
<span id="cb38-7">‚úî Writing 'vignettes/duap.Rmd'</span>
<span id="cb38-8">‚Ä¢ Modify 'vignettes/duap.Rmd'</span></code></pre></div></li>
</ul>
<p>Vignettes are also written in RMarkdown and rendered whenever the package is built/installed.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb39-1">duap/</span>
<span id="cb39-2">    ‚îî‚îÄ‚îÄ vignettes/</span>
<span id="cb39-3">            ‚îî‚îÄ‚îÄ duap.Rmd</span>
<span id="cb39-4"></span>
<span id="cb39-5">1 directory, 1 file</span></code></pre></div>
<p>By combining <code>rmarkdown</code> and <code>knitr</code>, R packages have a documentation framework that has the added benefit of being somewhat fool-proof: vignettes have to successfully render for the package to be installed.</p>
<div id="fig-build-vignettes" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-build-vignettes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/install-vignettes.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-build-vignettes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Package vignettes
</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Vignette figures
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div style="font-size: 1.10em; color: #696969;">
<p>Images in vignettes are kept in <code>man/figures/</code></p>
<pre>duap/
  ‚îú‚îÄ‚îÄ vignettes/
  ‚îÇ       ‚îî‚îÄ‚îÄ duap.Rmd
  ‚îî‚îÄ‚îÄ man/
      ‚îî‚îÄ‚îÄ figures/
          ‚îî‚îÄ‚îÄ duap-img-1.png
</pre>
</div>
</div>
</div>
</div>
<section id="recap-documentation" class="level4">
<h4 class="anchored" data-anchor-id="recap-documentation"><strong>Recap: documentation</strong></h4>
<p>The vignettes folder will long-form documentation about how the application works, use cases, and features (and <code>roxygen2</code> will document each function).</p>
<div id="fig-pkg-docs" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pkg-docs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/pkg-docs.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pkg-docs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Documentation in <code>README</code> and <code>vignettes/</code>
</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="tests" class="level2">
<h2 class="anchored" data-anchor-id="tests">Tests</h2>
<p>Testing is an important part of any package, and apps tend to require additional tests (especially when they‚Äôre moving from ‚Äòdevelopment‚Äô into ‚Äòproduction‚Äô environments).</p>
<section id="use_testthat" class="level3">
<h3 class="anchored" data-anchor-id="use_testthat">use_testthat()</h3>
<p>To apply the testing framework provided by the <a href="https://testthat.r-lib.org/"><code>testthat</code> package.</a> package, I‚Äôll use <code>usethis::use_testthat()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_testthat</span>()</span></code></pre></div>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb41-1">‚úî Adding 'testthat' to Suggests field in DESCRIPTION</span>
<span id="cb41-2">‚úî Setting Config/testthat/edition field in DESCRIPTION to '3'</span>
<span id="cb41-3">‚úî Creating 'tests/testthat/'</span>
<span id="cb41-4">‚úî Writing 'tests/testthat.R'</span>
<span id="cb41-5">‚Ä¢ Call `use_test()` to initialize a basic test file and open it for editing.</span></code></pre></div>
<p>This creates a new <code>tests/</code> folder, with a <code>testthat/</code> sub-folder and script.</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb42-1">duap/</span>
<span id="cb42-2">    ‚îî‚îÄ‚îÄ tests/</span>
<span id="cb42-3">          ‚îú‚îÄ‚îÄ testthat/</span>
<span id="cb42-4">          ‚îî‚îÄ‚îÄ testthat.R</span>
<span id="cb42-5">        </span>
<span id="cb42-6">2 directories, 1 file</span></code></pre></div>
<section id="writing-tests" class="level4">
<h4 class="anchored" data-anchor-id="writing-tests">Writing tests</h4>
<p><a href="https://testthat.r-lib.org/"><code>testthat</code></a> is designed for unit tests (i.e., testing each functional ‚Äòunit‚Äô in the code), but for shiny apps, we need to think beyond standard unit testing. We need to confirm the functions work and return predictable results, but we also need to make sure they play well with each other (integration tests), and that the application can be deployed (system tests).</p>
</section>
<section id="recap-testing" class="level4">
<h4 class="anchored" data-anchor-id="recap-testing"><strong>Recap: testing</strong></h4>
<p>Testing is well described in the <a href="https://shiny.rstudio.com/articles/testing-overview.html">shiny documentation</a> and in <a href="https://mastering-shiny.org/scaling-testing.html">Mastering Shiny</a>. Generally speaking, unit tests are performed with <a href="https://testthat.r-lib.org/"><code>testthat</code></a>, and module testing can be done with <a href="https://shiny.rstudio.com/reference/shiny/1.7.0/testserver"><code>shiny::testServer()</code></a>. To test the full application (or a specific behavior) use the <a href="https://rstudio.github.io/shinytest2/"><code>shinytest2</code></a> package.</p>
<div id="fig-pkg-tests" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pkg-tests-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/pkg-tests.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pkg-tests-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Testing framework from <code>testthat</code>
</figcaption>
</figure>
</div>
</section>
</section>
</section>
</section>
<section id="use" class="level1">
<h1>Use</h1>
<p>Using an app built as a package is similar to using any R function we‚Äôve loaded from a package. After successfully loading, documenting, and installing the package, I can run the app by loading the <code>duap</code> (with <code>library(duap)</code>) and <code>moviesApp()</code>:</p>
<div id="fig-duap-inst-app" class="column quarto-figure quarto-figure-center quarto-float anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-duap-inst-app-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mjfrigaard.github.io/posts/duap/duap-app.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-duap-inst-app-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: <code>duap::moviesApp()</code>
</figcaption>
</figure>
</div>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>I‚Äôve skipped over some important development steps covered in <a href="https://r-pkgs.org/">R packages</a> (license, using Git/GitHub, code coverage, NEWS, etc.), and you should bookmark this text as you start developing shiny app-packages. Hopefully this post has demonstrated that by building shiny apps as R packages, a suite of developer tools are available in the RStudio IDE (and the application files and folders have a uniform structure).</p>
<p><code>duap</code> is a substantial improvement over a vanilla shiny application‚Äìthe app-package holds the code, data, documentation, <em>and</em> includes explicit information on the dependencies and requirements (in the <code>DESCRIPTION</code> and <code>NAMESPACE</code>).</p>


</section>
</section>

 ]]></description>
  <category>shiny</category>
  <category>usethis</category>
  <category>devtools</category>
  <category>packages</category>
  <guid>https://mjfrigaard.github.io/posts/duap/</guid>
  <pubDate>Fri, 10 Mar 2023 07:00:00 GMT</pubDate>
  <media:content url="https://mjfrigaard.github.io/posts/duap/image.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>
